
Firmware_PDM_E19.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000e044  080001d0  080001d0  000101d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000011c  0800e214  0800e214  0001e214  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800e330  0800e330  00020150  2**0
                  CONTENTS
  4 .ARM          00000008  0800e330  0800e330  0001e330  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800e338  0800e338  00020150  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800e338  0800e338  0001e338  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800e33c  0800e33c  0001e33c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000150  20000000  0800e340  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00006c48  20000150  0800e490  00020150  2**2
                  ALLOC
 10 ._user_heap_stack 0000c000  20006d98  0800e490  00026d98  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020150  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020180  2**0
                  CONTENTS, READONLY
 13 .debug_info   00028126  00000000  00000000  000201c3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00005c3e  00000000  00000000  000482e9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000020a8  00000000  00000000  0004df28  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00001921  00000000  00000000  0004ffd0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00008761  00000000  00000000  000518f1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0002a4c4  00000000  00000000  0005a052  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000f1ca5  00000000  00000000  00084516  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00008c5c  00000000  00000000  001761bc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000049  00000000  00000000  0017ee18  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	; (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	; (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	; (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	20000150 	.word	0x20000150
 80001ec:	00000000 	.word	0x00000000
 80001f0:	0800e1fc 	.word	0x0800e1fc

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	; (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	; (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	; (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	20000154 	.word	0x20000154
 800020c:	0800e1fc 	.word	0x0800e1fc

08000210 <__aeabi_uldivmod>:
 8000210:	b953      	cbnz	r3, 8000228 <__aeabi_uldivmod+0x18>
 8000212:	b94a      	cbnz	r2, 8000228 <__aeabi_uldivmod+0x18>
 8000214:	2900      	cmp	r1, #0
 8000216:	bf08      	it	eq
 8000218:	2800      	cmpeq	r0, #0
 800021a:	bf1c      	itt	ne
 800021c:	f04f 31ff 	movne.w	r1, #4294967295
 8000220:	f04f 30ff 	movne.w	r0, #4294967295
 8000224:	f000 b970 	b.w	8000508 <__aeabi_idiv0>
 8000228:	f1ad 0c08 	sub.w	ip, sp, #8
 800022c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000230:	f000 f806 	bl	8000240 <__udivmoddi4>
 8000234:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000238:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800023c:	b004      	add	sp, #16
 800023e:	4770      	bx	lr

08000240 <__udivmoddi4>:
 8000240:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000244:	9e08      	ldr	r6, [sp, #32]
 8000246:	460d      	mov	r5, r1
 8000248:	4604      	mov	r4, r0
 800024a:	460f      	mov	r7, r1
 800024c:	2b00      	cmp	r3, #0
 800024e:	d14a      	bne.n	80002e6 <__udivmoddi4+0xa6>
 8000250:	428a      	cmp	r2, r1
 8000252:	4694      	mov	ip, r2
 8000254:	d965      	bls.n	8000322 <__udivmoddi4+0xe2>
 8000256:	fab2 f382 	clz	r3, r2
 800025a:	b143      	cbz	r3, 800026e <__udivmoddi4+0x2e>
 800025c:	fa02 fc03 	lsl.w	ip, r2, r3
 8000260:	f1c3 0220 	rsb	r2, r3, #32
 8000264:	409f      	lsls	r7, r3
 8000266:	fa20 f202 	lsr.w	r2, r0, r2
 800026a:	4317      	orrs	r7, r2
 800026c:	409c      	lsls	r4, r3
 800026e:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000272:	fa1f f58c 	uxth.w	r5, ip
 8000276:	fbb7 f1fe 	udiv	r1, r7, lr
 800027a:	0c22      	lsrs	r2, r4, #16
 800027c:	fb0e 7711 	mls	r7, lr, r1, r7
 8000280:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000284:	fb01 f005 	mul.w	r0, r1, r5
 8000288:	4290      	cmp	r0, r2
 800028a:	d90a      	bls.n	80002a2 <__udivmoddi4+0x62>
 800028c:	eb1c 0202 	adds.w	r2, ip, r2
 8000290:	f101 37ff 	add.w	r7, r1, #4294967295
 8000294:	f080 811c 	bcs.w	80004d0 <__udivmoddi4+0x290>
 8000298:	4290      	cmp	r0, r2
 800029a:	f240 8119 	bls.w	80004d0 <__udivmoddi4+0x290>
 800029e:	3902      	subs	r1, #2
 80002a0:	4462      	add	r2, ip
 80002a2:	1a12      	subs	r2, r2, r0
 80002a4:	b2a4      	uxth	r4, r4
 80002a6:	fbb2 f0fe 	udiv	r0, r2, lr
 80002aa:	fb0e 2210 	mls	r2, lr, r0, r2
 80002ae:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 80002b2:	fb00 f505 	mul.w	r5, r0, r5
 80002b6:	42a5      	cmp	r5, r4
 80002b8:	d90a      	bls.n	80002d0 <__udivmoddi4+0x90>
 80002ba:	eb1c 0404 	adds.w	r4, ip, r4
 80002be:	f100 32ff 	add.w	r2, r0, #4294967295
 80002c2:	f080 8107 	bcs.w	80004d4 <__udivmoddi4+0x294>
 80002c6:	42a5      	cmp	r5, r4
 80002c8:	f240 8104 	bls.w	80004d4 <__udivmoddi4+0x294>
 80002cc:	4464      	add	r4, ip
 80002ce:	3802      	subs	r0, #2
 80002d0:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 80002d4:	1b64      	subs	r4, r4, r5
 80002d6:	2100      	movs	r1, #0
 80002d8:	b11e      	cbz	r6, 80002e2 <__udivmoddi4+0xa2>
 80002da:	40dc      	lsrs	r4, r3
 80002dc:	2300      	movs	r3, #0
 80002de:	e9c6 4300 	strd	r4, r3, [r6]
 80002e2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002e6:	428b      	cmp	r3, r1
 80002e8:	d908      	bls.n	80002fc <__udivmoddi4+0xbc>
 80002ea:	2e00      	cmp	r6, #0
 80002ec:	f000 80ed 	beq.w	80004ca <__udivmoddi4+0x28a>
 80002f0:	2100      	movs	r1, #0
 80002f2:	e9c6 0500 	strd	r0, r5, [r6]
 80002f6:	4608      	mov	r0, r1
 80002f8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002fc:	fab3 f183 	clz	r1, r3
 8000300:	2900      	cmp	r1, #0
 8000302:	d149      	bne.n	8000398 <__udivmoddi4+0x158>
 8000304:	42ab      	cmp	r3, r5
 8000306:	d302      	bcc.n	800030e <__udivmoddi4+0xce>
 8000308:	4282      	cmp	r2, r0
 800030a:	f200 80f8 	bhi.w	80004fe <__udivmoddi4+0x2be>
 800030e:	1a84      	subs	r4, r0, r2
 8000310:	eb65 0203 	sbc.w	r2, r5, r3
 8000314:	2001      	movs	r0, #1
 8000316:	4617      	mov	r7, r2
 8000318:	2e00      	cmp	r6, #0
 800031a:	d0e2      	beq.n	80002e2 <__udivmoddi4+0xa2>
 800031c:	e9c6 4700 	strd	r4, r7, [r6]
 8000320:	e7df      	b.n	80002e2 <__udivmoddi4+0xa2>
 8000322:	b902      	cbnz	r2, 8000326 <__udivmoddi4+0xe6>
 8000324:	deff      	udf	#255	; 0xff
 8000326:	fab2 f382 	clz	r3, r2
 800032a:	2b00      	cmp	r3, #0
 800032c:	f040 8090 	bne.w	8000450 <__udivmoddi4+0x210>
 8000330:	1a8a      	subs	r2, r1, r2
 8000332:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000336:	fa1f fe8c 	uxth.w	lr, ip
 800033a:	2101      	movs	r1, #1
 800033c:	fbb2 f5f7 	udiv	r5, r2, r7
 8000340:	fb07 2015 	mls	r0, r7, r5, r2
 8000344:	0c22      	lsrs	r2, r4, #16
 8000346:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 800034a:	fb0e f005 	mul.w	r0, lr, r5
 800034e:	4290      	cmp	r0, r2
 8000350:	d908      	bls.n	8000364 <__udivmoddi4+0x124>
 8000352:	eb1c 0202 	adds.w	r2, ip, r2
 8000356:	f105 38ff 	add.w	r8, r5, #4294967295
 800035a:	d202      	bcs.n	8000362 <__udivmoddi4+0x122>
 800035c:	4290      	cmp	r0, r2
 800035e:	f200 80cb 	bhi.w	80004f8 <__udivmoddi4+0x2b8>
 8000362:	4645      	mov	r5, r8
 8000364:	1a12      	subs	r2, r2, r0
 8000366:	b2a4      	uxth	r4, r4
 8000368:	fbb2 f0f7 	udiv	r0, r2, r7
 800036c:	fb07 2210 	mls	r2, r7, r0, r2
 8000370:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000374:	fb0e fe00 	mul.w	lr, lr, r0
 8000378:	45a6      	cmp	lr, r4
 800037a:	d908      	bls.n	800038e <__udivmoddi4+0x14e>
 800037c:	eb1c 0404 	adds.w	r4, ip, r4
 8000380:	f100 32ff 	add.w	r2, r0, #4294967295
 8000384:	d202      	bcs.n	800038c <__udivmoddi4+0x14c>
 8000386:	45a6      	cmp	lr, r4
 8000388:	f200 80bb 	bhi.w	8000502 <__udivmoddi4+0x2c2>
 800038c:	4610      	mov	r0, r2
 800038e:	eba4 040e 	sub.w	r4, r4, lr
 8000392:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000396:	e79f      	b.n	80002d8 <__udivmoddi4+0x98>
 8000398:	f1c1 0720 	rsb	r7, r1, #32
 800039c:	408b      	lsls	r3, r1
 800039e:	fa22 fc07 	lsr.w	ip, r2, r7
 80003a2:	ea4c 0c03 	orr.w	ip, ip, r3
 80003a6:	fa05 f401 	lsl.w	r4, r5, r1
 80003aa:	fa20 f307 	lsr.w	r3, r0, r7
 80003ae:	40fd      	lsrs	r5, r7
 80003b0:	ea4f 491c 	mov.w	r9, ip, lsr #16
 80003b4:	4323      	orrs	r3, r4
 80003b6:	fbb5 f8f9 	udiv	r8, r5, r9
 80003ba:	fa1f fe8c 	uxth.w	lr, ip
 80003be:	fb09 5518 	mls	r5, r9, r8, r5
 80003c2:	0c1c      	lsrs	r4, r3, #16
 80003c4:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 80003c8:	fb08 f50e 	mul.w	r5, r8, lr
 80003cc:	42a5      	cmp	r5, r4
 80003ce:	fa02 f201 	lsl.w	r2, r2, r1
 80003d2:	fa00 f001 	lsl.w	r0, r0, r1
 80003d6:	d90b      	bls.n	80003f0 <__udivmoddi4+0x1b0>
 80003d8:	eb1c 0404 	adds.w	r4, ip, r4
 80003dc:	f108 3aff 	add.w	sl, r8, #4294967295
 80003e0:	f080 8088 	bcs.w	80004f4 <__udivmoddi4+0x2b4>
 80003e4:	42a5      	cmp	r5, r4
 80003e6:	f240 8085 	bls.w	80004f4 <__udivmoddi4+0x2b4>
 80003ea:	f1a8 0802 	sub.w	r8, r8, #2
 80003ee:	4464      	add	r4, ip
 80003f0:	1b64      	subs	r4, r4, r5
 80003f2:	b29d      	uxth	r5, r3
 80003f4:	fbb4 f3f9 	udiv	r3, r4, r9
 80003f8:	fb09 4413 	mls	r4, r9, r3, r4
 80003fc:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000400:	fb03 fe0e 	mul.w	lr, r3, lr
 8000404:	45a6      	cmp	lr, r4
 8000406:	d908      	bls.n	800041a <__udivmoddi4+0x1da>
 8000408:	eb1c 0404 	adds.w	r4, ip, r4
 800040c:	f103 35ff 	add.w	r5, r3, #4294967295
 8000410:	d26c      	bcs.n	80004ec <__udivmoddi4+0x2ac>
 8000412:	45a6      	cmp	lr, r4
 8000414:	d96a      	bls.n	80004ec <__udivmoddi4+0x2ac>
 8000416:	3b02      	subs	r3, #2
 8000418:	4464      	add	r4, ip
 800041a:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 800041e:	fba3 9502 	umull	r9, r5, r3, r2
 8000422:	eba4 040e 	sub.w	r4, r4, lr
 8000426:	42ac      	cmp	r4, r5
 8000428:	46c8      	mov	r8, r9
 800042a:	46ae      	mov	lr, r5
 800042c:	d356      	bcc.n	80004dc <__udivmoddi4+0x29c>
 800042e:	d053      	beq.n	80004d8 <__udivmoddi4+0x298>
 8000430:	b156      	cbz	r6, 8000448 <__udivmoddi4+0x208>
 8000432:	ebb0 0208 	subs.w	r2, r0, r8
 8000436:	eb64 040e 	sbc.w	r4, r4, lr
 800043a:	fa04 f707 	lsl.w	r7, r4, r7
 800043e:	40ca      	lsrs	r2, r1
 8000440:	40cc      	lsrs	r4, r1
 8000442:	4317      	orrs	r7, r2
 8000444:	e9c6 7400 	strd	r7, r4, [r6]
 8000448:	4618      	mov	r0, r3
 800044a:	2100      	movs	r1, #0
 800044c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000450:	f1c3 0120 	rsb	r1, r3, #32
 8000454:	fa02 fc03 	lsl.w	ip, r2, r3
 8000458:	fa20 f201 	lsr.w	r2, r0, r1
 800045c:	fa25 f101 	lsr.w	r1, r5, r1
 8000460:	409d      	lsls	r5, r3
 8000462:	432a      	orrs	r2, r5
 8000464:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000468:	fa1f fe8c 	uxth.w	lr, ip
 800046c:	fbb1 f0f7 	udiv	r0, r1, r7
 8000470:	fb07 1510 	mls	r5, r7, r0, r1
 8000474:	0c11      	lsrs	r1, r2, #16
 8000476:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 800047a:	fb00 f50e 	mul.w	r5, r0, lr
 800047e:	428d      	cmp	r5, r1
 8000480:	fa04 f403 	lsl.w	r4, r4, r3
 8000484:	d908      	bls.n	8000498 <__udivmoddi4+0x258>
 8000486:	eb1c 0101 	adds.w	r1, ip, r1
 800048a:	f100 38ff 	add.w	r8, r0, #4294967295
 800048e:	d22f      	bcs.n	80004f0 <__udivmoddi4+0x2b0>
 8000490:	428d      	cmp	r5, r1
 8000492:	d92d      	bls.n	80004f0 <__udivmoddi4+0x2b0>
 8000494:	3802      	subs	r0, #2
 8000496:	4461      	add	r1, ip
 8000498:	1b49      	subs	r1, r1, r5
 800049a:	b292      	uxth	r2, r2
 800049c:	fbb1 f5f7 	udiv	r5, r1, r7
 80004a0:	fb07 1115 	mls	r1, r7, r5, r1
 80004a4:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 80004a8:	fb05 f10e 	mul.w	r1, r5, lr
 80004ac:	4291      	cmp	r1, r2
 80004ae:	d908      	bls.n	80004c2 <__udivmoddi4+0x282>
 80004b0:	eb1c 0202 	adds.w	r2, ip, r2
 80004b4:	f105 38ff 	add.w	r8, r5, #4294967295
 80004b8:	d216      	bcs.n	80004e8 <__udivmoddi4+0x2a8>
 80004ba:	4291      	cmp	r1, r2
 80004bc:	d914      	bls.n	80004e8 <__udivmoddi4+0x2a8>
 80004be:	3d02      	subs	r5, #2
 80004c0:	4462      	add	r2, ip
 80004c2:	1a52      	subs	r2, r2, r1
 80004c4:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 80004c8:	e738      	b.n	800033c <__udivmoddi4+0xfc>
 80004ca:	4631      	mov	r1, r6
 80004cc:	4630      	mov	r0, r6
 80004ce:	e708      	b.n	80002e2 <__udivmoddi4+0xa2>
 80004d0:	4639      	mov	r1, r7
 80004d2:	e6e6      	b.n	80002a2 <__udivmoddi4+0x62>
 80004d4:	4610      	mov	r0, r2
 80004d6:	e6fb      	b.n	80002d0 <__udivmoddi4+0x90>
 80004d8:	4548      	cmp	r0, r9
 80004da:	d2a9      	bcs.n	8000430 <__udivmoddi4+0x1f0>
 80004dc:	ebb9 0802 	subs.w	r8, r9, r2
 80004e0:	eb65 0e0c 	sbc.w	lr, r5, ip
 80004e4:	3b01      	subs	r3, #1
 80004e6:	e7a3      	b.n	8000430 <__udivmoddi4+0x1f0>
 80004e8:	4645      	mov	r5, r8
 80004ea:	e7ea      	b.n	80004c2 <__udivmoddi4+0x282>
 80004ec:	462b      	mov	r3, r5
 80004ee:	e794      	b.n	800041a <__udivmoddi4+0x1da>
 80004f0:	4640      	mov	r0, r8
 80004f2:	e7d1      	b.n	8000498 <__udivmoddi4+0x258>
 80004f4:	46d0      	mov	r8, sl
 80004f6:	e77b      	b.n	80003f0 <__udivmoddi4+0x1b0>
 80004f8:	3d02      	subs	r5, #2
 80004fa:	4462      	add	r2, ip
 80004fc:	e732      	b.n	8000364 <__udivmoddi4+0x124>
 80004fe:	4608      	mov	r0, r1
 8000500:	e70a      	b.n	8000318 <__udivmoddi4+0xd8>
 8000502:	4464      	add	r4, ip
 8000504:	3802      	subs	r0, #2
 8000506:	e742      	b.n	800038e <__udivmoddi4+0x14e>

08000508 <__aeabi_idiv0>:
 8000508:	4770      	bx	lr
 800050a:	bf00      	nop

0800050c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800050c:	b580      	push	{r7, lr}
 800050e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000510:	f001 fbe2 	bl	8001cd8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000514:	f000 f850 	bl	80005b8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000518:	f000 fd0a 	bl	8000f30 <MX_GPIO_Init>
  MX_DMA_Init();
 800051c:	f000 fcb2 	bl	8000e84 <MX_DMA_Init>
  MX_ADC1_Init();
 8000520:	f000 f8bc 	bl	800069c <MX_ADC1_Init>
  MX_ADC2_Init();
 8000524:	f000 f946 	bl	80007b4 <MX_ADC2_Init>
  MX_CAN1_Init();
 8000528:	f000 f9ce 	bl	80008c8 <MX_CAN1_Init>
  MX_TIM1_Init();
 800052c:	f000 fa44 	bl	80009b8 <MX_TIM1_Init>
  MX_TIM2_Init();
 8000530:	f000 fae2 	bl	8000af8 <MX_TIM2_Init>
  MX_TIM3_Init();
 8000534:	f000 fb56 	bl	8000be4 <MX_TIM3_Init>
  MX_TIM8_Init();
 8000538:	f000 fc02 	bl	8000d40 <MX_TIM8_Init>
  MX_I2C1_Init();
 800053c:	f000 fa0e 	bl	800095c <MX_I2C1_Init>
  MX_CRC_Init();
 8000540:	f000 f9f8 	bl	8000934 <MX_CRC_Init>
  MX_TIM6_Init();
 8000544:	f000 fbc6 	bl	8000cd4 <MX_TIM6_Init>
  /* USER CODE BEGIN 2 */

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 8000548:	f009 ff9e 	bl	800a488 <osKernelInitialize>
  /* add mutexes, ... */
  /* USER CODE END RTOS_MUTEX */

  /* Create the semaphores(s) */
  /* creation of canRxSemaphore */
  canRxSemaphoreHandle = osSemaphoreNew(1, 0, &canRxSemaphore_attributes);
 800054c:	4a11      	ldr	r2, [pc, #68]	; (8000594 <main+0x88>)
 800054e:	2100      	movs	r1, #0
 8000550:	2001      	movs	r0, #1
 8000552:	f00a f895 	bl	800a680 <osSemaphoreNew>
 8000556:	4603      	mov	r3, r0
 8000558:	4a0f      	ldr	r2, [pc, #60]	; (8000598 <main+0x8c>)
 800055a:	6013      	str	r3, [r2, #0]
  /* start timers, add new ones, ... */
  /* USER CODE END RTOS_TIMERS */

  /* Create the queue(s) */
  /* creation of processQueue */
  processQueueHandle = osMessageQueueNew (5, sizeof(PDM_Data_Queue_Struct), &processQueue_attributes);
 800055c:	4a0f      	ldr	r2, [pc, #60]	; (800059c <main+0x90>)
 800055e:	2114      	movs	r1, #20
 8000560:	2005      	movs	r0, #5
 8000562:	f00a f95b 	bl	800a81c <osMessageQueueNew>
 8000566:	4603      	mov	r3, r0
 8000568:	4a0d      	ldr	r2, [pc, #52]	; (80005a0 <main+0x94>)
 800056a:	6013      	str	r3, [r2, #0]

  /* creation of outQueue */
  outQueueHandle = osMessageQueueNew (5, sizeof(uint8_t), &outQueue_attributes);
 800056c:	4a0d      	ldr	r2, [pc, #52]	; (80005a4 <main+0x98>)
 800056e:	2101      	movs	r1, #1
 8000570:	2005      	movs	r0, #5
 8000572:	f00a f953 	bl	800a81c <osMessageQueueNew>
 8000576:	4603      	mov	r3, r0
 8000578:	4a0b      	ldr	r2, [pc, #44]	; (80005a8 <main+0x9c>)
 800057a:	6013      	str	r3, [r2, #0]
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of setupTask */
  setupTaskHandle = osThreadNew(StartSetupTask, NULL, &setupTask_attributes);
 800057c:	4a0b      	ldr	r2, [pc, #44]	; (80005ac <main+0xa0>)
 800057e:	2100      	movs	r1, #0
 8000580:	480b      	ldr	r0, [pc, #44]	; (80005b0 <main+0xa4>)
 8000582:	f009 ffcb 	bl	800a51c <osThreadNew>
 8000586:	4603      	mov	r3, r0
 8000588:	4a0a      	ldr	r2, [pc, #40]	; (80005b4 <main+0xa8>)
 800058a:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 800058c:	f009 ffa0 	bl	800a4d0 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000590:	e7fe      	b.n	8000590 <main+0x84>
 8000592:	bf00      	nop
 8000594:	0800e300 	.word	0x0800e300
 8000598:	20000634 	.word	0x20000634
 800059c:	0800e2d0 	.word	0x0800e2d0
 80005a0:	2000062c 	.word	0x2000062c
 80005a4:	0800e2e8 	.word	0x0800e2e8
 80005a8:	20000630 	.word	0x20000630
 80005ac:	0800e2ac 	.word	0x0800e2ac
 80005b0:	0800112d 	.word	0x0800112d
 80005b4:	20000628 	.word	0x20000628

080005b8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80005b8:	b580      	push	{r7, lr}
 80005ba:	b094      	sub	sp, #80	; 0x50
 80005bc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80005be:	f107 031c 	add.w	r3, r7, #28
 80005c2:	2234      	movs	r2, #52	; 0x34
 80005c4:	2100      	movs	r1, #0
 80005c6:	4618      	mov	r0, r3
 80005c8:	f00d fd2e 	bl	800e028 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80005cc:	f107 0308 	add.w	r3, r7, #8
 80005d0:	2200      	movs	r2, #0
 80005d2:	601a      	str	r2, [r3, #0]
 80005d4:	605a      	str	r2, [r3, #4]
 80005d6:	609a      	str	r2, [r3, #8]
 80005d8:	60da      	str	r2, [r3, #12]
 80005da:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80005dc:	2300      	movs	r3, #0
 80005de:	607b      	str	r3, [r7, #4]
 80005e0:	4b2c      	ldr	r3, [pc, #176]	; (8000694 <SystemClock_Config+0xdc>)
 80005e2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80005e4:	4a2b      	ldr	r2, [pc, #172]	; (8000694 <SystemClock_Config+0xdc>)
 80005e6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80005ea:	6413      	str	r3, [r2, #64]	; 0x40
 80005ec:	4b29      	ldr	r3, [pc, #164]	; (8000694 <SystemClock_Config+0xdc>)
 80005ee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80005f0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80005f4:	607b      	str	r3, [r7, #4]
 80005f6:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80005f8:	2300      	movs	r3, #0
 80005fa:	603b      	str	r3, [r7, #0]
 80005fc:	4b26      	ldr	r3, [pc, #152]	; (8000698 <SystemClock_Config+0xe0>)
 80005fe:	681b      	ldr	r3, [r3, #0]
 8000600:	4a25      	ldr	r2, [pc, #148]	; (8000698 <SystemClock_Config+0xe0>)
 8000602:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8000606:	6013      	str	r3, [r2, #0]
 8000608:	4b23      	ldr	r3, [pc, #140]	; (8000698 <SystemClock_Config+0xe0>)
 800060a:	681b      	ldr	r3, [r3, #0]
 800060c:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000610:	603b      	str	r3, [r7, #0]
 8000612:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000614:	2301      	movs	r3, #1
 8000616:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000618:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800061c:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800061e:	2302      	movs	r3, #2
 8000620:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000622:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8000626:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = 4;
 8000628:	2304      	movs	r3, #4
 800062a:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 180;
 800062c:	23b4      	movs	r3, #180	; 0xb4
 800062e:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000630:	2302      	movs	r3, #2
 8000632:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = 8;
 8000634:	2308      	movs	r3, #8
 8000636:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 8000638:	2302      	movs	r3, #2
 800063a:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800063c:	f107 031c 	add.w	r3, r7, #28
 8000640:	4618      	mov	r0, r3
 8000642:	f005 f9c3 	bl	80059cc <HAL_RCC_OscConfig>
 8000646:	4603      	mov	r3, r0
 8000648:	2b00      	cmp	r3, #0
 800064a:	d001      	beq.n	8000650 <SystemClock_Config+0x98>
  {
    Error_Handler();
 800064c:	f000 fda8 	bl	80011a0 <Error_Handler>
  }

  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 8000650:	f004 fac6 	bl	8004be0 <HAL_PWREx_EnableOverDrive>
 8000654:	4603      	mov	r3, r0
 8000656:	2b00      	cmp	r3, #0
 8000658:	d001      	beq.n	800065e <SystemClock_Config+0xa6>
  {
    Error_Handler();
 800065a:	f000 fda1 	bl	80011a0 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800065e:	230f      	movs	r3, #15
 8000660:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000662:	2302      	movs	r3, #2
 8000664:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000666:	2300      	movs	r3, #0
 8000668:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 800066a:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 800066e:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8000670:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000674:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8000676:	f107 0308 	add.w	r3, r7, #8
 800067a:	2105      	movs	r1, #5
 800067c:	4618      	mov	r0, r3
 800067e:	f004 faff 	bl	8004c80 <HAL_RCC_ClockConfig>
 8000682:	4603      	mov	r3, r0
 8000684:	2b00      	cmp	r3, #0
 8000686:	d001      	beq.n	800068c <SystemClock_Config+0xd4>
  {
    Error_Handler();
 8000688:	f000 fd8a 	bl	80011a0 <Error_Handler>
  }
}
 800068c:	bf00      	nop
 800068e:	3750      	adds	r7, #80	; 0x50
 8000690:	46bd      	mov	sp, r7
 8000692:	bd80      	pop	{r7, pc}
 8000694:	40023800 	.word	0x40023800
 8000698:	40007000 	.word	0x40007000

0800069c <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 800069c:	b580      	push	{r7, lr}
 800069e:	b084      	sub	sp, #16
 80006a0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80006a2:	463b      	mov	r3, r7
 80006a4:	2200      	movs	r2, #0
 80006a6:	601a      	str	r2, [r3, #0]
 80006a8:	605a      	str	r2, [r3, #4]
 80006aa:	609a      	str	r2, [r3, #8]
 80006ac:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 80006ae:	4b3d      	ldr	r3, [pc, #244]	; (80007a4 <MX_ADC1_Init+0x108>)
 80006b0:	4a3d      	ldr	r2, [pc, #244]	; (80007a8 <MX_ADC1_Init+0x10c>)
 80006b2:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 80006b4:	4b3b      	ldr	r3, [pc, #236]	; (80007a4 <MX_ADC1_Init+0x108>)
 80006b6:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 80006ba:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 80006bc:	4b39      	ldr	r3, [pc, #228]	; (80007a4 <MX_ADC1_Init+0x108>)
 80006be:	2200      	movs	r2, #0
 80006c0:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ENABLE;
 80006c2:	4b38      	ldr	r3, [pc, #224]	; (80007a4 <MX_ADC1_Init+0x108>)
 80006c4:	2201      	movs	r2, #1
 80006c6:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = ENABLE;
 80006c8:	4b36      	ldr	r3, [pc, #216]	; (80007a4 <MX_ADC1_Init+0x108>)
 80006ca:	2201      	movs	r2, #1
 80006cc:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80006ce:	4b35      	ldr	r3, [pc, #212]	; (80007a4 <MX_ADC1_Init+0x108>)
 80006d0:	2200      	movs	r2, #0
 80006d2:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80006d6:	4b33      	ldr	r3, [pc, #204]	; (80007a4 <MX_ADC1_Init+0x108>)
 80006d8:	2200      	movs	r2, #0
 80006da:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80006dc:	4b31      	ldr	r3, [pc, #196]	; (80007a4 <MX_ADC1_Init+0x108>)
 80006de:	4a33      	ldr	r2, [pc, #204]	; (80007ac <MX_ADC1_Init+0x110>)
 80006e0:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80006e2:	4b30      	ldr	r3, [pc, #192]	; (80007a4 <MX_ADC1_Init+0x108>)
 80006e4:	2200      	movs	r2, #0
 80006e6:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 5;
 80006e8:	4b2e      	ldr	r3, [pc, #184]	; (80007a4 <MX_ADC1_Init+0x108>)
 80006ea:	2205      	movs	r2, #5
 80006ec:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = ENABLE;
 80006ee:	4b2d      	ldr	r3, [pc, #180]	; (80007a4 <MX_ADC1_Init+0x108>)
 80006f0:	2201      	movs	r2, #1
 80006f2:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80006f6:	4b2b      	ldr	r3, [pc, #172]	; (80007a4 <MX_ADC1_Init+0x108>)
 80006f8:	2201      	movs	r2, #1
 80006fa:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80006fc:	4829      	ldr	r0, [pc, #164]	; (80007a4 <MX_ADC1_Init+0x108>)
 80006fe:	f001 fb51 	bl	8001da4 <HAL_ADC_Init>
 8000702:	4603      	mov	r3, r0
 8000704:	2b00      	cmp	r3, #0
 8000706:	d001      	beq.n	800070c <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 8000708:	f000 fd4a 	bl	80011a0 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_5;
 800070c:	2305      	movs	r3, #5
 800070e:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8000710:	2301      	movs	r3, #1
 8000712:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_480CYCLES;
 8000714:	2307      	movs	r3, #7
 8000716:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000718:	463b      	mov	r3, r7
 800071a:	4619      	mov	r1, r3
 800071c:	4821      	ldr	r0, [pc, #132]	; (80007a4 <MX_ADC1_Init+0x108>)
 800071e:	f001 fb85 	bl	8001e2c <HAL_ADC_ConfigChannel>
 8000722:	4603      	mov	r3, r0
 8000724:	2b00      	cmp	r3, #0
 8000726:	d001      	beq.n	800072c <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 8000728:	f000 fd3a 	bl	80011a0 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_6;
 800072c:	2306      	movs	r3, #6
 800072e:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 2;
 8000730:	2302      	movs	r3, #2
 8000732:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000734:	463b      	mov	r3, r7
 8000736:	4619      	mov	r1, r3
 8000738:	481a      	ldr	r0, [pc, #104]	; (80007a4 <MX_ADC1_Init+0x108>)
 800073a:	f001 fb77 	bl	8001e2c <HAL_ADC_ConfigChannel>
 800073e:	4603      	mov	r3, r0
 8000740:	2b00      	cmp	r3, #0
 8000742:	d001      	beq.n	8000748 <MX_ADC1_Init+0xac>
  {
    Error_Handler();
 8000744:	f000 fd2c 	bl	80011a0 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_7;
 8000748:	2307      	movs	r3, #7
 800074a:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 3;
 800074c:	2303      	movs	r3, #3
 800074e:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000750:	463b      	mov	r3, r7
 8000752:	4619      	mov	r1, r3
 8000754:	4813      	ldr	r0, [pc, #76]	; (80007a4 <MX_ADC1_Init+0x108>)
 8000756:	f001 fb69 	bl	8001e2c <HAL_ADC_ConfigChannel>
 800075a:	4603      	mov	r3, r0
 800075c:	2b00      	cmp	r3, #0
 800075e:	d001      	beq.n	8000764 <MX_ADC1_Init+0xc8>
  {
    Error_Handler();
 8000760:	f000 fd1e 	bl	80011a0 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_14;
 8000764:	230e      	movs	r3, #14
 8000766:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 4;
 8000768:	2304      	movs	r3, #4
 800076a:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800076c:	463b      	mov	r3, r7
 800076e:	4619      	mov	r1, r3
 8000770:	480c      	ldr	r0, [pc, #48]	; (80007a4 <MX_ADC1_Init+0x108>)
 8000772:	f001 fb5b 	bl	8001e2c <HAL_ADC_ConfigChannel>
 8000776:	4603      	mov	r3, r0
 8000778:	2b00      	cmp	r3, #0
 800077a:	d001      	beq.n	8000780 <MX_ADC1_Init+0xe4>
  {
    Error_Handler();
 800077c:	f000 fd10 	bl	80011a0 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_TEMPSENSOR;
 8000780:	4b0b      	ldr	r3, [pc, #44]	; (80007b0 <MX_ADC1_Init+0x114>)
 8000782:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 5;
 8000784:	2305      	movs	r3, #5
 8000786:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000788:	463b      	mov	r3, r7
 800078a:	4619      	mov	r1, r3
 800078c:	4805      	ldr	r0, [pc, #20]	; (80007a4 <MX_ADC1_Init+0x108>)
 800078e:	f001 fb4d 	bl	8001e2c <HAL_ADC_ConfigChannel>
 8000792:	4603      	mov	r3, r0
 8000794:	2b00      	cmp	r3, #0
 8000796:	d001      	beq.n	800079c <MX_ADC1_Init+0x100>
  {
    Error_Handler();
 8000798:	f000 fd02 	bl	80011a0 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 800079c:	bf00      	nop
 800079e:	3710      	adds	r7, #16
 80007a0:	46bd      	mov	sp, r7
 80007a2:	bd80      	pop	{r7, pc}
 80007a4:	2000016c 	.word	0x2000016c
 80007a8:	40012000 	.word	0x40012000
 80007ac:	0f000001 	.word	0x0f000001
 80007b0:	10000012 	.word	0x10000012

080007b4 <MX_ADC2_Init>:
  * @brief ADC2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC2_Init(void)
{
 80007b4:	b580      	push	{r7, lr}
 80007b6:	b084      	sub	sp, #16
 80007b8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC2_Init 0 */

  /* USER CODE END ADC2_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80007ba:	463b      	mov	r3, r7
 80007bc:	2200      	movs	r2, #0
 80007be:	601a      	str	r2, [r3, #0]
 80007c0:	605a      	str	r2, [r3, #4]
 80007c2:	609a      	str	r2, [r3, #8]
 80007c4:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC2_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc2.Instance = ADC2;
 80007c6:	4b3d      	ldr	r3, [pc, #244]	; (80008bc <MX_ADC2_Init+0x108>)
 80007c8:	4a3d      	ldr	r2, [pc, #244]	; (80008c0 <MX_ADC2_Init+0x10c>)
 80007ca:	601a      	str	r2, [r3, #0]
  hadc2.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 80007cc:	4b3b      	ldr	r3, [pc, #236]	; (80008bc <MX_ADC2_Init+0x108>)
 80007ce:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 80007d2:	605a      	str	r2, [r3, #4]
  hadc2.Init.Resolution = ADC_RESOLUTION_12B;
 80007d4:	4b39      	ldr	r3, [pc, #228]	; (80008bc <MX_ADC2_Init+0x108>)
 80007d6:	2200      	movs	r2, #0
 80007d8:	609a      	str	r2, [r3, #8]
  hadc2.Init.ScanConvMode = ENABLE;
 80007da:	4b38      	ldr	r3, [pc, #224]	; (80008bc <MX_ADC2_Init+0x108>)
 80007dc:	2201      	movs	r2, #1
 80007de:	611a      	str	r2, [r3, #16]
  hadc2.Init.ContinuousConvMode = ENABLE;
 80007e0:	4b36      	ldr	r3, [pc, #216]	; (80008bc <MX_ADC2_Init+0x108>)
 80007e2:	2201      	movs	r2, #1
 80007e4:	761a      	strb	r2, [r3, #24]
  hadc2.Init.DiscontinuousConvMode = DISABLE;
 80007e6:	4b35      	ldr	r3, [pc, #212]	; (80008bc <MX_ADC2_Init+0x108>)
 80007e8:	2200      	movs	r2, #0
 80007ea:	f883 2020 	strb.w	r2, [r3, #32]
  hadc2.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80007ee:	4b33      	ldr	r3, [pc, #204]	; (80008bc <MX_ADC2_Init+0x108>)
 80007f0:	2200      	movs	r2, #0
 80007f2:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc2.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80007f4:	4b31      	ldr	r3, [pc, #196]	; (80008bc <MX_ADC2_Init+0x108>)
 80007f6:	4a33      	ldr	r2, [pc, #204]	; (80008c4 <MX_ADC2_Init+0x110>)
 80007f8:	629a      	str	r2, [r3, #40]	; 0x28
  hadc2.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80007fa:	4b30      	ldr	r3, [pc, #192]	; (80008bc <MX_ADC2_Init+0x108>)
 80007fc:	2200      	movs	r2, #0
 80007fe:	60da      	str	r2, [r3, #12]
  hadc2.Init.NbrOfConversion = 5;
 8000800:	4b2e      	ldr	r3, [pc, #184]	; (80008bc <MX_ADC2_Init+0x108>)
 8000802:	2205      	movs	r2, #5
 8000804:	61da      	str	r2, [r3, #28]
  hadc2.Init.DMAContinuousRequests = ENABLE;
 8000806:	4b2d      	ldr	r3, [pc, #180]	; (80008bc <MX_ADC2_Init+0x108>)
 8000808:	2201      	movs	r2, #1
 800080a:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc2.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800080e:	4b2b      	ldr	r3, [pc, #172]	; (80008bc <MX_ADC2_Init+0x108>)
 8000810:	2201      	movs	r2, #1
 8000812:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 8000814:	4829      	ldr	r0, [pc, #164]	; (80008bc <MX_ADC2_Init+0x108>)
 8000816:	f001 fac5 	bl	8001da4 <HAL_ADC_Init>
 800081a:	4603      	mov	r3, r0
 800081c:	2b00      	cmp	r3, #0
 800081e:	d001      	beq.n	8000824 <MX_ADC2_Init+0x70>
  {
    Error_Handler();
 8000820:	f000 fcbe 	bl	80011a0 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_0;
 8000824:	2300      	movs	r3, #0
 8000826:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8000828:	2301      	movs	r3, #1
 800082a:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_480CYCLES;
 800082c:	2307      	movs	r3, #7
 800082e:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8000830:	463b      	mov	r3, r7
 8000832:	4619      	mov	r1, r3
 8000834:	4821      	ldr	r0, [pc, #132]	; (80008bc <MX_ADC2_Init+0x108>)
 8000836:	f001 faf9 	bl	8001e2c <HAL_ADC_ConfigChannel>
 800083a:	4603      	mov	r3, r0
 800083c:	2b00      	cmp	r3, #0
 800083e:	d001      	beq.n	8000844 <MX_ADC2_Init+0x90>
  {
    Error_Handler();
 8000840:	f000 fcae 	bl	80011a0 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_1;
 8000844:	2301      	movs	r3, #1
 8000846:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 2;
 8000848:	2302      	movs	r3, #2
 800084a:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 800084c:	463b      	mov	r3, r7
 800084e:	4619      	mov	r1, r3
 8000850:	481a      	ldr	r0, [pc, #104]	; (80008bc <MX_ADC2_Init+0x108>)
 8000852:	f001 faeb 	bl	8001e2c <HAL_ADC_ConfigChannel>
 8000856:	4603      	mov	r3, r0
 8000858:	2b00      	cmp	r3, #0
 800085a:	d001      	beq.n	8000860 <MX_ADC2_Init+0xac>
  {
    Error_Handler();
 800085c:	f000 fca0 	bl	80011a0 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_2;
 8000860:	2302      	movs	r3, #2
 8000862:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 3;
 8000864:	2303      	movs	r3, #3
 8000866:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8000868:	463b      	mov	r3, r7
 800086a:	4619      	mov	r1, r3
 800086c:	4813      	ldr	r0, [pc, #76]	; (80008bc <MX_ADC2_Init+0x108>)
 800086e:	f001 fadd 	bl	8001e2c <HAL_ADC_ConfigChannel>
 8000872:	4603      	mov	r3, r0
 8000874:	2b00      	cmp	r3, #0
 8000876:	d001      	beq.n	800087c <MX_ADC2_Init+0xc8>
  {
    Error_Handler();
 8000878:	f000 fc92 	bl	80011a0 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_3;
 800087c:	2303      	movs	r3, #3
 800087e:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 4;
 8000880:	2304      	movs	r3, #4
 8000882:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8000884:	463b      	mov	r3, r7
 8000886:	4619      	mov	r1, r3
 8000888:	480c      	ldr	r0, [pc, #48]	; (80008bc <MX_ADC2_Init+0x108>)
 800088a:	f001 facf 	bl	8001e2c <HAL_ADC_ConfigChannel>
 800088e:	4603      	mov	r3, r0
 8000890:	2b00      	cmp	r3, #0
 8000892:	d001      	beq.n	8000898 <MX_ADC2_Init+0xe4>
  {
    Error_Handler();
 8000894:	f000 fc84 	bl	80011a0 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_4;
 8000898:	2304      	movs	r3, #4
 800089a:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 5;
 800089c:	2305      	movs	r3, #5
 800089e:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 80008a0:	463b      	mov	r3, r7
 80008a2:	4619      	mov	r1, r3
 80008a4:	4805      	ldr	r0, [pc, #20]	; (80008bc <MX_ADC2_Init+0x108>)
 80008a6:	f001 fac1 	bl	8001e2c <HAL_ADC_ConfigChannel>
 80008aa:	4603      	mov	r3, r0
 80008ac:	2b00      	cmp	r3, #0
 80008ae:	d001      	beq.n	80008b4 <MX_ADC2_Init+0x100>
  {
    Error_Handler();
 80008b0:	f000 fc76 	bl	80011a0 <Error_Handler>
  }
  /* USER CODE BEGIN ADC2_Init 2 */

  /* USER CODE END ADC2_Init 2 */

}
 80008b4:	bf00      	nop
 80008b6:	3710      	adds	r7, #16
 80008b8:	46bd      	mov	sp, r7
 80008ba:	bd80      	pop	{r7, pc}
 80008bc:	200001b4 	.word	0x200001b4
 80008c0:	40012100 	.word	0x40012100
 80008c4:	0f000001 	.word	0x0f000001

080008c8 <MX_CAN1_Init>:
  * @brief CAN1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_CAN1_Init(void)
{
 80008c8:	b580      	push	{r7, lr}
 80008ca:	af00      	add	r7, sp, #0
  /* USER CODE END CAN1_Init 0 */

  /* USER CODE BEGIN CAN1_Init 1 */

  /* USER CODE END CAN1_Init 1 */
  hcan1.Instance = CAN1;
 80008cc:	4b17      	ldr	r3, [pc, #92]	; (800092c <MX_CAN1_Init+0x64>)
 80008ce:	4a18      	ldr	r2, [pc, #96]	; (8000930 <MX_CAN1_Init+0x68>)
 80008d0:	601a      	str	r2, [r3, #0]
  hcan1.Init.Prescaler = 5;
 80008d2:	4b16      	ldr	r3, [pc, #88]	; (800092c <MX_CAN1_Init+0x64>)
 80008d4:	2205      	movs	r2, #5
 80008d6:	605a      	str	r2, [r3, #4]
  hcan1.Init.Mode = CAN_MODE_NORMAL;
 80008d8:	4b14      	ldr	r3, [pc, #80]	; (800092c <MX_CAN1_Init+0x64>)
 80008da:	2200      	movs	r2, #0
 80008dc:	609a      	str	r2, [r3, #8]
  hcan1.Init.SyncJumpWidth = CAN_SJW_4TQ;
 80008de:	4b13      	ldr	r3, [pc, #76]	; (800092c <MX_CAN1_Init+0x64>)
 80008e0:	f04f 7240 	mov.w	r2, #50331648	; 0x3000000
 80008e4:	60da      	str	r2, [r3, #12]
  hcan1.Init.TimeSeg1 = CAN_BS1_7TQ;
 80008e6:	4b11      	ldr	r3, [pc, #68]	; (800092c <MX_CAN1_Init+0x64>)
 80008e8:	f44f 22c0 	mov.w	r2, #393216	; 0x60000
 80008ec:	611a      	str	r2, [r3, #16]
  hcan1.Init.TimeSeg2 = CAN_BS2_1TQ;
 80008ee:	4b0f      	ldr	r3, [pc, #60]	; (800092c <MX_CAN1_Init+0x64>)
 80008f0:	2200      	movs	r2, #0
 80008f2:	615a      	str	r2, [r3, #20]
  hcan1.Init.TimeTriggeredMode = DISABLE;
 80008f4:	4b0d      	ldr	r3, [pc, #52]	; (800092c <MX_CAN1_Init+0x64>)
 80008f6:	2200      	movs	r2, #0
 80008f8:	761a      	strb	r2, [r3, #24]
  hcan1.Init.AutoBusOff = DISABLE;
 80008fa:	4b0c      	ldr	r3, [pc, #48]	; (800092c <MX_CAN1_Init+0x64>)
 80008fc:	2200      	movs	r2, #0
 80008fe:	765a      	strb	r2, [r3, #25]
  hcan1.Init.AutoWakeUp = DISABLE;
 8000900:	4b0a      	ldr	r3, [pc, #40]	; (800092c <MX_CAN1_Init+0x64>)
 8000902:	2200      	movs	r2, #0
 8000904:	769a      	strb	r2, [r3, #26]
  hcan1.Init.AutoRetransmission = DISABLE;
 8000906:	4b09      	ldr	r3, [pc, #36]	; (800092c <MX_CAN1_Init+0x64>)
 8000908:	2200      	movs	r2, #0
 800090a:	76da      	strb	r2, [r3, #27]
  hcan1.Init.ReceiveFifoLocked = DISABLE;
 800090c:	4b07      	ldr	r3, [pc, #28]	; (800092c <MX_CAN1_Init+0x64>)
 800090e:	2200      	movs	r2, #0
 8000910:	771a      	strb	r2, [r3, #28]
  hcan1.Init.TransmitFifoPriority = DISABLE;
 8000912:	4b06      	ldr	r3, [pc, #24]	; (800092c <MX_CAN1_Init+0x64>)
 8000914:	2200      	movs	r2, #0
 8000916:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan1) != HAL_OK)
 8000918:	4804      	ldr	r0, [pc, #16]	; (800092c <MX_CAN1_Init+0x64>)
 800091a:	f001 fcb5 	bl	8002288 <HAL_CAN_Init>
 800091e:	4603      	mov	r3, r0
 8000920:	2b00      	cmp	r3, #0
 8000922:	d001      	beq.n	8000928 <MX_CAN1_Init+0x60>
  {
    Error_Handler();
 8000924:	f000 fc3c 	bl	80011a0 <Error_Handler>
  }
  /* USER CODE BEGIN CAN1_Init 2 */

  /* USER CODE END CAN1_Init 2 */

}
 8000928:	bf00      	nop
 800092a:	bd80      	pop	{r7, pc}
 800092c:	200002bc 	.word	0x200002bc
 8000930:	40006400 	.word	0x40006400

08000934 <MX_CRC_Init>:
  * @brief CRC Initialization Function
  * @param None
  * @retval None
  */
static void MX_CRC_Init(void)
{
 8000934:	b580      	push	{r7, lr}
 8000936:	af00      	add	r7, sp, #0
  /* USER CODE END CRC_Init 0 */

  /* USER CODE BEGIN CRC_Init 1 */

  /* USER CODE END CRC_Init 1 */
  hcrc.Instance = CRC;
 8000938:	4b06      	ldr	r3, [pc, #24]	; (8000954 <MX_CRC_Init+0x20>)
 800093a:	4a07      	ldr	r2, [pc, #28]	; (8000958 <MX_CRC_Init+0x24>)
 800093c:	601a      	str	r2, [r3, #0]
  if (HAL_CRC_Init(&hcrc) != HAL_OK)
 800093e:	4805      	ldr	r0, [pc, #20]	; (8000954 <MX_CRC_Init+0x20>)
 8000940:	f002 f8ae 	bl	8002aa0 <HAL_CRC_Init>
 8000944:	4603      	mov	r3, r0
 8000946:	2b00      	cmp	r3, #0
 8000948:	d001      	beq.n	800094e <MX_CRC_Init+0x1a>
  {
    Error_Handler();
 800094a:	f000 fc29 	bl	80011a0 <Error_Handler>
  }
  /* USER CODE BEGIN CRC_Init 2 */

  /* USER CODE END CRC_Init 2 */

}
 800094e:	bf00      	nop
 8000950:	bd80      	pop	{r7, pc}
 8000952:	bf00      	nop
 8000954:	200002e4 	.word	0x200002e4
 8000958:	40023000 	.word	0x40023000

0800095c <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 800095c:	b580      	push	{r7, lr}
 800095e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000960:	4b12      	ldr	r3, [pc, #72]	; (80009ac <MX_I2C1_Init+0x50>)
 8000962:	4a13      	ldr	r2, [pc, #76]	; (80009b0 <MX_I2C1_Init+0x54>)
 8000964:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 400000;
 8000966:	4b11      	ldr	r3, [pc, #68]	; (80009ac <MX_I2C1_Init+0x50>)
 8000968:	4a12      	ldr	r2, [pc, #72]	; (80009b4 <MX_I2C1_Init+0x58>)
 800096a:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 800096c:	4b0f      	ldr	r3, [pc, #60]	; (80009ac <MX_I2C1_Init+0x50>)
 800096e:	2200      	movs	r2, #0
 8000970:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8000972:	4b0e      	ldr	r3, [pc, #56]	; (80009ac <MX_I2C1_Init+0x50>)
 8000974:	2200      	movs	r2, #0
 8000976:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000978:	4b0c      	ldr	r3, [pc, #48]	; (80009ac <MX_I2C1_Init+0x50>)
 800097a:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800097e:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000980:	4b0a      	ldr	r3, [pc, #40]	; (80009ac <MX_I2C1_Init+0x50>)
 8000982:	2200      	movs	r2, #0
 8000984:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8000986:	4b09      	ldr	r3, [pc, #36]	; (80009ac <MX_I2C1_Init+0x50>)
 8000988:	2200      	movs	r2, #0
 800098a:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800098c:	4b07      	ldr	r3, [pc, #28]	; (80009ac <MX_I2C1_Init+0x50>)
 800098e:	2200      	movs	r2, #0
 8000990:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000992:	4b06      	ldr	r3, [pc, #24]	; (80009ac <MX_I2C1_Init+0x50>)
 8000994:	2200      	movs	r2, #0
 8000996:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000998:	4804      	ldr	r0, [pc, #16]	; (80009ac <MX_I2C1_Init+0x50>)
 800099a:	f002 fd35 	bl	8003408 <HAL_I2C_Init>
 800099e:	4603      	mov	r3, r0
 80009a0:	2b00      	cmp	r3, #0
 80009a2:	d001      	beq.n	80009a8 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 80009a4:	f000 fbfc 	bl	80011a0 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80009a8:	bf00      	nop
 80009aa:	bd80      	pop	{r7, pc}
 80009ac:	200002ec 	.word	0x200002ec
 80009b0:	40005400 	.word	0x40005400
 80009b4:	00061a80 	.word	0x00061a80

080009b8 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 80009b8:	b580      	push	{r7, lr}
 80009ba:	b096      	sub	sp, #88	; 0x58
 80009bc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80009be:	f107 0348 	add.w	r3, r7, #72	; 0x48
 80009c2:	2200      	movs	r2, #0
 80009c4:	601a      	str	r2, [r3, #0]
 80009c6:	605a      	str	r2, [r3, #4]
 80009c8:	609a      	str	r2, [r3, #8]
 80009ca:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80009cc:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80009d0:	2200      	movs	r2, #0
 80009d2:	601a      	str	r2, [r3, #0]
 80009d4:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80009d6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80009da:	2200      	movs	r2, #0
 80009dc:	601a      	str	r2, [r3, #0]
 80009de:	605a      	str	r2, [r3, #4]
 80009e0:	609a      	str	r2, [r3, #8]
 80009e2:	60da      	str	r2, [r3, #12]
 80009e4:	611a      	str	r2, [r3, #16]
 80009e6:	615a      	str	r2, [r3, #20]
 80009e8:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 80009ea:	1d3b      	adds	r3, r7, #4
 80009ec:	2220      	movs	r2, #32
 80009ee:	2100      	movs	r1, #0
 80009f0:	4618      	mov	r0, r3
 80009f2:	f00d fb19 	bl	800e028 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 80009f6:	4b3e      	ldr	r3, [pc, #248]	; (8000af0 <MX_TIM1_Init+0x138>)
 80009f8:	4a3e      	ldr	r2, [pc, #248]	; (8000af4 <MX_TIM1_Init+0x13c>)
 80009fa:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 1799;
 80009fc:	4b3c      	ldr	r3, [pc, #240]	; (8000af0 <MX_TIM1_Init+0x138>)
 80009fe:	f240 7207 	movw	r2, #1799	; 0x707
 8000a02:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000a04:	4b3a      	ldr	r3, [pc, #232]	; (8000af0 <MX_TIM1_Init+0x138>)
 8000a06:	2200      	movs	r2, #0
 8000a08:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 999;
 8000a0a:	4b39      	ldr	r3, [pc, #228]	; (8000af0 <MX_TIM1_Init+0x138>)
 8000a0c:	f240 32e7 	movw	r2, #999	; 0x3e7
 8000a10:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000a12:	4b37      	ldr	r3, [pc, #220]	; (8000af0 <MX_TIM1_Init+0x138>)
 8000a14:	2200      	movs	r2, #0
 8000a16:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8000a18:	4b35      	ldr	r3, [pc, #212]	; (8000af0 <MX_TIM1_Init+0x138>)
 8000a1a:	2200      	movs	r2, #0
 8000a1c:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000a1e:	4b34      	ldr	r3, [pc, #208]	; (8000af0 <MX_TIM1_Init+0x138>)
 8000a20:	2200      	movs	r2, #0
 8000a22:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8000a24:	4832      	ldr	r0, [pc, #200]	; (8000af0 <MX_TIM1_Init+0x138>)
 8000a26:	f005 fa6f 	bl	8005f08 <HAL_TIM_Base_Init>
 8000a2a:	4603      	mov	r3, r0
 8000a2c:	2b00      	cmp	r3, #0
 8000a2e:	d001      	beq.n	8000a34 <MX_TIM1_Init+0x7c>
  {
    Error_Handler();
 8000a30:	f000 fbb6 	bl	80011a0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000a34:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000a38:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8000a3a:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8000a3e:	4619      	mov	r1, r3
 8000a40:	482b      	ldr	r0, [pc, #172]	; (8000af0 <MX_TIM1_Init+0x138>)
 8000a42:	f005 fd5b 	bl	80064fc <HAL_TIM_ConfigClockSource>
 8000a46:	4603      	mov	r3, r0
 8000a48:	2b00      	cmp	r3, #0
 8000a4a:	d001      	beq.n	8000a50 <MX_TIM1_Init+0x98>
  {
    Error_Handler();
 8000a4c:	f000 fba8 	bl	80011a0 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8000a50:	4827      	ldr	r0, [pc, #156]	; (8000af0 <MX_TIM1_Init+0x138>)
 8000a52:	f005 fb48 	bl	80060e6 <HAL_TIM_PWM_Init>
 8000a56:	4603      	mov	r3, r0
 8000a58:	2b00      	cmp	r3, #0
 8000a5a:	d001      	beq.n	8000a60 <MX_TIM1_Init+0xa8>
  {
    Error_Handler();
 8000a5c:	f000 fba0 	bl	80011a0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000a60:	2300      	movs	r3, #0
 8000a62:	643b      	str	r3, [r7, #64]	; 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000a64:	2300      	movs	r3, #0
 8000a66:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8000a68:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8000a6c:	4619      	mov	r1, r3
 8000a6e:	4820      	ldr	r0, [pc, #128]	; (8000af0 <MX_TIM1_Init+0x138>)
 8000a70:	f006 f920 	bl	8006cb4 <HAL_TIMEx_MasterConfigSynchronization>
 8000a74:	4603      	mov	r3, r0
 8000a76:	2b00      	cmp	r3, #0
 8000a78:	d001      	beq.n	8000a7e <MX_TIM1_Init+0xc6>
  {
    Error_Handler();
 8000a7a:	f000 fb91 	bl	80011a0 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000a7e:	2360      	movs	r3, #96	; 0x60
 8000a80:	627b      	str	r3, [r7, #36]	; 0x24
  sConfigOC.Pulse = 0;
 8000a82:	2300      	movs	r3, #0
 8000a84:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000a86:	2300      	movs	r3, #0
 8000a88:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000a8a:	2300      	movs	r3, #0
 8000a8c:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8000a8e:	2300      	movs	r3, #0
 8000a90:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8000a92:	2300      	movs	r3, #0
 8000a94:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8000a96:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000a9a:	220c      	movs	r2, #12
 8000a9c:	4619      	mov	r1, r3
 8000a9e:	4814      	ldr	r0, [pc, #80]	; (8000af0 <MX_TIM1_Init+0x138>)
 8000aa0:	f005 fc6a 	bl	8006378 <HAL_TIM_PWM_ConfigChannel>
 8000aa4:	4603      	mov	r3, r0
 8000aa6:	2b00      	cmp	r3, #0
 8000aa8:	d001      	beq.n	8000aae <MX_TIM1_Init+0xf6>
  {
    Error_Handler();
 8000aaa:	f000 fb79 	bl	80011a0 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8000aae:	2300      	movs	r3, #0
 8000ab0:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8000ab2:	2300      	movs	r3, #0
 8000ab4:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8000ab6:	2300      	movs	r3, #0
 8000ab8:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8000aba:	2300      	movs	r3, #0
 8000abc:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8000abe:	2300      	movs	r3, #0
 8000ac0:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8000ac2:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000ac6:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8000ac8:	2300      	movs	r3, #0
 8000aca:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8000acc:	1d3b      	adds	r3, r7, #4
 8000ace:	4619      	mov	r1, r3
 8000ad0:	4807      	ldr	r0, [pc, #28]	; (8000af0 <MX_TIM1_Init+0x138>)
 8000ad2:	f006 f96b 	bl	8006dac <HAL_TIMEx_ConfigBreakDeadTime>
 8000ad6:	4603      	mov	r3, r0
 8000ad8:	2b00      	cmp	r3, #0
 8000ada:	d001      	beq.n	8000ae0 <MX_TIM1_Init+0x128>
  {
    Error_Handler();
 8000adc:	f000 fb60 	bl	80011a0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8000ae0:	4803      	ldr	r0, [pc, #12]	; (8000af0 <MX_TIM1_Init+0x138>)
 8000ae2:	f000 fef5 	bl	80018d0 <HAL_TIM_MspPostInit>

}
 8000ae6:	bf00      	nop
 8000ae8:	3758      	adds	r7, #88	; 0x58
 8000aea:	46bd      	mov	sp, r7
 8000aec:	bd80      	pop	{r7, pc}
 8000aee:	bf00      	nop
 8000af0:	20000340 	.word	0x20000340
 8000af4:	40010000 	.word	0x40010000

08000af8 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000af8:	b580      	push	{r7, lr}
 8000afa:	b08e      	sub	sp, #56	; 0x38
 8000afc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000afe:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000b02:	2200      	movs	r2, #0
 8000b04:	601a      	str	r2, [r3, #0]
 8000b06:	605a      	str	r2, [r3, #4]
 8000b08:	609a      	str	r2, [r3, #8]
 8000b0a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000b0c:	f107 0320 	add.w	r3, r7, #32
 8000b10:	2200      	movs	r2, #0
 8000b12:	601a      	str	r2, [r3, #0]
 8000b14:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000b16:	1d3b      	adds	r3, r7, #4
 8000b18:	2200      	movs	r2, #0
 8000b1a:	601a      	str	r2, [r3, #0]
 8000b1c:	605a      	str	r2, [r3, #4]
 8000b1e:	609a      	str	r2, [r3, #8]
 8000b20:	60da      	str	r2, [r3, #12]
 8000b22:	611a      	str	r2, [r3, #16]
 8000b24:	615a      	str	r2, [r3, #20]
 8000b26:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000b28:	4b2d      	ldr	r3, [pc, #180]	; (8000be0 <MX_TIM2_Init+0xe8>)
 8000b2a:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000b2e:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 899;
 8000b30:	4b2b      	ldr	r3, [pc, #172]	; (8000be0 <MX_TIM2_Init+0xe8>)
 8000b32:	f240 3283 	movw	r2, #899	; 0x383
 8000b36:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000b38:	4b29      	ldr	r3, [pc, #164]	; (8000be0 <MX_TIM2_Init+0xe8>)
 8000b3a:	2200      	movs	r2, #0
 8000b3c:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 999;
 8000b3e:	4b28      	ldr	r3, [pc, #160]	; (8000be0 <MX_TIM2_Init+0xe8>)
 8000b40:	f240 32e7 	movw	r2, #999	; 0x3e7
 8000b44:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000b46:	4b26      	ldr	r3, [pc, #152]	; (8000be0 <MX_TIM2_Init+0xe8>)
 8000b48:	2200      	movs	r2, #0
 8000b4a:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000b4c:	4b24      	ldr	r3, [pc, #144]	; (8000be0 <MX_TIM2_Init+0xe8>)
 8000b4e:	2200      	movs	r2, #0
 8000b50:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8000b52:	4823      	ldr	r0, [pc, #140]	; (8000be0 <MX_TIM2_Init+0xe8>)
 8000b54:	f005 f9d8 	bl	8005f08 <HAL_TIM_Base_Init>
 8000b58:	4603      	mov	r3, r0
 8000b5a:	2b00      	cmp	r3, #0
 8000b5c:	d001      	beq.n	8000b62 <MX_TIM2_Init+0x6a>
  {
    Error_Handler();
 8000b5e:	f000 fb1f 	bl	80011a0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000b62:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000b66:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8000b68:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000b6c:	4619      	mov	r1, r3
 8000b6e:	481c      	ldr	r0, [pc, #112]	; (8000be0 <MX_TIM2_Init+0xe8>)
 8000b70:	f005 fcc4 	bl	80064fc <HAL_TIM_ConfigClockSource>
 8000b74:	4603      	mov	r3, r0
 8000b76:	2b00      	cmp	r3, #0
 8000b78:	d001      	beq.n	8000b7e <MX_TIM2_Init+0x86>
  {
    Error_Handler();
 8000b7a:	f000 fb11 	bl	80011a0 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8000b7e:	4818      	ldr	r0, [pc, #96]	; (8000be0 <MX_TIM2_Init+0xe8>)
 8000b80:	f005 fab1 	bl	80060e6 <HAL_TIM_PWM_Init>
 8000b84:	4603      	mov	r3, r0
 8000b86:	2b00      	cmp	r3, #0
 8000b88:	d001      	beq.n	8000b8e <MX_TIM2_Init+0x96>
  {
    Error_Handler();
 8000b8a:	f000 fb09 	bl	80011a0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000b8e:	2300      	movs	r3, #0
 8000b90:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000b92:	2300      	movs	r3, #0
 8000b94:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000b96:	f107 0320 	add.w	r3, r7, #32
 8000b9a:	4619      	mov	r1, r3
 8000b9c:	4810      	ldr	r0, [pc, #64]	; (8000be0 <MX_TIM2_Init+0xe8>)
 8000b9e:	f006 f889 	bl	8006cb4 <HAL_TIMEx_MasterConfigSynchronization>
 8000ba2:	4603      	mov	r3, r0
 8000ba4:	2b00      	cmp	r3, #0
 8000ba6:	d001      	beq.n	8000bac <MX_TIM2_Init+0xb4>
  {
    Error_Handler();
 8000ba8:	f000 fafa 	bl	80011a0 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000bac:	2360      	movs	r3, #96	; 0x60
 8000bae:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8000bb0:	2300      	movs	r3, #0
 8000bb2:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000bb4:	2300      	movs	r3, #0
 8000bb6:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000bb8:	2300      	movs	r3, #0
 8000bba:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8000bbc:	1d3b      	adds	r3, r7, #4
 8000bbe:	2208      	movs	r2, #8
 8000bc0:	4619      	mov	r1, r3
 8000bc2:	4807      	ldr	r0, [pc, #28]	; (8000be0 <MX_TIM2_Init+0xe8>)
 8000bc4:	f005 fbd8 	bl	8006378 <HAL_TIM_PWM_ConfigChannel>
 8000bc8:	4603      	mov	r3, r0
 8000bca:	2b00      	cmp	r3, #0
 8000bcc:	d001      	beq.n	8000bd2 <MX_TIM2_Init+0xda>
  {
    Error_Handler();
 8000bce:	f000 fae7 	bl	80011a0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8000bd2:	4803      	ldr	r0, [pc, #12]	; (8000be0 <MX_TIM2_Init+0xe8>)
 8000bd4:	f000 fe7c 	bl	80018d0 <HAL_TIM_MspPostInit>

}
 8000bd8:	bf00      	nop
 8000bda:	3738      	adds	r7, #56	; 0x38
 8000bdc:	46bd      	mov	sp, r7
 8000bde:	bd80      	pop	{r7, pc}
 8000be0:	20000388 	.word	0x20000388

08000be4 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8000be4:	b580      	push	{r7, lr}
 8000be6:	b08e      	sub	sp, #56	; 0x38
 8000be8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000bea:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000bee:	2200      	movs	r2, #0
 8000bf0:	601a      	str	r2, [r3, #0]
 8000bf2:	605a      	str	r2, [r3, #4]
 8000bf4:	609a      	str	r2, [r3, #8]
 8000bf6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000bf8:	f107 0320 	add.w	r3, r7, #32
 8000bfc:	2200      	movs	r2, #0
 8000bfe:	601a      	str	r2, [r3, #0]
 8000c00:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000c02:	1d3b      	adds	r3, r7, #4
 8000c04:	2200      	movs	r2, #0
 8000c06:	601a      	str	r2, [r3, #0]
 8000c08:	605a      	str	r2, [r3, #4]
 8000c0a:	609a      	str	r2, [r3, #8]
 8000c0c:	60da      	str	r2, [r3, #12]
 8000c0e:	611a      	str	r2, [r3, #16]
 8000c10:	615a      	str	r2, [r3, #20]
 8000c12:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8000c14:	4b2d      	ldr	r3, [pc, #180]	; (8000ccc <MX_TIM3_Init+0xe8>)
 8000c16:	4a2e      	ldr	r2, [pc, #184]	; (8000cd0 <MX_TIM3_Init+0xec>)
 8000c18:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 899;
 8000c1a:	4b2c      	ldr	r3, [pc, #176]	; (8000ccc <MX_TIM3_Init+0xe8>)
 8000c1c:	f240 3283 	movw	r2, #899	; 0x383
 8000c20:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000c22:	4b2a      	ldr	r3, [pc, #168]	; (8000ccc <MX_TIM3_Init+0xe8>)
 8000c24:	2200      	movs	r2, #0
 8000c26:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 999;
 8000c28:	4b28      	ldr	r3, [pc, #160]	; (8000ccc <MX_TIM3_Init+0xe8>)
 8000c2a:	f240 32e7 	movw	r2, #999	; 0x3e7
 8000c2e:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000c30:	4b26      	ldr	r3, [pc, #152]	; (8000ccc <MX_TIM3_Init+0xe8>)
 8000c32:	2200      	movs	r2, #0
 8000c34:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000c36:	4b25      	ldr	r3, [pc, #148]	; (8000ccc <MX_TIM3_Init+0xe8>)
 8000c38:	2200      	movs	r2, #0
 8000c3a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8000c3c:	4823      	ldr	r0, [pc, #140]	; (8000ccc <MX_TIM3_Init+0xe8>)
 8000c3e:	f005 f963 	bl	8005f08 <HAL_TIM_Base_Init>
 8000c42:	4603      	mov	r3, r0
 8000c44:	2b00      	cmp	r3, #0
 8000c46:	d001      	beq.n	8000c4c <MX_TIM3_Init+0x68>
  {
    Error_Handler();
 8000c48:	f000 faaa 	bl	80011a0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000c4c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000c50:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8000c52:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000c56:	4619      	mov	r1, r3
 8000c58:	481c      	ldr	r0, [pc, #112]	; (8000ccc <MX_TIM3_Init+0xe8>)
 8000c5a:	f005 fc4f 	bl	80064fc <HAL_TIM_ConfigClockSource>
 8000c5e:	4603      	mov	r3, r0
 8000c60:	2b00      	cmp	r3, #0
 8000c62:	d001      	beq.n	8000c68 <MX_TIM3_Init+0x84>
  {
    Error_Handler();
 8000c64:	f000 fa9c 	bl	80011a0 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8000c68:	4818      	ldr	r0, [pc, #96]	; (8000ccc <MX_TIM3_Init+0xe8>)
 8000c6a:	f005 fa3c 	bl	80060e6 <HAL_TIM_PWM_Init>
 8000c6e:	4603      	mov	r3, r0
 8000c70:	2b00      	cmp	r3, #0
 8000c72:	d001      	beq.n	8000c78 <MX_TIM3_Init+0x94>
  {
    Error_Handler();
 8000c74:	f000 fa94 	bl	80011a0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000c78:	2300      	movs	r3, #0
 8000c7a:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000c7c:	2300      	movs	r3, #0
 8000c7e:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8000c80:	f107 0320 	add.w	r3, r7, #32
 8000c84:	4619      	mov	r1, r3
 8000c86:	4811      	ldr	r0, [pc, #68]	; (8000ccc <MX_TIM3_Init+0xe8>)
 8000c88:	f006 f814 	bl	8006cb4 <HAL_TIMEx_MasterConfigSynchronization>
 8000c8c:	4603      	mov	r3, r0
 8000c8e:	2b00      	cmp	r3, #0
 8000c90:	d001      	beq.n	8000c96 <MX_TIM3_Init+0xb2>
  {
    Error_Handler();
 8000c92:	f000 fa85 	bl	80011a0 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000c96:	2360      	movs	r3, #96	; 0x60
 8000c98:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8000c9a:	2300      	movs	r3, #0
 8000c9c:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000c9e:	2300      	movs	r3, #0
 8000ca0:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000ca2:	2300      	movs	r3, #0
 8000ca4:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8000ca6:	1d3b      	adds	r3, r7, #4
 8000ca8:	220c      	movs	r2, #12
 8000caa:	4619      	mov	r1, r3
 8000cac:	4807      	ldr	r0, [pc, #28]	; (8000ccc <MX_TIM3_Init+0xe8>)
 8000cae:	f005 fb63 	bl	8006378 <HAL_TIM_PWM_ConfigChannel>
 8000cb2:	4603      	mov	r3, r0
 8000cb4:	2b00      	cmp	r3, #0
 8000cb6:	d001      	beq.n	8000cbc <MX_TIM3_Init+0xd8>
  {
    Error_Handler();
 8000cb8:	f000 fa72 	bl	80011a0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8000cbc:	4803      	ldr	r0, [pc, #12]	; (8000ccc <MX_TIM3_Init+0xe8>)
 8000cbe:	f000 fe07 	bl	80018d0 <HAL_TIM_MspPostInit>

}
 8000cc2:	bf00      	nop
 8000cc4:	3738      	adds	r7, #56	; 0x38
 8000cc6:	46bd      	mov	sp, r7
 8000cc8:	bd80      	pop	{r7, pc}
 8000cca:	bf00      	nop
 8000ccc:	200003d0 	.word	0x200003d0
 8000cd0:	40000400 	.word	0x40000400

08000cd4 <MX_TIM6_Init>:
  * @brief TIM6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM6_Init(void)
{
 8000cd4:	b580      	push	{r7, lr}
 8000cd6:	b082      	sub	sp, #8
 8000cd8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000cda:	463b      	mov	r3, r7
 8000cdc:	2200      	movs	r2, #0
 8000cde:	601a      	str	r2, [r3, #0]
 8000ce0:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 8000ce2:	4b15      	ldr	r3, [pc, #84]	; (8000d38 <MX_TIM6_Init+0x64>)
 8000ce4:	4a15      	ldr	r2, [pc, #84]	; (8000d3c <MX_TIM6_Init+0x68>)
 8000ce6:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 89;
 8000ce8:	4b13      	ldr	r3, [pc, #76]	; (8000d38 <MX_TIM6_Init+0x64>)
 8000cea:	2259      	movs	r2, #89	; 0x59
 8000cec:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000cee:	4b12      	ldr	r3, [pc, #72]	; (8000d38 <MX_TIM6_Init+0x64>)
 8000cf0:	2200      	movs	r2, #0
 8000cf2:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 0xfffe;
 8000cf4:	4b10      	ldr	r3, [pc, #64]	; (8000d38 <MX_TIM6_Init+0x64>)
 8000cf6:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8000cfa:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000cfc:	4b0e      	ldr	r3, [pc, #56]	; (8000d38 <MX_TIM6_Init+0x64>)
 8000cfe:	2200      	movs	r2, #0
 8000d00:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 8000d02:	480d      	ldr	r0, [pc, #52]	; (8000d38 <MX_TIM6_Init+0x64>)
 8000d04:	f005 f900 	bl	8005f08 <HAL_TIM_Base_Init>
 8000d08:	4603      	mov	r3, r0
 8000d0a:	2b00      	cmp	r3, #0
 8000d0c:	d001      	beq.n	8000d12 <MX_TIM6_Init+0x3e>
  {
    Error_Handler();
 8000d0e:	f000 fa47 	bl	80011a0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000d12:	2300      	movs	r3, #0
 8000d14:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000d16:	2300      	movs	r3, #0
 8000d18:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 8000d1a:	463b      	mov	r3, r7
 8000d1c:	4619      	mov	r1, r3
 8000d1e:	4806      	ldr	r0, [pc, #24]	; (8000d38 <MX_TIM6_Init+0x64>)
 8000d20:	f005 ffc8 	bl	8006cb4 <HAL_TIMEx_MasterConfigSynchronization>
 8000d24:	4603      	mov	r3, r0
 8000d26:	2b00      	cmp	r3, #0
 8000d28:	d001      	beq.n	8000d2e <MX_TIM6_Init+0x5a>
  {
    Error_Handler();
 8000d2a:	f000 fa39 	bl	80011a0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 8000d2e:	bf00      	nop
 8000d30:	3708      	adds	r7, #8
 8000d32:	46bd      	mov	sp, r7
 8000d34:	bd80      	pop	{r7, pc}
 8000d36:	bf00      	nop
 8000d38:	20000418 	.word	0x20000418
 8000d3c:	40001000 	.word	0x40001000

08000d40 <MX_TIM8_Init>:
  * @brief TIM8 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM8_Init(void)
{
 8000d40:	b580      	push	{r7, lr}
 8000d42:	b096      	sub	sp, #88	; 0x58
 8000d44:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM8_Init 0 */

  /* USER CODE END TIM8_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000d46:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8000d4a:	2200      	movs	r2, #0
 8000d4c:	601a      	str	r2, [r3, #0]
 8000d4e:	605a      	str	r2, [r3, #4]
 8000d50:	609a      	str	r2, [r3, #8]
 8000d52:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000d54:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8000d58:	2200      	movs	r2, #0
 8000d5a:	601a      	str	r2, [r3, #0]
 8000d5c:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000d5e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000d62:	2200      	movs	r2, #0
 8000d64:	601a      	str	r2, [r3, #0]
 8000d66:	605a      	str	r2, [r3, #4]
 8000d68:	609a      	str	r2, [r3, #8]
 8000d6a:	60da      	str	r2, [r3, #12]
 8000d6c:	611a      	str	r2, [r3, #16]
 8000d6e:	615a      	str	r2, [r3, #20]
 8000d70:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8000d72:	1d3b      	adds	r3, r7, #4
 8000d74:	2220      	movs	r2, #32
 8000d76:	2100      	movs	r1, #0
 8000d78:	4618      	mov	r0, r3
 8000d7a:	f00d f955 	bl	800e028 <memset>

  /* USER CODE BEGIN TIM8_Init 1 */

  /* USER CODE END TIM8_Init 1 */
  htim8.Instance = TIM8;
 8000d7e:	4b3f      	ldr	r3, [pc, #252]	; (8000e7c <MX_TIM8_Init+0x13c>)
 8000d80:	4a3f      	ldr	r2, [pc, #252]	; (8000e80 <MX_TIM8_Init+0x140>)
 8000d82:	601a      	str	r2, [r3, #0]
  htim8.Init.Prescaler = 1799;
 8000d84:	4b3d      	ldr	r3, [pc, #244]	; (8000e7c <MX_TIM8_Init+0x13c>)
 8000d86:	f240 7207 	movw	r2, #1799	; 0x707
 8000d8a:	605a      	str	r2, [r3, #4]
  htim8.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000d8c:	4b3b      	ldr	r3, [pc, #236]	; (8000e7c <MX_TIM8_Init+0x13c>)
 8000d8e:	2200      	movs	r2, #0
 8000d90:	609a      	str	r2, [r3, #8]
  htim8.Init.Period = 999;
 8000d92:	4b3a      	ldr	r3, [pc, #232]	; (8000e7c <MX_TIM8_Init+0x13c>)
 8000d94:	f240 32e7 	movw	r2, #999	; 0x3e7
 8000d98:	60da      	str	r2, [r3, #12]
  htim8.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000d9a:	4b38      	ldr	r3, [pc, #224]	; (8000e7c <MX_TIM8_Init+0x13c>)
 8000d9c:	2200      	movs	r2, #0
 8000d9e:	611a      	str	r2, [r3, #16]
  htim8.Init.RepetitionCounter = 0;
 8000da0:	4b36      	ldr	r3, [pc, #216]	; (8000e7c <MX_TIM8_Init+0x13c>)
 8000da2:	2200      	movs	r2, #0
 8000da4:	615a      	str	r2, [r3, #20]
  htim8.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000da6:	4b35      	ldr	r3, [pc, #212]	; (8000e7c <MX_TIM8_Init+0x13c>)
 8000da8:	2200      	movs	r2, #0
 8000daa:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim8) != HAL_OK)
 8000dac:	4833      	ldr	r0, [pc, #204]	; (8000e7c <MX_TIM8_Init+0x13c>)
 8000dae:	f005 f8ab 	bl	8005f08 <HAL_TIM_Base_Init>
 8000db2:	4603      	mov	r3, r0
 8000db4:	2b00      	cmp	r3, #0
 8000db6:	d001      	beq.n	8000dbc <MX_TIM8_Init+0x7c>
  {
    Error_Handler();
 8000db8:	f000 f9f2 	bl	80011a0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000dbc:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000dc0:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_ConfigClockSource(&htim8, &sClockSourceConfig) != HAL_OK)
 8000dc2:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8000dc6:	4619      	mov	r1, r3
 8000dc8:	482c      	ldr	r0, [pc, #176]	; (8000e7c <MX_TIM8_Init+0x13c>)
 8000dca:	f005 fb97 	bl	80064fc <HAL_TIM_ConfigClockSource>
 8000dce:	4603      	mov	r3, r0
 8000dd0:	2b00      	cmp	r3, #0
 8000dd2:	d001      	beq.n	8000dd8 <MX_TIM8_Init+0x98>
  {
    Error_Handler();
 8000dd4:	f000 f9e4 	bl	80011a0 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim8) != HAL_OK)
 8000dd8:	4828      	ldr	r0, [pc, #160]	; (8000e7c <MX_TIM8_Init+0x13c>)
 8000dda:	f005 f984 	bl	80060e6 <HAL_TIM_PWM_Init>
 8000dde:	4603      	mov	r3, r0
 8000de0:	2b00      	cmp	r3, #0
 8000de2:	d001      	beq.n	8000de8 <MX_TIM8_Init+0xa8>
  {
    Error_Handler();
 8000de4:	f000 f9dc 	bl	80011a0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000de8:	2300      	movs	r3, #0
 8000dea:	643b      	str	r3, [r7, #64]	; 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000dec:	2300      	movs	r3, #0
 8000dee:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK)
 8000df0:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8000df4:	4619      	mov	r1, r3
 8000df6:	4821      	ldr	r0, [pc, #132]	; (8000e7c <MX_TIM8_Init+0x13c>)
 8000df8:	f005 ff5c 	bl	8006cb4 <HAL_TIMEx_MasterConfigSynchronization>
 8000dfc:	4603      	mov	r3, r0
 8000dfe:	2b00      	cmp	r3, #0
 8000e00:	d001      	beq.n	8000e06 <MX_TIM8_Init+0xc6>
  {
    Error_Handler();
 8000e02:	f000 f9cd 	bl	80011a0 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000e06:	2360      	movs	r3, #96	; 0x60
 8000e08:	627b      	str	r3, [r7, #36]	; 0x24
  sConfigOC.Pulse = 0;
 8000e0a:	2300      	movs	r3, #0
 8000e0c:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000e0e:	2300      	movs	r3, #0
 8000e10:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8000e12:	2300      	movs	r3, #0
 8000e14:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000e16:	2300      	movs	r3, #0
 8000e18:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8000e1a:	2300      	movs	r3, #0
 8000e1c:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8000e1e:	2300      	movs	r3, #0
 8000e20:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8000e22:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000e26:	2204      	movs	r2, #4
 8000e28:	4619      	mov	r1, r3
 8000e2a:	4814      	ldr	r0, [pc, #80]	; (8000e7c <MX_TIM8_Init+0x13c>)
 8000e2c:	f005 faa4 	bl	8006378 <HAL_TIM_PWM_ConfigChannel>
 8000e30:	4603      	mov	r3, r0
 8000e32:	2b00      	cmp	r3, #0
 8000e34:	d001      	beq.n	8000e3a <MX_TIM8_Init+0xfa>
  {
    Error_Handler();
 8000e36:	f000 f9b3 	bl	80011a0 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8000e3a:	2300      	movs	r3, #0
 8000e3c:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8000e3e:	2300      	movs	r3, #0
 8000e40:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8000e42:	2300      	movs	r3, #0
 8000e44:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8000e46:	2300      	movs	r3, #0
 8000e48:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8000e4a:	2300      	movs	r3, #0
 8000e4c:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8000e4e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000e52:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8000e54:	2300      	movs	r3, #0
 8000e56:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim8, &sBreakDeadTimeConfig) != HAL_OK)
 8000e58:	1d3b      	adds	r3, r7, #4
 8000e5a:	4619      	mov	r1, r3
 8000e5c:	4807      	ldr	r0, [pc, #28]	; (8000e7c <MX_TIM8_Init+0x13c>)
 8000e5e:	f005 ffa5 	bl	8006dac <HAL_TIMEx_ConfigBreakDeadTime>
 8000e62:	4603      	mov	r3, r0
 8000e64:	2b00      	cmp	r3, #0
 8000e66:	d001      	beq.n	8000e6c <MX_TIM8_Init+0x12c>
  {
    Error_Handler();
 8000e68:	f000 f99a 	bl	80011a0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM8_Init 2 */

  /* USER CODE END TIM8_Init 2 */
  HAL_TIM_MspPostInit(&htim8);
 8000e6c:	4803      	ldr	r0, [pc, #12]	; (8000e7c <MX_TIM8_Init+0x13c>)
 8000e6e:	f000 fd2f 	bl	80018d0 <HAL_TIM_MspPostInit>

}
 8000e72:	bf00      	nop
 8000e74:	3758      	adds	r7, #88	; 0x58
 8000e76:	46bd      	mov	sp, r7
 8000e78:	bd80      	pop	{r7, pc}
 8000e7a:	bf00      	nop
 8000e7c:	20000460 	.word	0x20000460
 8000e80:	40010400 	.word	0x40010400

08000e84 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8000e84:	b580      	push	{r7, lr}
 8000e86:	b082      	sub	sp, #8
 8000e88:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 8000e8a:	2300      	movs	r3, #0
 8000e8c:	607b      	str	r3, [r7, #4]
 8000e8e:	4b27      	ldr	r3, [pc, #156]	; (8000f2c <MX_DMA_Init+0xa8>)
 8000e90:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e92:	4a26      	ldr	r2, [pc, #152]	; (8000f2c <MX_DMA_Init+0xa8>)
 8000e94:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8000e98:	6313      	str	r3, [r2, #48]	; 0x30
 8000e9a:	4b24      	ldr	r3, [pc, #144]	; (8000f2c <MX_DMA_Init+0xa8>)
 8000e9c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e9e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8000ea2:	607b      	str	r3, [r7, #4]
 8000ea4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000ea6:	2300      	movs	r3, #0
 8000ea8:	603b      	str	r3, [r7, #0]
 8000eaa:	4b20      	ldr	r3, [pc, #128]	; (8000f2c <MX_DMA_Init+0xa8>)
 8000eac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000eae:	4a1f      	ldr	r2, [pc, #124]	; (8000f2c <MX_DMA_Init+0xa8>)
 8000eb0:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000eb4:	6313      	str	r3, [r2, #48]	; 0x30
 8000eb6:	4b1d      	ldr	r3, [pc, #116]	; (8000f2c <MX_DMA_Init+0xa8>)
 8000eb8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000eba:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000ebe:	603b      	str	r3, [r7, #0]
 8000ec0:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream1_IRQn, 5, 0);
 8000ec2:	2200      	movs	r2, #0
 8000ec4:	2105      	movs	r1, #5
 8000ec6:	200c      	movs	r0, #12
 8000ec8:	f001 fdc0 	bl	8002a4c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream1_IRQn);
 8000ecc:	200c      	movs	r0, #12
 8000ece:	f001 fdd9 	bl	8002a84 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream2_IRQn, 5, 0);
 8000ed2:	2200      	movs	r2, #0
 8000ed4:	2105      	movs	r1, #5
 8000ed6:	200d      	movs	r0, #13
 8000ed8:	f001 fdb8 	bl	8002a4c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream2_IRQn);
 8000edc:	200d      	movs	r0, #13
 8000ede:	f001 fdd1 	bl	8002a84 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 5, 0);
 8000ee2:	2200      	movs	r2, #0
 8000ee4:	2105      	movs	r1, #5
 8000ee6:	2038      	movs	r0, #56	; 0x38
 8000ee8:	f001 fdb0 	bl	8002a4c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 8000eec:	2038      	movs	r0, #56	; 0x38
 8000eee:	f001 fdc9 	bl	8002a84 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream2_IRQn, 5, 0);
 8000ef2:	2200      	movs	r2, #0
 8000ef4:	2105      	movs	r1, #5
 8000ef6:	203a      	movs	r0, #58	; 0x3a
 8000ef8:	f001 fda8 	bl	8002a4c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream2_IRQn);
 8000efc:	203a      	movs	r0, #58	; 0x3a
 8000efe:	f001 fdc1 	bl	8002a84 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream3_IRQn, 5, 0);
 8000f02:	2200      	movs	r2, #0
 8000f04:	2105      	movs	r1, #5
 8000f06:	203b      	movs	r0, #59	; 0x3b
 8000f08:	f001 fda0 	bl	8002a4c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream3_IRQn);
 8000f0c:	203b      	movs	r0, #59	; 0x3b
 8000f0e:	f001 fdb9 	bl	8002a84 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream4_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream4_IRQn, 5, 0);
 8000f12:	2200      	movs	r2, #0
 8000f14:	2105      	movs	r1, #5
 8000f16:	203c      	movs	r0, #60	; 0x3c
 8000f18:	f001 fd98 	bl	8002a4c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream4_IRQn);
 8000f1c:	203c      	movs	r0, #60	; 0x3c
 8000f1e:	f001 fdb1 	bl	8002a84 <HAL_NVIC_EnableIRQ>

}
 8000f22:	bf00      	nop
 8000f24:	3708      	adds	r7, #8
 8000f26:	46bd      	mov	sp, r7
 8000f28:	bd80      	pop	{r7, pc}
 8000f2a:	bf00      	nop
 8000f2c:	40023800 	.word	0x40023800

08000f30 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000f30:	b580      	push	{r7, lr}
 8000f32:	b08e      	sub	sp, #56	; 0x38
 8000f34:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f36:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000f3a:	2200      	movs	r2, #0
 8000f3c:	601a      	str	r2, [r3, #0]
 8000f3e:	605a      	str	r2, [r3, #4]
 8000f40:	609a      	str	r2, [r3, #8]
 8000f42:	60da      	str	r2, [r3, #12]
 8000f44:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000f46:	2300      	movs	r3, #0
 8000f48:	623b      	str	r3, [r7, #32]
 8000f4a:	4b71      	ldr	r3, [pc, #452]	; (8001110 <MX_GPIO_Init+0x1e0>)
 8000f4c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f4e:	4a70      	ldr	r2, [pc, #448]	; (8001110 <MX_GPIO_Init+0x1e0>)
 8000f50:	f043 0310 	orr.w	r3, r3, #16
 8000f54:	6313      	str	r3, [r2, #48]	; 0x30
 8000f56:	4b6e      	ldr	r3, [pc, #440]	; (8001110 <MX_GPIO_Init+0x1e0>)
 8000f58:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f5a:	f003 0310 	and.w	r3, r3, #16
 8000f5e:	623b      	str	r3, [r7, #32]
 8000f60:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000f62:	2300      	movs	r3, #0
 8000f64:	61fb      	str	r3, [r7, #28]
 8000f66:	4b6a      	ldr	r3, [pc, #424]	; (8001110 <MX_GPIO_Init+0x1e0>)
 8000f68:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f6a:	4a69      	ldr	r2, [pc, #420]	; (8001110 <MX_GPIO_Init+0x1e0>)
 8000f6c:	f043 0320 	orr.w	r3, r3, #32
 8000f70:	6313      	str	r3, [r2, #48]	; 0x30
 8000f72:	4b67      	ldr	r3, [pc, #412]	; (8001110 <MX_GPIO_Init+0x1e0>)
 8000f74:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f76:	f003 0320 	and.w	r3, r3, #32
 8000f7a:	61fb      	str	r3, [r7, #28]
 8000f7c:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000f7e:	2300      	movs	r3, #0
 8000f80:	61bb      	str	r3, [r7, #24]
 8000f82:	4b63      	ldr	r3, [pc, #396]	; (8001110 <MX_GPIO_Init+0x1e0>)
 8000f84:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f86:	4a62      	ldr	r2, [pc, #392]	; (8001110 <MX_GPIO_Init+0x1e0>)
 8000f88:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000f8c:	6313      	str	r3, [r2, #48]	; 0x30
 8000f8e:	4b60      	ldr	r3, [pc, #384]	; (8001110 <MX_GPIO_Init+0x1e0>)
 8000f90:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f92:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000f96:	61bb      	str	r3, [r7, #24]
 8000f98:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000f9a:	2300      	movs	r3, #0
 8000f9c:	617b      	str	r3, [r7, #20]
 8000f9e:	4b5c      	ldr	r3, [pc, #368]	; (8001110 <MX_GPIO_Init+0x1e0>)
 8000fa0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000fa2:	4a5b      	ldr	r2, [pc, #364]	; (8001110 <MX_GPIO_Init+0x1e0>)
 8000fa4:	f043 0301 	orr.w	r3, r3, #1
 8000fa8:	6313      	str	r3, [r2, #48]	; 0x30
 8000faa:	4b59      	ldr	r3, [pc, #356]	; (8001110 <MX_GPIO_Init+0x1e0>)
 8000fac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000fae:	f003 0301 	and.w	r3, r3, #1
 8000fb2:	617b      	str	r3, [r7, #20]
 8000fb4:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000fb6:	2300      	movs	r3, #0
 8000fb8:	613b      	str	r3, [r7, #16]
 8000fba:	4b55      	ldr	r3, [pc, #340]	; (8001110 <MX_GPIO_Init+0x1e0>)
 8000fbc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000fbe:	4a54      	ldr	r2, [pc, #336]	; (8001110 <MX_GPIO_Init+0x1e0>)
 8000fc0:	f043 0304 	orr.w	r3, r3, #4
 8000fc4:	6313      	str	r3, [r2, #48]	; 0x30
 8000fc6:	4b52      	ldr	r3, [pc, #328]	; (8001110 <MX_GPIO_Init+0x1e0>)
 8000fc8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000fca:	f003 0304 	and.w	r3, r3, #4
 8000fce:	613b      	str	r3, [r7, #16]
 8000fd0:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000fd2:	2300      	movs	r3, #0
 8000fd4:	60fb      	str	r3, [r7, #12]
 8000fd6:	4b4e      	ldr	r3, [pc, #312]	; (8001110 <MX_GPIO_Init+0x1e0>)
 8000fd8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000fda:	4a4d      	ldr	r2, [pc, #308]	; (8001110 <MX_GPIO_Init+0x1e0>)
 8000fdc:	f043 0302 	orr.w	r3, r3, #2
 8000fe0:	6313      	str	r3, [r2, #48]	; 0x30
 8000fe2:	4b4b      	ldr	r3, [pc, #300]	; (8001110 <MX_GPIO_Init+0x1e0>)
 8000fe4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000fe6:	f003 0302 	and.w	r3, r3, #2
 8000fea:	60fb      	str	r3, [r7, #12]
 8000fec:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000fee:	2300      	movs	r3, #0
 8000ff0:	60bb      	str	r3, [r7, #8]
 8000ff2:	4b47      	ldr	r3, [pc, #284]	; (8001110 <MX_GPIO_Init+0x1e0>)
 8000ff4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ff6:	4a46      	ldr	r2, [pc, #280]	; (8001110 <MX_GPIO_Init+0x1e0>)
 8000ff8:	f043 0308 	orr.w	r3, r3, #8
 8000ffc:	6313      	str	r3, [r2, #48]	; 0x30
 8000ffe:	4b44      	ldr	r3, [pc, #272]	; (8001110 <MX_GPIO_Init+0x1e0>)
 8001000:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001002:	f003 0308 	and.w	r3, r3, #8
 8001006:	60bb      	str	r3, [r7, #8]
 8001008:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 800100a:	2300      	movs	r3, #0
 800100c:	607b      	str	r3, [r7, #4]
 800100e:	4b40      	ldr	r3, [pc, #256]	; (8001110 <MX_GPIO_Init+0x1e0>)
 8001010:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001012:	4a3f      	ldr	r2, [pc, #252]	; (8001110 <MX_GPIO_Init+0x1e0>)
 8001014:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001018:	6313      	str	r3, [r2, #48]	; 0x30
 800101a:	4b3d      	ldr	r3, [pc, #244]	; (8001110 <MX_GPIO_Init+0x1e0>)
 800101c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800101e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001022:	607b      	str	r3, [r7, #4]
 8001024:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, FAULTRST_Pin|SEL1_Pin|SEL0_Pin|SEN_Pin, GPIO_PIN_RESET);
 8001026:	2200      	movs	r2, #0
 8001028:	213c      	movs	r1, #60	; 0x3c
 800102a:	483a      	ldr	r0, [pc, #232]	; (8001114 <MX_GPIO_Init+0x1e4>)
 800102c:	f002 f9d2 	bl	80033d4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, OUTPUT6_Pin|OUTPUT5_Pin|OUTPUT8_Pin|OUTPUT7_Pin
 8001030:	2200      	movs	r2, #0
 8001032:	f44f 417f 	mov.w	r1, #65280	; 0xff00
 8001036:	4838      	ldr	r0, [pc, #224]	; (8001118 <MX_GPIO_Init+0x1e8>)
 8001038:	f002 f9cc 	bl	80033d4 <HAL_GPIO_WritePin>
                          |OUTPUT10_Pin|OUTPUT9_Pin|OUTPUT12_Pin|OUTPUT11_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOG, OUTPUT14_Pin|OUTPUT13_Pin|OUTPUT16_Pin|OUTPUT15_Pin
 800103c:	2200      	movs	r2, #0
 800103e:	f44f 71de 	mov.w	r1, #444	; 0x1bc
 8001042:	4836      	ldr	r0, [pc, #216]	; (800111c <MX_GPIO_Init+0x1ec>)
 8001044:	f002 f9c6 	bl	80033d4 <HAL_GPIO_WritePin>
                          |CAN_RX_LED_Pin|CAN_TX_LED_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pins : FAULTRST_Pin SEL1_Pin SEL0_Pin SEN_Pin */
  GPIO_InitStruct.Pin = FAULTRST_Pin|SEL1_Pin|SEL0_Pin|SEN_Pin;
 8001048:	233c      	movs	r3, #60	; 0x3c
 800104a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_OD;
 800104c:	2311      	movs	r3, #17
 800104e:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001050:	2300      	movs	r3, #0
 8001052:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001054:	2300      	movs	r3, #0
 8001056:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001058:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800105c:	4619      	mov	r1, r3
 800105e:	482d      	ldr	r0, [pc, #180]	; (8001114 <MX_GPIO_Init+0x1e4>)
 8001060:	f002 f824 	bl	80030ac <HAL_GPIO_Init>

  /*Configure GPIO pins : INPUT1_Pin INPUT2_Pin INPUT3_Pin */
  GPIO_InitStruct.Pin = INPUT1_Pin|INPUT2_Pin|INPUT3_Pin;
 8001064:	2307      	movs	r3, #7
 8001066:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001068:	2300      	movs	r3, #0
 800106a:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800106c:	2300      	movs	r3, #0
 800106e:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8001070:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001074:	4619      	mov	r1, r3
 8001076:	482a      	ldr	r0, [pc, #168]	; (8001120 <MX_GPIO_Init+0x1f0>)
 8001078:	f002 f818 	bl	80030ac <HAL_GPIO_Init>

  /*Configure GPIO pin : INPUT4_Pin */
  GPIO_InitStruct.Pin = INPUT4_Pin;
 800107c:	2308      	movs	r3, #8
 800107e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING_FALLING;
 8001080:	f44f 1344 	mov.w	r3, #3211264	; 0x310000
 8001084:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001086:	2300      	movs	r3, #0
 8001088:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(INPUT4_GPIO_Port, &GPIO_InitStruct);
 800108a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800108e:	4619      	mov	r1, r3
 8001090:	4823      	ldr	r0, [pc, #140]	; (8001120 <MX_GPIO_Init+0x1f0>)
 8001092:	f002 f80b 	bl	80030ac <HAL_GPIO_Init>

  /*Configure GPIO pins : INPUT13_Pin INPUT15_Pin INPUT16_Pin INPUT5_Pin
                           INPUT6_Pin */
  GPIO_InitStruct.Pin = INPUT13_Pin|INPUT15_Pin|INPUT16_Pin|INPUT5_Pin
 8001096:	f24d 0330 	movw	r3, #53296	; 0xd030
 800109a:	627b      	str	r3, [r7, #36]	; 0x24
                          |INPUT6_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800109c:	2300      	movs	r3, #0
 800109e:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010a0:	2300      	movs	r3, #0
 80010a2:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80010a4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80010a8:	4619      	mov	r1, r3
 80010aa:	481e      	ldr	r0, [pc, #120]	; (8001124 <MX_GPIO_Init+0x1f4>)
 80010ac:	f001 fffe 	bl	80030ac <HAL_GPIO_Init>

  /*Configure GPIO pins : OUTPUT6_Pin OUTPUT5_Pin OUTPUT8_Pin OUTPUT7_Pin
                           OUTPUT10_Pin OUTPUT9_Pin OUTPUT12_Pin OUTPUT11_Pin */
  GPIO_InitStruct.Pin = OUTPUT6_Pin|OUTPUT5_Pin|OUTPUT8_Pin|OUTPUT7_Pin
 80010b0:	f44f 437f 	mov.w	r3, #65280	; 0xff00
 80010b4:	627b      	str	r3, [r7, #36]	; 0x24
                          |OUTPUT10_Pin|OUTPUT9_Pin|OUTPUT12_Pin|OUTPUT11_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_OD;
 80010b6:	2311      	movs	r3, #17
 80010b8:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010ba:	2300      	movs	r3, #0
 80010bc:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80010be:	2300      	movs	r3, #0
 80010c0:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80010c2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80010c6:	4619      	mov	r1, r3
 80010c8:	4813      	ldr	r0, [pc, #76]	; (8001118 <MX_GPIO_Init+0x1e8>)
 80010ca:	f001 ffef 	bl	80030ac <HAL_GPIO_Init>

  /*Configure GPIO pins : OUTPUT14_Pin OUTPUT13_Pin OUTPUT16_Pin OUTPUT15_Pin
                           CAN_RX_LED_Pin CAN_TX_LED_Pin */
  GPIO_InitStruct.Pin = OUTPUT14_Pin|OUTPUT13_Pin|OUTPUT16_Pin|OUTPUT15_Pin
 80010ce:	f44f 73de 	mov.w	r3, #444	; 0x1bc
 80010d2:	627b      	str	r3, [r7, #36]	; 0x24
                          |CAN_RX_LED_Pin|CAN_TX_LED_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_OD;
 80010d4:	2311      	movs	r3, #17
 80010d6:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010d8:	2300      	movs	r3, #0
 80010da:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80010dc:	2300      	movs	r3, #0
 80010de:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80010e0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80010e4:	4619      	mov	r1, r3
 80010e6:	480d      	ldr	r0, [pc, #52]	; (800111c <MX_GPIO_Init+0x1ec>)
 80010e8:	f001 ffe0 	bl	80030ac <HAL_GPIO_Init>

  /*Configure GPIO pins : INPUT7_Pin INPUT8_Pin INPUT9_Pin INPUT10_Pin
                           INPUT11_Pin INPUT12_Pin */
  GPIO_InitStruct.Pin = INPUT7_Pin|INPUT8_Pin|INPUT9_Pin|INPUT10_Pin
 80010ec:	f44f 637c 	mov.w	r3, #4032	; 0xfc0
 80010f0:	627b      	str	r3, [r7, #36]	; 0x24
                          |INPUT11_Pin|INPUT12_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80010f2:	2300      	movs	r3, #0
 80010f4:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010f6:	2300      	movs	r3, #0
 80010f8:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80010fa:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80010fe:	4619      	mov	r1, r3
 8001100:	4809      	ldr	r0, [pc, #36]	; (8001128 <MX_GPIO_Init+0x1f8>)
 8001102:	f001 ffd3 	bl	80030ac <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8001106:	bf00      	nop
 8001108:	3738      	adds	r7, #56	; 0x38
 800110a:	46bd      	mov	sp, r7
 800110c:	bd80      	pop	{r7, pc}
 800110e:	bf00      	nop
 8001110:	40023800 	.word	0x40023800
 8001114:	40021000 	.word	0x40021000
 8001118:	40020c00 	.word	0x40020c00
 800111c:	40021800 	.word	0x40021800
 8001120:	40021400 	.word	0x40021400
 8001124:	40020400 	.word	0x40020400
 8001128:	40020800 	.word	0x40020800

0800112c <StartSetupTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartSetupTask */
void StartSetupTask(void *argument)
{
 800112c:	b580      	push	{r7, lr}
 800112e:	b082      	sub	sp, #8
 8001130:	af00      	add	r7, sp, #0
 8001132:	6078      	str	r0, [r7, #4]
  /* init code for USB_DEVICE */
  MX_USB_DEVICE_Init();
 8001134:	f00c fa12 	bl	800d55c <MX_USB_DEVICE_Init>
  /* USER CODE BEGIN 5 */

  /* Infinite loop */
  for(;;)
  {
    osThreadYield();
 8001138:	f009 fa82 	bl	800a640 <osThreadYield>
 800113c:	e7fc      	b.n	8001138 <StartSetupTask+0xc>
	...

08001140 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001140:	b580      	push	{r7, lr}
 8001142:	b088      	sub	sp, #32
 8001144:	af00      	add	r7, sp, #0
 8001146:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */
	PDM_Data_Queue_Struct data = {.source = Interrupt_Gpio};
 8001148:	f107 030c 	add.w	r3, r7, #12
 800114c:	2200      	movs	r2, #0
 800114e:	601a      	str	r2, [r3, #0]
 8001150:	605a      	str	r2, [r3, #4]
 8001152:	609a      	str	r2, [r3, #8]
 8001154:	60da      	str	r2, [r3, #12]
 8001156:	611a      	str	r2, [r3, #16]
 8001158:	2304      	movs	r3, #4
 800115a:	773b      	strb	r3, [r7, #28]
  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM9) {
 800115c:	687b      	ldr	r3, [r7, #4]
 800115e:	681b      	ldr	r3, [r3, #0]
 8001160:	4a0c      	ldr	r2, [pc, #48]	; (8001194 <HAL_TIM_PeriodElapsedCallback+0x54>)
 8001162:	4293      	cmp	r3, r2
 8001164:	d101      	bne.n	800116a <HAL_TIM_PeriodElapsedCallback+0x2a>
    HAL_IncTick();
 8001166:	f000 fdd9 	bl	8001d1c <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */
  if (htim->Instance == TIM6)
 800116a:	687b      	ldr	r3, [r7, #4]
 800116c:	681b      	ldr	r3, [r3, #0]
 800116e:	4a0a      	ldr	r2, [pc, #40]	; (8001198 <HAL_TIM_PeriodElapsedCallback+0x58>)
 8001170:	4293      	cmp	r3, r2
 8001172:	d10a      	bne.n	800118a <HAL_TIM_PeriodElapsedCallback+0x4a>
  {
	  HAL_TIM_Base_Stop_IT(htim);
 8001174:	6878      	ldr	r0, [r7, #4]
 8001176:	f004 ff87 	bl	8006088 <HAL_TIM_Base_Stop_IT>
	  osMessageQueuePut(processQueueHandle, (void*) &data, 0, 0);
 800117a:	4b08      	ldr	r3, [pc, #32]	; (800119c <HAL_TIM_PeriodElapsedCallback+0x5c>)
 800117c:	6818      	ldr	r0, [r3, #0]
 800117e:	f107 010c 	add.w	r1, r7, #12
 8001182:	2300      	movs	r3, #0
 8001184:	2200      	movs	r2, #0
 8001186:	f009 fbbd 	bl	800a904 <osMessageQueuePut>
  }
  /* USER CODE END Callback 1 */
}
 800118a:	bf00      	nop
 800118c:	3720      	adds	r7, #32
 800118e:	46bd      	mov	sp, r7
 8001190:	bd80      	pop	{r7, pc}
 8001192:	bf00      	nop
 8001194:	40014000 	.word	0x40014000
 8001198:	40001000 	.word	0x40001000
 800119c:	2000062c 	.word	0x2000062c

080011a0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80011a0:	b480      	push	{r7}
 80011a2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80011a4:	b672      	cpsid	i
}
 80011a6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80011a8:	e7fe      	b.n	80011a8 <Error_Handler+0x8>
	...

080011ac <HAL_CAN_RxFifo0MsgPendingCallback>:

/*BEGIN PERIPHERAL CALLBACK FUNCTIONS*/

//Callback for received CAN messages
void HAL_CAN_RxFifo0MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 80011ac:	b580      	push	{r7, lr}
 80011ae:	b082      	sub	sp, #8
 80011b0:	af00      	add	r7, sp, #0
 80011b2:	6078      	str	r0, [r7, #4]
	osSemaphoreRelease(canRxSemaphoreHandle);	//Release semaphore to PDM_CAN_Thread_Receive_Data Thread
 80011b4:	4b04      	ldr	r3, [pc, #16]	; (80011c8 <HAL_CAN_RxFifo0MsgPendingCallback+0x1c>)
 80011b6:	681b      	ldr	r3, [r3, #0]
 80011b8:	4618      	mov	r0, r3
 80011ba:	f009 faeb 	bl	800a794 <osSemaphoreRelease>

	return;
 80011be:	bf00      	nop
}
 80011c0:	3708      	adds	r7, #8
 80011c2:	46bd      	mov	sp, r7
 80011c4:	bd80      	pop	{r7, pc}
 80011c6:	bf00      	nop
 80011c8:	20000634 	.word	0x20000634

080011cc <HAL_TIM_PWM_PulseFinishedCallback>:

//Callback for soft start last duty cycle value update
void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80011cc:	b580      	push	{r7, lr}
 80011ce:	b084      	sub	sp, #16
 80011d0:	af00      	add	r7, sp, #0
 80011d2:	6078      	str	r0, [r7, #4]
	uint8_t source = PROCESS_PWM_SS;
 80011d4:	2310      	movs	r3, #16
 80011d6:	73fb      	strb	r3, [r7, #15]

	//Send process source to Output Thread
	osMessageQueuePut(outQueueHandle, &source, 0, 0);
 80011d8:	4b05      	ldr	r3, [pc, #20]	; (80011f0 <HAL_TIM_PWM_PulseFinishedCallback+0x24>)
 80011da:	6818      	ldr	r0, [r3, #0]
 80011dc:	f107 010f 	add.w	r1, r7, #15
 80011e0:	2300      	movs	r3, #0
 80011e2:	2200      	movs	r2, #0
 80011e4:	f009 fb8e 	bl	800a904 <osMessageQueuePut>

	return;
 80011e8:	bf00      	nop
}
 80011ea:	3710      	adds	r7, #16
 80011ec:	46bd      	mov	sp, r7
 80011ee:	bd80      	pop	{r7, pc}
 80011f0:	20000630 	.word	0x20000630

080011f4 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                                                                /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80011f4:	b580      	push	{r7, lr}
 80011f6:	b082      	sub	sp, #8
 80011f8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80011fa:	2300      	movs	r3, #0
 80011fc:	607b      	str	r3, [r7, #4]
 80011fe:	4b12      	ldr	r3, [pc, #72]	; (8001248 <HAL_MspInit+0x54>)
 8001200:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001202:	4a11      	ldr	r2, [pc, #68]	; (8001248 <HAL_MspInit+0x54>)
 8001204:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001208:	6453      	str	r3, [r2, #68]	; 0x44
 800120a:	4b0f      	ldr	r3, [pc, #60]	; (8001248 <HAL_MspInit+0x54>)
 800120c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800120e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001212:	607b      	str	r3, [r7, #4]
 8001214:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001216:	2300      	movs	r3, #0
 8001218:	603b      	str	r3, [r7, #0]
 800121a:	4b0b      	ldr	r3, [pc, #44]	; (8001248 <HAL_MspInit+0x54>)
 800121c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800121e:	4a0a      	ldr	r2, [pc, #40]	; (8001248 <HAL_MspInit+0x54>)
 8001220:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001224:	6413      	str	r3, [r2, #64]	; 0x40
 8001226:	4b08      	ldr	r3, [pc, #32]	; (8001248 <HAL_MspInit+0x54>)
 8001228:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800122a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800122e:	603b      	str	r3, [r7, #0]
 8001230:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8001232:	2200      	movs	r2, #0
 8001234:	210f      	movs	r1, #15
 8001236:	f06f 0001 	mvn.w	r0, #1
 800123a:	f001 fc07 	bl	8002a4c <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800123e:	bf00      	nop
 8001240:	3708      	adds	r7, #8
 8001242:	46bd      	mov	sp, r7
 8001244:	bd80      	pop	{r7, pc}
 8001246:	bf00      	nop
 8001248:	40023800 	.word	0x40023800

0800124c <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 800124c:	b580      	push	{r7, lr}
 800124e:	b08c      	sub	sp, #48	; 0x30
 8001250:	af00      	add	r7, sp, #0
 8001252:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001254:	f107 031c 	add.w	r3, r7, #28
 8001258:	2200      	movs	r2, #0
 800125a:	601a      	str	r2, [r3, #0]
 800125c:	605a      	str	r2, [r3, #4]
 800125e:	609a      	str	r2, [r3, #8]
 8001260:	60da      	str	r2, [r3, #12]
 8001262:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8001264:	687b      	ldr	r3, [r7, #4]
 8001266:	681b      	ldr	r3, [r3, #0]
 8001268:	4a6b      	ldr	r2, [pc, #428]	; (8001418 <HAL_ADC_MspInit+0x1cc>)
 800126a:	4293      	cmp	r3, r2
 800126c:	d172      	bne.n	8001354 <HAL_ADC_MspInit+0x108>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 800126e:	2300      	movs	r3, #0
 8001270:	61bb      	str	r3, [r7, #24]
 8001272:	4b6a      	ldr	r3, [pc, #424]	; (800141c <HAL_ADC_MspInit+0x1d0>)
 8001274:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001276:	4a69      	ldr	r2, [pc, #420]	; (800141c <HAL_ADC_MspInit+0x1d0>)
 8001278:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800127c:	6453      	str	r3, [r2, #68]	; 0x44
 800127e:	4b67      	ldr	r3, [pc, #412]	; (800141c <HAL_ADC_MspInit+0x1d0>)
 8001280:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001282:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001286:	61bb      	str	r3, [r7, #24]
 8001288:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800128a:	2300      	movs	r3, #0
 800128c:	617b      	str	r3, [r7, #20]
 800128e:	4b63      	ldr	r3, [pc, #396]	; (800141c <HAL_ADC_MspInit+0x1d0>)
 8001290:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001292:	4a62      	ldr	r2, [pc, #392]	; (800141c <HAL_ADC_MspInit+0x1d0>)
 8001294:	f043 0301 	orr.w	r3, r3, #1
 8001298:	6313      	str	r3, [r2, #48]	; 0x30
 800129a:	4b60      	ldr	r3, [pc, #384]	; (800141c <HAL_ADC_MspInit+0x1d0>)
 800129c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800129e:	f003 0301 	and.w	r3, r3, #1
 80012a2:	617b      	str	r3, [r7, #20]
 80012a4:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80012a6:	2300      	movs	r3, #0
 80012a8:	613b      	str	r3, [r7, #16]
 80012aa:	4b5c      	ldr	r3, [pc, #368]	; (800141c <HAL_ADC_MspInit+0x1d0>)
 80012ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012ae:	4a5b      	ldr	r2, [pc, #364]	; (800141c <HAL_ADC_MspInit+0x1d0>)
 80012b0:	f043 0304 	orr.w	r3, r3, #4
 80012b4:	6313      	str	r3, [r2, #48]	; 0x30
 80012b6:	4b59      	ldr	r3, [pc, #356]	; (800141c <HAL_ADC_MspInit+0x1d0>)
 80012b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012ba:	f003 0304 	and.w	r3, r3, #4
 80012be:	613b      	str	r3, [r7, #16]
 80012c0:	693b      	ldr	r3, [r7, #16]
    PA5     ------> ADC1_IN5
    PA6     ------> ADC1_IN6
    PA7     ------> ADC1_IN7
    PC4     ------> ADC1_IN14
    */
    GPIO_InitStruct.Pin = ANALOG6_Pin|ANALOG7_Pin|ANALOG8_Pin;
 80012c2:	23e0      	movs	r3, #224	; 0xe0
 80012c4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80012c6:	2303      	movs	r3, #3
 80012c8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012ca:	2300      	movs	r3, #0
 80012cc:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80012ce:	f107 031c 	add.w	r3, r7, #28
 80012d2:	4619      	mov	r1, r3
 80012d4:	4852      	ldr	r0, [pc, #328]	; (8001420 <HAL_ADC_MspInit+0x1d4>)
 80012d6:	f001 fee9 	bl	80030ac <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = ANALOG9_Pin;
 80012da:	2310      	movs	r3, #16
 80012dc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80012de:	2303      	movs	r3, #3
 80012e0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012e2:	2300      	movs	r3, #0
 80012e4:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(ANALOG9_GPIO_Port, &GPIO_InitStruct);
 80012e6:	f107 031c 	add.w	r3, r7, #28
 80012ea:	4619      	mov	r1, r3
 80012ec:	484d      	ldr	r0, [pc, #308]	; (8001424 <HAL_ADC_MspInit+0x1d8>)
 80012ee:	f001 fedd 	bl	80030ac <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA2_Stream0;
 80012f2:	4b4d      	ldr	r3, [pc, #308]	; (8001428 <HAL_ADC_MspInit+0x1dc>)
 80012f4:	4a4d      	ldr	r2, [pc, #308]	; (800142c <HAL_ADC_MspInit+0x1e0>)
 80012f6:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Channel = DMA_CHANNEL_0;
 80012f8:	4b4b      	ldr	r3, [pc, #300]	; (8001428 <HAL_ADC_MspInit+0x1dc>)
 80012fa:	2200      	movs	r2, #0
 80012fc:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80012fe:	4b4a      	ldr	r3, [pc, #296]	; (8001428 <HAL_ADC_MspInit+0x1dc>)
 8001300:	2200      	movs	r2, #0
 8001302:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8001304:	4b48      	ldr	r3, [pc, #288]	; (8001428 <HAL_ADC_MspInit+0x1dc>)
 8001306:	2200      	movs	r2, #0
 8001308:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 800130a:	4b47      	ldr	r3, [pc, #284]	; (8001428 <HAL_ADC_MspInit+0x1dc>)
 800130c:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001310:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8001312:	4b45      	ldr	r3, [pc, #276]	; (8001428 <HAL_ADC_MspInit+0x1dc>)
 8001314:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8001318:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 800131a:	4b43      	ldr	r3, [pc, #268]	; (8001428 <HAL_ADC_MspInit+0x1dc>)
 800131c:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001320:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8001322:	4b41      	ldr	r3, [pc, #260]	; (8001428 <HAL_ADC_MspInit+0x1dc>)
 8001324:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001328:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 800132a:	4b3f      	ldr	r3, [pc, #252]	; (8001428 <HAL_ADC_MspInit+0x1dc>)
 800132c:	2200      	movs	r2, #0
 800132e:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001330:	4b3d      	ldr	r3, [pc, #244]	; (8001428 <HAL_ADC_MspInit+0x1dc>)
 8001332:	2200      	movs	r2, #0
 8001334:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8001336:	483c      	ldr	r0, [pc, #240]	; (8001428 <HAL_ADC_MspInit+0x1dc>)
 8001338:	f001 fbce 	bl	8002ad8 <HAL_DMA_Init>
 800133c:	4603      	mov	r3, r0
 800133e:	2b00      	cmp	r3, #0
 8001340:	d001      	beq.n	8001346 <HAL_ADC_MspInit+0xfa>
    {
      Error_Handler();
 8001342:	f7ff ff2d 	bl	80011a0 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 8001346:	687b      	ldr	r3, [r7, #4]
 8001348:	4a37      	ldr	r2, [pc, #220]	; (8001428 <HAL_ADC_MspInit+0x1dc>)
 800134a:	639a      	str	r2, [r3, #56]	; 0x38
 800134c:	4a36      	ldr	r2, [pc, #216]	; (8001428 <HAL_ADC_MspInit+0x1dc>)
 800134e:	687b      	ldr	r3, [r7, #4]
 8001350:	6393      	str	r3, [r2, #56]	; 0x38
  /* USER CODE BEGIN ADC2_MspInit 1 */

  /* USER CODE END ADC2_MspInit 1 */
  }

}
 8001352:	e05d      	b.n	8001410 <HAL_ADC_MspInit+0x1c4>
  else if(hadc->Instance==ADC2)
 8001354:	687b      	ldr	r3, [r7, #4]
 8001356:	681b      	ldr	r3, [r3, #0]
 8001358:	4a35      	ldr	r2, [pc, #212]	; (8001430 <HAL_ADC_MspInit+0x1e4>)
 800135a:	4293      	cmp	r3, r2
 800135c:	d158      	bne.n	8001410 <HAL_ADC_MspInit+0x1c4>
    __HAL_RCC_ADC2_CLK_ENABLE();
 800135e:	2300      	movs	r3, #0
 8001360:	60fb      	str	r3, [r7, #12]
 8001362:	4b2e      	ldr	r3, [pc, #184]	; (800141c <HAL_ADC_MspInit+0x1d0>)
 8001364:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001366:	4a2d      	ldr	r2, [pc, #180]	; (800141c <HAL_ADC_MspInit+0x1d0>)
 8001368:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800136c:	6453      	str	r3, [r2, #68]	; 0x44
 800136e:	4b2b      	ldr	r3, [pc, #172]	; (800141c <HAL_ADC_MspInit+0x1d0>)
 8001370:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001372:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001376:	60fb      	str	r3, [r7, #12]
 8001378:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800137a:	2300      	movs	r3, #0
 800137c:	60bb      	str	r3, [r7, #8]
 800137e:	4b27      	ldr	r3, [pc, #156]	; (800141c <HAL_ADC_MspInit+0x1d0>)
 8001380:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001382:	4a26      	ldr	r2, [pc, #152]	; (800141c <HAL_ADC_MspInit+0x1d0>)
 8001384:	f043 0301 	orr.w	r3, r3, #1
 8001388:	6313      	str	r3, [r2, #48]	; 0x30
 800138a:	4b24      	ldr	r3, [pc, #144]	; (800141c <HAL_ADC_MspInit+0x1d0>)
 800138c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800138e:	f003 0301 	and.w	r3, r3, #1
 8001392:	60bb      	str	r3, [r7, #8]
 8001394:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = ANALOG1_Pin|ANALOG2_Pin|ANALOG3_Pin|ANALOG4_Pin
 8001396:	231f      	movs	r3, #31
 8001398:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800139a:	2303      	movs	r3, #3
 800139c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800139e:	2300      	movs	r3, #0
 80013a0:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80013a2:	f107 031c 	add.w	r3, r7, #28
 80013a6:	4619      	mov	r1, r3
 80013a8:	481d      	ldr	r0, [pc, #116]	; (8001420 <HAL_ADC_MspInit+0x1d4>)
 80013aa:	f001 fe7f 	bl	80030ac <HAL_GPIO_Init>
    hdma_adc2.Instance = DMA2_Stream2;
 80013ae:	4b21      	ldr	r3, [pc, #132]	; (8001434 <HAL_ADC_MspInit+0x1e8>)
 80013b0:	4a21      	ldr	r2, [pc, #132]	; (8001438 <HAL_ADC_MspInit+0x1ec>)
 80013b2:	601a      	str	r2, [r3, #0]
    hdma_adc2.Init.Channel = DMA_CHANNEL_1;
 80013b4:	4b1f      	ldr	r3, [pc, #124]	; (8001434 <HAL_ADC_MspInit+0x1e8>)
 80013b6:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80013ba:	605a      	str	r2, [r3, #4]
    hdma_adc2.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80013bc:	4b1d      	ldr	r3, [pc, #116]	; (8001434 <HAL_ADC_MspInit+0x1e8>)
 80013be:	2200      	movs	r2, #0
 80013c0:	609a      	str	r2, [r3, #8]
    hdma_adc2.Init.PeriphInc = DMA_PINC_DISABLE;
 80013c2:	4b1c      	ldr	r3, [pc, #112]	; (8001434 <HAL_ADC_MspInit+0x1e8>)
 80013c4:	2200      	movs	r2, #0
 80013c6:	60da      	str	r2, [r3, #12]
    hdma_adc2.Init.MemInc = DMA_MINC_ENABLE;
 80013c8:	4b1a      	ldr	r3, [pc, #104]	; (8001434 <HAL_ADC_MspInit+0x1e8>)
 80013ca:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80013ce:	611a      	str	r2, [r3, #16]
    hdma_adc2.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 80013d0:	4b18      	ldr	r3, [pc, #96]	; (8001434 <HAL_ADC_MspInit+0x1e8>)
 80013d2:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80013d6:	615a      	str	r2, [r3, #20]
    hdma_adc2.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 80013d8:	4b16      	ldr	r3, [pc, #88]	; (8001434 <HAL_ADC_MspInit+0x1e8>)
 80013da:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80013de:	619a      	str	r2, [r3, #24]
    hdma_adc2.Init.Mode = DMA_CIRCULAR;
 80013e0:	4b14      	ldr	r3, [pc, #80]	; (8001434 <HAL_ADC_MspInit+0x1e8>)
 80013e2:	f44f 7280 	mov.w	r2, #256	; 0x100
 80013e6:	61da      	str	r2, [r3, #28]
    hdma_adc2.Init.Priority = DMA_PRIORITY_LOW;
 80013e8:	4b12      	ldr	r3, [pc, #72]	; (8001434 <HAL_ADC_MspInit+0x1e8>)
 80013ea:	2200      	movs	r2, #0
 80013ec:	621a      	str	r2, [r3, #32]
    hdma_adc2.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80013ee:	4b11      	ldr	r3, [pc, #68]	; (8001434 <HAL_ADC_MspInit+0x1e8>)
 80013f0:	2200      	movs	r2, #0
 80013f2:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_adc2) != HAL_OK)
 80013f4:	480f      	ldr	r0, [pc, #60]	; (8001434 <HAL_ADC_MspInit+0x1e8>)
 80013f6:	f001 fb6f 	bl	8002ad8 <HAL_DMA_Init>
 80013fa:	4603      	mov	r3, r0
 80013fc:	2b00      	cmp	r3, #0
 80013fe:	d001      	beq.n	8001404 <HAL_ADC_MspInit+0x1b8>
      Error_Handler();
 8001400:	f7ff fece 	bl	80011a0 <Error_Handler>
    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc2);
 8001404:	687b      	ldr	r3, [r7, #4]
 8001406:	4a0b      	ldr	r2, [pc, #44]	; (8001434 <HAL_ADC_MspInit+0x1e8>)
 8001408:	639a      	str	r2, [r3, #56]	; 0x38
 800140a:	4a0a      	ldr	r2, [pc, #40]	; (8001434 <HAL_ADC_MspInit+0x1e8>)
 800140c:	687b      	ldr	r3, [r7, #4]
 800140e:	6393      	str	r3, [r2, #56]	; 0x38
}
 8001410:	bf00      	nop
 8001412:	3730      	adds	r7, #48	; 0x30
 8001414:	46bd      	mov	sp, r7
 8001416:	bd80      	pop	{r7, pc}
 8001418:	40012000 	.word	0x40012000
 800141c:	40023800 	.word	0x40023800
 8001420:	40020000 	.word	0x40020000
 8001424:	40020800 	.word	0x40020800
 8001428:	200001fc 	.word	0x200001fc
 800142c:	40026410 	.word	0x40026410
 8001430:	40012100 	.word	0x40012100
 8001434:	2000025c 	.word	0x2000025c
 8001438:	40026440 	.word	0x40026440

0800143c <HAL_CAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hcan: CAN handle pointer
* @retval None
*/
void HAL_CAN_MspInit(CAN_HandleTypeDef* hcan)
{
 800143c:	b580      	push	{r7, lr}
 800143e:	b08a      	sub	sp, #40	; 0x28
 8001440:	af00      	add	r7, sp, #0
 8001442:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001444:	f107 0314 	add.w	r3, r7, #20
 8001448:	2200      	movs	r2, #0
 800144a:	601a      	str	r2, [r3, #0]
 800144c:	605a      	str	r2, [r3, #4]
 800144e:	609a      	str	r2, [r3, #8]
 8001450:	60da      	str	r2, [r3, #12]
 8001452:	611a      	str	r2, [r3, #16]
  if(hcan->Instance==CAN1)
 8001454:	687b      	ldr	r3, [r7, #4]
 8001456:	681b      	ldr	r3, [r3, #0]
 8001458:	4a1d      	ldr	r2, [pc, #116]	; (80014d0 <HAL_CAN_MspInit+0x94>)
 800145a:	4293      	cmp	r3, r2
 800145c:	d134      	bne.n	80014c8 <HAL_CAN_MspInit+0x8c>
  {
  /* USER CODE BEGIN CAN1_MspInit 0 */

  /* USER CODE END CAN1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 800145e:	2300      	movs	r3, #0
 8001460:	613b      	str	r3, [r7, #16]
 8001462:	4b1c      	ldr	r3, [pc, #112]	; (80014d4 <HAL_CAN_MspInit+0x98>)
 8001464:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001466:	4a1b      	ldr	r2, [pc, #108]	; (80014d4 <HAL_CAN_MspInit+0x98>)
 8001468:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800146c:	6413      	str	r3, [r2, #64]	; 0x40
 800146e:	4b19      	ldr	r3, [pc, #100]	; (80014d4 <HAL_CAN_MspInit+0x98>)
 8001470:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001472:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001476:	613b      	str	r3, [r7, #16]
 8001478:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800147a:	2300      	movs	r3, #0
 800147c:	60fb      	str	r3, [r7, #12]
 800147e:	4b15      	ldr	r3, [pc, #84]	; (80014d4 <HAL_CAN_MspInit+0x98>)
 8001480:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001482:	4a14      	ldr	r2, [pc, #80]	; (80014d4 <HAL_CAN_MspInit+0x98>)
 8001484:	f043 0302 	orr.w	r3, r3, #2
 8001488:	6313      	str	r3, [r2, #48]	; 0x30
 800148a:	4b12      	ldr	r3, [pc, #72]	; (80014d4 <HAL_CAN_MspInit+0x98>)
 800148c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800148e:	f003 0302 	and.w	r3, r3, #2
 8001492:	60fb      	str	r3, [r7, #12]
 8001494:	68fb      	ldr	r3, [r7, #12]
    /**CAN1 GPIO Configuration
    PB8     ------> CAN1_RX
    PB9     ------> CAN1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8001496:	f44f 7340 	mov.w	r3, #768	; 0x300
 800149a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800149c:	2302      	movs	r3, #2
 800149e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014a0:	2300      	movs	r3, #0
 80014a2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80014a4:	2303      	movs	r3, #3
 80014a6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN1;
 80014a8:	2309      	movs	r3, #9
 80014aa:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80014ac:	f107 0314 	add.w	r3, r7, #20
 80014b0:	4619      	mov	r1, r3
 80014b2:	4809      	ldr	r0, [pc, #36]	; (80014d8 <HAL_CAN_MspInit+0x9c>)
 80014b4:	f001 fdfa 	bl	80030ac <HAL_GPIO_Init>

    /* CAN1 interrupt Init */
    HAL_NVIC_SetPriority(CAN1_RX0_IRQn, 5, 0);
 80014b8:	2200      	movs	r2, #0
 80014ba:	2105      	movs	r1, #5
 80014bc:	2014      	movs	r0, #20
 80014be:	f001 fac5 	bl	8002a4c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_RX0_IRQn);
 80014c2:	2014      	movs	r0, #20
 80014c4:	f001 fade 	bl	8002a84 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN CAN1_MspInit 1 */

  /* USER CODE END CAN1_MspInit 1 */
  }

}
 80014c8:	bf00      	nop
 80014ca:	3728      	adds	r7, #40	; 0x28
 80014cc:	46bd      	mov	sp, r7
 80014ce:	bd80      	pop	{r7, pc}
 80014d0:	40006400 	.word	0x40006400
 80014d4:	40023800 	.word	0x40023800
 80014d8:	40020400 	.word	0x40020400

080014dc <HAL_CRC_MspInit>:
* This function configures the hardware resources used in this example
* @param hcrc: CRC handle pointer
* @retval None
*/
void HAL_CRC_MspInit(CRC_HandleTypeDef* hcrc)
{
 80014dc:	b480      	push	{r7}
 80014de:	b085      	sub	sp, #20
 80014e0:	af00      	add	r7, sp, #0
 80014e2:	6078      	str	r0, [r7, #4]
  if(hcrc->Instance==CRC)
 80014e4:	687b      	ldr	r3, [r7, #4]
 80014e6:	681b      	ldr	r3, [r3, #0]
 80014e8:	4a0b      	ldr	r2, [pc, #44]	; (8001518 <HAL_CRC_MspInit+0x3c>)
 80014ea:	4293      	cmp	r3, r2
 80014ec:	d10d      	bne.n	800150a <HAL_CRC_MspInit+0x2e>
  {
  /* USER CODE BEGIN CRC_MspInit 0 */

  /* USER CODE END CRC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CRC_CLK_ENABLE();
 80014ee:	2300      	movs	r3, #0
 80014f0:	60fb      	str	r3, [r7, #12]
 80014f2:	4b0a      	ldr	r3, [pc, #40]	; (800151c <HAL_CRC_MspInit+0x40>)
 80014f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014f6:	4a09      	ldr	r2, [pc, #36]	; (800151c <HAL_CRC_MspInit+0x40>)
 80014f8:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80014fc:	6313      	str	r3, [r2, #48]	; 0x30
 80014fe:	4b07      	ldr	r3, [pc, #28]	; (800151c <HAL_CRC_MspInit+0x40>)
 8001500:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001502:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001506:	60fb      	str	r3, [r7, #12]
 8001508:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN CRC_MspInit 1 */

  /* USER CODE END CRC_MspInit 1 */
  }

}
 800150a:	bf00      	nop
 800150c:	3714      	adds	r7, #20
 800150e:	46bd      	mov	sp, r7
 8001510:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001514:	4770      	bx	lr
 8001516:	bf00      	nop
 8001518:	40023000 	.word	0x40023000
 800151c:	40023800 	.word	0x40023800

08001520 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001520:	b580      	push	{r7, lr}
 8001522:	b08a      	sub	sp, #40	; 0x28
 8001524:	af00      	add	r7, sp, #0
 8001526:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001528:	f107 0314 	add.w	r3, r7, #20
 800152c:	2200      	movs	r2, #0
 800152e:	601a      	str	r2, [r3, #0]
 8001530:	605a      	str	r2, [r3, #4]
 8001532:	609a      	str	r2, [r3, #8]
 8001534:	60da      	str	r2, [r3, #12]
 8001536:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8001538:	687b      	ldr	r3, [r7, #4]
 800153a:	681b      	ldr	r3, [r3, #0]
 800153c:	4a19      	ldr	r2, [pc, #100]	; (80015a4 <HAL_I2C_MspInit+0x84>)
 800153e:	4293      	cmp	r3, r2
 8001540:	d12b      	bne.n	800159a <HAL_I2C_MspInit+0x7a>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001542:	2300      	movs	r3, #0
 8001544:	613b      	str	r3, [r7, #16]
 8001546:	4b18      	ldr	r3, [pc, #96]	; (80015a8 <HAL_I2C_MspInit+0x88>)
 8001548:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800154a:	4a17      	ldr	r2, [pc, #92]	; (80015a8 <HAL_I2C_MspInit+0x88>)
 800154c:	f043 0302 	orr.w	r3, r3, #2
 8001550:	6313      	str	r3, [r2, #48]	; 0x30
 8001552:	4b15      	ldr	r3, [pc, #84]	; (80015a8 <HAL_I2C_MspInit+0x88>)
 8001554:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001556:	f003 0302 	and.w	r3, r3, #2
 800155a:	613b      	str	r3, [r7, #16]
 800155c:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 800155e:	23c0      	movs	r3, #192	; 0xc0
 8001560:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001562:	2312      	movs	r3, #18
 8001564:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001566:	2300      	movs	r3, #0
 8001568:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800156a:	2303      	movs	r3, #3
 800156c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 800156e:	2304      	movs	r3, #4
 8001570:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001572:	f107 0314 	add.w	r3, r7, #20
 8001576:	4619      	mov	r1, r3
 8001578:	480c      	ldr	r0, [pc, #48]	; (80015ac <HAL_I2C_MspInit+0x8c>)
 800157a:	f001 fd97 	bl	80030ac <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 800157e:	2300      	movs	r3, #0
 8001580:	60fb      	str	r3, [r7, #12]
 8001582:	4b09      	ldr	r3, [pc, #36]	; (80015a8 <HAL_I2C_MspInit+0x88>)
 8001584:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001586:	4a08      	ldr	r2, [pc, #32]	; (80015a8 <HAL_I2C_MspInit+0x88>)
 8001588:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800158c:	6413      	str	r3, [r2, #64]	; 0x40
 800158e:	4b06      	ldr	r3, [pc, #24]	; (80015a8 <HAL_I2C_MspInit+0x88>)
 8001590:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001592:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001596:	60fb      	str	r3, [r7, #12]
 8001598:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 800159a:	bf00      	nop
 800159c:	3728      	adds	r7, #40	; 0x28
 800159e:	46bd      	mov	sp, r7
 80015a0:	bd80      	pop	{r7, pc}
 80015a2:	bf00      	nop
 80015a4:	40005400 	.word	0x40005400
 80015a8:	40023800 	.word	0x40023800
 80015ac:	40020400 	.word	0x40020400

080015b0 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80015b0:	b580      	push	{r7, lr}
 80015b2:	b088      	sub	sp, #32
 80015b4:	af00      	add	r7, sp, #0
 80015b6:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 80015b8:	687b      	ldr	r3, [r7, #4]
 80015ba:	681b      	ldr	r3, [r3, #0]
 80015bc:	4a8e      	ldr	r2, [pc, #568]	; (80017f8 <HAL_TIM_Base_MspInit+0x248>)
 80015be:	4293      	cmp	r3, r2
 80015c0:	d15a      	bne.n	8001678 <HAL_TIM_Base_MspInit+0xc8>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 80015c2:	2300      	movs	r3, #0
 80015c4:	61fb      	str	r3, [r7, #28]
 80015c6:	4b8d      	ldr	r3, [pc, #564]	; (80017fc <HAL_TIM_Base_MspInit+0x24c>)
 80015c8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80015ca:	4a8c      	ldr	r2, [pc, #560]	; (80017fc <HAL_TIM_Base_MspInit+0x24c>)
 80015cc:	f043 0301 	orr.w	r3, r3, #1
 80015d0:	6453      	str	r3, [r2, #68]	; 0x44
 80015d2:	4b8a      	ldr	r3, [pc, #552]	; (80017fc <HAL_TIM_Base_MspInit+0x24c>)
 80015d4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80015d6:	f003 0301 	and.w	r3, r3, #1
 80015da:	61fb      	str	r3, [r7, #28]
 80015dc:	69fb      	ldr	r3, [r7, #28]

    /* TIM1 DMA Init */
    /* TIM1_CH4_TRIG_COM Init */
    hdma_tim1_ch4_trig_com.Instance = DMA2_Stream4;
 80015de:	4b88      	ldr	r3, [pc, #544]	; (8001800 <HAL_TIM_Base_MspInit+0x250>)
 80015e0:	4a88      	ldr	r2, [pc, #544]	; (8001804 <HAL_TIM_Base_MspInit+0x254>)
 80015e2:	601a      	str	r2, [r3, #0]
    hdma_tim1_ch4_trig_com.Init.Channel = DMA_CHANNEL_6;
 80015e4:	4b86      	ldr	r3, [pc, #536]	; (8001800 <HAL_TIM_Base_MspInit+0x250>)
 80015e6:	f04f 6240 	mov.w	r2, #201326592	; 0xc000000
 80015ea:	605a      	str	r2, [r3, #4]
    hdma_tim1_ch4_trig_com.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80015ec:	4b84      	ldr	r3, [pc, #528]	; (8001800 <HAL_TIM_Base_MspInit+0x250>)
 80015ee:	2200      	movs	r2, #0
 80015f0:	609a      	str	r2, [r3, #8]
    hdma_tim1_ch4_trig_com.Init.PeriphInc = DMA_PINC_DISABLE;
 80015f2:	4b83      	ldr	r3, [pc, #524]	; (8001800 <HAL_TIM_Base_MspInit+0x250>)
 80015f4:	2200      	movs	r2, #0
 80015f6:	60da      	str	r2, [r3, #12]
    hdma_tim1_ch4_trig_com.Init.MemInc = DMA_MINC_ENABLE;
 80015f8:	4b81      	ldr	r3, [pc, #516]	; (8001800 <HAL_TIM_Base_MspInit+0x250>)
 80015fa:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80015fe:	611a      	str	r2, [r3, #16]
    hdma_tim1_ch4_trig_com.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8001600:	4b7f      	ldr	r3, [pc, #508]	; (8001800 <HAL_TIM_Base_MspInit+0x250>)
 8001602:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8001606:	615a      	str	r2, [r3, #20]
    hdma_tim1_ch4_trig_com.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8001608:	4b7d      	ldr	r3, [pc, #500]	; (8001800 <HAL_TIM_Base_MspInit+0x250>)
 800160a:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800160e:	619a      	str	r2, [r3, #24]
    hdma_tim1_ch4_trig_com.Init.Mode = DMA_NORMAL;
 8001610:	4b7b      	ldr	r3, [pc, #492]	; (8001800 <HAL_TIM_Base_MspInit+0x250>)
 8001612:	2200      	movs	r2, #0
 8001614:	61da      	str	r2, [r3, #28]
    hdma_tim1_ch4_trig_com.Init.Priority = DMA_PRIORITY_LOW;
 8001616:	4b7a      	ldr	r3, [pc, #488]	; (8001800 <HAL_TIM_Base_MspInit+0x250>)
 8001618:	2200      	movs	r2, #0
 800161a:	621a      	str	r2, [r3, #32]
    hdma_tim1_ch4_trig_com.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800161c:	4b78      	ldr	r3, [pc, #480]	; (8001800 <HAL_TIM_Base_MspInit+0x250>)
 800161e:	2200      	movs	r2, #0
 8001620:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_tim1_ch4_trig_com) != HAL_OK)
 8001622:	4877      	ldr	r0, [pc, #476]	; (8001800 <HAL_TIM_Base_MspInit+0x250>)
 8001624:	f001 fa58 	bl	8002ad8 <HAL_DMA_Init>
 8001628:	4603      	mov	r3, r0
 800162a:	2b00      	cmp	r3, #0
 800162c:	d001      	beq.n	8001632 <HAL_TIM_Base_MspInit+0x82>
    {
      Error_Handler();
 800162e:	f7ff fdb7 	bl	80011a0 <Error_Handler>
    }

    /* Several peripheral DMA handle pointers point to the same DMA handle.
     Be aware that there is only one stream to perform all the requested DMAs. */
    __HAL_LINKDMA(htim_base,hdma[TIM_DMA_ID_CC4],hdma_tim1_ch4_trig_com);
 8001632:	687b      	ldr	r3, [r7, #4]
 8001634:	4a72      	ldr	r2, [pc, #456]	; (8001800 <HAL_TIM_Base_MspInit+0x250>)
 8001636:	631a      	str	r2, [r3, #48]	; 0x30
 8001638:	4a71      	ldr	r2, [pc, #452]	; (8001800 <HAL_TIM_Base_MspInit+0x250>)
 800163a:	687b      	ldr	r3, [r7, #4]
 800163c:	6393      	str	r3, [r2, #56]	; 0x38
    __HAL_LINKDMA(htim_base,hdma[TIM_DMA_ID_TRIGGER],hdma_tim1_ch4_trig_com);
 800163e:	687b      	ldr	r3, [r7, #4]
 8001640:	4a6f      	ldr	r2, [pc, #444]	; (8001800 <HAL_TIM_Base_MspInit+0x250>)
 8001642:	639a      	str	r2, [r3, #56]	; 0x38
 8001644:	4a6e      	ldr	r2, [pc, #440]	; (8001800 <HAL_TIM_Base_MspInit+0x250>)
 8001646:	687b      	ldr	r3, [r7, #4]
 8001648:	6393      	str	r3, [r2, #56]	; 0x38
    __HAL_LINKDMA(htim_base,hdma[TIM_DMA_ID_COMMUTATION],hdma_tim1_ch4_trig_com);
 800164a:	687b      	ldr	r3, [r7, #4]
 800164c:	4a6c      	ldr	r2, [pc, #432]	; (8001800 <HAL_TIM_Base_MspInit+0x250>)
 800164e:	635a      	str	r2, [r3, #52]	; 0x34
 8001650:	4a6b      	ldr	r2, [pc, #428]	; (8001800 <HAL_TIM_Base_MspInit+0x250>)
 8001652:	687b      	ldr	r3, [r7, #4]
 8001654:	6393      	str	r3, [r2, #56]	; 0x38

    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_BRK_TIM9_IRQn, 15, 0);
 8001656:	2200      	movs	r2, #0
 8001658:	210f      	movs	r1, #15
 800165a:	2018      	movs	r0, #24
 800165c:	f001 f9f6 	bl	8002a4c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_BRK_TIM9_IRQn);
 8001660:	2018      	movs	r0, #24
 8001662:	f001 fa0f 	bl	8002a84 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, 5, 0);
 8001666:	2200      	movs	r2, #0
 8001668:	2105      	movs	r1, #5
 800166a:	2019      	movs	r0, #25
 800166c:	f001 f9ee 	bl	8002a4c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 8001670:	2019      	movs	r0, #25
 8001672:	f001 fa07 	bl	8002a84 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM8_MspInit 1 */

  /* USER CODE END TIM8_MspInit 1 */
  }

}
 8001676:	e11e      	b.n	80018b6 <HAL_TIM_Base_MspInit+0x306>
  else if(htim_base->Instance==TIM2)
 8001678:	687b      	ldr	r3, [r7, #4]
 800167a:	681b      	ldr	r3, [r3, #0]
 800167c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001680:	d14c      	bne.n	800171c <HAL_TIM_Base_MspInit+0x16c>
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001682:	2300      	movs	r3, #0
 8001684:	61bb      	str	r3, [r7, #24]
 8001686:	4b5d      	ldr	r3, [pc, #372]	; (80017fc <HAL_TIM_Base_MspInit+0x24c>)
 8001688:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800168a:	4a5c      	ldr	r2, [pc, #368]	; (80017fc <HAL_TIM_Base_MspInit+0x24c>)
 800168c:	f043 0301 	orr.w	r3, r3, #1
 8001690:	6413      	str	r3, [r2, #64]	; 0x40
 8001692:	4b5a      	ldr	r3, [pc, #360]	; (80017fc <HAL_TIM_Base_MspInit+0x24c>)
 8001694:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001696:	f003 0301 	and.w	r3, r3, #1
 800169a:	61bb      	str	r3, [r7, #24]
 800169c:	69bb      	ldr	r3, [r7, #24]
    hdma_tim2_up_ch3.Instance = DMA1_Stream1;
 800169e:	4b5a      	ldr	r3, [pc, #360]	; (8001808 <HAL_TIM_Base_MspInit+0x258>)
 80016a0:	4a5a      	ldr	r2, [pc, #360]	; (800180c <HAL_TIM_Base_MspInit+0x25c>)
 80016a2:	601a      	str	r2, [r3, #0]
    hdma_tim2_up_ch3.Init.Channel = DMA_CHANNEL_3;
 80016a4:	4b58      	ldr	r3, [pc, #352]	; (8001808 <HAL_TIM_Base_MspInit+0x258>)
 80016a6:	f04f 62c0 	mov.w	r2, #100663296	; 0x6000000
 80016aa:	605a      	str	r2, [r3, #4]
    hdma_tim2_up_ch3.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80016ac:	4b56      	ldr	r3, [pc, #344]	; (8001808 <HAL_TIM_Base_MspInit+0x258>)
 80016ae:	2200      	movs	r2, #0
 80016b0:	609a      	str	r2, [r3, #8]
    hdma_tim2_up_ch3.Init.PeriphInc = DMA_PINC_DISABLE;
 80016b2:	4b55      	ldr	r3, [pc, #340]	; (8001808 <HAL_TIM_Base_MspInit+0x258>)
 80016b4:	2200      	movs	r2, #0
 80016b6:	60da      	str	r2, [r3, #12]
    hdma_tim2_up_ch3.Init.MemInc = DMA_MINC_ENABLE;
 80016b8:	4b53      	ldr	r3, [pc, #332]	; (8001808 <HAL_TIM_Base_MspInit+0x258>)
 80016ba:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80016be:	611a      	str	r2, [r3, #16]
    hdma_tim2_up_ch3.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 80016c0:	4b51      	ldr	r3, [pc, #324]	; (8001808 <HAL_TIM_Base_MspInit+0x258>)
 80016c2:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80016c6:	615a      	str	r2, [r3, #20]
    hdma_tim2_up_ch3.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 80016c8:	4b4f      	ldr	r3, [pc, #316]	; (8001808 <HAL_TIM_Base_MspInit+0x258>)
 80016ca:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80016ce:	619a      	str	r2, [r3, #24]
    hdma_tim2_up_ch3.Init.Mode = DMA_NORMAL;
 80016d0:	4b4d      	ldr	r3, [pc, #308]	; (8001808 <HAL_TIM_Base_MspInit+0x258>)
 80016d2:	2200      	movs	r2, #0
 80016d4:	61da      	str	r2, [r3, #28]
    hdma_tim2_up_ch3.Init.Priority = DMA_PRIORITY_LOW;
 80016d6:	4b4c      	ldr	r3, [pc, #304]	; (8001808 <HAL_TIM_Base_MspInit+0x258>)
 80016d8:	2200      	movs	r2, #0
 80016da:	621a      	str	r2, [r3, #32]
    hdma_tim2_up_ch3.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80016dc:	4b4a      	ldr	r3, [pc, #296]	; (8001808 <HAL_TIM_Base_MspInit+0x258>)
 80016de:	2200      	movs	r2, #0
 80016e0:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_tim2_up_ch3) != HAL_OK)
 80016e2:	4849      	ldr	r0, [pc, #292]	; (8001808 <HAL_TIM_Base_MspInit+0x258>)
 80016e4:	f001 f9f8 	bl	8002ad8 <HAL_DMA_Init>
 80016e8:	4603      	mov	r3, r0
 80016ea:	2b00      	cmp	r3, #0
 80016ec:	d001      	beq.n	80016f2 <HAL_TIM_Base_MspInit+0x142>
      Error_Handler();
 80016ee:	f7ff fd57 	bl	80011a0 <Error_Handler>
    __HAL_LINKDMA(htim_base,hdma[TIM_DMA_ID_UPDATE],hdma_tim2_up_ch3);
 80016f2:	687b      	ldr	r3, [r7, #4]
 80016f4:	4a44      	ldr	r2, [pc, #272]	; (8001808 <HAL_TIM_Base_MspInit+0x258>)
 80016f6:	621a      	str	r2, [r3, #32]
 80016f8:	4a43      	ldr	r2, [pc, #268]	; (8001808 <HAL_TIM_Base_MspInit+0x258>)
 80016fa:	687b      	ldr	r3, [r7, #4]
 80016fc:	6393      	str	r3, [r2, #56]	; 0x38
    __HAL_LINKDMA(htim_base,hdma[TIM_DMA_ID_CC3],hdma_tim2_up_ch3);
 80016fe:	687b      	ldr	r3, [r7, #4]
 8001700:	4a41      	ldr	r2, [pc, #260]	; (8001808 <HAL_TIM_Base_MspInit+0x258>)
 8001702:	62da      	str	r2, [r3, #44]	; 0x2c
 8001704:	4a40      	ldr	r2, [pc, #256]	; (8001808 <HAL_TIM_Base_MspInit+0x258>)
 8001706:	687b      	ldr	r3, [r7, #4]
 8001708:	6393      	str	r3, [r2, #56]	; 0x38
    HAL_NVIC_SetPriority(TIM2_IRQn, 5, 0);
 800170a:	2200      	movs	r2, #0
 800170c:	2105      	movs	r1, #5
 800170e:	201c      	movs	r0, #28
 8001710:	f001 f99c 	bl	8002a4c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8001714:	201c      	movs	r0, #28
 8001716:	f001 f9b5 	bl	8002a84 <HAL_NVIC_EnableIRQ>
}
 800171a:	e0cc      	b.n	80018b6 <HAL_TIM_Base_MspInit+0x306>
  else if(htim_base->Instance==TIM3)
 800171c:	687b      	ldr	r3, [r7, #4]
 800171e:	681b      	ldr	r3, [r3, #0]
 8001720:	4a3b      	ldr	r2, [pc, #236]	; (8001810 <HAL_TIM_Base_MspInit+0x260>)
 8001722:	4293      	cmp	r3, r2
 8001724:	d14c      	bne.n	80017c0 <HAL_TIM_Base_MspInit+0x210>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8001726:	2300      	movs	r3, #0
 8001728:	617b      	str	r3, [r7, #20]
 800172a:	4b34      	ldr	r3, [pc, #208]	; (80017fc <HAL_TIM_Base_MspInit+0x24c>)
 800172c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800172e:	4a33      	ldr	r2, [pc, #204]	; (80017fc <HAL_TIM_Base_MspInit+0x24c>)
 8001730:	f043 0302 	orr.w	r3, r3, #2
 8001734:	6413      	str	r3, [r2, #64]	; 0x40
 8001736:	4b31      	ldr	r3, [pc, #196]	; (80017fc <HAL_TIM_Base_MspInit+0x24c>)
 8001738:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800173a:	f003 0302 	and.w	r3, r3, #2
 800173e:	617b      	str	r3, [r7, #20]
 8001740:	697b      	ldr	r3, [r7, #20]
    hdma_tim3_ch4_up.Instance = DMA1_Stream2;
 8001742:	4b34      	ldr	r3, [pc, #208]	; (8001814 <HAL_TIM_Base_MspInit+0x264>)
 8001744:	4a34      	ldr	r2, [pc, #208]	; (8001818 <HAL_TIM_Base_MspInit+0x268>)
 8001746:	601a      	str	r2, [r3, #0]
    hdma_tim3_ch4_up.Init.Channel = DMA_CHANNEL_5;
 8001748:	4b32      	ldr	r3, [pc, #200]	; (8001814 <HAL_TIM_Base_MspInit+0x264>)
 800174a:	f04f 6220 	mov.w	r2, #167772160	; 0xa000000
 800174e:	605a      	str	r2, [r3, #4]
    hdma_tim3_ch4_up.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001750:	4b30      	ldr	r3, [pc, #192]	; (8001814 <HAL_TIM_Base_MspInit+0x264>)
 8001752:	2200      	movs	r2, #0
 8001754:	609a      	str	r2, [r3, #8]
    hdma_tim3_ch4_up.Init.PeriphInc = DMA_PINC_DISABLE;
 8001756:	4b2f      	ldr	r3, [pc, #188]	; (8001814 <HAL_TIM_Base_MspInit+0x264>)
 8001758:	2200      	movs	r2, #0
 800175a:	60da      	str	r2, [r3, #12]
    hdma_tim3_ch4_up.Init.MemInc = DMA_MINC_ENABLE;
 800175c:	4b2d      	ldr	r3, [pc, #180]	; (8001814 <HAL_TIM_Base_MspInit+0x264>)
 800175e:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001762:	611a      	str	r2, [r3, #16]
    hdma_tim3_ch4_up.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8001764:	4b2b      	ldr	r3, [pc, #172]	; (8001814 <HAL_TIM_Base_MspInit+0x264>)
 8001766:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800176a:	615a      	str	r2, [r3, #20]
    hdma_tim3_ch4_up.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 800176c:	4b29      	ldr	r3, [pc, #164]	; (8001814 <HAL_TIM_Base_MspInit+0x264>)
 800176e:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001772:	619a      	str	r2, [r3, #24]
    hdma_tim3_ch4_up.Init.Mode = DMA_NORMAL;
 8001774:	4b27      	ldr	r3, [pc, #156]	; (8001814 <HAL_TIM_Base_MspInit+0x264>)
 8001776:	2200      	movs	r2, #0
 8001778:	61da      	str	r2, [r3, #28]
    hdma_tim3_ch4_up.Init.Priority = DMA_PRIORITY_LOW;
 800177a:	4b26      	ldr	r3, [pc, #152]	; (8001814 <HAL_TIM_Base_MspInit+0x264>)
 800177c:	2200      	movs	r2, #0
 800177e:	621a      	str	r2, [r3, #32]
    hdma_tim3_ch4_up.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001780:	4b24      	ldr	r3, [pc, #144]	; (8001814 <HAL_TIM_Base_MspInit+0x264>)
 8001782:	2200      	movs	r2, #0
 8001784:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_tim3_ch4_up) != HAL_OK)
 8001786:	4823      	ldr	r0, [pc, #140]	; (8001814 <HAL_TIM_Base_MspInit+0x264>)
 8001788:	f001 f9a6 	bl	8002ad8 <HAL_DMA_Init>
 800178c:	4603      	mov	r3, r0
 800178e:	2b00      	cmp	r3, #0
 8001790:	d001      	beq.n	8001796 <HAL_TIM_Base_MspInit+0x1e6>
      Error_Handler();
 8001792:	f7ff fd05 	bl	80011a0 <Error_Handler>
    __HAL_LINKDMA(htim_base,hdma[TIM_DMA_ID_CC4],hdma_tim3_ch4_up);
 8001796:	687b      	ldr	r3, [r7, #4]
 8001798:	4a1e      	ldr	r2, [pc, #120]	; (8001814 <HAL_TIM_Base_MspInit+0x264>)
 800179a:	631a      	str	r2, [r3, #48]	; 0x30
 800179c:	4a1d      	ldr	r2, [pc, #116]	; (8001814 <HAL_TIM_Base_MspInit+0x264>)
 800179e:	687b      	ldr	r3, [r7, #4]
 80017a0:	6393      	str	r3, [r2, #56]	; 0x38
    __HAL_LINKDMA(htim_base,hdma[TIM_DMA_ID_UPDATE],hdma_tim3_ch4_up);
 80017a2:	687b      	ldr	r3, [r7, #4]
 80017a4:	4a1b      	ldr	r2, [pc, #108]	; (8001814 <HAL_TIM_Base_MspInit+0x264>)
 80017a6:	621a      	str	r2, [r3, #32]
 80017a8:	4a1a      	ldr	r2, [pc, #104]	; (8001814 <HAL_TIM_Base_MspInit+0x264>)
 80017aa:	687b      	ldr	r3, [r7, #4]
 80017ac:	6393      	str	r3, [r2, #56]	; 0x38
    HAL_NVIC_SetPriority(TIM3_IRQn, 5, 0);
 80017ae:	2200      	movs	r2, #0
 80017b0:	2105      	movs	r1, #5
 80017b2:	201d      	movs	r0, #29
 80017b4:	f001 f94a 	bl	8002a4c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 80017b8:	201d      	movs	r0, #29
 80017ba:	f001 f963 	bl	8002a84 <HAL_NVIC_EnableIRQ>
}
 80017be:	e07a      	b.n	80018b6 <HAL_TIM_Base_MspInit+0x306>
  else if(htim_base->Instance==TIM6)
 80017c0:	687b      	ldr	r3, [r7, #4]
 80017c2:	681b      	ldr	r3, [r3, #0]
 80017c4:	4a15      	ldr	r2, [pc, #84]	; (800181c <HAL_TIM_Base_MspInit+0x26c>)
 80017c6:	4293      	cmp	r3, r2
 80017c8:	d12a      	bne.n	8001820 <HAL_TIM_Base_MspInit+0x270>
    __HAL_RCC_TIM6_CLK_ENABLE();
 80017ca:	2300      	movs	r3, #0
 80017cc:	613b      	str	r3, [r7, #16]
 80017ce:	4b0b      	ldr	r3, [pc, #44]	; (80017fc <HAL_TIM_Base_MspInit+0x24c>)
 80017d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80017d2:	4a0a      	ldr	r2, [pc, #40]	; (80017fc <HAL_TIM_Base_MspInit+0x24c>)
 80017d4:	f043 0310 	orr.w	r3, r3, #16
 80017d8:	6413      	str	r3, [r2, #64]	; 0x40
 80017da:	4b08      	ldr	r3, [pc, #32]	; (80017fc <HAL_TIM_Base_MspInit+0x24c>)
 80017dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80017de:	f003 0310 	and.w	r3, r3, #16
 80017e2:	613b      	str	r3, [r7, #16]
 80017e4:	693b      	ldr	r3, [r7, #16]
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 5, 0);
 80017e6:	2200      	movs	r2, #0
 80017e8:	2105      	movs	r1, #5
 80017ea:	2036      	movs	r0, #54	; 0x36
 80017ec:	f001 f92e 	bl	8002a4c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 80017f0:	2036      	movs	r0, #54	; 0x36
 80017f2:	f001 f947 	bl	8002a84 <HAL_NVIC_EnableIRQ>
}
 80017f6:	e05e      	b.n	80018b6 <HAL_TIM_Base_MspInit+0x306>
 80017f8:	40010000 	.word	0x40010000
 80017fc:	40023800 	.word	0x40023800
 8001800:	200004a8 	.word	0x200004a8
 8001804:	40026470 	.word	0x40026470
 8001808:	20000508 	.word	0x20000508
 800180c:	40026028 	.word	0x40026028
 8001810:	40000400 	.word	0x40000400
 8001814:	20000568 	.word	0x20000568
 8001818:	40026040 	.word	0x40026040
 800181c:	40001000 	.word	0x40001000
  else if(htim_base->Instance==TIM8)
 8001820:	687b      	ldr	r3, [r7, #4]
 8001822:	681b      	ldr	r3, [r3, #0]
 8001824:	4a26      	ldr	r2, [pc, #152]	; (80018c0 <HAL_TIM_Base_MspInit+0x310>)
 8001826:	4293      	cmp	r3, r2
 8001828:	d145      	bne.n	80018b6 <HAL_TIM_Base_MspInit+0x306>
    __HAL_RCC_TIM8_CLK_ENABLE();
 800182a:	2300      	movs	r3, #0
 800182c:	60fb      	str	r3, [r7, #12]
 800182e:	4b25      	ldr	r3, [pc, #148]	; (80018c4 <HAL_TIM_Base_MspInit+0x314>)
 8001830:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001832:	4a24      	ldr	r2, [pc, #144]	; (80018c4 <HAL_TIM_Base_MspInit+0x314>)
 8001834:	f043 0302 	orr.w	r3, r3, #2
 8001838:	6453      	str	r3, [r2, #68]	; 0x44
 800183a:	4b22      	ldr	r3, [pc, #136]	; (80018c4 <HAL_TIM_Base_MspInit+0x314>)
 800183c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800183e:	f003 0302 	and.w	r3, r3, #2
 8001842:	60fb      	str	r3, [r7, #12]
 8001844:	68fb      	ldr	r3, [r7, #12]
    hdma_tim8_ch2.Instance = DMA2_Stream3;
 8001846:	4b20      	ldr	r3, [pc, #128]	; (80018c8 <HAL_TIM_Base_MspInit+0x318>)
 8001848:	4a20      	ldr	r2, [pc, #128]	; (80018cc <HAL_TIM_Base_MspInit+0x31c>)
 800184a:	601a      	str	r2, [r3, #0]
    hdma_tim8_ch2.Init.Channel = DMA_CHANNEL_7;
 800184c:	4b1e      	ldr	r3, [pc, #120]	; (80018c8 <HAL_TIM_Base_MspInit+0x318>)
 800184e:	f04f 6260 	mov.w	r2, #234881024	; 0xe000000
 8001852:	605a      	str	r2, [r3, #4]
    hdma_tim8_ch2.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001854:	4b1c      	ldr	r3, [pc, #112]	; (80018c8 <HAL_TIM_Base_MspInit+0x318>)
 8001856:	2200      	movs	r2, #0
 8001858:	609a      	str	r2, [r3, #8]
    hdma_tim8_ch2.Init.PeriphInc = DMA_PINC_DISABLE;
 800185a:	4b1b      	ldr	r3, [pc, #108]	; (80018c8 <HAL_TIM_Base_MspInit+0x318>)
 800185c:	2200      	movs	r2, #0
 800185e:	60da      	str	r2, [r3, #12]
    hdma_tim8_ch2.Init.MemInc = DMA_MINC_ENABLE;
 8001860:	4b19      	ldr	r3, [pc, #100]	; (80018c8 <HAL_TIM_Base_MspInit+0x318>)
 8001862:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001866:	611a      	str	r2, [r3, #16]
    hdma_tim8_ch2.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8001868:	4b17      	ldr	r3, [pc, #92]	; (80018c8 <HAL_TIM_Base_MspInit+0x318>)
 800186a:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800186e:	615a      	str	r2, [r3, #20]
    hdma_tim8_ch2.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8001870:	4b15      	ldr	r3, [pc, #84]	; (80018c8 <HAL_TIM_Base_MspInit+0x318>)
 8001872:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001876:	619a      	str	r2, [r3, #24]
    hdma_tim8_ch2.Init.Mode = DMA_NORMAL;
 8001878:	4b13      	ldr	r3, [pc, #76]	; (80018c8 <HAL_TIM_Base_MspInit+0x318>)
 800187a:	2200      	movs	r2, #0
 800187c:	61da      	str	r2, [r3, #28]
    hdma_tim8_ch2.Init.Priority = DMA_PRIORITY_LOW;
 800187e:	4b12      	ldr	r3, [pc, #72]	; (80018c8 <HAL_TIM_Base_MspInit+0x318>)
 8001880:	2200      	movs	r2, #0
 8001882:	621a      	str	r2, [r3, #32]
    hdma_tim8_ch2.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001884:	4b10      	ldr	r3, [pc, #64]	; (80018c8 <HAL_TIM_Base_MspInit+0x318>)
 8001886:	2200      	movs	r2, #0
 8001888:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_tim8_ch2) != HAL_OK)
 800188a:	480f      	ldr	r0, [pc, #60]	; (80018c8 <HAL_TIM_Base_MspInit+0x318>)
 800188c:	f001 f924 	bl	8002ad8 <HAL_DMA_Init>
 8001890:	4603      	mov	r3, r0
 8001892:	2b00      	cmp	r3, #0
 8001894:	d001      	beq.n	800189a <HAL_TIM_Base_MspInit+0x2ea>
      Error_Handler();
 8001896:	f7ff fc83 	bl	80011a0 <Error_Handler>
    __HAL_LINKDMA(htim_base,hdma[TIM_DMA_ID_CC2],hdma_tim8_ch2);
 800189a:	687b      	ldr	r3, [r7, #4]
 800189c:	4a0a      	ldr	r2, [pc, #40]	; (80018c8 <HAL_TIM_Base_MspInit+0x318>)
 800189e:	629a      	str	r2, [r3, #40]	; 0x28
 80018a0:	4a09      	ldr	r2, [pc, #36]	; (80018c8 <HAL_TIM_Base_MspInit+0x318>)
 80018a2:	687b      	ldr	r3, [r7, #4]
 80018a4:	6393      	str	r3, [r2, #56]	; 0x38
    HAL_NVIC_SetPriority(TIM8_UP_TIM13_IRQn, 5, 0);
 80018a6:	2200      	movs	r2, #0
 80018a8:	2105      	movs	r1, #5
 80018aa:	202c      	movs	r0, #44	; 0x2c
 80018ac:	f001 f8ce 	bl	8002a4c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM8_UP_TIM13_IRQn);
 80018b0:	202c      	movs	r0, #44	; 0x2c
 80018b2:	f001 f8e7 	bl	8002a84 <HAL_NVIC_EnableIRQ>
}
 80018b6:	bf00      	nop
 80018b8:	3720      	adds	r7, #32
 80018ba:	46bd      	mov	sp, r7
 80018bc:	bd80      	pop	{r7, pc}
 80018be:	bf00      	nop
 80018c0:	40010400 	.word	0x40010400
 80018c4:	40023800 	.word	0x40023800
 80018c8:	200005c8 	.word	0x200005c8
 80018cc:	40026458 	.word	0x40026458

080018d0 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 80018d0:	b580      	push	{r7, lr}
 80018d2:	b08c      	sub	sp, #48	; 0x30
 80018d4:	af00      	add	r7, sp, #0
 80018d6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80018d8:	f107 031c 	add.w	r3, r7, #28
 80018dc:	2200      	movs	r2, #0
 80018de:	601a      	str	r2, [r3, #0]
 80018e0:	605a      	str	r2, [r3, #4]
 80018e2:	609a      	str	r2, [r3, #8]
 80018e4:	60da      	str	r2, [r3, #12]
 80018e6:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 80018e8:	687b      	ldr	r3, [r7, #4]
 80018ea:	681b      	ldr	r3, [r3, #0]
 80018ec:	4a49      	ldr	r2, [pc, #292]	; (8001a14 <HAL_TIM_MspPostInit+0x144>)
 80018ee:	4293      	cmp	r3, r2
 80018f0:	d11f      	bne.n	8001932 <HAL_TIM_MspPostInit+0x62>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOE_CLK_ENABLE();
 80018f2:	2300      	movs	r3, #0
 80018f4:	61bb      	str	r3, [r7, #24]
 80018f6:	4b48      	ldr	r3, [pc, #288]	; (8001a18 <HAL_TIM_MspPostInit+0x148>)
 80018f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018fa:	4a47      	ldr	r2, [pc, #284]	; (8001a18 <HAL_TIM_MspPostInit+0x148>)
 80018fc:	f043 0310 	orr.w	r3, r3, #16
 8001900:	6313      	str	r3, [r2, #48]	; 0x30
 8001902:	4b45      	ldr	r3, [pc, #276]	; (8001a18 <HAL_TIM_MspPostInit+0x148>)
 8001904:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001906:	f003 0310 	and.w	r3, r3, #16
 800190a:	61bb      	str	r3, [r7, #24]
 800190c:	69bb      	ldr	r3, [r7, #24]
    /**TIM1 GPIO Configuration
    PE14     ------> TIM1_CH4
    */
    GPIO_InitStruct.Pin = OUTPUT4_Pin;
 800190e:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8001912:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001914:	2312      	movs	r3, #18
 8001916:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001918:	2300      	movs	r3, #0
 800191a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800191c:	2300      	movs	r3, #0
 800191e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8001920:	2301      	movs	r3, #1
 8001922:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(OUTPUT4_GPIO_Port, &GPIO_InitStruct);
 8001924:	f107 031c 	add.w	r3, r7, #28
 8001928:	4619      	mov	r1, r3
 800192a:	483c      	ldr	r0, [pc, #240]	; (8001a1c <HAL_TIM_MspPostInit+0x14c>)
 800192c:	f001 fbbe 	bl	80030ac <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM8_MspPostInit 1 */

  /* USER CODE END TIM8_MspPostInit 1 */
  }

}
 8001930:	e06b      	b.n	8001a0a <HAL_TIM_MspPostInit+0x13a>
  else if(htim->Instance==TIM2)
 8001932:	687b      	ldr	r3, [r7, #4]
 8001934:	681b      	ldr	r3, [r3, #0]
 8001936:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800193a:	d11f      	bne.n	800197c <HAL_TIM_MspPostInit+0xac>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800193c:	2300      	movs	r3, #0
 800193e:	617b      	str	r3, [r7, #20]
 8001940:	4b35      	ldr	r3, [pc, #212]	; (8001a18 <HAL_TIM_MspPostInit+0x148>)
 8001942:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001944:	4a34      	ldr	r2, [pc, #208]	; (8001a18 <HAL_TIM_MspPostInit+0x148>)
 8001946:	f043 0302 	orr.w	r3, r3, #2
 800194a:	6313      	str	r3, [r2, #48]	; 0x30
 800194c:	4b32      	ldr	r3, [pc, #200]	; (8001a18 <HAL_TIM_MspPostInit+0x148>)
 800194e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001950:	f003 0302 	and.w	r3, r3, #2
 8001954:	617b      	str	r3, [r7, #20]
 8001956:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = OUTPUT3_Pin;
 8001958:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800195c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800195e:	2312      	movs	r3, #18
 8001960:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001962:	2300      	movs	r3, #0
 8001964:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001966:	2300      	movs	r3, #0
 8001968:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 800196a:	2301      	movs	r3, #1
 800196c:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(OUTPUT3_GPIO_Port, &GPIO_InitStruct);
 800196e:	f107 031c 	add.w	r3, r7, #28
 8001972:	4619      	mov	r1, r3
 8001974:	482a      	ldr	r0, [pc, #168]	; (8001a20 <HAL_TIM_MspPostInit+0x150>)
 8001976:	f001 fb99 	bl	80030ac <HAL_GPIO_Init>
}
 800197a:	e046      	b.n	8001a0a <HAL_TIM_MspPostInit+0x13a>
  else if(htim->Instance==TIM3)
 800197c:	687b      	ldr	r3, [r7, #4]
 800197e:	681b      	ldr	r3, [r3, #0]
 8001980:	4a28      	ldr	r2, [pc, #160]	; (8001a24 <HAL_TIM_MspPostInit+0x154>)
 8001982:	4293      	cmp	r3, r2
 8001984:	d11e      	bne.n	80019c4 <HAL_TIM_MspPostInit+0xf4>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001986:	2300      	movs	r3, #0
 8001988:	613b      	str	r3, [r7, #16]
 800198a:	4b23      	ldr	r3, [pc, #140]	; (8001a18 <HAL_TIM_MspPostInit+0x148>)
 800198c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800198e:	4a22      	ldr	r2, [pc, #136]	; (8001a18 <HAL_TIM_MspPostInit+0x148>)
 8001990:	f043 0302 	orr.w	r3, r3, #2
 8001994:	6313      	str	r3, [r2, #48]	; 0x30
 8001996:	4b20      	ldr	r3, [pc, #128]	; (8001a18 <HAL_TIM_MspPostInit+0x148>)
 8001998:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800199a:	f003 0302 	and.w	r3, r3, #2
 800199e:	613b      	str	r3, [r7, #16]
 80019a0:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = OUTPUT1_Pin;
 80019a2:	2302      	movs	r3, #2
 80019a4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80019a6:	2312      	movs	r3, #18
 80019a8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019aa:	2300      	movs	r3, #0
 80019ac:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80019ae:	2300      	movs	r3, #0
 80019b0:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 80019b2:	2302      	movs	r3, #2
 80019b4:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(OUTPUT1_GPIO_Port, &GPIO_InitStruct);
 80019b6:	f107 031c 	add.w	r3, r7, #28
 80019ba:	4619      	mov	r1, r3
 80019bc:	4818      	ldr	r0, [pc, #96]	; (8001a20 <HAL_TIM_MspPostInit+0x150>)
 80019be:	f001 fb75 	bl	80030ac <HAL_GPIO_Init>
}
 80019c2:	e022      	b.n	8001a0a <HAL_TIM_MspPostInit+0x13a>
  else if(htim->Instance==TIM8)
 80019c4:	687b      	ldr	r3, [r7, #4]
 80019c6:	681b      	ldr	r3, [r3, #0]
 80019c8:	4a17      	ldr	r2, [pc, #92]	; (8001a28 <HAL_TIM_MspPostInit+0x158>)
 80019ca:	4293      	cmp	r3, r2
 80019cc:	d11d      	bne.n	8001a0a <HAL_TIM_MspPostInit+0x13a>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80019ce:	2300      	movs	r3, #0
 80019d0:	60fb      	str	r3, [r7, #12]
 80019d2:	4b11      	ldr	r3, [pc, #68]	; (8001a18 <HAL_TIM_MspPostInit+0x148>)
 80019d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80019d6:	4a10      	ldr	r2, [pc, #64]	; (8001a18 <HAL_TIM_MspPostInit+0x148>)
 80019d8:	f043 0302 	orr.w	r3, r3, #2
 80019dc:	6313      	str	r3, [r2, #48]	; 0x30
 80019de:	4b0e      	ldr	r3, [pc, #56]	; (8001a18 <HAL_TIM_MspPostInit+0x148>)
 80019e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80019e2:	f003 0302 	and.w	r3, r3, #2
 80019e6:	60fb      	str	r3, [r7, #12]
 80019e8:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = OUTPUT2_Pin;
 80019ea:	2301      	movs	r3, #1
 80019ec:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80019ee:	2312      	movs	r3, #18
 80019f0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019f2:	2300      	movs	r3, #0
 80019f4:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80019f6:	2300      	movs	r3, #0
 80019f8:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM8;
 80019fa:	2303      	movs	r3, #3
 80019fc:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(OUTPUT2_GPIO_Port, &GPIO_InitStruct);
 80019fe:	f107 031c 	add.w	r3, r7, #28
 8001a02:	4619      	mov	r1, r3
 8001a04:	4806      	ldr	r0, [pc, #24]	; (8001a20 <HAL_TIM_MspPostInit+0x150>)
 8001a06:	f001 fb51 	bl	80030ac <HAL_GPIO_Init>
}
 8001a0a:	bf00      	nop
 8001a0c:	3730      	adds	r7, #48	; 0x30
 8001a0e:	46bd      	mov	sp, r7
 8001a10:	bd80      	pop	{r7, pc}
 8001a12:	bf00      	nop
 8001a14:	40010000 	.word	0x40010000
 8001a18:	40023800 	.word	0x40023800
 8001a1c:	40021000 	.word	0x40021000
 8001a20:	40020400 	.word	0x40020400
 8001a24:	40000400 	.word	0x40000400
 8001a28:	40010400 	.word	0x40010400

08001a2c <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001a2c:	b580      	push	{r7, lr}
 8001a2e:	b08c      	sub	sp, #48	; 0x30
 8001a30:	af00      	add	r7, sp, #0
 8001a32:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0U;
 8001a34:	2300      	movs	r3, #0
 8001a36:	62bb      	str	r3, [r7, #40]	; 0x28

  uint32_t              uwPrescalerValue = 0U;
 8001a38:	2300      	movs	r3, #0
 8001a3a:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM9 clock */
  __HAL_RCC_TIM9_CLK_ENABLE();
 8001a3c:	2300      	movs	r3, #0
 8001a3e:	60bb      	str	r3, [r7, #8]
 8001a40:	4b2f      	ldr	r3, [pc, #188]	; (8001b00 <HAL_InitTick+0xd4>)
 8001a42:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001a44:	4a2e      	ldr	r2, [pc, #184]	; (8001b00 <HAL_InitTick+0xd4>)
 8001a46:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001a4a:	6453      	str	r3, [r2, #68]	; 0x44
 8001a4c:	4b2c      	ldr	r3, [pc, #176]	; (8001b00 <HAL_InitTick+0xd4>)
 8001a4e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001a50:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001a54:	60bb      	str	r3, [r7, #8]
 8001a56:	68bb      	ldr	r3, [r7, #8]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8001a58:	f107 020c 	add.w	r2, r7, #12
 8001a5c:	f107 0310 	add.w	r3, r7, #16
 8001a60:	4611      	mov	r1, r2
 8001a62:	4618      	mov	r0, r3
 8001a64:	f003 fa26 	bl	8004eb4 <HAL_RCC_GetClockConfig>

  /* Compute TIM9 clock */
      uwTimclock = 2*HAL_RCC_GetPCLK2Freq();
 8001a68:	f003 fa10 	bl	8004e8c <HAL_RCC_GetPCLK2Freq>
 8001a6c:	4603      	mov	r3, r0
 8001a6e:	005b      	lsls	r3, r3, #1
 8001a70:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Compute the prescaler value to have TIM9 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8001a72:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001a74:	4a23      	ldr	r2, [pc, #140]	; (8001b04 <HAL_InitTick+0xd8>)
 8001a76:	fba2 2303 	umull	r2, r3, r2, r3
 8001a7a:	0c9b      	lsrs	r3, r3, #18
 8001a7c:	3b01      	subs	r3, #1
 8001a7e:	627b      	str	r3, [r7, #36]	; 0x24

  /* Initialize TIM9 */
  htim9.Instance = TIM9;
 8001a80:	4b21      	ldr	r3, [pc, #132]	; (8001b08 <HAL_InitTick+0xdc>)
 8001a82:	4a22      	ldr	r2, [pc, #136]	; (8001b0c <HAL_InitTick+0xe0>)
 8001a84:	601a      	str	r2, [r3, #0]
  + Period = [(TIM9CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim9.Init.Period = (1000000U / 1000U) - 1U;
 8001a86:	4b20      	ldr	r3, [pc, #128]	; (8001b08 <HAL_InitTick+0xdc>)
 8001a88:	f240 32e7 	movw	r2, #999	; 0x3e7
 8001a8c:	60da      	str	r2, [r3, #12]
  htim9.Init.Prescaler = uwPrescalerValue;
 8001a8e:	4a1e      	ldr	r2, [pc, #120]	; (8001b08 <HAL_InitTick+0xdc>)
 8001a90:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a92:	6053      	str	r3, [r2, #4]
  htim9.Init.ClockDivision = 0;
 8001a94:	4b1c      	ldr	r3, [pc, #112]	; (8001b08 <HAL_InitTick+0xdc>)
 8001a96:	2200      	movs	r2, #0
 8001a98:	611a      	str	r2, [r3, #16]
  htim9.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001a9a:	4b1b      	ldr	r3, [pc, #108]	; (8001b08 <HAL_InitTick+0xdc>)
 8001a9c:	2200      	movs	r2, #0
 8001a9e:	609a      	str	r2, [r3, #8]
  htim9.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001aa0:	4b19      	ldr	r3, [pc, #100]	; (8001b08 <HAL_InitTick+0xdc>)
 8001aa2:	2200      	movs	r2, #0
 8001aa4:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim9);
 8001aa6:	4818      	ldr	r0, [pc, #96]	; (8001b08 <HAL_InitTick+0xdc>)
 8001aa8:	f004 fa2e 	bl	8005f08 <HAL_TIM_Base_Init>
 8001aac:	4603      	mov	r3, r0
 8001aae:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  if (status == HAL_OK)
 8001ab2:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8001ab6:	2b00      	cmp	r3, #0
 8001ab8:	d11b      	bne.n	8001af2 <HAL_InitTick+0xc6>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim9);
 8001aba:	4813      	ldr	r0, [pc, #76]	; (8001b08 <HAL_InitTick+0xdc>)
 8001abc:	f004 fa74 	bl	8005fa8 <HAL_TIM_Base_Start_IT>
 8001ac0:	4603      	mov	r3, r0
 8001ac2:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    if (status == HAL_OK)
 8001ac6:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8001aca:	2b00      	cmp	r3, #0
 8001acc:	d111      	bne.n	8001af2 <HAL_InitTick+0xc6>
    {
    /* Enable the TIM9 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM1_BRK_TIM9_IRQn);
 8001ace:	2018      	movs	r0, #24
 8001ad0:	f000 ffd8 	bl	8002a84 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001ad4:	687b      	ldr	r3, [r7, #4]
 8001ad6:	2b0f      	cmp	r3, #15
 8001ad8:	d808      	bhi.n	8001aec <HAL_InitTick+0xc0>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM1_BRK_TIM9_IRQn, TickPriority, 0U);
 8001ada:	2200      	movs	r2, #0
 8001adc:	6879      	ldr	r1, [r7, #4]
 8001ade:	2018      	movs	r0, #24
 8001ae0:	f000 ffb4 	bl	8002a4c <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001ae4:	4a0a      	ldr	r2, [pc, #40]	; (8001b10 <HAL_InitTick+0xe4>)
 8001ae6:	687b      	ldr	r3, [r7, #4]
 8001ae8:	6013      	str	r3, [r2, #0]
 8001aea:	e002      	b.n	8001af2 <HAL_InitTick+0xc6>
      }
      else
      {
        status = HAL_ERROR;
 8001aec:	2301      	movs	r3, #1
 8001aee:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
      }
    }
  }

 /* Return function status */
  return status;
 8001af2:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 8001af6:	4618      	mov	r0, r3
 8001af8:	3730      	adds	r7, #48	; 0x30
 8001afa:	46bd      	mov	sp, r7
 8001afc:	bd80      	pop	{r7, pc}
 8001afe:	bf00      	nop
 8001b00:	40023800 	.word	0x40023800
 8001b04:	431bde83 	.word	0x431bde83
 8001b08:	20000640 	.word	0x20000640
 8001b0c:	40014000 	.word	0x40014000
 8001b10:	20000004 	.word	0x20000004

08001b14 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001b14:	b480      	push	{r7}
 8001b16:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001b18:	e7fe      	b.n	8001b18 <NMI_Handler+0x4>

08001b1a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001b1a:	b480      	push	{r7}
 8001b1c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001b1e:	e7fe      	b.n	8001b1e <HardFault_Handler+0x4>

08001b20 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001b20:	b480      	push	{r7}
 8001b22:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001b24:	e7fe      	b.n	8001b24 <MemManage_Handler+0x4>

08001b26 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001b26:	b480      	push	{r7}
 8001b28:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001b2a:	e7fe      	b.n	8001b2a <BusFault_Handler+0x4>

08001b2c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001b2c:	b480      	push	{r7}
 8001b2e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001b30:	e7fe      	b.n	8001b30 <UsageFault_Handler+0x4>

08001b32 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001b32:	b480      	push	{r7}
 8001b34:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001b36:	bf00      	nop
 8001b38:	46bd      	mov	sp, r7
 8001b3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b3e:	4770      	bx	lr

08001b40 <DMA1_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA1 stream1 global interrupt.
  */
void DMA1_Stream1_IRQHandler(void)
{
 8001b40:	b580      	push	{r7, lr}
 8001b42:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream1_IRQn 0 */

  /* USER CODE END DMA1_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_tim2_up_ch3);
 8001b44:	4802      	ldr	r0, [pc, #8]	; (8001b50 <DMA1_Stream1_IRQHandler+0x10>)
 8001b46:	f001 f875 	bl	8002c34 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream1_IRQn 1 */

  /* USER CODE END DMA1_Stream1_IRQn 1 */
}
 8001b4a:	bf00      	nop
 8001b4c:	bd80      	pop	{r7, pc}
 8001b4e:	bf00      	nop
 8001b50:	20000508 	.word	0x20000508

08001b54 <DMA1_Stream2_IRQHandler>:

/**
  * @brief This function handles DMA1 stream2 global interrupt.
  */
void DMA1_Stream2_IRQHandler(void)
{
 8001b54:	b580      	push	{r7, lr}
 8001b56:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream2_IRQn 0 */

  /* USER CODE END DMA1_Stream2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_tim3_ch4_up);
 8001b58:	4802      	ldr	r0, [pc, #8]	; (8001b64 <DMA1_Stream2_IRQHandler+0x10>)
 8001b5a:	f001 f86b 	bl	8002c34 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream2_IRQn 1 */

  /* USER CODE END DMA1_Stream2_IRQn 1 */
}
 8001b5e:	bf00      	nop
 8001b60:	bd80      	pop	{r7, pc}
 8001b62:	bf00      	nop
 8001b64:	20000568 	.word	0x20000568

08001b68 <CAN1_RX0_IRQHandler>:

/**
  * @brief This function handles CAN1 RX0 interrupt.
  */
void CAN1_RX0_IRQHandler(void)
{
 8001b68:	b580      	push	{r7, lr}
 8001b6a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN1_RX0_IRQn 0 */

  /* USER CODE END CAN1_RX0_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan1);
 8001b6c:	4802      	ldr	r0, [pc, #8]	; (8001b78 <CAN1_RX0_IRQHandler+0x10>)
 8001b6e:	f000 fc86 	bl	800247e <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN1_RX0_IRQn 1 */

  /* USER CODE END CAN1_RX0_IRQn 1 */
}
 8001b72:	bf00      	nop
 8001b74:	bd80      	pop	{r7, pc}
 8001b76:	bf00      	nop
 8001b78:	200002bc 	.word	0x200002bc

08001b7c <TIM1_BRK_TIM9_IRQHandler>:

/**
  * @brief This function handles TIM1 break interrupt and TIM9 global interrupt.
  */
void TIM1_BRK_TIM9_IRQHandler(void)
{
 8001b7c:	b580      	push	{r7, lr}
 8001b7e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_BRK_TIM9_IRQn 0 */

  /* USER CODE END TIM1_BRK_TIM9_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8001b80:	4803      	ldr	r0, [pc, #12]	; (8001b90 <TIM1_BRK_TIM9_IRQHandler+0x14>)
 8001b82:	f004 fb09 	bl	8006198 <HAL_TIM_IRQHandler>
  HAL_TIM_IRQHandler(&htim9);
 8001b86:	4803      	ldr	r0, [pc, #12]	; (8001b94 <TIM1_BRK_TIM9_IRQHandler+0x18>)
 8001b88:	f004 fb06 	bl	8006198 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_BRK_TIM9_IRQn 1 */

  /* USER CODE END TIM1_BRK_TIM9_IRQn 1 */
}
 8001b8c:	bf00      	nop
 8001b8e:	bd80      	pop	{r7, pc}
 8001b90:	20000340 	.word	0x20000340
 8001b94:	20000640 	.word	0x20000640

08001b98 <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 8001b98:	b580      	push	{r7, lr}
 8001b9a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8001b9c:	4802      	ldr	r0, [pc, #8]	; (8001ba8 <TIM1_UP_TIM10_IRQHandler+0x10>)
 8001b9e:	f004 fafb 	bl	8006198 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 8001ba2:	bf00      	nop
 8001ba4:	bd80      	pop	{r7, pc}
 8001ba6:	bf00      	nop
 8001ba8:	20000340 	.word	0x20000340

08001bac <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8001bac:	b580      	push	{r7, lr}
 8001bae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8001bb0:	4802      	ldr	r0, [pc, #8]	; (8001bbc <TIM2_IRQHandler+0x10>)
 8001bb2:	f004 faf1 	bl	8006198 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8001bb6:	bf00      	nop
 8001bb8:	bd80      	pop	{r7, pc}
 8001bba:	bf00      	nop
 8001bbc:	20000388 	.word	0x20000388

08001bc0 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8001bc0:	b580      	push	{r7, lr}
 8001bc2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8001bc4:	4802      	ldr	r0, [pc, #8]	; (8001bd0 <TIM3_IRQHandler+0x10>)
 8001bc6:	f004 fae7 	bl	8006198 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 8001bca:	bf00      	nop
 8001bcc:	bd80      	pop	{r7, pc}
 8001bce:	bf00      	nop
 8001bd0:	200003d0 	.word	0x200003d0

08001bd4 <TIM8_UP_TIM13_IRQHandler>:

/**
  * @brief This function handles TIM8 update interrupt and TIM13 global interrupt.
  */
void TIM8_UP_TIM13_IRQHandler(void)
{
 8001bd4:	b580      	push	{r7, lr}
 8001bd6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM8_UP_TIM13_IRQn 0 */

  /* USER CODE END TIM8_UP_TIM13_IRQn 0 */
  HAL_TIM_IRQHandler(&htim8);
 8001bd8:	4802      	ldr	r0, [pc, #8]	; (8001be4 <TIM8_UP_TIM13_IRQHandler+0x10>)
 8001bda:	f004 fadd 	bl	8006198 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM8_UP_TIM13_IRQn 1 */

  /* USER CODE END TIM8_UP_TIM13_IRQn 1 */
}
 8001bde:	bf00      	nop
 8001be0:	bd80      	pop	{r7, pc}
 8001be2:	bf00      	nop
 8001be4:	20000460 	.word	0x20000460

08001be8 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt and DAC1, DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8001be8:	b580      	push	{r7, lr}
 8001bea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8001bec:	4802      	ldr	r0, [pc, #8]	; (8001bf8 <TIM6_DAC_IRQHandler+0x10>)
 8001bee:	f004 fad3 	bl	8006198 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8001bf2:	bf00      	nop
 8001bf4:	bd80      	pop	{r7, pc}
 8001bf6:	bf00      	nop
 8001bf8:	20000418 	.word	0x20000418

08001bfc <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 8001bfc:	b580      	push	{r7, lr}
 8001bfe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8001c00:	4802      	ldr	r0, [pc, #8]	; (8001c0c <DMA2_Stream0_IRQHandler+0x10>)
 8001c02:	f001 f817 	bl	8002c34 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 8001c06:	bf00      	nop
 8001c08:	bd80      	pop	{r7, pc}
 8001c0a:	bf00      	nop
 8001c0c:	200001fc 	.word	0x200001fc

08001c10 <DMA2_Stream2_IRQHandler>:

/**
  * @brief This function handles DMA2 stream2 global interrupt.
  */
void DMA2_Stream2_IRQHandler(void)
{
 8001c10:	b580      	push	{r7, lr}
 8001c12:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream2_IRQn 0 */

  /* USER CODE END DMA2_Stream2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc2);
 8001c14:	4802      	ldr	r0, [pc, #8]	; (8001c20 <DMA2_Stream2_IRQHandler+0x10>)
 8001c16:	f001 f80d 	bl	8002c34 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream2_IRQn 1 */

  /* USER CODE END DMA2_Stream2_IRQn 1 */
}
 8001c1a:	bf00      	nop
 8001c1c:	bd80      	pop	{r7, pc}
 8001c1e:	bf00      	nop
 8001c20:	2000025c 	.word	0x2000025c

08001c24 <DMA2_Stream3_IRQHandler>:

/**
  * @brief This function handles DMA2 stream3 global interrupt.
  */
void DMA2_Stream3_IRQHandler(void)
{
 8001c24:	b580      	push	{r7, lr}
 8001c26:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream3_IRQn 0 */

  /* USER CODE END DMA2_Stream3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_tim8_ch2);
 8001c28:	4802      	ldr	r0, [pc, #8]	; (8001c34 <DMA2_Stream3_IRQHandler+0x10>)
 8001c2a:	f001 f803 	bl	8002c34 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream3_IRQn 1 */

  /* USER CODE END DMA2_Stream3_IRQn 1 */
}
 8001c2e:	bf00      	nop
 8001c30:	bd80      	pop	{r7, pc}
 8001c32:	bf00      	nop
 8001c34:	200005c8 	.word	0x200005c8

08001c38 <DMA2_Stream4_IRQHandler>:

/**
  * @brief This function handles DMA2 stream4 global interrupt.
  */
void DMA2_Stream4_IRQHandler(void)
{
 8001c38:	b580      	push	{r7, lr}
 8001c3a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream4_IRQn 0 */

  /* USER CODE END DMA2_Stream4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_tim1_ch4_trig_com);
 8001c3c:	4802      	ldr	r0, [pc, #8]	; (8001c48 <DMA2_Stream4_IRQHandler+0x10>)
 8001c3e:	f000 fff9 	bl	8002c34 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream4_IRQn 1 */

  /* USER CODE END DMA2_Stream4_IRQn 1 */
}
 8001c42:	bf00      	nop
 8001c44:	bd80      	pop	{r7, pc}
 8001c46:	bf00      	nop
 8001c48:	200004a8 	.word	0x200004a8

08001c4c <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8001c4c:	b580      	push	{r7, lr}
 8001c4e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 8001c50:	4802      	ldr	r0, [pc, #8]	; (8001c5c <OTG_FS_IRQHandler+0x10>)
 8001c52:	f001 fe68 	bl	8003926 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 8001c56:	bf00      	nop
 8001c58:	bd80      	pop	{r7, pc}
 8001c5a:	bf00      	nop
 8001c5c:	20006554 	.word	0x20006554

08001c60 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001c60:	b480      	push	{r7}
 8001c62:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001c64:	4b06      	ldr	r3, [pc, #24]	; (8001c80 <SystemInit+0x20>)
 8001c66:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001c6a:	4a05      	ldr	r2, [pc, #20]	; (8001c80 <SystemInit+0x20>)
 8001c6c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001c70:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001c74:	bf00      	nop
 8001c76:	46bd      	mov	sp, r7
 8001c78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c7c:	4770      	bx	lr
 8001c7e:	bf00      	nop
 8001c80:	e000ed00 	.word	0xe000ed00

08001c84 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8001c84:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001cbc <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001c88:	480d      	ldr	r0, [pc, #52]	; (8001cc0 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8001c8a:	490e      	ldr	r1, [pc, #56]	; (8001cc4 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8001c8c:	4a0e      	ldr	r2, [pc, #56]	; (8001cc8 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001c8e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001c90:	e002      	b.n	8001c98 <LoopCopyDataInit>

08001c92 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001c92:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001c94:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001c96:	3304      	adds	r3, #4

08001c98 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001c98:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001c9a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001c9c:	d3f9      	bcc.n	8001c92 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001c9e:	4a0b      	ldr	r2, [pc, #44]	; (8001ccc <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8001ca0:	4c0b      	ldr	r4, [pc, #44]	; (8001cd0 <LoopFillZerobss+0x26>)
  movs r3, #0
 8001ca2:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001ca4:	e001      	b.n	8001caa <LoopFillZerobss>

08001ca6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001ca6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001ca8:	3204      	adds	r2, #4

08001caa <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001caa:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001cac:	d3fb      	bcc.n	8001ca6 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8001cae:	f7ff ffd7 	bl	8001c60 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001cb2:	f00c fa17 	bl	800e0e4 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001cb6:	f7fe fc29 	bl	800050c <main>
  bx  lr    
 8001cba:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8001cbc:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001cc0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001cc4:	20000150 	.word	0x20000150
  ldr r2, =_sidata
 8001cc8:	0800e340 	.word	0x0800e340
  ldr r2, =_sbss
 8001ccc:	20000150 	.word	0x20000150
  ldr r4, =_ebss
 8001cd0:	20006d98 	.word	0x20006d98

08001cd4 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001cd4:	e7fe      	b.n	8001cd4 <ADC_IRQHandler>
	...

08001cd8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001cd8:	b580      	push	{r7, lr}
 8001cda:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001cdc:	4b0e      	ldr	r3, [pc, #56]	; (8001d18 <HAL_Init+0x40>)
 8001cde:	681b      	ldr	r3, [r3, #0]
 8001ce0:	4a0d      	ldr	r2, [pc, #52]	; (8001d18 <HAL_Init+0x40>)
 8001ce2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001ce6:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001ce8:	4b0b      	ldr	r3, [pc, #44]	; (8001d18 <HAL_Init+0x40>)
 8001cea:	681b      	ldr	r3, [r3, #0]
 8001cec:	4a0a      	ldr	r2, [pc, #40]	; (8001d18 <HAL_Init+0x40>)
 8001cee:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001cf2:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001cf4:	4b08      	ldr	r3, [pc, #32]	; (8001d18 <HAL_Init+0x40>)
 8001cf6:	681b      	ldr	r3, [r3, #0]
 8001cf8:	4a07      	ldr	r2, [pc, #28]	; (8001d18 <HAL_Init+0x40>)
 8001cfa:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001cfe:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001d00:	2003      	movs	r0, #3
 8001d02:	f000 fe98 	bl	8002a36 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001d06:	200f      	movs	r0, #15
 8001d08:	f7ff fe90 	bl	8001a2c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001d0c:	f7ff fa72 	bl	80011f4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001d10:	2300      	movs	r3, #0
}
 8001d12:	4618      	mov	r0, r3
 8001d14:	bd80      	pop	{r7, pc}
 8001d16:	bf00      	nop
 8001d18:	40023c00 	.word	0x40023c00

08001d1c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001d1c:	b480      	push	{r7}
 8001d1e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001d20:	4b06      	ldr	r3, [pc, #24]	; (8001d3c <HAL_IncTick+0x20>)
 8001d22:	781b      	ldrb	r3, [r3, #0]
 8001d24:	461a      	mov	r2, r3
 8001d26:	4b06      	ldr	r3, [pc, #24]	; (8001d40 <HAL_IncTick+0x24>)
 8001d28:	681b      	ldr	r3, [r3, #0]
 8001d2a:	4413      	add	r3, r2
 8001d2c:	4a04      	ldr	r2, [pc, #16]	; (8001d40 <HAL_IncTick+0x24>)
 8001d2e:	6013      	str	r3, [r2, #0]
}
 8001d30:	bf00      	nop
 8001d32:	46bd      	mov	sp, r7
 8001d34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d38:	4770      	bx	lr
 8001d3a:	bf00      	nop
 8001d3c:	20000008 	.word	0x20000008
 8001d40:	20000688 	.word	0x20000688

08001d44 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001d44:	b480      	push	{r7}
 8001d46:	af00      	add	r7, sp, #0
  return uwTick;
 8001d48:	4b03      	ldr	r3, [pc, #12]	; (8001d58 <HAL_GetTick+0x14>)
 8001d4a:	681b      	ldr	r3, [r3, #0]
}
 8001d4c:	4618      	mov	r0, r3
 8001d4e:	46bd      	mov	sp, r7
 8001d50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d54:	4770      	bx	lr
 8001d56:	bf00      	nop
 8001d58:	20000688 	.word	0x20000688

08001d5c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001d5c:	b580      	push	{r7, lr}
 8001d5e:	b084      	sub	sp, #16
 8001d60:	af00      	add	r7, sp, #0
 8001d62:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001d64:	f7ff ffee 	bl	8001d44 <HAL_GetTick>
 8001d68:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001d6a:	687b      	ldr	r3, [r7, #4]
 8001d6c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001d6e:	68fb      	ldr	r3, [r7, #12]
 8001d70:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001d74:	d005      	beq.n	8001d82 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001d76:	4b0a      	ldr	r3, [pc, #40]	; (8001da0 <HAL_Delay+0x44>)
 8001d78:	781b      	ldrb	r3, [r3, #0]
 8001d7a:	461a      	mov	r2, r3
 8001d7c:	68fb      	ldr	r3, [r7, #12]
 8001d7e:	4413      	add	r3, r2
 8001d80:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001d82:	bf00      	nop
 8001d84:	f7ff ffde 	bl	8001d44 <HAL_GetTick>
 8001d88:	4602      	mov	r2, r0
 8001d8a:	68bb      	ldr	r3, [r7, #8]
 8001d8c:	1ad3      	subs	r3, r2, r3
 8001d8e:	68fa      	ldr	r2, [r7, #12]
 8001d90:	429a      	cmp	r2, r3
 8001d92:	d8f7      	bhi.n	8001d84 <HAL_Delay+0x28>
  {
  }
}
 8001d94:	bf00      	nop
 8001d96:	bf00      	nop
 8001d98:	3710      	adds	r7, #16
 8001d9a:	46bd      	mov	sp, r7
 8001d9c:	bd80      	pop	{r7, pc}
 8001d9e:	bf00      	nop
 8001da0:	20000008 	.word	0x20000008

08001da4 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8001da4:	b580      	push	{r7, lr}
 8001da6:	b084      	sub	sp, #16
 8001da8:	af00      	add	r7, sp, #0
 8001daa:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001dac:	2300      	movs	r3, #0
 8001dae:	73fb      	strb	r3, [r7, #15]

  /* Check ADC handle */
  if (hadc == NULL)
 8001db0:	687b      	ldr	r3, [r7, #4]
 8001db2:	2b00      	cmp	r3, #0
 8001db4:	d101      	bne.n	8001dba <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8001db6:	2301      	movs	r3, #1
 8001db8:	e033      	b.n	8001e22 <HAL_ADC_Init+0x7e>
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }

  if (hadc->State == HAL_ADC_STATE_RESET)
 8001dba:	687b      	ldr	r3, [r7, #4]
 8001dbc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001dbe:	2b00      	cmp	r3, #0
 8001dc0:	d109      	bne.n	8001dd6 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001dc2:	6878      	ldr	r0, [r7, #4]
 8001dc4:	f7ff fa42 	bl	800124c <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8001dc8:	687b      	ldr	r3, [r7, #4]
 8001dca:	2200      	movs	r2, #0
 8001dcc:	645a      	str	r2, [r3, #68]	; 0x44

    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8001dce:	687b      	ldr	r3, [r7, #4]
 8001dd0:	2200      	movs	r2, #0
 8001dd2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8001dd6:	687b      	ldr	r3, [r7, #4]
 8001dd8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001dda:	f003 0310 	and.w	r3, r3, #16
 8001dde:	2b00      	cmp	r3, #0
 8001de0:	d118      	bne.n	8001e14 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001de2:	687b      	ldr	r3, [r7, #4]
 8001de4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001de6:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8001dea:	f023 0302 	bic.w	r3, r3, #2
 8001dee:	f043 0202 	orr.w	r2, r3, #2
 8001df2:	687b      	ldr	r3, [r7, #4]
 8001df4:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);

    /* Set ADC parameters */
    ADC_Init(hadc);
 8001df6:	6878      	ldr	r0, [r7, #4]
 8001df8:	f000 f94a 	bl	8002090 <ADC_Init>

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8001dfc:	687b      	ldr	r3, [r7, #4]
 8001dfe:	2200      	movs	r2, #0
 8001e00:	645a      	str	r2, [r3, #68]	; 0x44

    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001e02:	687b      	ldr	r3, [r7, #4]
 8001e04:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e06:	f023 0303 	bic.w	r3, r3, #3
 8001e0a:	f043 0201 	orr.w	r2, r3, #1
 8001e0e:	687b      	ldr	r3, [r7, #4]
 8001e10:	641a      	str	r2, [r3, #64]	; 0x40
 8001e12:	e001      	b.n	8001e18 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8001e14:	2301      	movs	r3, #1
 8001e16:	73fb      	strb	r3, [r7, #15]
  }

  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8001e18:	687b      	ldr	r3, [r7, #4]
 8001e1a:	2200      	movs	r2, #0
 8001e1c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8001e20:	7bfb      	ldrb	r3, [r7, #15]
}
 8001e22:	4618      	mov	r0, r3
 8001e24:	3710      	adds	r7, #16
 8001e26:	46bd      	mov	sp, r7
 8001e28:	bd80      	pop	{r7, pc}
	...

08001e2c <HAL_ADC_ConfigChannel>:
*         the configuration information for the specified ADC.
* @param  sConfig ADC configuration structure.
* @retval HAL status
*/
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 8001e2c:	b480      	push	{r7}
 8001e2e:	b085      	sub	sp, #20
 8001e30:	af00      	add	r7, sp, #0
 8001e32:	6078      	str	r0, [r7, #4]
 8001e34:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 8001e36:	2300      	movs	r3, #0
 8001e38:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));

  /* Process locked */
  __HAL_LOCK(hadc);
 8001e3a:	687b      	ldr	r3, [r7, #4]
 8001e3c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001e40:	2b01      	cmp	r3, #1
 8001e42:	d101      	bne.n	8001e48 <HAL_ADC_ConfigChannel+0x1c>
 8001e44:	2302      	movs	r3, #2
 8001e46:	e113      	b.n	8002070 <HAL_ADC_ConfigChannel+0x244>
 8001e48:	687b      	ldr	r3, [r7, #4]
 8001e4a:	2201      	movs	r2, #1
 8001e4c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8001e50:	683b      	ldr	r3, [r7, #0]
 8001e52:	681b      	ldr	r3, [r3, #0]
 8001e54:	2b09      	cmp	r3, #9
 8001e56:	d925      	bls.n	8001ea4 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8001e58:	687b      	ldr	r3, [r7, #4]
 8001e5a:	681b      	ldr	r3, [r3, #0]
 8001e5c:	68d9      	ldr	r1, [r3, #12]
 8001e5e:	683b      	ldr	r3, [r7, #0]
 8001e60:	681b      	ldr	r3, [r3, #0]
 8001e62:	b29b      	uxth	r3, r3
 8001e64:	461a      	mov	r2, r3
 8001e66:	4613      	mov	r3, r2
 8001e68:	005b      	lsls	r3, r3, #1
 8001e6a:	4413      	add	r3, r2
 8001e6c:	3b1e      	subs	r3, #30
 8001e6e:	2207      	movs	r2, #7
 8001e70:	fa02 f303 	lsl.w	r3, r2, r3
 8001e74:	43da      	mvns	r2, r3
 8001e76:	687b      	ldr	r3, [r7, #4]
 8001e78:	681b      	ldr	r3, [r3, #0]
 8001e7a:	400a      	ands	r2, r1
 8001e7c:	60da      	str	r2, [r3, #12]

    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8001e7e:	687b      	ldr	r3, [r7, #4]
 8001e80:	681b      	ldr	r3, [r3, #0]
 8001e82:	68d9      	ldr	r1, [r3, #12]
 8001e84:	683b      	ldr	r3, [r7, #0]
 8001e86:	689a      	ldr	r2, [r3, #8]
 8001e88:	683b      	ldr	r3, [r7, #0]
 8001e8a:	681b      	ldr	r3, [r3, #0]
 8001e8c:	b29b      	uxth	r3, r3
 8001e8e:	4618      	mov	r0, r3
 8001e90:	4603      	mov	r3, r0
 8001e92:	005b      	lsls	r3, r3, #1
 8001e94:	4403      	add	r3, r0
 8001e96:	3b1e      	subs	r3, #30
 8001e98:	409a      	lsls	r2, r3
 8001e9a:	687b      	ldr	r3, [r7, #4]
 8001e9c:	681b      	ldr	r3, [r3, #0]
 8001e9e:	430a      	orrs	r2, r1
 8001ea0:	60da      	str	r2, [r3, #12]
 8001ea2:	e022      	b.n	8001eea <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8001ea4:	687b      	ldr	r3, [r7, #4]
 8001ea6:	681b      	ldr	r3, [r3, #0]
 8001ea8:	6919      	ldr	r1, [r3, #16]
 8001eaa:	683b      	ldr	r3, [r7, #0]
 8001eac:	681b      	ldr	r3, [r3, #0]
 8001eae:	b29b      	uxth	r3, r3
 8001eb0:	461a      	mov	r2, r3
 8001eb2:	4613      	mov	r3, r2
 8001eb4:	005b      	lsls	r3, r3, #1
 8001eb6:	4413      	add	r3, r2
 8001eb8:	2207      	movs	r2, #7
 8001eba:	fa02 f303 	lsl.w	r3, r2, r3
 8001ebe:	43da      	mvns	r2, r3
 8001ec0:	687b      	ldr	r3, [r7, #4]
 8001ec2:	681b      	ldr	r3, [r3, #0]
 8001ec4:	400a      	ands	r2, r1
 8001ec6:	611a      	str	r2, [r3, #16]

    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8001ec8:	687b      	ldr	r3, [r7, #4]
 8001eca:	681b      	ldr	r3, [r3, #0]
 8001ecc:	6919      	ldr	r1, [r3, #16]
 8001ece:	683b      	ldr	r3, [r7, #0]
 8001ed0:	689a      	ldr	r2, [r3, #8]
 8001ed2:	683b      	ldr	r3, [r7, #0]
 8001ed4:	681b      	ldr	r3, [r3, #0]
 8001ed6:	b29b      	uxth	r3, r3
 8001ed8:	4618      	mov	r0, r3
 8001eda:	4603      	mov	r3, r0
 8001edc:	005b      	lsls	r3, r3, #1
 8001ede:	4403      	add	r3, r0
 8001ee0:	409a      	lsls	r2, r3
 8001ee2:	687b      	ldr	r3, [r7, #4]
 8001ee4:	681b      	ldr	r3, [r3, #0]
 8001ee6:	430a      	orrs	r2, r1
 8001ee8:	611a      	str	r2, [r3, #16]
  }

  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8001eea:	683b      	ldr	r3, [r7, #0]
 8001eec:	685b      	ldr	r3, [r3, #4]
 8001eee:	2b06      	cmp	r3, #6
 8001ef0:	d824      	bhi.n	8001f3c <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8001ef2:	687b      	ldr	r3, [r7, #4]
 8001ef4:	681b      	ldr	r3, [r3, #0]
 8001ef6:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8001ef8:	683b      	ldr	r3, [r7, #0]
 8001efa:	685a      	ldr	r2, [r3, #4]
 8001efc:	4613      	mov	r3, r2
 8001efe:	009b      	lsls	r3, r3, #2
 8001f00:	4413      	add	r3, r2
 8001f02:	3b05      	subs	r3, #5
 8001f04:	221f      	movs	r2, #31
 8001f06:	fa02 f303 	lsl.w	r3, r2, r3
 8001f0a:	43da      	mvns	r2, r3
 8001f0c:	687b      	ldr	r3, [r7, #4]
 8001f0e:	681b      	ldr	r3, [r3, #0]
 8001f10:	400a      	ands	r2, r1
 8001f12:	635a      	str	r2, [r3, #52]	; 0x34

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8001f14:	687b      	ldr	r3, [r7, #4]
 8001f16:	681b      	ldr	r3, [r3, #0]
 8001f18:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8001f1a:	683b      	ldr	r3, [r7, #0]
 8001f1c:	681b      	ldr	r3, [r3, #0]
 8001f1e:	b29b      	uxth	r3, r3
 8001f20:	4618      	mov	r0, r3
 8001f22:	683b      	ldr	r3, [r7, #0]
 8001f24:	685a      	ldr	r2, [r3, #4]
 8001f26:	4613      	mov	r3, r2
 8001f28:	009b      	lsls	r3, r3, #2
 8001f2a:	4413      	add	r3, r2
 8001f2c:	3b05      	subs	r3, #5
 8001f2e:	fa00 f203 	lsl.w	r2, r0, r3
 8001f32:	687b      	ldr	r3, [r7, #4]
 8001f34:	681b      	ldr	r3, [r3, #0]
 8001f36:	430a      	orrs	r2, r1
 8001f38:	635a      	str	r2, [r3, #52]	; 0x34
 8001f3a:	e04c      	b.n	8001fd6 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8001f3c:	683b      	ldr	r3, [r7, #0]
 8001f3e:	685b      	ldr	r3, [r3, #4]
 8001f40:	2b0c      	cmp	r3, #12
 8001f42:	d824      	bhi.n	8001f8e <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8001f44:	687b      	ldr	r3, [r7, #4]
 8001f46:	681b      	ldr	r3, [r3, #0]
 8001f48:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8001f4a:	683b      	ldr	r3, [r7, #0]
 8001f4c:	685a      	ldr	r2, [r3, #4]
 8001f4e:	4613      	mov	r3, r2
 8001f50:	009b      	lsls	r3, r3, #2
 8001f52:	4413      	add	r3, r2
 8001f54:	3b23      	subs	r3, #35	; 0x23
 8001f56:	221f      	movs	r2, #31
 8001f58:	fa02 f303 	lsl.w	r3, r2, r3
 8001f5c:	43da      	mvns	r2, r3
 8001f5e:	687b      	ldr	r3, [r7, #4]
 8001f60:	681b      	ldr	r3, [r3, #0]
 8001f62:	400a      	ands	r2, r1
 8001f64:	631a      	str	r2, [r3, #48]	; 0x30

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8001f66:	687b      	ldr	r3, [r7, #4]
 8001f68:	681b      	ldr	r3, [r3, #0]
 8001f6a:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8001f6c:	683b      	ldr	r3, [r7, #0]
 8001f6e:	681b      	ldr	r3, [r3, #0]
 8001f70:	b29b      	uxth	r3, r3
 8001f72:	4618      	mov	r0, r3
 8001f74:	683b      	ldr	r3, [r7, #0]
 8001f76:	685a      	ldr	r2, [r3, #4]
 8001f78:	4613      	mov	r3, r2
 8001f7a:	009b      	lsls	r3, r3, #2
 8001f7c:	4413      	add	r3, r2
 8001f7e:	3b23      	subs	r3, #35	; 0x23
 8001f80:	fa00 f203 	lsl.w	r2, r0, r3
 8001f84:	687b      	ldr	r3, [r7, #4]
 8001f86:	681b      	ldr	r3, [r3, #0]
 8001f88:	430a      	orrs	r2, r1
 8001f8a:	631a      	str	r2, [r3, #48]	; 0x30
 8001f8c:	e023      	b.n	8001fd6 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8001f8e:	687b      	ldr	r3, [r7, #4]
 8001f90:	681b      	ldr	r3, [r3, #0]
 8001f92:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8001f94:	683b      	ldr	r3, [r7, #0]
 8001f96:	685a      	ldr	r2, [r3, #4]
 8001f98:	4613      	mov	r3, r2
 8001f9a:	009b      	lsls	r3, r3, #2
 8001f9c:	4413      	add	r3, r2
 8001f9e:	3b41      	subs	r3, #65	; 0x41
 8001fa0:	221f      	movs	r2, #31
 8001fa2:	fa02 f303 	lsl.w	r3, r2, r3
 8001fa6:	43da      	mvns	r2, r3
 8001fa8:	687b      	ldr	r3, [r7, #4]
 8001faa:	681b      	ldr	r3, [r3, #0]
 8001fac:	400a      	ands	r2, r1
 8001fae:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8001fb0:	687b      	ldr	r3, [r7, #4]
 8001fb2:	681b      	ldr	r3, [r3, #0]
 8001fb4:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8001fb6:	683b      	ldr	r3, [r7, #0]
 8001fb8:	681b      	ldr	r3, [r3, #0]
 8001fba:	b29b      	uxth	r3, r3
 8001fbc:	4618      	mov	r0, r3
 8001fbe:	683b      	ldr	r3, [r7, #0]
 8001fc0:	685a      	ldr	r2, [r3, #4]
 8001fc2:	4613      	mov	r3, r2
 8001fc4:	009b      	lsls	r3, r3, #2
 8001fc6:	4413      	add	r3, r2
 8001fc8:	3b41      	subs	r3, #65	; 0x41
 8001fca:	fa00 f203 	lsl.w	r2, r0, r3
 8001fce:	687b      	ldr	r3, [r7, #4]
 8001fd0:	681b      	ldr	r3, [r3, #0]
 8001fd2:	430a      	orrs	r2, r1
 8001fd4:	62da      	str	r2, [r3, #44]	; 0x2c
  }

  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001fd6:	4b29      	ldr	r3, [pc, #164]	; (800207c <HAL_ADC_ConfigChannel+0x250>)
 8001fd8:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8001fda:	687b      	ldr	r3, [r7, #4]
 8001fdc:	681b      	ldr	r3, [r3, #0]
 8001fde:	4a28      	ldr	r2, [pc, #160]	; (8002080 <HAL_ADC_ConfigChannel+0x254>)
 8001fe0:	4293      	cmp	r3, r2
 8001fe2:	d10f      	bne.n	8002004 <HAL_ADC_ConfigChannel+0x1d8>
 8001fe4:	683b      	ldr	r3, [r7, #0]
 8001fe6:	681b      	ldr	r3, [r3, #0]
 8001fe8:	2b12      	cmp	r3, #18
 8001fea:	d10b      	bne.n	8002004 <HAL_ADC_ConfigChannel+0x1d8>
  {
    /* Disable the TEMPSENSOR channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
 8001fec:	68fb      	ldr	r3, [r7, #12]
 8001fee:	685b      	ldr	r3, [r3, #4]
 8001ff0:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 8001ff4:	68fb      	ldr	r3, [r7, #12]
 8001ff6:	605a      	str	r2, [r3, #4]
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8001ff8:	68fb      	ldr	r3, [r7, #12]
 8001ffa:	685b      	ldr	r3, [r3, #4]
 8001ffc:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 8002000:	68fb      	ldr	r3, [r7, #12]
 8002002:	605a      	str	r2, [r3, #4]
  }

  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8002004:	687b      	ldr	r3, [r7, #4]
 8002006:	681b      	ldr	r3, [r3, #0]
 8002008:	4a1d      	ldr	r2, [pc, #116]	; (8002080 <HAL_ADC_ConfigChannel+0x254>)
 800200a:	4293      	cmp	r3, r2
 800200c:	d12b      	bne.n	8002066 <HAL_ADC_ConfigChannel+0x23a>
 800200e:	683b      	ldr	r3, [r7, #0]
 8002010:	681b      	ldr	r3, [r3, #0]
 8002012:	4a1c      	ldr	r2, [pc, #112]	; (8002084 <HAL_ADC_ConfigChannel+0x258>)
 8002014:	4293      	cmp	r3, r2
 8002016:	d003      	beq.n	8002020 <HAL_ADC_ConfigChannel+0x1f4>
 8002018:	683b      	ldr	r3, [r7, #0]
 800201a:	681b      	ldr	r3, [r3, #0]
 800201c:	2b11      	cmp	r3, #17
 800201e:	d122      	bne.n	8002066 <HAL_ADC_ConfigChannel+0x23a>
  {
    /* Disable the VBAT channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
 8002020:	68fb      	ldr	r3, [r7, #12]
 8002022:	685b      	ldr	r3, [r3, #4]
 8002024:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8002028:	68fb      	ldr	r3, [r7, #12]
 800202a:	605a      	str	r2, [r3, #4]
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 800202c:	68fb      	ldr	r3, [r7, #12]
 800202e:	685b      	ldr	r3, [r3, #4]
 8002030:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8002034:	68fb      	ldr	r3, [r7, #12]
 8002036:	605a      	str	r2, [r3, #4]

    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8002038:	683b      	ldr	r3, [r7, #0]
 800203a:	681b      	ldr	r3, [r3, #0]
 800203c:	4a11      	ldr	r2, [pc, #68]	; (8002084 <HAL_ADC_ConfigChannel+0x258>)
 800203e:	4293      	cmp	r3, r2
 8002040:	d111      	bne.n	8002066 <HAL_ADC_ConfigChannel+0x23a>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8002042:	4b11      	ldr	r3, [pc, #68]	; (8002088 <HAL_ADC_ConfigChannel+0x25c>)
 8002044:	681b      	ldr	r3, [r3, #0]
 8002046:	4a11      	ldr	r2, [pc, #68]	; (800208c <HAL_ADC_ConfigChannel+0x260>)
 8002048:	fba2 2303 	umull	r2, r3, r2, r3
 800204c:	0c9a      	lsrs	r2, r3, #18
 800204e:	4613      	mov	r3, r2
 8002050:	009b      	lsls	r3, r3, #2
 8002052:	4413      	add	r3, r2
 8002054:	005b      	lsls	r3, r3, #1
 8002056:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 8002058:	e002      	b.n	8002060 <HAL_ADC_ConfigChannel+0x234>
      {
        counter--;
 800205a:	68bb      	ldr	r3, [r7, #8]
 800205c:	3b01      	subs	r3, #1
 800205e:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 8002060:	68bb      	ldr	r3, [r7, #8]
 8002062:	2b00      	cmp	r3, #0
 8002064:	d1f9      	bne.n	800205a <HAL_ADC_ConfigChannel+0x22e>
      }
    }
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002066:	687b      	ldr	r3, [r7, #4]
 8002068:	2200      	movs	r2, #0
 800206a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return HAL_OK;
 800206e:	2300      	movs	r3, #0
}
 8002070:	4618      	mov	r0, r3
 8002072:	3714      	adds	r7, #20
 8002074:	46bd      	mov	sp, r7
 8002076:	f85d 7b04 	ldr.w	r7, [sp], #4
 800207a:	4770      	bx	lr
 800207c:	40012300 	.word	0x40012300
 8002080:	40012000 	.word	0x40012000
 8002084:	10000012 	.word	0x10000012
 8002088:	20000000 	.word	0x20000000
 800208c:	431bde83 	.word	0x431bde83

08002090 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef *hadc)
{
 8002090:	b480      	push	{r7}
 8002092:	b085      	sub	sp, #20
 8002094:	af00      	add	r7, sp, #0
 8002096:	6078      	str	r0, [r7, #4]

  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8002098:	4b79      	ldr	r3, [pc, #484]	; (8002280 <ADC_Init+0x1f0>)
 800209a:	60fb      	str	r3, [r7, #12]

  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 800209c:	68fb      	ldr	r3, [r7, #12]
 800209e:	685b      	ldr	r3, [r3, #4]
 80020a0:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80020a4:	68fb      	ldr	r3, [r7, #12]
 80020a6:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 80020a8:	68fb      	ldr	r3, [r7, #12]
 80020aa:	685a      	ldr	r2, [r3, #4]
 80020ac:	687b      	ldr	r3, [r7, #4]
 80020ae:	685b      	ldr	r3, [r3, #4]
 80020b0:	431a      	orrs	r2, r3
 80020b2:	68fb      	ldr	r3, [r7, #12]
 80020b4:	605a      	str	r2, [r3, #4]

  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 80020b6:	687b      	ldr	r3, [r7, #4]
 80020b8:	681b      	ldr	r3, [r3, #0]
 80020ba:	685a      	ldr	r2, [r3, #4]
 80020bc:	687b      	ldr	r3, [r7, #4]
 80020be:	681b      	ldr	r3, [r3, #0]
 80020c0:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80020c4:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 80020c6:	687b      	ldr	r3, [r7, #4]
 80020c8:	681b      	ldr	r3, [r3, #0]
 80020ca:	6859      	ldr	r1, [r3, #4]
 80020cc:	687b      	ldr	r3, [r7, #4]
 80020ce:	691b      	ldr	r3, [r3, #16]
 80020d0:	021a      	lsls	r2, r3, #8
 80020d2:	687b      	ldr	r3, [r7, #4]
 80020d4:	681b      	ldr	r3, [r3, #0]
 80020d6:	430a      	orrs	r2, r1
 80020d8:	605a      	str	r2, [r3, #4]

  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 80020da:	687b      	ldr	r3, [r7, #4]
 80020dc:	681b      	ldr	r3, [r3, #0]
 80020de:	685a      	ldr	r2, [r3, #4]
 80020e0:	687b      	ldr	r3, [r7, #4]
 80020e2:	681b      	ldr	r3, [r3, #0]
 80020e4:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 80020e8:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 80020ea:	687b      	ldr	r3, [r7, #4]
 80020ec:	681b      	ldr	r3, [r3, #0]
 80020ee:	6859      	ldr	r1, [r3, #4]
 80020f0:	687b      	ldr	r3, [r7, #4]
 80020f2:	689a      	ldr	r2, [r3, #8]
 80020f4:	687b      	ldr	r3, [r7, #4]
 80020f6:	681b      	ldr	r3, [r3, #0]
 80020f8:	430a      	orrs	r2, r1
 80020fa:	605a      	str	r2, [r3, #4]

  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 80020fc:	687b      	ldr	r3, [r7, #4]
 80020fe:	681b      	ldr	r3, [r3, #0]
 8002100:	689a      	ldr	r2, [r3, #8]
 8002102:	687b      	ldr	r3, [r7, #4]
 8002104:	681b      	ldr	r3, [r3, #0]
 8002106:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800210a:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 800210c:	687b      	ldr	r3, [r7, #4]
 800210e:	681b      	ldr	r3, [r3, #0]
 8002110:	6899      	ldr	r1, [r3, #8]
 8002112:	687b      	ldr	r3, [r7, #4]
 8002114:	68da      	ldr	r2, [r3, #12]
 8002116:	687b      	ldr	r3, [r7, #4]
 8002118:	681b      	ldr	r3, [r3, #0]
 800211a:	430a      	orrs	r2, r1
 800211c:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 800211e:	687b      	ldr	r3, [r7, #4]
 8002120:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002122:	4a58      	ldr	r2, [pc, #352]	; (8002284 <ADC_Init+0x1f4>)
 8002124:	4293      	cmp	r3, r2
 8002126:	d022      	beq.n	800216e <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8002128:	687b      	ldr	r3, [r7, #4]
 800212a:	681b      	ldr	r3, [r3, #0]
 800212c:	689a      	ldr	r2, [r3, #8]
 800212e:	687b      	ldr	r3, [r7, #4]
 8002130:	681b      	ldr	r3, [r3, #0]
 8002132:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8002136:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8002138:	687b      	ldr	r3, [r7, #4]
 800213a:	681b      	ldr	r3, [r3, #0]
 800213c:	6899      	ldr	r1, [r3, #8]
 800213e:	687b      	ldr	r3, [r7, #4]
 8002140:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002142:	687b      	ldr	r3, [r7, #4]
 8002144:	681b      	ldr	r3, [r3, #0]
 8002146:	430a      	orrs	r2, r1
 8002148:	609a      	str	r2, [r3, #8]

    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 800214a:	687b      	ldr	r3, [r7, #4]
 800214c:	681b      	ldr	r3, [r3, #0]
 800214e:	689a      	ldr	r2, [r3, #8]
 8002150:	687b      	ldr	r3, [r7, #4]
 8002152:	681b      	ldr	r3, [r3, #0]
 8002154:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8002158:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 800215a:	687b      	ldr	r3, [r7, #4]
 800215c:	681b      	ldr	r3, [r3, #0]
 800215e:	6899      	ldr	r1, [r3, #8]
 8002160:	687b      	ldr	r3, [r7, #4]
 8002162:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002164:	687b      	ldr	r3, [r7, #4]
 8002166:	681b      	ldr	r3, [r3, #0]
 8002168:	430a      	orrs	r2, r1
 800216a:	609a      	str	r2, [r3, #8]
 800216c:	e00f      	b.n	800218e <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 800216e:	687b      	ldr	r3, [r7, #4]
 8002170:	681b      	ldr	r3, [r3, #0]
 8002172:	689a      	ldr	r2, [r3, #8]
 8002174:	687b      	ldr	r3, [r7, #4]
 8002176:	681b      	ldr	r3, [r3, #0]
 8002178:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 800217c:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 800217e:	687b      	ldr	r3, [r7, #4]
 8002180:	681b      	ldr	r3, [r3, #0]
 8002182:	689a      	ldr	r2, [r3, #8]
 8002184:	687b      	ldr	r3, [r7, #4]
 8002186:	681b      	ldr	r3, [r3, #0]
 8002188:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 800218c:	609a      	str	r2, [r3, #8]
  }

  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 800218e:	687b      	ldr	r3, [r7, #4]
 8002190:	681b      	ldr	r3, [r3, #0]
 8002192:	689a      	ldr	r2, [r3, #8]
 8002194:	687b      	ldr	r3, [r7, #4]
 8002196:	681b      	ldr	r3, [r3, #0]
 8002198:	f022 0202 	bic.w	r2, r2, #2
 800219c:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 800219e:	687b      	ldr	r3, [r7, #4]
 80021a0:	681b      	ldr	r3, [r3, #0]
 80021a2:	6899      	ldr	r1, [r3, #8]
 80021a4:	687b      	ldr	r3, [r7, #4]
 80021a6:	7e1b      	ldrb	r3, [r3, #24]
 80021a8:	005a      	lsls	r2, r3, #1
 80021aa:	687b      	ldr	r3, [r7, #4]
 80021ac:	681b      	ldr	r3, [r3, #0]
 80021ae:	430a      	orrs	r2, r1
 80021b0:	609a      	str	r2, [r3, #8]

  if (hadc->Init.DiscontinuousConvMode != DISABLE)
 80021b2:	687b      	ldr	r3, [r7, #4]
 80021b4:	f893 3020 	ldrb.w	r3, [r3, #32]
 80021b8:	2b00      	cmp	r3, #0
 80021ba:	d01b      	beq.n	80021f4 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));

    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 80021bc:	687b      	ldr	r3, [r7, #4]
 80021be:	681b      	ldr	r3, [r3, #0]
 80021c0:	685a      	ldr	r2, [r3, #4]
 80021c2:	687b      	ldr	r3, [r7, #4]
 80021c4:	681b      	ldr	r3, [r3, #0]
 80021c6:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80021ca:	605a      	str	r2, [r3, #4]

    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 80021cc:	687b      	ldr	r3, [r7, #4]
 80021ce:	681b      	ldr	r3, [r3, #0]
 80021d0:	685a      	ldr	r2, [r3, #4]
 80021d2:	687b      	ldr	r3, [r7, #4]
 80021d4:	681b      	ldr	r3, [r3, #0]
 80021d6:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 80021da:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 80021dc:	687b      	ldr	r3, [r7, #4]
 80021de:	681b      	ldr	r3, [r3, #0]
 80021e0:	6859      	ldr	r1, [r3, #4]
 80021e2:	687b      	ldr	r3, [r7, #4]
 80021e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80021e6:	3b01      	subs	r3, #1
 80021e8:	035a      	lsls	r2, r3, #13
 80021ea:	687b      	ldr	r3, [r7, #4]
 80021ec:	681b      	ldr	r3, [r3, #0]
 80021ee:	430a      	orrs	r2, r1
 80021f0:	605a      	str	r2, [r3, #4]
 80021f2:	e007      	b.n	8002204 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 80021f4:	687b      	ldr	r3, [r7, #4]
 80021f6:	681b      	ldr	r3, [r3, #0]
 80021f8:	685a      	ldr	r2, [r3, #4]
 80021fa:	687b      	ldr	r3, [r7, #4]
 80021fc:	681b      	ldr	r3, [r3, #0]
 80021fe:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002202:	605a      	str	r2, [r3, #4]
  }

  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8002204:	687b      	ldr	r3, [r7, #4]
 8002206:	681b      	ldr	r3, [r3, #0]
 8002208:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800220a:	687b      	ldr	r3, [r7, #4]
 800220c:	681b      	ldr	r3, [r3, #0]
 800220e:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 8002212:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8002214:	687b      	ldr	r3, [r7, #4]
 8002216:	681b      	ldr	r3, [r3, #0]
 8002218:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800221a:	687b      	ldr	r3, [r7, #4]
 800221c:	69db      	ldr	r3, [r3, #28]
 800221e:	3b01      	subs	r3, #1
 8002220:	051a      	lsls	r2, r3, #20
 8002222:	687b      	ldr	r3, [r7, #4]
 8002224:	681b      	ldr	r3, [r3, #0]
 8002226:	430a      	orrs	r2, r1
 8002228:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 800222a:	687b      	ldr	r3, [r7, #4]
 800222c:	681b      	ldr	r3, [r3, #0]
 800222e:	689a      	ldr	r2, [r3, #8]
 8002230:	687b      	ldr	r3, [r7, #4]
 8002232:	681b      	ldr	r3, [r3, #0]
 8002234:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8002238:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 800223a:	687b      	ldr	r3, [r7, #4]
 800223c:	681b      	ldr	r3, [r3, #0]
 800223e:	6899      	ldr	r1, [r3, #8]
 8002240:	687b      	ldr	r3, [r7, #4]
 8002242:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8002246:	025a      	lsls	r2, r3, #9
 8002248:	687b      	ldr	r3, [r7, #4]
 800224a:	681b      	ldr	r3, [r3, #0]
 800224c:	430a      	orrs	r2, r1
 800224e:	609a      	str	r2, [r3, #8]

  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8002250:	687b      	ldr	r3, [r7, #4]
 8002252:	681b      	ldr	r3, [r3, #0]
 8002254:	689a      	ldr	r2, [r3, #8]
 8002256:	687b      	ldr	r3, [r7, #4]
 8002258:	681b      	ldr	r3, [r3, #0]
 800225a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800225e:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8002260:	687b      	ldr	r3, [r7, #4]
 8002262:	681b      	ldr	r3, [r3, #0]
 8002264:	6899      	ldr	r1, [r3, #8]
 8002266:	687b      	ldr	r3, [r7, #4]
 8002268:	695b      	ldr	r3, [r3, #20]
 800226a:	029a      	lsls	r2, r3, #10
 800226c:	687b      	ldr	r3, [r7, #4]
 800226e:	681b      	ldr	r3, [r3, #0]
 8002270:	430a      	orrs	r2, r1
 8002272:	609a      	str	r2, [r3, #8]
}
 8002274:	bf00      	nop
 8002276:	3714      	adds	r7, #20
 8002278:	46bd      	mov	sp, r7
 800227a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800227e:	4770      	bx	lr
 8002280:	40012300 	.word	0x40012300
 8002284:	0f000001 	.word	0x0f000001

08002288 <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 8002288:	b580      	push	{r7, lr}
 800228a:	b084      	sub	sp, #16
 800228c:	af00      	add	r7, sp, #0
 800228e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 8002290:	687b      	ldr	r3, [r7, #4]
 8002292:	2b00      	cmp	r3, #0
 8002294:	d101      	bne.n	800229a <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 8002296:	2301      	movs	r3, #1
 8002298:	e0ed      	b.n	8002476 <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 800229a:	687b      	ldr	r3, [r7, #4]
 800229c:	f893 3020 	ldrb.w	r3, [r3, #32]
 80022a0:	b2db      	uxtb	r3, r3
 80022a2:	2b00      	cmp	r3, #0
 80022a4:	d102      	bne.n	80022ac <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 80022a6:	6878      	ldr	r0, [r7, #4]
 80022a8:	f7ff f8c8 	bl	800143c <HAL_CAN_MspInit>
  }
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 80022ac:	687b      	ldr	r3, [r7, #4]
 80022ae:	681b      	ldr	r3, [r3, #0]
 80022b0:	681a      	ldr	r2, [r3, #0]
 80022b2:	687b      	ldr	r3, [r7, #4]
 80022b4:	681b      	ldr	r3, [r3, #0]
 80022b6:	f042 0201 	orr.w	r2, r2, #1
 80022ba:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80022bc:	f7ff fd42 	bl	8001d44 <HAL_GetTick>
 80022c0:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 80022c2:	e012      	b.n	80022ea <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 80022c4:	f7ff fd3e 	bl	8001d44 <HAL_GetTick>
 80022c8:	4602      	mov	r2, r0
 80022ca:	68fb      	ldr	r3, [r7, #12]
 80022cc:	1ad3      	subs	r3, r2, r3
 80022ce:	2b0a      	cmp	r3, #10
 80022d0:	d90b      	bls.n	80022ea <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 80022d2:	687b      	ldr	r3, [r7, #4]
 80022d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80022d6:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 80022da:	687b      	ldr	r3, [r7, #4]
 80022dc:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 80022de:	687b      	ldr	r3, [r7, #4]
 80022e0:	2205      	movs	r2, #5
 80022e2:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 80022e6:	2301      	movs	r3, #1
 80022e8:	e0c5      	b.n	8002476 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 80022ea:	687b      	ldr	r3, [r7, #4]
 80022ec:	681b      	ldr	r3, [r3, #0]
 80022ee:	685b      	ldr	r3, [r3, #4]
 80022f0:	f003 0301 	and.w	r3, r3, #1
 80022f4:	2b00      	cmp	r3, #0
 80022f6:	d0e5      	beq.n	80022c4 <HAL_CAN_Init+0x3c>
    }
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 80022f8:	687b      	ldr	r3, [r7, #4]
 80022fa:	681b      	ldr	r3, [r3, #0]
 80022fc:	681a      	ldr	r2, [r3, #0]
 80022fe:	687b      	ldr	r3, [r7, #4]
 8002300:	681b      	ldr	r3, [r3, #0]
 8002302:	f022 0202 	bic.w	r2, r2, #2
 8002306:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8002308:	f7ff fd1c 	bl	8001d44 <HAL_GetTick>
 800230c:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 800230e:	e012      	b.n	8002336 <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8002310:	f7ff fd18 	bl	8001d44 <HAL_GetTick>
 8002314:	4602      	mov	r2, r0
 8002316:	68fb      	ldr	r3, [r7, #12]
 8002318:	1ad3      	subs	r3, r2, r3
 800231a:	2b0a      	cmp	r3, #10
 800231c:	d90b      	bls.n	8002336 <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 800231e:	687b      	ldr	r3, [r7, #4]
 8002320:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002322:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8002326:	687b      	ldr	r3, [r7, #4]
 8002328:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 800232a:	687b      	ldr	r3, [r7, #4]
 800232c:	2205      	movs	r2, #5
 800232e:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8002332:	2301      	movs	r3, #1
 8002334:	e09f      	b.n	8002476 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8002336:	687b      	ldr	r3, [r7, #4]
 8002338:	681b      	ldr	r3, [r3, #0]
 800233a:	685b      	ldr	r3, [r3, #4]
 800233c:	f003 0302 	and.w	r3, r3, #2
 8002340:	2b00      	cmp	r3, #0
 8002342:	d1e5      	bne.n	8002310 <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 8002344:	687b      	ldr	r3, [r7, #4]
 8002346:	7e1b      	ldrb	r3, [r3, #24]
 8002348:	2b01      	cmp	r3, #1
 800234a:	d108      	bne.n	800235e <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 800234c:	687b      	ldr	r3, [r7, #4]
 800234e:	681b      	ldr	r3, [r3, #0]
 8002350:	681a      	ldr	r2, [r3, #0]
 8002352:	687b      	ldr	r3, [r7, #4]
 8002354:	681b      	ldr	r3, [r3, #0]
 8002356:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800235a:	601a      	str	r2, [r3, #0]
 800235c:	e007      	b.n	800236e <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 800235e:	687b      	ldr	r3, [r7, #4]
 8002360:	681b      	ldr	r3, [r3, #0]
 8002362:	681a      	ldr	r2, [r3, #0]
 8002364:	687b      	ldr	r3, [r7, #4]
 8002366:	681b      	ldr	r3, [r3, #0]
 8002368:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800236c:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 800236e:	687b      	ldr	r3, [r7, #4]
 8002370:	7e5b      	ldrb	r3, [r3, #25]
 8002372:	2b01      	cmp	r3, #1
 8002374:	d108      	bne.n	8002388 <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8002376:	687b      	ldr	r3, [r7, #4]
 8002378:	681b      	ldr	r3, [r3, #0]
 800237a:	681a      	ldr	r2, [r3, #0]
 800237c:	687b      	ldr	r3, [r7, #4]
 800237e:	681b      	ldr	r3, [r3, #0]
 8002380:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002384:	601a      	str	r2, [r3, #0]
 8002386:	e007      	b.n	8002398 <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8002388:	687b      	ldr	r3, [r7, #4]
 800238a:	681b      	ldr	r3, [r3, #0]
 800238c:	681a      	ldr	r2, [r3, #0]
 800238e:	687b      	ldr	r3, [r7, #4]
 8002390:	681b      	ldr	r3, [r3, #0]
 8002392:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002396:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 8002398:	687b      	ldr	r3, [r7, #4]
 800239a:	7e9b      	ldrb	r3, [r3, #26]
 800239c:	2b01      	cmp	r3, #1
 800239e:	d108      	bne.n	80023b2 <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 80023a0:	687b      	ldr	r3, [r7, #4]
 80023a2:	681b      	ldr	r3, [r3, #0]
 80023a4:	681a      	ldr	r2, [r3, #0]
 80023a6:	687b      	ldr	r3, [r7, #4]
 80023a8:	681b      	ldr	r3, [r3, #0]
 80023aa:	f042 0220 	orr.w	r2, r2, #32
 80023ae:	601a      	str	r2, [r3, #0]
 80023b0:	e007      	b.n	80023c2 <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 80023b2:	687b      	ldr	r3, [r7, #4]
 80023b4:	681b      	ldr	r3, [r3, #0]
 80023b6:	681a      	ldr	r2, [r3, #0]
 80023b8:	687b      	ldr	r3, [r7, #4]
 80023ba:	681b      	ldr	r3, [r3, #0]
 80023bc:	f022 0220 	bic.w	r2, r2, #32
 80023c0:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 80023c2:	687b      	ldr	r3, [r7, #4]
 80023c4:	7edb      	ldrb	r3, [r3, #27]
 80023c6:	2b01      	cmp	r3, #1
 80023c8:	d108      	bne.n	80023dc <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 80023ca:	687b      	ldr	r3, [r7, #4]
 80023cc:	681b      	ldr	r3, [r3, #0]
 80023ce:	681a      	ldr	r2, [r3, #0]
 80023d0:	687b      	ldr	r3, [r7, #4]
 80023d2:	681b      	ldr	r3, [r3, #0]
 80023d4:	f022 0210 	bic.w	r2, r2, #16
 80023d8:	601a      	str	r2, [r3, #0]
 80023da:	e007      	b.n	80023ec <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 80023dc:	687b      	ldr	r3, [r7, #4]
 80023de:	681b      	ldr	r3, [r3, #0]
 80023e0:	681a      	ldr	r2, [r3, #0]
 80023e2:	687b      	ldr	r3, [r7, #4]
 80023e4:	681b      	ldr	r3, [r3, #0]
 80023e6:	f042 0210 	orr.w	r2, r2, #16
 80023ea:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 80023ec:	687b      	ldr	r3, [r7, #4]
 80023ee:	7f1b      	ldrb	r3, [r3, #28]
 80023f0:	2b01      	cmp	r3, #1
 80023f2:	d108      	bne.n	8002406 <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 80023f4:	687b      	ldr	r3, [r7, #4]
 80023f6:	681b      	ldr	r3, [r3, #0]
 80023f8:	681a      	ldr	r2, [r3, #0]
 80023fa:	687b      	ldr	r3, [r7, #4]
 80023fc:	681b      	ldr	r3, [r3, #0]
 80023fe:	f042 0208 	orr.w	r2, r2, #8
 8002402:	601a      	str	r2, [r3, #0]
 8002404:	e007      	b.n	8002416 <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8002406:	687b      	ldr	r3, [r7, #4]
 8002408:	681b      	ldr	r3, [r3, #0]
 800240a:	681a      	ldr	r2, [r3, #0]
 800240c:	687b      	ldr	r3, [r7, #4]
 800240e:	681b      	ldr	r3, [r3, #0]
 8002410:	f022 0208 	bic.w	r2, r2, #8
 8002414:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 8002416:	687b      	ldr	r3, [r7, #4]
 8002418:	7f5b      	ldrb	r3, [r3, #29]
 800241a:	2b01      	cmp	r3, #1
 800241c:	d108      	bne.n	8002430 <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 800241e:	687b      	ldr	r3, [r7, #4]
 8002420:	681b      	ldr	r3, [r3, #0]
 8002422:	681a      	ldr	r2, [r3, #0]
 8002424:	687b      	ldr	r3, [r7, #4]
 8002426:	681b      	ldr	r3, [r3, #0]
 8002428:	f042 0204 	orr.w	r2, r2, #4
 800242c:	601a      	str	r2, [r3, #0]
 800242e:	e007      	b.n	8002440 <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8002430:	687b      	ldr	r3, [r7, #4]
 8002432:	681b      	ldr	r3, [r3, #0]
 8002434:	681a      	ldr	r2, [r3, #0]
 8002436:	687b      	ldr	r3, [r7, #4]
 8002438:	681b      	ldr	r3, [r3, #0]
 800243a:	f022 0204 	bic.w	r2, r2, #4
 800243e:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 8002440:	687b      	ldr	r3, [r7, #4]
 8002442:	689a      	ldr	r2, [r3, #8]
 8002444:	687b      	ldr	r3, [r7, #4]
 8002446:	68db      	ldr	r3, [r3, #12]
 8002448:	431a      	orrs	r2, r3
 800244a:	687b      	ldr	r3, [r7, #4]
 800244c:	691b      	ldr	r3, [r3, #16]
 800244e:	431a      	orrs	r2, r3
 8002450:	687b      	ldr	r3, [r7, #4]
 8002452:	695b      	ldr	r3, [r3, #20]
 8002454:	ea42 0103 	orr.w	r1, r2, r3
 8002458:	687b      	ldr	r3, [r7, #4]
 800245a:	685b      	ldr	r3, [r3, #4]
 800245c:	1e5a      	subs	r2, r3, #1
 800245e:	687b      	ldr	r3, [r7, #4]
 8002460:	681b      	ldr	r3, [r3, #0]
 8002462:	430a      	orrs	r2, r1
 8002464:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8002466:	687b      	ldr	r3, [r7, #4]
 8002468:	2200      	movs	r2, #0
 800246a:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 800246c:	687b      	ldr	r3, [r7, #4]
 800246e:	2201      	movs	r2, #1
 8002470:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 8002474:	2300      	movs	r3, #0
}
 8002476:	4618      	mov	r0, r3
 8002478:	3710      	adds	r7, #16
 800247a:	46bd      	mov	sp, r7
 800247c:	bd80      	pop	{r7, pc}

0800247e <HAL_CAN_IRQHandler>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
void HAL_CAN_IRQHandler(CAN_HandleTypeDef *hcan)
{
 800247e:	b580      	push	{r7, lr}
 8002480:	b08a      	sub	sp, #40	; 0x28
 8002482:	af00      	add	r7, sp, #0
 8002484:	6078      	str	r0, [r7, #4]
  uint32_t errorcode = HAL_CAN_ERROR_NONE;
 8002486:	2300      	movs	r3, #0
 8002488:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t interrupts = READ_REG(hcan->Instance->IER);
 800248a:	687b      	ldr	r3, [r7, #4]
 800248c:	681b      	ldr	r3, [r3, #0]
 800248e:	695b      	ldr	r3, [r3, #20]
 8002490:	623b      	str	r3, [r7, #32]
  uint32_t msrflags = READ_REG(hcan->Instance->MSR);
 8002492:	687b      	ldr	r3, [r7, #4]
 8002494:	681b      	ldr	r3, [r3, #0]
 8002496:	685b      	ldr	r3, [r3, #4]
 8002498:	61fb      	str	r3, [r7, #28]
  uint32_t tsrflags = READ_REG(hcan->Instance->TSR);
 800249a:	687b      	ldr	r3, [r7, #4]
 800249c:	681b      	ldr	r3, [r3, #0]
 800249e:	689b      	ldr	r3, [r3, #8]
 80024a0:	61bb      	str	r3, [r7, #24]
  uint32_t rf0rflags = READ_REG(hcan->Instance->RF0R);
 80024a2:	687b      	ldr	r3, [r7, #4]
 80024a4:	681b      	ldr	r3, [r3, #0]
 80024a6:	68db      	ldr	r3, [r3, #12]
 80024a8:	617b      	str	r3, [r7, #20]
  uint32_t rf1rflags = READ_REG(hcan->Instance->RF1R);
 80024aa:	687b      	ldr	r3, [r7, #4]
 80024ac:	681b      	ldr	r3, [r3, #0]
 80024ae:	691b      	ldr	r3, [r3, #16]
 80024b0:	613b      	str	r3, [r7, #16]
  uint32_t esrflags = READ_REG(hcan->Instance->ESR);
 80024b2:	687b      	ldr	r3, [r7, #4]
 80024b4:	681b      	ldr	r3, [r3, #0]
 80024b6:	699b      	ldr	r3, [r3, #24]
 80024b8:	60fb      	str	r3, [r7, #12]

  /* Transmit Mailbox empty interrupt management *****************************/
  if ((interrupts & CAN_IT_TX_MAILBOX_EMPTY) != 0U)
 80024ba:	6a3b      	ldr	r3, [r7, #32]
 80024bc:	f003 0301 	and.w	r3, r3, #1
 80024c0:	2b00      	cmp	r3, #0
 80024c2:	d07c      	beq.n	80025be <HAL_CAN_IRQHandler+0x140>
  {
    /* Transmit Mailbox 0 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP0) != 0U)
 80024c4:	69bb      	ldr	r3, [r7, #24]
 80024c6:	f003 0301 	and.w	r3, r3, #1
 80024ca:	2b00      	cmp	r3, #0
 80024cc:	d023      	beq.n	8002516 <HAL_CAN_IRQHandler+0x98>
    {
      /* Clear the Transmission Complete flag (and TXOK0,ALST0,TERR0 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP0);
 80024ce:	687b      	ldr	r3, [r7, #4]
 80024d0:	681b      	ldr	r3, [r3, #0]
 80024d2:	2201      	movs	r2, #1
 80024d4:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK0) != 0U)
 80024d6:	69bb      	ldr	r3, [r7, #24]
 80024d8:	f003 0302 	and.w	r3, r3, #2
 80024dc:	2b00      	cmp	r3, #0
 80024de:	d003      	beq.n	80024e8 <HAL_CAN_IRQHandler+0x6a>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox0CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox0CompleteCallback(hcan);
 80024e0:	6878      	ldr	r0, [r7, #4]
 80024e2:	f000 f983 	bl	80027ec <HAL_CAN_TxMailbox0CompleteCallback>
 80024e6:	e016      	b.n	8002516 <HAL_CAN_IRQHandler+0x98>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST0) != 0U)
 80024e8:	69bb      	ldr	r3, [r7, #24]
 80024ea:	f003 0304 	and.w	r3, r3, #4
 80024ee:	2b00      	cmp	r3, #0
 80024f0:	d004      	beq.n	80024fc <HAL_CAN_IRQHandler+0x7e>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST0;
 80024f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80024f4:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80024f8:	627b      	str	r3, [r7, #36]	; 0x24
 80024fa:	e00c      	b.n	8002516 <HAL_CAN_IRQHandler+0x98>
        }
        else if ((tsrflags & CAN_TSR_TERR0) != 0U)
 80024fc:	69bb      	ldr	r3, [r7, #24]
 80024fe:	f003 0308 	and.w	r3, r3, #8
 8002502:	2b00      	cmp	r3, #0
 8002504:	d004      	beq.n	8002510 <HAL_CAN_IRQHandler+0x92>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR0;
 8002506:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002508:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800250c:	627b      	str	r3, [r7, #36]	; 0x24
 800250e:	e002      	b.n	8002516 <HAL_CAN_IRQHandler+0x98>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox0AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox0AbortCallback(hcan);
 8002510:	6878      	ldr	r0, [r7, #4]
 8002512:	f000 f989 	bl	8002828 <HAL_CAN_TxMailbox0AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 1 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP1) != 0U)
 8002516:	69bb      	ldr	r3, [r7, #24]
 8002518:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800251c:	2b00      	cmp	r3, #0
 800251e:	d024      	beq.n	800256a <HAL_CAN_IRQHandler+0xec>
    {
      /* Clear the Transmission Complete flag (and TXOK1,ALST1,TERR1 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP1);
 8002520:	687b      	ldr	r3, [r7, #4]
 8002522:	681b      	ldr	r3, [r3, #0]
 8002524:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002528:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK1) != 0U)
 800252a:	69bb      	ldr	r3, [r7, #24]
 800252c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002530:	2b00      	cmp	r3, #0
 8002532:	d003      	beq.n	800253c <HAL_CAN_IRQHandler+0xbe>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox1CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox1CompleteCallback(hcan);
 8002534:	6878      	ldr	r0, [r7, #4]
 8002536:	f000 f963 	bl	8002800 <HAL_CAN_TxMailbox1CompleteCallback>
 800253a:	e016      	b.n	800256a <HAL_CAN_IRQHandler+0xec>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST1) != 0U)
 800253c:	69bb      	ldr	r3, [r7, #24]
 800253e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002542:	2b00      	cmp	r3, #0
 8002544:	d004      	beq.n	8002550 <HAL_CAN_IRQHandler+0xd2>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST1;
 8002546:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002548:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 800254c:	627b      	str	r3, [r7, #36]	; 0x24
 800254e:	e00c      	b.n	800256a <HAL_CAN_IRQHandler+0xec>
        }
        else if ((tsrflags & CAN_TSR_TERR1) != 0U)
 8002550:	69bb      	ldr	r3, [r7, #24]
 8002552:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002556:	2b00      	cmp	r3, #0
 8002558:	d004      	beq.n	8002564 <HAL_CAN_IRQHandler+0xe6>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR1;
 800255a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800255c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002560:	627b      	str	r3, [r7, #36]	; 0x24
 8002562:	e002      	b.n	800256a <HAL_CAN_IRQHandler+0xec>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox1AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox1AbortCallback(hcan);
 8002564:	6878      	ldr	r0, [r7, #4]
 8002566:	f000 f969 	bl	800283c <HAL_CAN_TxMailbox1AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 2 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP2) != 0U)
 800256a:	69bb      	ldr	r3, [r7, #24]
 800256c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002570:	2b00      	cmp	r3, #0
 8002572:	d024      	beq.n	80025be <HAL_CAN_IRQHandler+0x140>
    {
      /* Clear the Transmission Complete flag (and TXOK2,ALST2,TERR2 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP2);
 8002574:	687b      	ldr	r3, [r7, #4]
 8002576:	681b      	ldr	r3, [r3, #0]
 8002578:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 800257c:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK2) != 0U)
 800257e:	69bb      	ldr	r3, [r7, #24]
 8002580:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002584:	2b00      	cmp	r3, #0
 8002586:	d003      	beq.n	8002590 <HAL_CAN_IRQHandler+0x112>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox2CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox2CompleteCallback(hcan);
 8002588:	6878      	ldr	r0, [r7, #4]
 800258a:	f000 f943 	bl	8002814 <HAL_CAN_TxMailbox2CompleteCallback>
 800258e:	e016      	b.n	80025be <HAL_CAN_IRQHandler+0x140>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST2) != 0U)
 8002590:	69bb      	ldr	r3, [r7, #24]
 8002592:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002596:	2b00      	cmp	r3, #0
 8002598:	d004      	beq.n	80025a4 <HAL_CAN_IRQHandler+0x126>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST2;
 800259a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800259c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80025a0:	627b      	str	r3, [r7, #36]	; 0x24
 80025a2:	e00c      	b.n	80025be <HAL_CAN_IRQHandler+0x140>
        }
        else if ((tsrflags & CAN_TSR_TERR2) != 0U)
 80025a4:	69bb      	ldr	r3, [r7, #24]
 80025a6:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80025aa:	2b00      	cmp	r3, #0
 80025ac:	d004      	beq.n	80025b8 <HAL_CAN_IRQHandler+0x13a>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR2;
 80025ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80025b0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80025b4:	627b      	str	r3, [r7, #36]	; 0x24
 80025b6:	e002      	b.n	80025be <HAL_CAN_IRQHandler+0x140>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox2AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox2AbortCallback(hcan);
 80025b8:	6878      	ldr	r0, [r7, #4]
 80025ba:	f000 f949 	bl	8002850 <HAL_CAN_TxMailbox2AbortCallback>
      }
    }
  }

  /* Receive FIFO 0 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO0_OVERRUN) != 0U)
 80025be:	6a3b      	ldr	r3, [r7, #32]
 80025c0:	f003 0308 	and.w	r3, r3, #8
 80025c4:	2b00      	cmp	r3, #0
 80025c6:	d00c      	beq.n	80025e2 <HAL_CAN_IRQHandler+0x164>
  {
    if ((rf0rflags & CAN_RF0R_FOVR0) != 0U)
 80025c8:	697b      	ldr	r3, [r7, #20]
 80025ca:	f003 0310 	and.w	r3, r3, #16
 80025ce:	2b00      	cmp	r3, #0
 80025d0:	d007      	beq.n	80025e2 <HAL_CAN_IRQHandler+0x164>
    {
      /* Set CAN error code to Rx Fifo 0 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV0;
 80025d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80025d4:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80025d8:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO0 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV0);
 80025da:	687b      	ldr	r3, [r7, #4]
 80025dc:	681b      	ldr	r3, [r3, #0]
 80025de:	2210      	movs	r2, #16
 80025e0:	60da      	str	r2, [r3, #12]
    }
  }

  /* Receive FIFO 0 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO0_FULL) != 0U)
 80025e2:	6a3b      	ldr	r3, [r7, #32]
 80025e4:	f003 0304 	and.w	r3, r3, #4
 80025e8:	2b00      	cmp	r3, #0
 80025ea:	d00b      	beq.n	8002604 <HAL_CAN_IRQHandler+0x186>
  {
    if ((rf0rflags & CAN_RF0R_FULL0) != 0U)
 80025ec:	697b      	ldr	r3, [r7, #20]
 80025ee:	f003 0308 	and.w	r3, r3, #8
 80025f2:	2b00      	cmp	r3, #0
 80025f4:	d006      	beq.n	8002604 <HAL_CAN_IRQHandler+0x186>
    {
      /* Clear FIFO 0 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF0);
 80025f6:	687b      	ldr	r3, [r7, #4]
 80025f8:	681b      	ldr	r3, [r3, #0]
 80025fa:	2208      	movs	r2, #8
 80025fc:	60da      	str	r2, [r3, #12]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0FullCallback(hcan);
 80025fe:	6878      	ldr	r0, [r7, #4]
 8002600:	f000 f930 	bl	8002864 <HAL_CAN_RxFifo0FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 0 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO0_MSG_PENDING) != 0U)
 8002604:	6a3b      	ldr	r3, [r7, #32]
 8002606:	f003 0302 	and.w	r3, r3, #2
 800260a:	2b00      	cmp	r3, #0
 800260c:	d009      	beq.n	8002622 <HAL_CAN_IRQHandler+0x1a4>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) != 0U)
 800260e:	687b      	ldr	r3, [r7, #4]
 8002610:	681b      	ldr	r3, [r3, #0]
 8002612:	68db      	ldr	r3, [r3, #12]
 8002614:	f003 0303 	and.w	r3, r3, #3
 8002618:	2b00      	cmp	r3, #0
 800261a:	d002      	beq.n	8002622 <HAL_CAN_IRQHandler+0x1a4>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0MsgPendingCallback(hcan);
 800261c:	6878      	ldr	r0, [r7, #4]
 800261e:	f7fe fdc5 	bl	80011ac <HAL_CAN_RxFifo0MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO1_OVERRUN) != 0U)
 8002622:	6a3b      	ldr	r3, [r7, #32]
 8002624:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002628:	2b00      	cmp	r3, #0
 800262a:	d00c      	beq.n	8002646 <HAL_CAN_IRQHandler+0x1c8>
  {
    if ((rf1rflags & CAN_RF1R_FOVR1) != 0U)
 800262c:	693b      	ldr	r3, [r7, #16]
 800262e:	f003 0310 	and.w	r3, r3, #16
 8002632:	2b00      	cmp	r3, #0
 8002634:	d007      	beq.n	8002646 <HAL_CAN_IRQHandler+0x1c8>
    {
      /* Set CAN error code to Rx Fifo 1 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV1;
 8002636:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002638:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800263c:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO1 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV1);
 800263e:	687b      	ldr	r3, [r7, #4]
 8002640:	681b      	ldr	r3, [r3, #0]
 8002642:	2210      	movs	r2, #16
 8002644:	611a      	str	r2, [r3, #16]
    }
  }

  /* Receive FIFO 1 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO1_FULL) != 0U)
 8002646:	6a3b      	ldr	r3, [r7, #32]
 8002648:	f003 0320 	and.w	r3, r3, #32
 800264c:	2b00      	cmp	r3, #0
 800264e:	d00b      	beq.n	8002668 <HAL_CAN_IRQHandler+0x1ea>
  {
    if ((rf1rflags & CAN_RF1R_FULL1) != 0U)
 8002650:	693b      	ldr	r3, [r7, #16]
 8002652:	f003 0308 	and.w	r3, r3, #8
 8002656:	2b00      	cmp	r3, #0
 8002658:	d006      	beq.n	8002668 <HAL_CAN_IRQHandler+0x1ea>
    {
      /* Clear FIFO 1 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF1);
 800265a:	687b      	ldr	r3, [r7, #4]
 800265c:	681b      	ldr	r3, [r3, #0]
 800265e:	2208      	movs	r2, #8
 8002660:	611a      	str	r2, [r3, #16]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1FullCallback(hcan);
 8002662:	6878      	ldr	r0, [r7, #4]
 8002664:	f000 f912 	bl	800288c <HAL_CAN_RxFifo1FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO1_MSG_PENDING) != 0U)
 8002668:	6a3b      	ldr	r3, [r7, #32]
 800266a:	f003 0310 	and.w	r3, r3, #16
 800266e:	2b00      	cmp	r3, #0
 8002670:	d009      	beq.n	8002686 <HAL_CAN_IRQHandler+0x208>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) != 0U)
 8002672:	687b      	ldr	r3, [r7, #4]
 8002674:	681b      	ldr	r3, [r3, #0]
 8002676:	691b      	ldr	r3, [r3, #16]
 8002678:	f003 0303 	and.w	r3, r3, #3
 800267c:	2b00      	cmp	r3, #0
 800267e:	d002      	beq.n	8002686 <HAL_CAN_IRQHandler+0x208>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1MsgPendingCallback(hcan);
 8002680:	6878      	ldr	r0, [r7, #4]
 8002682:	f000 f8f9 	bl	8002878 <HAL_CAN_RxFifo1MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Sleep interrupt management *********************************************/
  if ((interrupts & CAN_IT_SLEEP_ACK) != 0U)
 8002686:	6a3b      	ldr	r3, [r7, #32]
 8002688:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800268c:	2b00      	cmp	r3, #0
 800268e:	d00b      	beq.n	80026a8 <HAL_CAN_IRQHandler+0x22a>
  {
    if ((msrflags & CAN_MSR_SLAKI) != 0U)
 8002690:	69fb      	ldr	r3, [r7, #28]
 8002692:	f003 0310 	and.w	r3, r3, #16
 8002696:	2b00      	cmp	r3, #0
 8002698:	d006      	beq.n	80026a8 <HAL_CAN_IRQHandler+0x22a>
    {
      /* Clear Sleep interrupt Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_SLAKI);
 800269a:	687b      	ldr	r3, [r7, #4]
 800269c:	681b      	ldr	r3, [r3, #0]
 800269e:	2210      	movs	r2, #16
 80026a0:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->SleepCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_SleepCallback(hcan);
 80026a2:	6878      	ldr	r0, [r7, #4]
 80026a4:	f000 f8fc 	bl	80028a0 <HAL_CAN_SleepCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* WakeUp interrupt management *********************************************/
  if ((interrupts & CAN_IT_WAKEUP) != 0U)
 80026a8:	6a3b      	ldr	r3, [r7, #32]
 80026aa:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80026ae:	2b00      	cmp	r3, #0
 80026b0:	d00b      	beq.n	80026ca <HAL_CAN_IRQHandler+0x24c>
  {
    if ((msrflags & CAN_MSR_WKUI) != 0U)
 80026b2:	69fb      	ldr	r3, [r7, #28]
 80026b4:	f003 0308 	and.w	r3, r3, #8
 80026b8:	2b00      	cmp	r3, #0
 80026ba:	d006      	beq.n	80026ca <HAL_CAN_IRQHandler+0x24c>
    {
      /* Clear WakeUp Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_WKU);
 80026bc:	687b      	ldr	r3, [r7, #4]
 80026be:	681b      	ldr	r3, [r3, #0]
 80026c0:	2208      	movs	r2, #8
 80026c2:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->WakeUpFromRxMsgCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_WakeUpFromRxMsgCallback(hcan);
 80026c4:	6878      	ldr	r0, [r7, #4]
 80026c6:	f000 f8f5 	bl	80028b4 <HAL_CAN_WakeUpFromRxMsgCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Error interrupts management *********************************************/
  if ((interrupts & CAN_IT_ERROR) != 0U)
 80026ca:	6a3b      	ldr	r3, [r7, #32]
 80026cc:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80026d0:	2b00      	cmp	r3, #0
 80026d2:	d07b      	beq.n	80027cc <HAL_CAN_IRQHandler+0x34e>
  {
    if ((msrflags & CAN_MSR_ERRI) != 0U)
 80026d4:	69fb      	ldr	r3, [r7, #28]
 80026d6:	f003 0304 	and.w	r3, r3, #4
 80026da:	2b00      	cmp	r3, #0
 80026dc:	d072      	beq.n	80027c4 <HAL_CAN_IRQHandler+0x346>
    {
      /* Check Error Warning Flag */
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 80026de:	6a3b      	ldr	r3, [r7, #32]
 80026e0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80026e4:	2b00      	cmp	r3, #0
 80026e6:	d008      	beq.n	80026fa <HAL_CAN_IRQHandler+0x27c>
          ((esrflags & CAN_ESR_EWGF) != 0U))
 80026e8:	68fb      	ldr	r3, [r7, #12]
 80026ea:	f003 0301 	and.w	r3, r3, #1
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 80026ee:	2b00      	cmp	r3, #0
 80026f0:	d003      	beq.n	80026fa <HAL_CAN_IRQHandler+0x27c>
      {
        /* Set CAN error code to Error Warning */
        errorcode |= HAL_CAN_ERROR_EWG;
 80026f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80026f4:	f043 0301 	orr.w	r3, r3, #1
 80026f8:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Warning Flag as read-only */
      }

      /* Check Error Passive Flag */
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 80026fa:	6a3b      	ldr	r3, [r7, #32]
 80026fc:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002700:	2b00      	cmp	r3, #0
 8002702:	d008      	beq.n	8002716 <HAL_CAN_IRQHandler+0x298>
          ((esrflags & CAN_ESR_EPVF) != 0U))
 8002704:	68fb      	ldr	r3, [r7, #12]
 8002706:	f003 0302 	and.w	r3, r3, #2
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 800270a:	2b00      	cmp	r3, #0
 800270c:	d003      	beq.n	8002716 <HAL_CAN_IRQHandler+0x298>
      {
        /* Set CAN error code to Error Passive */
        errorcode |= HAL_CAN_ERROR_EPV;
 800270e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002710:	f043 0302 	orr.w	r3, r3, #2
 8002714:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Passive Flag as read-only */
      }

      /* Check Bus-off Flag */
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 8002716:	6a3b      	ldr	r3, [r7, #32]
 8002718:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800271c:	2b00      	cmp	r3, #0
 800271e:	d008      	beq.n	8002732 <HAL_CAN_IRQHandler+0x2b4>
          ((esrflags & CAN_ESR_BOFF) != 0U))
 8002720:	68fb      	ldr	r3, [r7, #12]
 8002722:	f003 0304 	and.w	r3, r3, #4
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 8002726:	2b00      	cmp	r3, #0
 8002728:	d003      	beq.n	8002732 <HAL_CAN_IRQHandler+0x2b4>
      {
        /* Set CAN error code to Bus-Off */
        errorcode |= HAL_CAN_ERROR_BOF;
 800272a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800272c:	f043 0304 	orr.w	r3, r3, #4
 8002730:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Bus-Off as read-only */
      }

      /* Check Last Error Code Flag */
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 8002732:	6a3b      	ldr	r3, [r7, #32]
 8002734:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002738:	2b00      	cmp	r3, #0
 800273a:	d043      	beq.n	80027c4 <HAL_CAN_IRQHandler+0x346>
          ((esrflags & CAN_ESR_LEC) != 0U))
 800273c:	68fb      	ldr	r3, [r7, #12]
 800273e:	f003 0370 	and.w	r3, r3, #112	; 0x70
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 8002742:	2b00      	cmp	r3, #0
 8002744:	d03e      	beq.n	80027c4 <HAL_CAN_IRQHandler+0x346>
      {
        switch (esrflags & CAN_ESR_LEC)
 8002746:	68fb      	ldr	r3, [r7, #12]
 8002748:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800274c:	2b60      	cmp	r3, #96	; 0x60
 800274e:	d02b      	beq.n	80027a8 <HAL_CAN_IRQHandler+0x32a>
 8002750:	2b60      	cmp	r3, #96	; 0x60
 8002752:	d82e      	bhi.n	80027b2 <HAL_CAN_IRQHandler+0x334>
 8002754:	2b50      	cmp	r3, #80	; 0x50
 8002756:	d022      	beq.n	800279e <HAL_CAN_IRQHandler+0x320>
 8002758:	2b50      	cmp	r3, #80	; 0x50
 800275a:	d82a      	bhi.n	80027b2 <HAL_CAN_IRQHandler+0x334>
 800275c:	2b40      	cmp	r3, #64	; 0x40
 800275e:	d019      	beq.n	8002794 <HAL_CAN_IRQHandler+0x316>
 8002760:	2b40      	cmp	r3, #64	; 0x40
 8002762:	d826      	bhi.n	80027b2 <HAL_CAN_IRQHandler+0x334>
 8002764:	2b30      	cmp	r3, #48	; 0x30
 8002766:	d010      	beq.n	800278a <HAL_CAN_IRQHandler+0x30c>
 8002768:	2b30      	cmp	r3, #48	; 0x30
 800276a:	d822      	bhi.n	80027b2 <HAL_CAN_IRQHandler+0x334>
 800276c:	2b10      	cmp	r3, #16
 800276e:	d002      	beq.n	8002776 <HAL_CAN_IRQHandler+0x2f8>
 8002770:	2b20      	cmp	r3, #32
 8002772:	d005      	beq.n	8002780 <HAL_CAN_IRQHandler+0x302>
          case (CAN_ESR_LEC_2 | CAN_ESR_LEC_1):
            /* Set CAN error code to CRC error */
            errorcode |= HAL_CAN_ERROR_CRC;
            break;
          default:
            break;
 8002774:	e01d      	b.n	80027b2 <HAL_CAN_IRQHandler+0x334>
            errorcode |= HAL_CAN_ERROR_STF;
 8002776:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002778:	f043 0308 	orr.w	r3, r3, #8
 800277c:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 800277e:	e019      	b.n	80027b4 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_FOR;
 8002780:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002782:	f043 0310 	orr.w	r3, r3, #16
 8002786:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8002788:	e014      	b.n	80027b4 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_ACK;
 800278a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800278c:	f043 0320 	orr.w	r3, r3, #32
 8002790:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8002792:	e00f      	b.n	80027b4 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BR;
 8002794:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002796:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800279a:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 800279c:	e00a      	b.n	80027b4 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BD;
 800279e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80027a0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80027a4:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 80027a6:	e005      	b.n	80027b4 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_CRC;
 80027a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80027aa:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80027ae:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 80027b0:	e000      	b.n	80027b4 <HAL_CAN_IRQHandler+0x336>
            break;
 80027b2:	bf00      	nop
        }

        /* Clear Last error code Flag */
        CLEAR_BIT(hcan->Instance->ESR, CAN_ESR_LEC);
 80027b4:	687b      	ldr	r3, [r7, #4]
 80027b6:	681b      	ldr	r3, [r3, #0]
 80027b8:	699a      	ldr	r2, [r3, #24]
 80027ba:	687b      	ldr	r3, [r7, #4]
 80027bc:	681b      	ldr	r3, [r3, #0]
 80027be:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 80027c2:	619a      	str	r2, [r3, #24]
      }
    }

    /* Clear ERRI Flag */
    __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_ERRI);
 80027c4:	687b      	ldr	r3, [r7, #4]
 80027c6:	681b      	ldr	r3, [r3, #0]
 80027c8:	2204      	movs	r2, #4
 80027ca:	605a      	str	r2, [r3, #4]
  }

  /* Call the Error call Back in case of Errors */
  if (errorcode != HAL_CAN_ERROR_NONE)
 80027cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80027ce:	2b00      	cmp	r3, #0
 80027d0:	d008      	beq.n	80027e4 <HAL_CAN_IRQHandler+0x366>
  {
    /* Update error code in handle */
    hcan->ErrorCode |= errorcode;
 80027d2:	687b      	ldr	r3, [r7, #4]
 80027d4:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80027d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80027d8:	431a      	orrs	r2, r3
 80027da:	687b      	ldr	r3, [r7, #4]
 80027dc:	625a      	str	r2, [r3, #36]	; 0x24
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hcan->ErrorCallback(hcan);
#else
    /* Call weak (surcharged) callback */
    HAL_CAN_ErrorCallback(hcan);
 80027de:	6878      	ldr	r0, [r7, #4]
 80027e0:	f000 f872 	bl	80028c8 <HAL_CAN_ErrorCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
  }
}
 80027e4:	bf00      	nop
 80027e6:	3728      	adds	r7, #40	; 0x28
 80027e8:	46bd      	mov	sp, r7
 80027ea:	bd80      	pop	{r7, pc}

080027ec <HAL_CAN_TxMailbox0CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0CompleteCallback(CAN_HandleTypeDef *hcan)
{
 80027ec:	b480      	push	{r7}
 80027ee:	b083      	sub	sp, #12
 80027f0:	af00      	add	r7, sp, #0
 80027f2:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0CompleteCallback could be implemented in the
            user file
   */
}
 80027f4:	bf00      	nop
 80027f6:	370c      	adds	r7, #12
 80027f8:	46bd      	mov	sp, r7
 80027fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027fe:	4770      	bx	lr

08002800 <HAL_CAN_TxMailbox1CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8002800:	b480      	push	{r7}
 8002802:	b083      	sub	sp, #12
 8002804:	af00      	add	r7, sp, #0
 8002806:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1CompleteCallback could be implemented in the
            user file
   */
}
 8002808:	bf00      	nop
 800280a:	370c      	adds	r7, #12
 800280c:	46bd      	mov	sp, r7
 800280e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002812:	4770      	bx	lr

08002814 <HAL_CAN_TxMailbox2CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8002814:	b480      	push	{r7}
 8002816:	b083      	sub	sp, #12
 8002818:	af00      	add	r7, sp, #0
 800281a:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2CompleteCallback could be implemented in the
            user file
   */
}
 800281c:	bf00      	nop
 800281e:	370c      	adds	r7, #12
 8002820:	46bd      	mov	sp, r7
 8002822:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002826:	4770      	bx	lr

08002828 <HAL_CAN_TxMailbox0AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0AbortCallback(CAN_HandleTypeDef *hcan)
{
 8002828:	b480      	push	{r7}
 800282a:	b083      	sub	sp, #12
 800282c:	af00      	add	r7, sp, #0
 800282e:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0AbortCallback could be implemented in the
            user file
   */
}
 8002830:	bf00      	nop
 8002832:	370c      	adds	r7, #12
 8002834:	46bd      	mov	sp, r7
 8002836:	f85d 7b04 	ldr.w	r7, [sp], #4
 800283a:	4770      	bx	lr

0800283c <HAL_CAN_TxMailbox1AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1AbortCallback(CAN_HandleTypeDef *hcan)
{
 800283c:	b480      	push	{r7}
 800283e:	b083      	sub	sp, #12
 8002840:	af00      	add	r7, sp, #0
 8002842:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1AbortCallback could be implemented in the
            user file
   */
}
 8002844:	bf00      	nop
 8002846:	370c      	adds	r7, #12
 8002848:	46bd      	mov	sp, r7
 800284a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800284e:	4770      	bx	lr

08002850 <HAL_CAN_TxMailbox2AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2AbortCallback(CAN_HandleTypeDef *hcan)
{
 8002850:	b480      	push	{r7}
 8002852:	b083      	sub	sp, #12
 8002854:	af00      	add	r7, sp, #0
 8002856:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2AbortCallback could be implemented in the
            user file
   */
}
 8002858:	bf00      	nop
 800285a:	370c      	adds	r7, #12
 800285c:	46bd      	mov	sp, r7
 800285e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002862:	4770      	bx	lr

08002864 <HAL_CAN_RxFifo0FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0FullCallback(CAN_HandleTypeDef *hcan)
{
 8002864:	b480      	push	{r7}
 8002866:	b083      	sub	sp, #12
 8002868:	af00      	add	r7, sp, #0
 800286a:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0FullCallback could be implemented in the user
            file
   */
}
 800286c:	bf00      	nop
 800286e:	370c      	adds	r7, #12
 8002870:	46bd      	mov	sp, r7
 8002872:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002876:	4770      	bx	lr

08002878 <HAL_CAN_RxFifo1MsgPendingCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 8002878:	b480      	push	{r7}
 800287a:	b083      	sub	sp, #12
 800287c:	af00      	add	r7, sp, #0
 800287e:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1MsgPendingCallback could be implemented in the
            user file
   */
}
 8002880:	bf00      	nop
 8002882:	370c      	adds	r7, #12
 8002884:	46bd      	mov	sp, r7
 8002886:	f85d 7b04 	ldr.w	r7, [sp], #4
 800288a:	4770      	bx	lr

0800288c <HAL_CAN_RxFifo1FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1FullCallback(CAN_HandleTypeDef *hcan)
{
 800288c:	b480      	push	{r7}
 800288e:	b083      	sub	sp, #12
 8002890:	af00      	add	r7, sp, #0
 8002892:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1FullCallback could be implemented in the user
            file
   */
}
 8002894:	bf00      	nop
 8002896:	370c      	adds	r7, #12
 8002898:	46bd      	mov	sp, r7
 800289a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800289e:	4770      	bx	lr

080028a0 <HAL_CAN_SleepCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_SleepCallback(CAN_HandleTypeDef *hcan)
{
 80028a0:	b480      	push	{r7}
 80028a2:	b083      	sub	sp, #12
 80028a4:	af00      	add	r7, sp, #0
 80028a6:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_SleepCallback could be implemented in the user file
   */
}
 80028a8:	bf00      	nop
 80028aa:	370c      	adds	r7, #12
 80028ac:	46bd      	mov	sp, r7
 80028ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028b2:	4770      	bx	lr

080028b4 <HAL_CAN_WakeUpFromRxMsgCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_WakeUpFromRxMsgCallback(CAN_HandleTypeDef *hcan)
{
 80028b4:	b480      	push	{r7}
 80028b6:	b083      	sub	sp, #12
 80028b8:	af00      	add	r7, sp, #0
 80028ba:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_WakeUpFromRxMsgCallback could be implemented in the
            user file
   */
}
 80028bc:	bf00      	nop
 80028be:	370c      	adds	r7, #12
 80028c0:	46bd      	mov	sp, r7
 80028c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028c6:	4770      	bx	lr

080028c8 <HAL_CAN_ErrorCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_ErrorCallback(CAN_HandleTypeDef *hcan)
{
 80028c8:	b480      	push	{r7}
 80028ca:	b083      	sub	sp, #12
 80028cc:	af00      	add	r7, sp, #0
 80028ce:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_ErrorCallback could be implemented in the user file
   */
}
 80028d0:	bf00      	nop
 80028d2:	370c      	adds	r7, #12
 80028d4:	46bd      	mov	sp, r7
 80028d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028da:	4770      	bx	lr

080028dc <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80028dc:	b480      	push	{r7}
 80028de:	b085      	sub	sp, #20
 80028e0:	af00      	add	r7, sp, #0
 80028e2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80028e4:	687b      	ldr	r3, [r7, #4]
 80028e6:	f003 0307 	and.w	r3, r3, #7
 80028ea:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80028ec:	4b0c      	ldr	r3, [pc, #48]	; (8002920 <__NVIC_SetPriorityGrouping+0x44>)
 80028ee:	68db      	ldr	r3, [r3, #12]
 80028f0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80028f2:	68ba      	ldr	r2, [r7, #8]
 80028f4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80028f8:	4013      	ands	r3, r2
 80028fa:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80028fc:	68fb      	ldr	r3, [r7, #12]
 80028fe:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002900:	68bb      	ldr	r3, [r7, #8]
 8002902:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002904:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002908:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800290c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800290e:	4a04      	ldr	r2, [pc, #16]	; (8002920 <__NVIC_SetPriorityGrouping+0x44>)
 8002910:	68bb      	ldr	r3, [r7, #8]
 8002912:	60d3      	str	r3, [r2, #12]
}
 8002914:	bf00      	nop
 8002916:	3714      	adds	r7, #20
 8002918:	46bd      	mov	sp, r7
 800291a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800291e:	4770      	bx	lr
 8002920:	e000ed00 	.word	0xe000ed00

08002924 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002924:	b480      	push	{r7}
 8002926:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002928:	4b04      	ldr	r3, [pc, #16]	; (800293c <__NVIC_GetPriorityGrouping+0x18>)
 800292a:	68db      	ldr	r3, [r3, #12]
 800292c:	0a1b      	lsrs	r3, r3, #8
 800292e:	f003 0307 	and.w	r3, r3, #7
}
 8002932:	4618      	mov	r0, r3
 8002934:	46bd      	mov	sp, r7
 8002936:	f85d 7b04 	ldr.w	r7, [sp], #4
 800293a:	4770      	bx	lr
 800293c:	e000ed00 	.word	0xe000ed00

08002940 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002940:	b480      	push	{r7}
 8002942:	b083      	sub	sp, #12
 8002944:	af00      	add	r7, sp, #0
 8002946:	4603      	mov	r3, r0
 8002948:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800294a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800294e:	2b00      	cmp	r3, #0
 8002950:	db0b      	blt.n	800296a <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002952:	79fb      	ldrb	r3, [r7, #7]
 8002954:	f003 021f 	and.w	r2, r3, #31
 8002958:	4907      	ldr	r1, [pc, #28]	; (8002978 <__NVIC_EnableIRQ+0x38>)
 800295a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800295e:	095b      	lsrs	r3, r3, #5
 8002960:	2001      	movs	r0, #1
 8002962:	fa00 f202 	lsl.w	r2, r0, r2
 8002966:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800296a:	bf00      	nop
 800296c:	370c      	adds	r7, #12
 800296e:	46bd      	mov	sp, r7
 8002970:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002974:	4770      	bx	lr
 8002976:	bf00      	nop
 8002978:	e000e100 	.word	0xe000e100

0800297c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800297c:	b480      	push	{r7}
 800297e:	b083      	sub	sp, #12
 8002980:	af00      	add	r7, sp, #0
 8002982:	4603      	mov	r3, r0
 8002984:	6039      	str	r1, [r7, #0]
 8002986:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002988:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800298c:	2b00      	cmp	r3, #0
 800298e:	db0a      	blt.n	80029a6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002990:	683b      	ldr	r3, [r7, #0]
 8002992:	b2da      	uxtb	r2, r3
 8002994:	490c      	ldr	r1, [pc, #48]	; (80029c8 <__NVIC_SetPriority+0x4c>)
 8002996:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800299a:	0112      	lsls	r2, r2, #4
 800299c:	b2d2      	uxtb	r2, r2
 800299e:	440b      	add	r3, r1
 80029a0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80029a4:	e00a      	b.n	80029bc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80029a6:	683b      	ldr	r3, [r7, #0]
 80029a8:	b2da      	uxtb	r2, r3
 80029aa:	4908      	ldr	r1, [pc, #32]	; (80029cc <__NVIC_SetPriority+0x50>)
 80029ac:	79fb      	ldrb	r3, [r7, #7]
 80029ae:	f003 030f 	and.w	r3, r3, #15
 80029b2:	3b04      	subs	r3, #4
 80029b4:	0112      	lsls	r2, r2, #4
 80029b6:	b2d2      	uxtb	r2, r2
 80029b8:	440b      	add	r3, r1
 80029ba:	761a      	strb	r2, [r3, #24]
}
 80029bc:	bf00      	nop
 80029be:	370c      	adds	r7, #12
 80029c0:	46bd      	mov	sp, r7
 80029c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029c6:	4770      	bx	lr
 80029c8:	e000e100 	.word	0xe000e100
 80029cc:	e000ed00 	.word	0xe000ed00

080029d0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80029d0:	b480      	push	{r7}
 80029d2:	b089      	sub	sp, #36	; 0x24
 80029d4:	af00      	add	r7, sp, #0
 80029d6:	60f8      	str	r0, [r7, #12]
 80029d8:	60b9      	str	r1, [r7, #8]
 80029da:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80029dc:	68fb      	ldr	r3, [r7, #12]
 80029de:	f003 0307 	and.w	r3, r3, #7
 80029e2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80029e4:	69fb      	ldr	r3, [r7, #28]
 80029e6:	f1c3 0307 	rsb	r3, r3, #7
 80029ea:	2b04      	cmp	r3, #4
 80029ec:	bf28      	it	cs
 80029ee:	2304      	movcs	r3, #4
 80029f0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80029f2:	69fb      	ldr	r3, [r7, #28]
 80029f4:	3304      	adds	r3, #4
 80029f6:	2b06      	cmp	r3, #6
 80029f8:	d902      	bls.n	8002a00 <NVIC_EncodePriority+0x30>
 80029fa:	69fb      	ldr	r3, [r7, #28]
 80029fc:	3b03      	subs	r3, #3
 80029fe:	e000      	b.n	8002a02 <NVIC_EncodePriority+0x32>
 8002a00:	2300      	movs	r3, #0
 8002a02:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002a04:	f04f 32ff 	mov.w	r2, #4294967295
 8002a08:	69bb      	ldr	r3, [r7, #24]
 8002a0a:	fa02 f303 	lsl.w	r3, r2, r3
 8002a0e:	43da      	mvns	r2, r3
 8002a10:	68bb      	ldr	r3, [r7, #8]
 8002a12:	401a      	ands	r2, r3
 8002a14:	697b      	ldr	r3, [r7, #20]
 8002a16:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002a18:	f04f 31ff 	mov.w	r1, #4294967295
 8002a1c:	697b      	ldr	r3, [r7, #20]
 8002a1e:	fa01 f303 	lsl.w	r3, r1, r3
 8002a22:	43d9      	mvns	r1, r3
 8002a24:	687b      	ldr	r3, [r7, #4]
 8002a26:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002a28:	4313      	orrs	r3, r2
         );
}
 8002a2a:	4618      	mov	r0, r3
 8002a2c:	3724      	adds	r7, #36	; 0x24
 8002a2e:	46bd      	mov	sp, r7
 8002a30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a34:	4770      	bx	lr

08002a36 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002a36:	b580      	push	{r7, lr}
 8002a38:	b082      	sub	sp, #8
 8002a3a:	af00      	add	r7, sp, #0
 8002a3c:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002a3e:	6878      	ldr	r0, [r7, #4]
 8002a40:	f7ff ff4c 	bl	80028dc <__NVIC_SetPriorityGrouping>
}
 8002a44:	bf00      	nop
 8002a46:	3708      	adds	r7, #8
 8002a48:	46bd      	mov	sp, r7
 8002a4a:	bd80      	pop	{r7, pc}

08002a4c <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002a4c:	b580      	push	{r7, lr}
 8002a4e:	b086      	sub	sp, #24
 8002a50:	af00      	add	r7, sp, #0
 8002a52:	4603      	mov	r3, r0
 8002a54:	60b9      	str	r1, [r7, #8]
 8002a56:	607a      	str	r2, [r7, #4]
 8002a58:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002a5a:	2300      	movs	r3, #0
 8002a5c:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002a5e:	f7ff ff61 	bl	8002924 <__NVIC_GetPriorityGrouping>
 8002a62:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002a64:	687a      	ldr	r2, [r7, #4]
 8002a66:	68b9      	ldr	r1, [r7, #8]
 8002a68:	6978      	ldr	r0, [r7, #20]
 8002a6a:	f7ff ffb1 	bl	80029d0 <NVIC_EncodePriority>
 8002a6e:	4602      	mov	r2, r0
 8002a70:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002a74:	4611      	mov	r1, r2
 8002a76:	4618      	mov	r0, r3
 8002a78:	f7ff ff80 	bl	800297c <__NVIC_SetPriority>
}
 8002a7c:	bf00      	nop
 8002a7e:	3718      	adds	r7, #24
 8002a80:	46bd      	mov	sp, r7
 8002a82:	bd80      	pop	{r7, pc}

08002a84 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002a84:	b580      	push	{r7, lr}
 8002a86:	b082      	sub	sp, #8
 8002a88:	af00      	add	r7, sp, #0
 8002a8a:	4603      	mov	r3, r0
 8002a8c:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002a8e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002a92:	4618      	mov	r0, r3
 8002a94:	f7ff ff54 	bl	8002940 <__NVIC_EnableIRQ>
}
 8002a98:	bf00      	nop
 8002a9a:	3708      	adds	r7, #8
 8002a9c:	46bd      	mov	sp, r7
 8002a9e:	bd80      	pop	{r7, pc}

08002aa0 <HAL_CRC_Init>:
  *         parameters in the CRC_InitTypeDef and create the associated handle.
  * @param  hcrc CRC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRC_Init(CRC_HandleTypeDef *hcrc)
{
 8002aa0:	b580      	push	{r7, lr}
 8002aa2:	b082      	sub	sp, #8
 8002aa4:	af00      	add	r7, sp, #0
 8002aa6:	6078      	str	r0, [r7, #4]
  /* Check the CRC handle allocation */
  if (hcrc == NULL)
 8002aa8:	687b      	ldr	r3, [r7, #4]
 8002aaa:	2b00      	cmp	r3, #0
 8002aac:	d101      	bne.n	8002ab2 <HAL_CRC_Init+0x12>
  {
    return HAL_ERROR;
 8002aae:	2301      	movs	r3, #1
 8002ab0:	e00e      	b.n	8002ad0 <HAL_CRC_Init+0x30>
  }

  /* Check the parameters */
  assert_param(IS_CRC_ALL_INSTANCE(hcrc->Instance));

  if (hcrc->State == HAL_CRC_STATE_RESET)
 8002ab2:	687b      	ldr	r3, [r7, #4]
 8002ab4:	795b      	ldrb	r3, [r3, #5]
 8002ab6:	b2db      	uxtb	r3, r3
 8002ab8:	2b00      	cmp	r3, #0
 8002aba:	d105      	bne.n	8002ac8 <HAL_CRC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hcrc->Lock = HAL_UNLOCKED;
 8002abc:	687b      	ldr	r3, [r7, #4]
 8002abe:	2200      	movs	r2, #0
 8002ac0:	711a      	strb	r2, [r3, #4]
    /* Init the low level hardware */
    HAL_CRC_MspInit(hcrc);
 8002ac2:	6878      	ldr	r0, [r7, #4]
 8002ac4:	f7fe fd0a 	bl	80014dc <HAL_CRC_MspInit>
  }

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;
 8002ac8:	687b      	ldr	r3, [r7, #4]
 8002aca:	2201      	movs	r2, #1
 8002acc:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 8002ace:	2300      	movs	r3, #0
}
 8002ad0:	4618      	mov	r0, r3
 8002ad2:	3708      	adds	r7, #8
 8002ad4:	46bd      	mov	sp, r7
 8002ad6:	bd80      	pop	{r7, pc}

08002ad8 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8002ad8:	b580      	push	{r7, lr}
 8002ada:	b086      	sub	sp, #24
 8002adc:	af00      	add	r7, sp, #0
 8002ade:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8002ae0:	2300      	movs	r3, #0
 8002ae2:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8002ae4:	f7ff f92e 	bl	8001d44 <HAL_GetTick>
 8002ae8:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8002aea:	687b      	ldr	r3, [r7, #4]
 8002aec:	2b00      	cmp	r3, #0
 8002aee:	d101      	bne.n	8002af4 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8002af0:	2301      	movs	r3, #1
 8002af2:	e099      	b.n	8002c28 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8002af4:	687b      	ldr	r3, [r7, #4]
 8002af6:	2202      	movs	r2, #2
 8002af8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8002afc:	687b      	ldr	r3, [r7, #4]
 8002afe:	2200      	movs	r2, #0
 8002b00:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8002b04:	687b      	ldr	r3, [r7, #4]
 8002b06:	681b      	ldr	r3, [r3, #0]
 8002b08:	681a      	ldr	r2, [r3, #0]
 8002b0a:	687b      	ldr	r3, [r7, #4]
 8002b0c:	681b      	ldr	r3, [r3, #0]
 8002b0e:	f022 0201 	bic.w	r2, r2, #1
 8002b12:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002b14:	e00f      	b.n	8002b36 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8002b16:	f7ff f915 	bl	8001d44 <HAL_GetTick>
 8002b1a:	4602      	mov	r2, r0
 8002b1c:	693b      	ldr	r3, [r7, #16]
 8002b1e:	1ad3      	subs	r3, r2, r3
 8002b20:	2b05      	cmp	r3, #5
 8002b22:	d908      	bls.n	8002b36 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8002b24:	687b      	ldr	r3, [r7, #4]
 8002b26:	2220      	movs	r2, #32
 8002b28:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8002b2a:	687b      	ldr	r3, [r7, #4]
 8002b2c:	2203      	movs	r2, #3
 8002b2e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8002b32:	2303      	movs	r3, #3
 8002b34:	e078      	b.n	8002c28 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002b36:	687b      	ldr	r3, [r7, #4]
 8002b38:	681b      	ldr	r3, [r3, #0]
 8002b3a:	681b      	ldr	r3, [r3, #0]
 8002b3c:	f003 0301 	and.w	r3, r3, #1
 8002b40:	2b00      	cmp	r3, #0
 8002b42:	d1e8      	bne.n	8002b16 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8002b44:	687b      	ldr	r3, [r7, #4]
 8002b46:	681b      	ldr	r3, [r3, #0]
 8002b48:	681b      	ldr	r3, [r3, #0]
 8002b4a:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8002b4c:	697a      	ldr	r2, [r7, #20]
 8002b4e:	4b38      	ldr	r3, [pc, #224]	; (8002c30 <HAL_DMA_Init+0x158>)
 8002b50:	4013      	ands	r3, r2
 8002b52:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002b54:	687b      	ldr	r3, [r7, #4]
 8002b56:	685a      	ldr	r2, [r3, #4]
 8002b58:	687b      	ldr	r3, [r7, #4]
 8002b5a:	689b      	ldr	r3, [r3, #8]
 8002b5c:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002b5e:	687b      	ldr	r3, [r7, #4]
 8002b60:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002b62:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002b64:	687b      	ldr	r3, [r7, #4]
 8002b66:	691b      	ldr	r3, [r3, #16]
 8002b68:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002b6a:	687b      	ldr	r3, [r7, #4]
 8002b6c:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002b6e:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002b70:	687b      	ldr	r3, [r7, #4]
 8002b72:	699b      	ldr	r3, [r3, #24]
 8002b74:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002b76:	687b      	ldr	r3, [r7, #4]
 8002b78:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002b7a:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002b7c:	687b      	ldr	r3, [r7, #4]
 8002b7e:	6a1b      	ldr	r3, [r3, #32]
 8002b80:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002b82:	697a      	ldr	r2, [r7, #20]
 8002b84:	4313      	orrs	r3, r2
 8002b86:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8002b88:	687b      	ldr	r3, [r7, #4]
 8002b8a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b8c:	2b04      	cmp	r3, #4
 8002b8e:	d107      	bne.n	8002ba0 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8002b90:	687b      	ldr	r3, [r7, #4]
 8002b92:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002b94:	687b      	ldr	r3, [r7, #4]
 8002b96:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b98:	4313      	orrs	r3, r2
 8002b9a:	697a      	ldr	r2, [r7, #20]
 8002b9c:	4313      	orrs	r3, r2
 8002b9e:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8002ba0:	687b      	ldr	r3, [r7, #4]
 8002ba2:	681b      	ldr	r3, [r3, #0]
 8002ba4:	697a      	ldr	r2, [r7, #20]
 8002ba6:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8002ba8:	687b      	ldr	r3, [r7, #4]
 8002baa:	681b      	ldr	r3, [r3, #0]
 8002bac:	695b      	ldr	r3, [r3, #20]
 8002bae:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8002bb0:	697b      	ldr	r3, [r7, #20]
 8002bb2:	f023 0307 	bic.w	r3, r3, #7
 8002bb6:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8002bb8:	687b      	ldr	r3, [r7, #4]
 8002bba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002bbc:	697a      	ldr	r2, [r7, #20]
 8002bbe:	4313      	orrs	r3, r2
 8002bc0:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8002bc2:	687b      	ldr	r3, [r7, #4]
 8002bc4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002bc6:	2b04      	cmp	r3, #4
 8002bc8:	d117      	bne.n	8002bfa <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8002bca:	687b      	ldr	r3, [r7, #4]
 8002bcc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002bce:	697a      	ldr	r2, [r7, #20]
 8002bd0:	4313      	orrs	r3, r2
 8002bd2:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8002bd4:	687b      	ldr	r3, [r7, #4]
 8002bd6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002bd8:	2b00      	cmp	r3, #0
 8002bda:	d00e      	beq.n	8002bfa <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8002bdc:	6878      	ldr	r0, [r7, #4]
 8002bde:	f000 f9e9 	bl	8002fb4 <DMA_CheckFifoParam>
 8002be2:	4603      	mov	r3, r0
 8002be4:	2b00      	cmp	r3, #0
 8002be6:	d008      	beq.n	8002bfa <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8002be8:	687b      	ldr	r3, [r7, #4]
 8002bea:	2240      	movs	r2, #64	; 0x40
 8002bec:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8002bee:	687b      	ldr	r3, [r7, #4]
 8002bf0:	2201      	movs	r2, #1
 8002bf2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8002bf6:	2301      	movs	r3, #1
 8002bf8:	e016      	b.n	8002c28 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8002bfa:	687b      	ldr	r3, [r7, #4]
 8002bfc:	681b      	ldr	r3, [r3, #0]
 8002bfe:	697a      	ldr	r2, [r7, #20]
 8002c00:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8002c02:	6878      	ldr	r0, [r7, #4]
 8002c04:	f000 f9a0 	bl	8002f48 <DMA_CalcBaseAndBitshift>
 8002c08:	4603      	mov	r3, r0
 8002c0a:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002c0c:	687b      	ldr	r3, [r7, #4]
 8002c0e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002c10:	223f      	movs	r2, #63	; 0x3f
 8002c12:	409a      	lsls	r2, r3
 8002c14:	68fb      	ldr	r3, [r7, #12]
 8002c16:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002c18:	687b      	ldr	r3, [r7, #4]
 8002c1a:	2200      	movs	r2, #0
 8002c1c:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8002c1e:	687b      	ldr	r3, [r7, #4]
 8002c20:	2201      	movs	r2, #1
 8002c22:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8002c26:	2300      	movs	r3, #0
}
 8002c28:	4618      	mov	r0, r3
 8002c2a:	3718      	adds	r7, #24
 8002c2c:	46bd      	mov	sp, r7
 8002c2e:	bd80      	pop	{r7, pc}
 8002c30:	f010803f 	.word	0xf010803f

08002c34 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8002c34:	b580      	push	{r7, lr}
 8002c36:	b086      	sub	sp, #24
 8002c38:	af00      	add	r7, sp, #0
 8002c3a:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8002c3c:	2300      	movs	r3, #0
 8002c3e:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8002c40:	4b8e      	ldr	r3, [pc, #568]	; (8002e7c <HAL_DMA_IRQHandler+0x248>)
 8002c42:	681b      	ldr	r3, [r3, #0]
 8002c44:	4a8e      	ldr	r2, [pc, #568]	; (8002e80 <HAL_DMA_IRQHandler+0x24c>)
 8002c46:	fba2 2303 	umull	r2, r3, r2, r3
 8002c4a:	0a9b      	lsrs	r3, r3, #10
 8002c4c:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002c4e:	687b      	ldr	r3, [r7, #4]
 8002c50:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002c52:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8002c54:	693b      	ldr	r3, [r7, #16]
 8002c56:	681b      	ldr	r3, [r3, #0]
 8002c58:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8002c5a:	687b      	ldr	r3, [r7, #4]
 8002c5c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002c5e:	2208      	movs	r2, #8
 8002c60:	409a      	lsls	r2, r3
 8002c62:	68fb      	ldr	r3, [r7, #12]
 8002c64:	4013      	ands	r3, r2
 8002c66:	2b00      	cmp	r3, #0
 8002c68:	d01a      	beq.n	8002ca0 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8002c6a:	687b      	ldr	r3, [r7, #4]
 8002c6c:	681b      	ldr	r3, [r3, #0]
 8002c6e:	681b      	ldr	r3, [r3, #0]
 8002c70:	f003 0304 	and.w	r3, r3, #4
 8002c74:	2b00      	cmp	r3, #0
 8002c76:	d013      	beq.n	8002ca0 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8002c78:	687b      	ldr	r3, [r7, #4]
 8002c7a:	681b      	ldr	r3, [r3, #0]
 8002c7c:	681a      	ldr	r2, [r3, #0]
 8002c7e:	687b      	ldr	r3, [r7, #4]
 8002c80:	681b      	ldr	r3, [r3, #0]
 8002c82:	f022 0204 	bic.w	r2, r2, #4
 8002c86:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8002c88:	687b      	ldr	r3, [r7, #4]
 8002c8a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002c8c:	2208      	movs	r2, #8
 8002c8e:	409a      	lsls	r2, r3
 8002c90:	693b      	ldr	r3, [r7, #16]
 8002c92:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8002c94:	687b      	ldr	r3, [r7, #4]
 8002c96:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002c98:	f043 0201 	orr.w	r2, r3, #1
 8002c9c:	687b      	ldr	r3, [r7, #4]
 8002c9e:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8002ca0:	687b      	ldr	r3, [r7, #4]
 8002ca2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002ca4:	2201      	movs	r2, #1
 8002ca6:	409a      	lsls	r2, r3
 8002ca8:	68fb      	ldr	r3, [r7, #12]
 8002caa:	4013      	ands	r3, r2
 8002cac:	2b00      	cmp	r3, #0
 8002cae:	d012      	beq.n	8002cd6 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8002cb0:	687b      	ldr	r3, [r7, #4]
 8002cb2:	681b      	ldr	r3, [r3, #0]
 8002cb4:	695b      	ldr	r3, [r3, #20]
 8002cb6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002cba:	2b00      	cmp	r3, #0
 8002cbc:	d00b      	beq.n	8002cd6 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8002cbe:	687b      	ldr	r3, [r7, #4]
 8002cc0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002cc2:	2201      	movs	r2, #1
 8002cc4:	409a      	lsls	r2, r3
 8002cc6:	693b      	ldr	r3, [r7, #16]
 8002cc8:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8002cca:	687b      	ldr	r3, [r7, #4]
 8002ccc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002cce:	f043 0202 	orr.w	r2, r3, #2
 8002cd2:	687b      	ldr	r3, [r7, #4]
 8002cd4:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8002cd6:	687b      	ldr	r3, [r7, #4]
 8002cd8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002cda:	2204      	movs	r2, #4
 8002cdc:	409a      	lsls	r2, r3
 8002cde:	68fb      	ldr	r3, [r7, #12]
 8002ce0:	4013      	ands	r3, r2
 8002ce2:	2b00      	cmp	r3, #0
 8002ce4:	d012      	beq.n	8002d0c <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8002ce6:	687b      	ldr	r3, [r7, #4]
 8002ce8:	681b      	ldr	r3, [r3, #0]
 8002cea:	681b      	ldr	r3, [r3, #0]
 8002cec:	f003 0302 	and.w	r3, r3, #2
 8002cf0:	2b00      	cmp	r3, #0
 8002cf2:	d00b      	beq.n	8002d0c <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8002cf4:	687b      	ldr	r3, [r7, #4]
 8002cf6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002cf8:	2204      	movs	r2, #4
 8002cfa:	409a      	lsls	r2, r3
 8002cfc:	693b      	ldr	r3, [r7, #16]
 8002cfe:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8002d00:	687b      	ldr	r3, [r7, #4]
 8002d02:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002d04:	f043 0204 	orr.w	r2, r3, #4
 8002d08:	687b      	ldr	r3, [r7, #4]
 8002d0a:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8002d0c:	687b      	ldr	r3, [r7, #4]
 8002d0e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002d10:	2210      	movs	r2, #16
 8002d12:	409a      	lsls	r2, r3
 8002d14:	68fb      	ldr	r3, [r7, #12]
 8002d16:	4013      	ands	r3, r2
 8002d18:	2b00      	cmp	r3, #0
 8002d1a:	d043      	beq.n	8002da4 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8002d1c:	687b      	ldr	r3, [r7, #4]
 8002d1e:	681b      	ldr	r3, [r3, #0]
 8002d20:	681b      	ldr	r3, [r3, #0]
 8002d22:	f003 0308 	and.w	r3, r3, #8
 8002d26:	2b00      	cmp	r3, #0
 8002d28:	d03c      	beq.n	8002da4 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8002d2a:	687b      	ldr	r3, [r7, #4]
 8002d2c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002d2e:	2210      	movs	r2, #16
 8002d30:	409a      	lsls	r2, r3
 8002d32:	693b      	ldr	r3, [r7, #16]
 8002d34:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8002d36:	687b      	ldr	r3, [r7, #4]
 8002d38:	681b      	ldr	r3, [r3, #0]
 8002d3a:	681b      	ldr	r3, [r3, #0]
 8002d3c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002d40:	2b00      	cmp	r3, #0
 8002d42:	d018      	beq.n	8002d76 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8002d44:	687b      	ldr	r3, [r7, #4]
 8002d46:	681b      	ldr	r3, [r3, #0]
 8002d48:	681b      	ldr	r3, [r3, #0]
 8002d4a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002d4e:	2b00      	cmp	r3, #0
 8002d50:	d108      	bne.n	8002d64 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8002d52:	687b      	ldr	r3, [r7, #4]
 8002d54:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d56:	2b00      	cmp	r3, #0
 8002d58:	d024      	beq.n	8002da4 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8002d5a:	687b      	ldr	r3, [r7, #4]
 8002d5c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d5e:	6878      	ldr	r0, [r7, #4]
 8002d60:	4798      	blx	r3
 8002d62:	e01f      	b.n	8002da4 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8002d64:	687b      	ldr	r3, [r7, #4]
 8002d66:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002d68:	2b00      	cmp	r3, #0
 8002d6a:	d01b      	beq.n	8002da4 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8002d6c:	687b      	ldr	r3, [r7, #4]
 8002d6e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002d70:	6878      	ldr	r0, [r7, #4]
 8002d72:	4798      	blx	r3
 8002d74:	e016      	b.n	8002da4 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8002d76:	687b      	ldr	r3, [r7, #4]
 8002d78:	681b      	ldr	r3, [r3, #0]
 8002d7a:	681b      	ldr	r3, [r3, #0]
 8002d7c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002d80:	2b00      	cmp	r3, #0
 8002d82:	d107      	bne.n	8002d94 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002d84:	687b      	ldr	r3, [r7, #4]
 8002d86:	681b      	ldr	r3, [r3, #0]
 8002d88:	681a      	ldr	r2, [r3, #0]
 8002d8a:	687b      	ldr	r3, [r7, #4]
 8002d8c:	681b      	ldr	r3, [r3, #0]
 8002d8e:	f022 0208 	bic.w	r2, r2, #8
 8002d92:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8002d94:	687b      	ldr	r3, [r7, #4]
 8002d96:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d98:	2b00      	cmp	r3, #0
 8002d9a:	d003      	beq.n	8002da4 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8002d9c:	687b      	ldr	r3, [r7, #4]
 8002d9e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002da0:	6878      	ldr	r0, [r7, #4]
 8002da2:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8002da4:	687b      	ldr	r3, [r7, #4]
 8002da6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002da8:	2220      	movs	r2, #32
 8002daa:	409a      	lsls	r2, r3
 8002dac:	68fb      	ldr	r3, [r7, #12]
 8002dae:	4013      	ands	r3, r2
 8002db0:	2b00      	cmp	r3, #0
 8002db2:	f000 808f 	beq.w	8002ed4 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8002db6:	687b      	ldr	r3, [r7, #4]
 8002db8:	681b      	ldr	r3, [r3, #0]
 8002dba:	681b      	ldr	r3, [r3, #0]
 8002dbc:	f003 0310 	and.w	r3, r3, #16
 8002dc0:	2b00      	cmp	r3, #0
 8002dc2:	f000 8087 	beq.w	8002ed4 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8002dc6:	687b      	ldr	r3, [r7, #4]
 8002dc8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002dca:	2220      	movs	r2, #32
 8002dcc:	409a      	lsls	r2, r3
 8002dce:	693b      	ldr	r3, [r7, #16]
 8002dd0:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8002dd2:	687b      	ldr	r3, [r7, #4]
 8002dd4:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002dd8:	b2db      	uxtb	r3, r3
 8002dda:	2b05      	cmp	r3, #5
 8002ddc:	d136      	bne.n	8002e4c <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8002dde:	687b      	ldr	r3, [r7, #4]
 8002de0:	681b      	ldr	r3, [r3, #0]
 8002de2:	681a      	ldr	r2, [r3, #0]
 8002de4:	687b      	ldr	r3, [r7, #4]
 8002de6:	681b      	ldr	r3, [r3, #0]
 8002de8:	f022 0216 	bic.w	r2, r2, #22
 8002dec:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8002dee:	687b      	ldr	r3, [r7, #4]
 8002df0:	681b      	ldr	r3, [r3, #0]
 8002df2:	695a      	ldr	r2, [r3, #20]
 8002df4:	687b      	ldr	r3, [r7, #4]
 8002df6:	681b      	ldr	r3, [r3, #0]
 8002df8:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002dfc:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8002dfe:	687b      	ldr	r3, [r7, #4]
 8002e00:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e02:	2b00      	cmp	r3, #0
 8002e04:	d103      	bne.n	8002e0e <HAL_DMA_IRQHandler+0x1da>
 8002e06:	687b      	ldr	r3, [r7, #4]
 8002e08:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002e0a:	2b00      	cmp	r3, #0
 8002e0c:	d007      	beq.n	8002e1e <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002e0e:	687b      	ldr	r3, [r7, #4]
 8002e10:	681b      	ldr	r3, [r3, #0]
 8002e12:	681a      	ldr	r2, [r3, #0]
 8002e14:	687b      	ldr	r3, [r7, #4]
 8002e16:	681b      	ldr	r3, [r3, #0]
 8002e18:	f022 0208 	bic.w	r2, r2, #8
 8002e1c:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002e1e:	687b      	ldr	r3, [r7, #4]
 8002e20:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002e22:	223f      	movs	r2, #63	; 0x3f
 8002e24:	409a      	lsls	r2, r3
 8002e26:	693b      	ldr	r3, [r7, #16]
 8002e28:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8002e2a:	687b      	ldr	r3, [r7, #4]
 8002e2c:	2201      	movs	r2, #1
 8002e2e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8002e32:	687b      	ldr	r3, [r7, #4]
 8002e34:	2200      	movs	r2, #0
 8002e36:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 8002e3a:	687b      	ldr	r3, [r7, #4]
 8002e3c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002e3e:	2b00      	cmp	r3, #0
 8002e40:	d07e      	beq.n	8002f40 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 8002e42:	687b      	ldr	r3, [r7, #4]
 8002e44:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002e46:	6878      	ldr	r0, [r7, #4]
 8002e48:	4798      	blx	r3
        }
        return;
 8002e4a:	e079      	b.n	8002f40 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8002e4c:	687b      	ldr	r3, [r7, #4]
 8002e4e:	681b      	ldr	r3, [r3, #0]
 8002e50:	681b      	ldr	r3, [r3, #0]
 8002e52:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002e56:	2b00      	cmp	r3, #0
 8002e58:	d01d      	beq.n	8002e96 <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8002e5a:	687b      	ldr	r3, [r7, #4]
 8002e5c:	681b      	ldr	r3, [r3, #0]
 8002e5e:	681b      	ldr	r3, [r3, #0]
 8002e60:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002e64:	2b00      	cmp	r3, #0
 8002e66:	d10d      	bne.n	8002e84 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8002e68:	687b      	ldr	r3, [r7, #4]
 8002e6a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002e6c:	2b00      	cmp	r3, #0
 8002e6e:	d031      	beq.n	8002ed4 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8002e70:	687b      	ldr	r3, [r7, #4]
 8002e72:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002e74:	6878      	ldr	r0, [r7, #4]
 8002e76:	4798      	blx	r3
 8002e78:	e02c      	b.n	8002ed4 <HAL_DMA_IRQHandler+0x2a0>
 8002e7a:	bf00      	nop
 8002e7c:	20000000 	.word	0x20000000
 8002e80:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8002e84:	687b      	ldr	r3, [r7, #4]
 8002e86:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002e88:	2b00      	cmp	r3, #0
 8002e8a:	d023      	beq.n	8002ed4 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8002e8c:	687b      	ldr	r3, [r7, #4]
 8002e8e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002e90:	6878      	ldr	r0, [r7, #4]
 8002e92:	4798      	blx	r3
 8002e94:	e01e      	b.n	8002ed4 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8002e96:	687b      	ldr	r3, [r7, #4]
 8002e98:	681b      	ldr	r3, [r3, #0]
 8002e9a:	681b      	ldr	r3, [r3, #0]
 8002e9c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002ea0:	2b00      	cmp	r3, #0
 8002ea2:	d10f      	bne.n	8002ec4 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8002ea4:	687b      	ldr	r3, [r7, #4]
 8002ea6:	681b      	ldr	r3, [r3, #0]
 8002ea8:	681a      	ldr	r2, [r3, #0]
 8002eaa:	687b      	ldr	r3, [r7, #4]
 8002eac:	681b      	ldr	r3, [r3, #0]
 8002eae:	f022 0210 	bic.w	r2, r2, #16
 8002eb2:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8002eb4:	687b      	ldr	r3, [r7, #4]
 8002eb6:	2201      	movs	r2, #1
 8002eb8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8002ebc:	687b      	ldr	r3, [r7, #4]
 8002ebe:	2200      	movs	r2, #0
 8002ec0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8002ec4:	687b      	ldr	r3, [r7, #4]
 8002ec6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002ec8:	2b00      	cmp	r3, #0
 8002eca:	d003      	beq.n	8002ed4 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8002ecc:	687b      	ldr	r3, [r7, #4]
 8002ece:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002ed0:	6878      	ldr	r0, [r7, #4]
 8002ed2:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8002ed4:	687b      	ldr	r3, [r7, #4]
 8002ed6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002ed8:	2b00      	cmp	r3, #0
 8002eda:	d032      	beq.n	8002f42 <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8002edc:	687b      	ldr	r3, [r7, #4]
 8002ede:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002ee0:	f003 0301 	and.w	r3, r3, #1
 8002ee4:	2b00      	cmp	r3, #0
 8002ee6:	d022      	beq.n	8002f2e <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8002ee8:	687b      	ldr	r3, [r7, #4]
 8002eea:	2205      	movs	r2, #5
 8002eec:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8002ef0:	687b      	ldr	r3, [r7, #4]
 8002ef2:	681b      	ldr	r3, [r3, #0]
 8002ef4:	681a      	ldr	r2, [r3, #0]
 8002ef6:	687b      	ldr	r3, [r7, #4]
 8002ef8:	681b      	ldr	r3, [r3, #0]
 8002efa:	f022 0201 	bic.w	r2, r2, #1
 8002efe:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8002f00:	68bb      	ldr	r3, [r7, #8]
 8002f02:	3301      	adds	r3, #1
 8002f04:	60bb      	str	r3, [r7, #8]
 8002f06:	697a      	ldr	r2, [r7, #20]
 8002f08:	429a      	cmp	r2, r3
 8002f0a:	d307      	bcc.n	8002f1c <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8002f0c:	687b      	ldr	r3, [r7, #4]
 8002f0e:	681b      	ldr	r3, [r3, #0]
 8002f10:	681b      	ldr	r3, [r3, #0]
 8002f12:	f003 0301 	and.w	r3, r3, #1
 8002f16:	2b00      	cmp	r3, #0
 8002f18:	d1f2      	bne.n	8002f00 <HAL_DMA_IRQHandler+0x2cc>
 8002f1a:	e000      	b.n	8002f1e <HAL_DMA_IRQHandler+0x2ea>
          break;
 8002f1c:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8002f1e:	687b      	ldr	r3, [r7, #4]
 8002f20:	2201      	movs	r2, #1
 8002f22:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8002f26:	687b      	ldr	r3, [r7, #4]
 8002f28:	2200      	movs	r2, #0
 8002f2a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 8002f2e:	687b      	ldr	r3, [r7, #4]
 8002f30:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002f32:	2b00      	cmp	r3, #0
 8002f34:	d005      	beq.n	8002f42 <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8002f36:	687b      	ldr	r3, [r7, #4]
 8002f38:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002f3a:	6878      	ldr	r0, [r7, #4]
 8002f3c:	4798      	blx	r3
 8002f3e:	e000      	b.n	8002f42 <HAL_DMA_IRQHandler+0x30e>
        return;
 8002f40:	bf00      	nop
    }
  }
}
 8002f42:	3718      	adds	r7, #24
 8002f44:	46bd      	mov	sp, r7
 8002f46:	bd80      	pop	{r7, pc}

08002f48 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8002f48:	b480      	push	{r7}
 8002f4a:	b085      	sub	sp, #20
 8002f4c:	af00      	add	r7, sp, #0
 8002f4e:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8002f50:	687b      	ldr	r3, [r7, #4]
 8002f52:	681b      	ldr	r3, [r3, #0]
 8002f54:	b2db      	uxtb	r3, r3
 8002f56:	3b10      	subs	r3, #16
 8002f58:	4a14      	ldr	r2, [pc, #80]	; (8002fac <DMA_CalcBaseAndBitshift+0x64>)
 8002f5a:	fba2 2303 	umull	r2, r3, r2, r3
 8002f5e:	091b      	lsrs	r3, r3, #4
 8002f60:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8002f62:	4a13      	ldr	r2, [pc, #76]	; (8002fb0 <DMA_CalcBaseAndBitshift+0x68>)
 8002f64:	68fb      	ldr	r3, [r7, #12]
 8002f66:	4413      	add	r3, r2
 8002f68:	781b      	ldrb	r3, [r3, #0]
 8002f6a:	461a      	mov	r2, r3
 8002f6c:	687b      	ldr	r3, [r7, #4]
 8002f6e:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8002f70:	68fb      	ldr	r3, [r7, #12]
 8002f72:	2b03      	cmp	r3, #3
 8002f74:	d909      	bls.n	8002f8a <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8002f76:	687b      	ldr	r3, [r7, #4]
 8002f78:	681b      	ldr	r3, [r3, #0]
 8002f7a:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8002f7e:	f023 0303 	bic.w	r3, r3, #3
 8002f82:	1d1a      	adds	r2, r3, #4
 8002f84:	687b      	ldr	r3, [r7, #4]
 8002f86:	659a      	str	r2, [r3, #88]	; 0x58
 8002f88:	e007      	b.n	8002f9a <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8002f8a:	687b      	ldr	r3, [r7, #4]
 8002f8c:	681b      	ldr	r3, [r3, #0]
 8002f8e:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8002f92:	f023 0303 	bic.w	r3, r3, #3
 8002f96:	687a      	ldr	r2, [r7, #4]
 8002f98:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8002f9a:	687b      	ldr	r3, [r7, #4]
 8002f9c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8002f9e:	4618      	mov	r0, r3
 8002fa0:	3714      	adds	r7, #20
 8002fa2:	46bd      	mov	sp, r7
 8002fa4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fa8:	4770      	bx	lr
 8002faa:	bf00      	nop
 8002fac:	aaaaaaab 	.word	0xaaaaaaab
 8002fb0:	0800e328 	.word	0x0800e328

08002fb4 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8002fb4:	b480      	push	{r7}
 8002fb6:	b085      	sub	sp, #20
 8002fb8:	af00      	add	r7, sp, #0
 8002fba:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002fbc:	2300      	movs	r3, #0
 8002fbe:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8002fc0:	687b      	ldr	r3, [r7, #4]
 8002fc2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002fc4:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8002fc6:	687b      	ldr	r3, [r7, #4]
 8002fc8:	699b      	ldr	r3, [r3, #24]
 8002fca:	2b00      	cmp	r3, #0
 8002fcc:	d11f      	bne.n	800300e <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8002fce:	68bb      	ldr	r3, [r7, #8]
 8002fd0:	2b03      	cmp	r3, #3
 8002fd2:	d856      	bhi.n	8003082 <DMA_CheckFifoParam+0xce>
 8002fd4:	a201      	add	r2, pc, #4	; (adr r2, 8002fdc <DMA_CheckFifoParam+0x28>)
 8002fd6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002fda:	bf00      	nop
 8002fdc:	08002fed 	.word	0x08002fed
 8002fe0:	08002fff 	.word	0x08002fff
 8002fe4:	08002fed 	.word	0x08002fed
 8002fe8:	08003083 	.word	0x08003083
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002fec:	687b      	ldr	r3, [r7, #4]
 8002fee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002ff0:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002ff4:	2b00      	cmp	r3, #0
 8002ff6:	d046      	beq.n	8003086 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8002ff8:	2301      	movs	r3, #1
 8002ffa:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002ffc:	e043      	b.n	8003086 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8002ffe:	687b      	ldr	r3, [r7, #4]
 8003000:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003002:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8003006:	d140      	bne.n	800308a <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8003008:	2301      	movs	r3, #1
 800300a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800300c:	e03d      	b.n	800308a <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 800300e:	687b      	ldr	r3, [r7, #4]
 8003010:	699b      	ldr	r3, [r3, #24]
 8003012:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003016:	d121      	bne.n	800305c <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8003018:	68bb      	ldr	r3, [r7, #8]
 800301a:	2b03      	cmp	r3, #3
 800301c:	d837      	bhi.n	800308e <DMA_CheckFifoParam+0xda>
 800301e:	a201      	add	r2, pc, #4	; (adr r2, 8003024 <DMA_CheckFifoParam+0x70>)
 8003020:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003024:	08003035 	.word	0x08003035
 8003028:	0800303b 	.word	0x0800303b
 800302c:	08003035 	.word	0x08003035
 8003030:	0800304d 	.word	0x0800304d
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8003034:	2301      	movs	r3, #1
 8003036:	73fb      	strb	r3, [r7, #15]
      break;
 8003038:	e030      	b.n	800309c <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800303a:	687b      	ldr	r3, [r7, #4]
 800303c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800303e:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003042:	2b00      	cmp	r3, #0
 8003044:	d025      	beq.n	8003092 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8003046:	2301      	movs	r3, #1
 8003048:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800304a:	e022      	b.n	8003092 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800304c:	687b      	ldr	r3, [r7, #4]
 800304e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003050:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8003054:	d11f      	bne.n	8003096 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8003056:	2301      	movs	r3, #1
 8003058:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 800305a:	e01c      	b.n	8003096 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 800305c:	68bb      	ldr	r3, [r7, #8]
 800305e:	2b02      	cmp	r3, #2
 8003060:	d903      	bls.n	800306a <DMA_CheckFifoParam+0xb6>
 8003062:	68bb      	ldr	r3, [r7, #8]
 8003064:	2b03      	cmp	r3, #3
 8003066:	d003      	beq.n	8003070 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8003068:	e018      	b.n	800309c <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 800306a:	2301      	movs	r3, #1
 800306c:	73fb      	strb	r3, [r7, #15]
      break;
 800306e:	e015      	b.n	800309c <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003070:	687b      	ldr	r3, [r7, #4]
 8003072:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003074:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003078:	2b00      	cmp	r3, #0
 800307a:	d00e      	beq.n	800309a <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 800307c:	2301      	movs	r3, #1
 800307e:	73fb      	strb	r3, [r7, #15]
      break;
 8003080:	e00b      	b.n	800309a <DMA_CheckFifoParam+0xe6>
      break;
 8003082:	bf00      	nop
 8003084:	e00a      	b.n	800309c <DMA_CheckFifoParam+0xe8>
      break;
 8003086:	bf00      	nop
 8003088:	e008      	b.n	800309c <DMA_CheckFifoParam+0xe8>
      break;
 800308a:	bf00      	nop
 800308c:	e006      	b.n	800309c <DMA_CheckFifoParam+0xe8>
      break;
 800308e:	bf00      	nop
 8003090:	e004      	b.n	800309c <DMA_CheckFifoParam+0xe8>
      break;
 8003092:	bf00      	nop
 8003094:	e002      	b.n	800309c <DMA_CheckFifoParam+0xe8>
      break;   
 8003096:	bf00      	nop
 8003098:	e000      	b.n	800309c <DMA_CheckFifoParam+0xe8>
      break;
 800309a:	bf00      	nop
    }
  } 
  
  return status; 
 800309c:	7bfb      	ldrb	r3, [r7, #15]
}
 800309e:	4618      	mov	r0, r3
 80030a0:	3714      	adds	r7, #20
 80030a2:	46bd      	mov	sp, r7
 80030a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030a8:	4770      	bx	lr
 80030aa:	bf00      	nop

080030ac <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80030ac:	b480      	push	{r7}
 80030ae:	b089      	sub	sp, #36	; 0x24
 80030b0:	af00      	add	r7, sp, #0
 80030b2:	6078      	str	r0, [r7, #4]
 80030b4:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80030b6:	2300      	movs	r3, #0
 80030b8:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80030ba:	2300      	movs	r3, #0
 80030bc:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80030be:	2300      	movs	r3, #0
 80030c0:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80030c2:	2300      	movs	r3, #0
 80030c4:	61fb      	str	r3, [r7, #28]
 80030c6:	e165      	b.n	8003394 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80030c8:	2201      	movs	r2, #1
 80030ca:	69fb      	ldr	r3, [r7, #28]
 80030cc:	fa02 f303 	lsl.w	r3, r2, r3
 80030d0:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80030d2:	683b      	ldr	r3, [r7, #0]
 80030d4:	681b      	ldr	r3, [r3, #0]
 80030d6:	697a      	ldr	r2, [r7, #20]
 80030d8:	4013      	ands	r3, r2
 80030da:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80030dc:	693a      	ldr	r2, [r7, #16]
 80030de:	697b      	ldr	r3, [r7, #20]
 80030e0:	429a      	cmp	r2, r3
 80030e2:	f040 8154 	bne.w	800338e <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80030e6:	683b      	ldr	r3, [r7, #0]
 80030e8:	685b      	ldr	r3, [r3, #4]
 80030ea:	f003 0303 	and.w	r3, r3, #3
 80030ee:	2b01      	cmp	r3, #1
 80030f0:	d005      	beq.n	80030fe <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80030f2:	683b      	ldr	r3, [r7, #0]
 80030f4:	685b      	ldr	r3, [r3, #4]
 80030f6:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80030fa:	2b02      	cmp	r3, #2
 80030fc:	d130      	bne.n	8003160 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80030fe:	687b      	ldr	r3, [r7, #4]
 8003100:	689b      	ldr	r3, [r3, #8]
 8003102:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8003104:	69fb      	ldr	r3, [r7, #28]
 8003106:	005b      	lsls	r3, r3, #1
 8003108:	2203      	movs	r2, #3
 800310a:	fa02 f303 	lsl.w	r3, r2, r3
 800310e:	43db      	mvns	r3, r3
 8003110:	69ba      	ldr	r2, [r7, #24]
 8003112:	4013      	ands	r3, r2
 8003114:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8003116:	683b      	ldr	r3, [r7, #0]
 8003118:	68da      	ldr	r2, [r3, #12]
 800311a:	69fb      	ldr	r3, [r7, #28]
 800311c:	005b      	lsls	r3, r3, #1
 800311e:	fa02 f303 	lsl.w	r3, r2, r3
 8003122:	69ba      	ldr	r2, [r7, #24]
 8003124:	4313      	orrs	r3, r2
 8003126:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8003128:	687b      	ldr	r3, [r7, #4]
 800312a:	69ba      	ldr	r2, [r7, #24]
 800312c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800312e:	687b      	ldr	r3, [r7, #4]
 8003130:	685b      	ldr	r3, [r3, #4]
 8003132:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8003134:	2201      	movs	r2, #1
 8003136:	69fb      	ldr	r3, [r7, #28]
 8003138:	fa02 f303 	lsl.w	r3, r2, r3
 800313c:	43db      	mvns	r3, r3
 800313e:	69ba      	ldr	r2, [r7, #24]
 8003140:	4013      	ands	r3, r2
 8003142:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003144:	683b      	ldr	r3, [r7, #0]
 8003146:	685b      	ldr	r3, [r3, #4]
 8003148:	091b      	lsrs	r3, r3, #4
 800314a:	f003 0201 	and.w	r2, r3, #1
 800314e:	69fb      	ldr	r3, [r7, #28]
 8003150:	fa02 f303 	lsl.w	r3, r2, r3
 8003154:	69ba      	ldr	r2, [r7, #24]
 8003156:	4313      	orrs	r3, r2
 8003158:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800315a:	687b      	ldr	r3, [r7, #4]
 800315c:	69ba      	ldr	r2, [r7, #24]
 800315e:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003160:	683b      	ldr	r3, [r7, #0]
 8003162:	685b      	ldr	r3, [r3, #4]
 8003164:	f003 0303 	and.w	r3, r3, #3
 8003168:	2b03      	cmp	r3, #3
 800316a:	d017      	beq.n	800319c <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800316c:	687b      	ldr	r3, [r7, #4]
 800316e:	68db      	ldr	r3, [r3, #12]
 8003170:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8003172:	69fb      	ldr	r3, [r7, #28]
 8003174:	005b      	lsls	r3, r3, #1
 8003176:	2203      	movs	r2, #3
 8003178:	fa02 f303 	lsl.w	r3, r2, r3
 800317c:	43db      	mvns	r3, r3
 800317e:	69ba      	ldr	r2, [r7, #24]
 8003180:	4013      	ands	r3, r2
 8003182:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003184:	683b      	ldr	r3, [r7, #0]
 8003186:	689a      	ldr	r2, [r3, #8]
 8003188:	69fb      	ldr	r3, [r7, #28]
 800318a:	005b      	lsls	r3, r3, #1
 800318c:	fa02 f303 	lsl.w	r3, r2, r3
 8003190:	69ba      	ldr	r2, [r7, #24]
 8003192:	4313      	orrs	r3, r2
 8003194:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8003196:	687b      	ldr	r3, [r7, #4]
 8003198:	69ba      	ldr	r2, [r7, #24]
 800319a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800319c:	683b      	ldr	r3, [r7, #0]
 800319e:	685b      	ldr	r3, [r3, #4]
 80031a0:	f003 0303 	and.w	r3, r3, #3
 80031a4:	2b02      	cmp	r3, #2
 80031a6:	d123      	bne.n	80031f0 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80031a8:	69fb      	ldr	r3, [r7, #28]
 80031aa:	08da      	lsrs	r2, r3, #3
 80031ac:	687b      	ldr	r3, [r7, #4]
 80031ae:	3208      	adds	r2, #8
 80031b0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80031b4:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80031b6:	69fb      	ldr	r3, [r7, #28]
 80031b8:	f003 0307 	and.w	r3, r3, #7
 80031bc:	009b      	lsls	r3, r3, #2
 80031be:	220f      	movs	r2, #15
 80031c0:	fa02 f303 	lsl.w	r3, r2, r3
 80031c4:	43db      	mvns	r3, r3
 80031c6:	69ba      	ldr	r2, [r7, #24]
 80031c8:	4013      	ands	r3, r2
 80031ca:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80031cc:	683b      	ldr	r3, [r7, #0]
 80031ce:	691a      	ldr	r2, [r3, #16]
 80031d0:	69fb      	ldr	r3, [r7, #28]
 80031d2:	f003 0307 	and.w	r3, r3, #7
 80031d6:	009b      	lsls	r3, r3, #2
 80031d8:	fa02 f303 	lsl.w	r3, r2, r3
 80031dc:	69ba      	ldr	r2, [r7, #24]
 80031de:	4313      	orrs	r3, r2
 80031e0:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80031e2:	69fb      	ldr	r3, [r7, #28]
 80031e4:	08da      	lsrs	r2, r3, #3
 80031e6:	687b      	ldr	r3, [r7, #4]
 80031e8:	3208      	adds	r2, #8
 80031ea:	69b9      	ldr	r1, [r7, #24]
 80031ec:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80031f0:	687b      	ldr	r3, [r7, #4]
 80031f2:	681b      	ldr	r3, [r3, #0]
 80031f4:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80031f6:	69fb      	ldr	r3, [r7, #28]
 80031f8:	005b      	lsls	r3, r3, #1
 80031fa:	2203      	movs	r2, #3
 80031fc:	fa02 f303 	lsl.w	r3, r2, r3
 8003200:	43db      	mvns	r3, r3
 8003202:	69ba      	ldr	r2, [r7, #24]
 8003204:	4013      	ands	r3, r2
 8003206:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8003208:	683b      	ldr	r3, [r7, #0]
 800320a:	685b      	ldr	r3, [r3, #4]
 800320c:	f003 0203 	and.w	r2, r3, #3
 8003210:	69fb      	ldr	r3, [r7, #28]
 8003212:	005b      	lsls	r3, r3, #1
 8003214:	fa02 f303 	lsl.w	r3, r2, r3
 8003218:	69ba      	ldr	r2, [r7, #24]
 800321a:	4313      	orrs	r3, r2
 800321c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800321e:	687b      	ldr	r3, [r7, #4]
 8003220:	69ba      	ldr	r2, [r7, #24]
 8003222:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8003224:	683b      	ldr	r3, [r7, #0]
 8003226:	685b      	ldr	r3, [r3, #4]
 8003228:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800322c:	2b00      	cmp	r3, #0
 800322e:	f000 80ae 	beq.w	800338e <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003232:	2300      	movs	r3, #0
 8003234:	60fb      	str	r3, [r7, #12]
 8003236:	4b5d      	ldr	r3, [pc, #372]	; (80033ac <HAL_GPIO_Init+0x300>)
 8003238:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800323a:	4a5c      	ldr	r2, [pc, #368]	; (80033ac <HAL_GPIO_Init+0x300>)
 800323c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003240:	6453      	str	r3, [r2, #68]	; 0x44
 8003242:	4b5a      	ldr	r3, [pc, #360]	; (80033ac <HAL_GPIO_Init+0x300>)
 8003244:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003246:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800324a:	60fb      	str	r3, [r7, #12]
 800324c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800324e:	4a58      	ldr	r2, [pc, #352]	; (80033b0 <HAL_GPIO_Init+0x304>)
 8003250:	69fb      	ldr	r3, [r7, #28]
 8003252:	089b      	lsrs	r3, r3, #2
 8003254:	3302      	adds	r3, #2
 8003256:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800325a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 800325c:	69fb      	ldr	r3, [r7, #28]
 800325e:	f003 0303 	and.w	r3, r3, #3
 8003262:	009b      	lsls	r3, r3, #2
 8003264:	220f      	movs	r2, #15
 8003266:	fa02 f303 	lsl.w	r3, r2, r3
 800326a:	43db      	mvns	r3, r3
 800326c:	69ba      	ldr	r2, [r7, #24]
 800326e:	4013      	ands	r3, r2
 8003270:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8003272:	687b      	ldr	r3, [r7, #4]
 8003274:	4a4f      	ldr	r2, [pc, #316]	; (80033b4 <HAL_GPIO_Init+0x308>)
 8003276:	4293      	cmp	r3, r2
 8003278:	d025      	beq.n	80032c6 <HAL_GPIO_Init+0x21a>
 800327a:	687b      	ldr	r3, [r7, #4]
 800327c:	4a4e      	ldr	r2, [pc, #312]	; (80033b8 <HAL_GPIO_Init+0x30c>)
 800327e:	4293      	cmp	r3, r2
 8003280:	d01f      	beq.n	80032c2 <HAL_GPIO_Init+0x216>
 8003282:	687b      	ldr	r3, [r7, #4]
 8003284:	4a4d      	ldr	r2, [pc, #308]	; (80033bc <HAL_GPIO_Init+0x310>)
 8003286:	4293      	cmp	r3, r2
 8003288:	d019      	beq.n	80032be <HAL_GPIO_Init+0x212>
 800328a:	687b      	ldr	r3, [r7, #4]
 800328c:	4a4c      	ldr	r2, [pc, #304]	; (80033c0 <HAL_GPIO_Init+0x314>)
 800328e:	4293      	cmp	r3, r2
 8003290:	d013      	beq.n	80032ba <HAL_GPIO_Init+0x20e>
 8003292:	687b      	ldr	r3, [r7, #4]
 8003294:	4a4b      	ldr	r2, [pc, #300]	; (80033c4 <HAL_GPIO_Init+0x318>)
 8003296:	4293      	cmp	r3, r2
 8003298:	d00d      	beq.n	80032b6 <HAL_GPIO_Init+0x20a>
 800329a:	687b      	ldr	r3, [r7, #4]
 800329c:	4a4a      	ldr	r2, [pc, #296]	; (80033c8 <HAL_GPIO_Init+0x31c>)
 800329e:	4293      	cmp	r3, r2
 80032a0:	d007      	beq.n	80032b2 <HAL_GPIO_Init+0x206>
 80032a2:	687b      	ldr	r3, [r7, #4]
 80032a4:	4a49      	ldr	r2, [pc, #292]	; (80033cc <HAL_GPIO_Init+0x320>)
 80032a6:	4293      	cmp	r3, r2
 80032a8:	d101      	bne.n	80032ae <HAL_GPIO_Init+0x202>
 80032aa:	2306      	movs	r3, #6
 80032ac:	e00c      	b.n	80032c8 <HAL_GPIO_Init+0x21c>
 80032ae:	2307      	movs	r3, #7
 80032b0:	e00a      	b.n	80032c8 <HAL_GPIO_Init+0x21c>
 80032b2:	2305      	movs	r3, #5
 80032b4:	e008      	b.n	80032c8 <HAL_GPIO_Init+0x21c>
 80032b6:	2304      	movs	r3, #4
 80032b8:	e006      	b.n	80032c8 <HAL_GPIO_Init+0x21c>
 80032ba:	2303      	movs	r3, #3
 80032bc:	e004      	b.n	80032c8 <HAL_GPIO_Init+0x21c>
 80032be:	2302      	movs	r3, #2
 80032c0:	e002      	b.n	80032c8 <HAL_GPIO_Init+0x21c>
 80032c2:	2301      	movs	r3, #1
 80032c4:	e000      	b.n	80032c8 <HAL_GPIO_Init+0x21c>
 80032c6:	2300      	movs	r3, #0
 80032c8:	69fa      	ldr	r2, [r7, #28]
 80032ca:	f002 0203 	and.w	r2, r2, #3
 80032ce:	0092      	lsls	r2, r2, #2
 80032d0:	4093      	lsls	r3, r2
 80032d2:	69ba      	ldr	r2, [r7, #24]
 80032d4:	4313      	orrs	r3, r2
 80032d6:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80032d8:	4935      	ldr	r1, [pc, #212]	; (80033b0 <HAL_GPIO_Init+0x304>)
 80032da:	69fb      	ldr	r3, [r7, #28]
 80032dc:	089b      	lsrs	r3, r3, #2
 80032de:	3302      	adds	r3, #2
 80032e0:	69ba      	ldr	r2, [r7, #24]
 80032e2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80032e6:	4b3a      	ldr	r3, [pc, #232]	; (80033d0 <HAL_GPIO_Init+0x324>)
 80032e8:	689b      	ldr	r3, [r3, #8]
 80032ea:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80032ec:	693b      	ldr	r3, [r7, #16]
 80032ee:	43db      	mvns	r3, r3
 80032f0:	69ba      	ldr	r2, [r7, #24]
 80032f2:	4013      	ands	r3, r2
 80032f4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80032f6:	683b      	ldr	r3, [r7, #0]
 80032f8:	685b      	ldr	r3, [r3, #4]
 80032fa:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80032fe:	2b00      	cmp	r3, #0
 8003300:	d003      	beq.n	800330a <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 8003302:	69ba      	ldr	r2, [r7, #24]
 8003304:	693b      	ldr	r3, [r7, #16]
 8003306:	4313      	orrs	r3, r2
 8003308:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800330a:	4a31      	ldr	r2, [pc, #196]	; (80033d0 <HAL_GPIO_Init+0x324>)
 800330c:	69bb      	ldr	r3, [r7, #24]
 800330e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8003310:	4b2f      	ldr	r3, [pc, #188]	; (80033d0 <HAL_GPIO_Init+0x324>)
 8003312:	68db      	ldr	r3, [r3, #12]
 8003314:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003316:	693b      	ldr	r3, [r7, #16]
 8003318:	43db      	mvns	r3, r3
 800331a:	69ba      	ldr	r2, [r7, #24]
 800331c:	4013      	ands	r3, r2
 800331e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8003320:	683b      	ldr	r3, [r7, #0]
 8003322:	685b      	ldr	r3, [r3, #4]
 8003324:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003328:	2b00      	cmp	r3, #0
 800332a:	d003      	beq.n	8003334 <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 800332c:	69ba      	ldr	r2, [r7, #24]
 800332e:	693b      	ldr	r3, [r7, #16]
 8003330:	4313      	orrs	r3, r2
 8003332:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8003334:	4a26      	ldr	r2, [pc, #152]	; (80033d0 <HAL_GPIO_Init+0x324>)
 8003336:	69bb      	ldr	r3, [r7, #24]
 8003338:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800333a:	4b25      	ldr	r3, [pc, #148]	; (80033d0 <HAL_GPIO_Init+0x324>)
 800333c:	685b      	ldr	r3, [r3, #4]
 800333e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003340:	693b      	ldr	r3, [r7, #16]
 8003342:	43db      	mvns	r3, r3
 8003344:	69ba      	ldr	r2, [r7, #24]
 8003346:	4013      	ands	r3, r2
 8003348:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800334a:	683b      	ldr	r3, [r7, #0]
 800334c:	685b      	ldr	r3, [r3, #4]
 800334e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003352:	2b00      	cmp	r3, #0
 8003354:	d003      	beq.n	800335e <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 8003356:	69ba      	ldr	r2, [r7, #24]
 8003358:	693b      	ldr	r3, [r7, #16]
 800335a:	4313      	orrs	r3, r2
 800335c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800335e:	4a1c      	ldr	r2, [pc, #112]	; (80033d0 <HAL_GPIO_Init+0x324>)
 8003360:	69bb      	ldr	r3, [r7, #24]
 8003362:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8003364:	4b1a      	ldr	r3, [pc, #104]	; (80033d0 <HAL_GPIO_Init+0x324>)
 8003366:	681b      	ldr	r3, [r3, #0]
 8003368:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800336a:	693b      	ldr	r3, [r7, #16]
 800336c:	43db      	mvns	r3, r3
 800336e:	69ba      	ldr	r2, [r7, #24]
 8003370:	4013      	ands	r3, r2
 8003372:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8003374:	683b      	ldr	r3, [r7, #0]
 8003376:	685b      	ldr	r3, [r3, #4]
 8003378:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800337c:	2b00      	cmp	r3, #0
 800337e:	d003      	beq.n	8003388 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8003380:	69ba      	ldr	r2, [r7, #24]
 8003382:	693b      	ldr	r3, [r7, #16]
 8003384:	4313      	orrs	r3, r2
 8003386:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8003388:	4a11      	ldr	r2, [pc, #68]	; (80033d0 <HAL_GPIO_Init+0x324>)
 800338a:	69bb      	ldr	r3, [r7, #24]
 800338c:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800338e:	69fb      	ldr	r3, [r7, #28]
 8003390:	3301      	adds	r3, #1
 8003392:	61fb      	str	r3, [r7, #28]
 8003394:	69fb      	ldr	r3, [r7, #28]
 8003396:	2b0f      	cmp	r3, #15
 8003398:	f67f ae96 	bls.w	80030c8 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 800339c:	bf00      	nop
 800339e:	bf00      	nop
 80033a0:	3724      	adds	r7, #36	; 0x24
 80033a2:	46bd      	mov	sp, r7
 80033a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033a8:	4770      	bx	lr
 80033aa:	bf00      	nop
 80033ac:	40023800 	.word	0x40023800
 80033b0:	40013800 	.word	0x40013800
 80033b4:	40020000 	.word	0x40020000
 80033b8:	40020400 	.word	0x40020400
 80033bc:	40020800 	.word	0x40020800
 80033c0:	40020c00 	.word	0x40020c00
 80033c4:	40021000 	.word	0x40021000
 80033c8:	40021400 	.word	0x40021400
 80033cc:	40021800 	.word	0x40021800
 80033d0:	40013c00 	.word	0x40013c00

080033d4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80033d4:	b480      	push	{r7}
 80033d6:	b083      	sub	sp, #12
 80033d8:	af00      	add	r7, sp, #0
 80033da:	6078      	str	r0, [r7, #4]
 80033dc:	460b      	mov	r3, r1
 80033de:	807b      	strh	r3, [r7, #2]
 80033e0:	4613      	mov	r3, r2
 80033e2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80033e4:	787b      	ldrb	r3, [r7, #1]
 80033e6:	2b00      	cmp	r3, #0
 80033e8:	d003      	beq.n	80033f2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80033ea:	887a      	ldrh	r2, [r7, #2]
 80033ec:	687b      	ldr	r3, [r7, #4]
 80033ee:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80033f0:	e003      	b.n	80033fa <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80033f2:	887b      	ldrh	r3, [r7, #2]
 80033f4:	041a      	lsls	r2, r3, #16
 80033f6:	687b      	ldr	r3, [r7, #4]
 80033f8:	619a      	str	r2, [r3, #24]
}
 80033fa:	bf00      	nop
 80033fc:	370c      	adds	r7, #12
 80033fe:	46bd      	mov	sp, r7
 8003400:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003404:	4770      	bx	lr
	...

08003408 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8003408:	b580      	push	{r7, lr}
 800340a:	b084      	sub	sp, #16
 800340c:	af00      	add	r7, sp, #0
 800340e:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8003410:	687b      	ldr	r3, [r7, #4]
 8003412:	2b00      	cmp	r3, #0
 8003414:	d101      	bne.n	800341a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8003416:	2301      	movs	r3, #1
 8003418:	e12b      	b.n	8003672 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800341a:	687b      	ldr	r3, [r7, #4]
 800341c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003420:	b2db      	uxtb	r3, r3
 8003422:	2b00      	cmp	r3, #0
 8003424:	d106      	bne.n	8003434 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8003426:	687b      	ldr	r3, [r7, #4]
 8003428:	2200      	movs	r2, #0
 800342a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 800342e:	6878      	ldr	r0, [r7, #4]
 8003430:	f7fe f876 	bl	8001520 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8003434:	687b      	ldr	r3, [r7, #4]
 8003436:	2224      	movs	r2, #36	; 0x24
 8003438:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 800343c:	687b      	ldr	r3, [r7, #4]
 800343e:	681b      	ldr	r3, [r3, #0]
 8003440:	681a      	ldr	r2, [r3, #0]
 8003442:	687b      	ldr	r3, [r7, #4]
 8003444:	681b      	ldr	r3, [r3, #0]
 8003446:	f022 0201 	bic.w	r2, r2, #1
 800344a:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 800344c:	687b      	ldr	r3, [r7, #4]
 800344e:	681b      	ldr	r3, [r3, #0]
 8003450:	681a      	ldr	r2, [r3, #0]
 8003452:	687b      	ldr	r3, [r7, #4]
 8003454:	681b      	ldr	r3, [r3, #0]
 8003456:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800345a:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 800345c:	687b      	ldr	r3, [r7, #4]
 800345e:	681b      	ldr	r3, [r3, #0]
 8003460:	681a      	ldr	r2, [r3, #0]
 8003462:	687b      	ldr	r3, [r7, #4]
 8003464:	681b      	ldr	r3, [r3, #0]
 8003466:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800346a:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 800346c:	f001 fcfa 	bl	8004e64 <HAL_RCC_GetPCLK1Freq>
 8003470:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8003472:	687b      	ldr	r3, [r7, #4]
 8003474:	685b      	ldr	r3, [r3, #4]
 8003476:	4a81      	ldr	r2, [pc, #516]	; (800367c <HAL_I2C_Init+0x274>)
 8003478:	4293      	cmp	r3, r2
 800347a:	d807      	bhi.n	800348c <HAL_I2C_Init+0x84>
 800347c:	68fb      	ldr	r3, [r7, #12]
 800347e:	4a80      	ldr	r2, [pc, #512]	; (8003680 <HAL_I2C_Init+0x278>)
 8003480:	4293      	cmp	r3, r2
 8003482:	bf94      	ite	ls
 8003484:	2301      	movls	r3, #1
 8003486:	2300      	movhi	r3, #0
 8003488:	b2db      	uxtb	r3, r3
 800348a:	e006      	b.n	800349a <HAL_I2C_Init+0x92>
 800348c:	68fb      	ldr	r3, [r7, #12]
 800348e:	4a7d      	ldr	r2, [pc, #500]	; (8003684 <HAL_I2C_Init+0x27c>)
 8003490:	4293      	cmp	r3, r2
 8003492:	bf94      	ite	ls
 8003494:	2301      	movls	r3, #1
 8003496:	2300      	movhi	r3, #0
 8003498:	b2db      	uxtb	r3, r3
 800349a:	2b00      	cmp	r3, #0
 800349c:	d001      	beq.n	80034a2 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 800349e:	2301      	movs	r3, #1
 80034a0:	e0e7      	b.n	8003672 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 80034a2:	68fb      	ldr	r3, [r7, #12]
 80034a4:	4a78      	ldr	r2, [pc, #480]	; (8003688 <HAL_I2C_Init+0x280>)
 80034a6:	fba2 2303 	umull	r2, r3, r2, r3
 80034aa:	0c9b      	lsrs	r3, r3, #18
 80034ac:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80034ae:	687b      	ldr	r3, [r7, #4]
 80034b0:	681b      	ldr	r3, [r3, #0]
 80034b2:	685b      	ldr	r3, [r3, #4]
 80034b4:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80034b8:	687b      	ldr	r3, [r7, #4]
 80034ba:	681b      	ldr	r3, [r3, #0]
 80034bc:	68ba      	ldr	r2, [r7, #8]
 80034be:	430a      	orrs	r2, r1
 80034c0:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80034c2:	687b      	ldr	r3, [r7, #4]
 80034c4:	681b      	ldr	r3, [r3, #0]
 80034c6:	6a1b      	ldr	r3, [r3, #32]
 80034c8:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80034cc:	687b      	ldr	r3, [r7, #4]
 80034ce:	685b      	ldr	r3, [r3, #4]
 80034d0:	4a6a      	ldr	r2, [pc, #424]	; (800367c <HAL_I2C_Init+0x274>)
 80034d2:	4293      	cmp	r3, r2
 80034d4:	d802      	bhi.n	80034dc <HAL_I2C_Init+0xd4>
 80034d6:	68bb      	ldr	r3, [r7, #8]
 80034d8:	3301      	adds	r3, #1
 80034da:	e009      	b.n	80034f0 <HAL_I2C_Init+0xe8>
 80034dc:	68bb      	ldr	r3, [r7, #8]
 80034de:	f44f 7296 	mov.w	r2, #300	; 0x12c
 80034e2:	fb02 f303 	mul.w	r3, r2, r3
 80034e6:	4a69      	ldr	r2, [pc, #420]	; (800368c <HAL_I2C_Init+0x284>)
 80034e8:	fba2 2303 	umull	r2, r3, r2, r3
 80034ec:	099b      	lsrs	r3, r3, #6
 80034ee:	3301      	adds	r3, #1
 80034f0:	687a      	ldr	r2, [r7, #4]
 80034f2:	6812      	ldr	r2, [r2, #0]
 80034f4:	430b      	orrs	r3, r1
 80034f6:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80034f8:	687b      	ldr	r3, [r7, #4]
 80034fa:	681b      	ldr	r3, [r3, #0]
 80034fc:	69db      	ldr	r3, [r3, #28]
 80034fe:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8003502:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8003506:	687b      	ldr	r3, [r7, #4]
 8003508:	685b      	ldr	r3, [r3, #4]
 800350a:	495c      	ldr	r1, [pc, #368]	; (800367c <HAL_I2C_Init+0x274>)
 800350c:	428b      	cmp	r3, r1
 800350e:	d819      	bhi.n	8003544 <HAL_I2C_Init+0x13c>
 8003510:	68fb      	ldr	r3, [r7, #12]
 8003512:	1e59      	subs	r1, r3, #1
 8003514:	687b      	ldr	r3, [r7, #4]
 8003516:	685b      	ldr	r3, [r3, #4]
 8003518:	005b      	lsls	r3, r3, #1
 800351a:	fbb1 f3f3 	udiv	r3, r1, r3
 800351e:	1c59      	adds	r1, r3, #1
 8003520:	f640 73fc 	movw	r3, #4092	; 0xffc
 8003524:	400b      	ands	r3, r1
 8003526:	2b00      	cmp	r3, #0
 8003528:	d00a      	beq.n	8003540 <HAL_I2C_Init+0x138>
 800352a:	68fb      	ldr	r3, [r7, #12]
 800352c:	1e59      	subs	r1, r3, #1
 800352e:	687b      	ldr	r3, [r7, #4]
 8003530:	685b      	ldr	r3, [r3, #4]
 8003532:	005b      	lsls	r3, r3, #1
 8003534:	fbb1 f3f3 	udiv	r3, r1, r3
 8003538:	3301      	adds	r3, #1
 800353a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800353e:	e051      	b.n	80035e4 <HAL_I2C_Init+0x1dc>
 8003540:	2304      	movs	r3, #4
 8003542:	e04f      	b.n	80035e4 <HAL_I2C_Init+0x1dc>
 8003544:	687b      	ldr	r3, [r7, #4]
 8003546:	689b      	ldr	r3, [r3, #8]
 8003548:	2b00      	cmp	r3, #0
 800354a:	d111      	bne.n	8003570 <HAL_I2C_Init+0x168>
 800354c:	68fb      	ldr	r3, [r7, #12]
 800354e:	1e58      	subs	r0, r3, #1
 8003550:	687b      	ldr	r3, [r7, #4]
 8003552:	6859      	ldr	r1, [r3, #4]
 8003554:	460b      	mov	r3, r1
 8003556:	005b      	lsls	r3, r3, #1
 8003558:	440b      	add	r3, r1
 800355a:	fbb0 f3f3 	udiv	r3, r0, r3
 800355e:	3301      	adds	r3, #1
 8003560:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003564:	2b00      	cmp	r3, #0
 8003566:	bf0c      	ite	eq
 8003568:	2301      	moveq	r3, #1
 800356a:	2300      	movne	r3, #0
 800356c:	b2db      	uxtb	r3, r3
 800356e:	e012      	b.n	8003596 <HAL_I2C_Init+0x18e>
 8003570:	68fb      	ldr	r3, [r7, #12]
 8003572:	1e58      	subs	r0, r3, #1
 8003574:	687b      	ldr	r3, [r7, #4]
 8003576:	6859      	ldr	r1, [r3, #4]
 8003578:	460b      	mov	r3, r1
 800357a:	009b      	lsls	r3, r3, #2
 800357c:	440b      	add	r3, r1
 800357e:	0099      	lsls	r1, r3, #2
 8003580:	440b      	add	r3, r1
 8003582:	fbb0 f3f3 	udiv	r3, r0, r3
 8003586:	3301      	adds	r3, #1
 8003588:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800358c:	2b00      	cmp	r3, #0
 800358e:	bf0c      	ite	eq
 8003590:	2301      	moveq	r3, #1
 8003592:	2300      	movne	r3, #0
 8003594:	b2db      	uxtb	r3, r3
 8003596:	2b00      	cmp	r3, #0
 8003598:	d001      	beq.n	800359e <HAL_I2C_Init+0x196>
 800359a:	2301      	movs	r3, #1
 800359c:	e022      	b.n	80035e4 <HAL_I2C_Init+0x1dc>
 800359e:	687b      	ldr	r3, [r7, #4]
 80035a0:	689b      	ldr	r3, [r3, #8]
 80035a2:	2b00      	cmp	r3, #0
 80035a4:	d10e      	bne.n	80035c4 <HAL_I2C_Init+0x1bc>
 80035a6:	68fb      	ldr	r3, [r7, #12]
 80035a8:	1e58      	subs	r0, r3, #1
 80035aa:	687b      	ldr	r3, [r7, #4]
 80035ac:	6859      	ldr	r1, [r3, #4]
 80035ae:	460b      	mov	r3, r1
 80035b0:	005b      	lsls	r3, r3, #1
 80035b2:	440b      	add	r3, r1
 80035b4:	fbb0 f3f3 	udiv	r3, r0, r3
 80035b8:	3301      	adds	r3, #1
 80035ba:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80035be:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80035c2:	e00f      	b.n	80035e4 <HAL_I2C_Init+0x1dc>
 80035c4:	68fb      	ldr	r3, [r7, #12]
 80035c6:	1e58      	subs	r0, r3, #1
 80035c8:	687b      	ldr	r3, [r7, #4]
 80035ca:	6859      	ldr	r1, [r3, #4]
 80035cc:	460b      	mov	r3, r1
 80035ce:	009b      	lsls	r3, r3, #2
 80035d0:	440b      	add	r3, r1
 80035d2:	0099      	lsls	r1, r3, #2
 80035d4:	440b      	add	r3, r1
 80035d6:	fbb0 f3f3 	udiv	r3, r0, r3
 80035da:	3301      	adds	r3, #1
 80035dc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80035e0:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80035e4:	6879      	ldr	r1, [r7, #4]
 80035e6:	6809      	ldr	r1, [r1, #0]
 80035e8:	4313      	orrs	r3, r2
 80035ea:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 80035ec:	687b      	ldr	r3, [r7, #4]
 80035ee:	681b      	ldr	r3, [r3, #0]
 80035f0:	681b      	ldr	r3, [r3, #0]
 80035f2:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 80035f6:	687b      	ldr	r3, [r7, #4]
 80035f8:	69da      	ldr	r2, [r3, #28]
 80035fa:	687b      	ldr	r3, [r7, #4]
 80035fc:	6a1b      	ldr	r3, [r3, #32]
 80035fe:	431a      	orrs	r2, r3
 8003600:	687b      	ldr	r3, [r7, #4]
 8003602:	681b      	ldr	r3, [r3, #0]
 8003604:	430a      	orrs	r2, r1
 8003606:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8003608:	687b      	ldr	r3, [r7, #4]
 800360a:	681b      	ldr	r3, [r3, #0]
 800360c:	689b      	ldr	r3, [r3, #8]
 800360e:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8003612:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8003616:	687a      	ldr	r2, [r7, #4]
 8003618:	6911      	ldr	r1, [r2, #16]
 800361a:	687a      	ldr	r2, [r7, #4]
 800361c:	68d2      	ldr	r2, [r2, #12]
 800361e:	4311      	orrs	r1, r2
 8003620:	687a      	ldr	r2, [r7, #4]
 8003622:	6812      	ldr	r2, [r2, #0]
 8003624:	430b      	orrs	r3, r1
 8003626:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8003628:	687b      	ldr	r3, [r7, #4]
 800362a:	681b      	ldr	r3, [r3, #0]
 800362c:	68db      	ldr	r3, [r3, #12]
 800362e:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8003632:	687b      	ldr	r3, [r7, #4]
 8003634:	695a      	ldr	r2, [r3, #20]
 8003636:	687b      	ldr	r3, [r7, #4]
 8003638:	699b      	ldr	r3, [r3, #24]
 800363a:	431a      	orrs	r2, r3
 800363c:	687b      	ldr	r3, [r7, #4]
 800363e:	681b      	ldr	r3, [r3, #0]
 8003640:	430a      	orrs	r2, r1
 8003642:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8003644:	687b      	ldr	r3, [r7, #4]
 8003646:	681b      	ldr	r3, [r3, #0]
 8003648:	681a      	ldr	r2, [r3, #0]
 800364a:	687b      	ldr	r3, [r7, #4]
 800364c:	681b      	ldr	r3, [r3, #0]
 800364e:	f042 0201 	orr.w	r2, r2, #1
 8003652:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003654:	687b      	ldr	r3, [r7, #4]
 8003656:	2200      	movs	r2, #0
 8003658:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 800365a:	687b      	ldr	r3, [r7, #4]
 800365c:	2220      	movs	r2, #32
 800365e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8003662:	687b      	ldr	r3, [r7, #4]
 8003664:	2200      	movs	r2, #0
 8003666:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003668:	687b      	ldr	r3, [r7, #4]
 800366a:	2200      	movs	r2, #0
 800366c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8003670:	2300      	movs	r3, #0
}
 8003672:	4618      	mov	r0, r3
 8003674:	3710      	adds	r7, #16
 8003676:	46bd      	mov	sp, r7
 8003678:	bd80      	pop	{r7, pc}
 800367a:	bf00      	nop
 800367c:	000186a0 	.word	0x000186a0
 8003680:	001e847f 	.word	0x001e847f
 8003684:	003d08ff 	.word	0x003d08ff
 8003688:	431bde83 	.word	0x431bde83
 800368c:	10624dd3 	.word	0x10624dd3

08003690 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8003690:	b580      	push	{r7, lr}
 8003692:	b086      	sub	sp, #24
 8003694:	af02      	add	r7, sp, #8
 8003696:	6078      	str	r0, [r7, #4]
  const USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8003698:	687b      	ldr	r3, [r7, #4]
 800369a:	2b00      	cmp	r3, #0
 800369c:	d101      	bne.n	80036a2 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 800369e:	2301      	movs	r3, #1
 80036a0:	e108      	b.n	80038b4 <HAL_PCD_Init+0x224>

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

#if defined (USB_OTG_FS)
  USBx = hpcd->Instance;
 80036a2:	687b      	ldr	r3, [r7, #4]
 80036a4:	681b      	ldr	r3, [r3, #0]
 80036a6:	60bb      	str	r3, [r7, #8]
#endif /* defined (USB_OTG_FS) */

  if (hpcd->State == HAL_PCD_STATE_RESET)
 80036a8:	687b      	ldr	r3, [r7, #4]
 80036aa:	f893 3495 	ldrb.w	r3, [r3, #1173]	; 0x495
 80036ae:	b2db      	uxtb	r3, r3
 80036b0:	2b00      	cmp	r3, #0
 80036b2:	d106      	bne.n	80036c2 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 80036b4:	687b      	ldr	r3, [r7, #4]
 80036b6:	2200      	movs	r2, #0
 80036b8:	f883 2494 	strb.w	r2, [r3, #1172]	; 0x494

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 80036bc:	6878      	ldr	r0, [r7, #4]
 80036be:	f00a f971 	bl	800d9a4 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 80036c2:	687b      	ldr	r3, [r7, #4]
 80036c4:	2203      	movs	r2, #3
 80036c6:	f883 2495 	strb.w	r2, [r3, #1173]	; 0x495

#if defined (USB_OTG_FS)
  /* Disable DMA mode for FS instance */
  if (USBx == USB_OTG_FS)
 80036ca:	68bb      	ldr	r3, [r7, #8]
 80036cc:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80036d0:	d102      	bne.n	80036d8 <HAL_PCD_Init+0x48>
  {
    hpcd->Init.dma_enable = 0U;
 80036d2:	687b      	ldr	r3, [r7, #4]
 80036d4:	2200      	movs	r2, #0
 80036d6:	719a      	strb	r2, [r3, #6]
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 80036d8:	687b      	ldr	r3, [r7, #4]
 80036da:	681b      	ldr	r3, [r3, #0]
 80036dc:	4618      	mov	r0, r3
 80036de:	f003 fce2 	bl	80070a6 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80036e2:	687b      	ldr	r3, [r7, #4]
 80036e4:	6818      	ldr	r0, [r3, #0]
 80036e6:	687b      	ldr	r3, [r7, #4]
 80036e8:	7c1a      	ldrb	r2, [r3, #16]
 80036ea:	f88d 2000 	strb.w	r2, [sp]
 80036ee:	3304      	adds	r3, #4
 80036f0:	cb0e      	ldmia	r3, {r1, r2, r3}
 80036f2:	f003 fbc1 	bl	8006e78 <USB_CoreInit>
 80036f6:	4603      	mov	r3, r0
 80036f8:	2b00      	cmp	r3, #0
 80036fa:	d005      	beq.n	8003708 <HAL_PCD_Init+0x78>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80036fc:	687b      	ldr	r3, [r7, #4]
 80036fe:	2202      	movs	r2, #2
 8003700:	f883 2495 	strb.w	r2, [r3, #1173]	; 0x495
    return HAL_ERROR;
 8003704:	2301      	movs	r3, #1
 8003706:	e0d5      	b.n	80038b4 <HAL_PCD_Init+0x224>
  }

  /* Force Device Mode */
  if (USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE) != HAL_OK)
 8003708:	687b      	ldr	r3, [r7, #4]
 800370a:	681b      	ldr	r3, [r3, #0]
 800370c:	2100      	movs	r1, #0
 800370e:	4618      	mov	r0, r3
 8003710:	f003 fcda 	bl	80070c8 <USB_SetCurrentMode>
 8003714:	4603      	mov	r3, r0
 8003716:	2b00      	cmp	r3, #0
 8003718:	d005      	beq.n	8003726 <HAL_PCD_Init+0x96>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 800371a:	687b      	ldr	r3, [r7, #4]
 800371c:	2202      	movs	r2, #2
 800371e:	f883 2495 	strb.w	r2, [r3, #1173]	; 0x495
    return HAL_ERROR;
 8003722:	2301      	movs	r3, #1
 8003724:	e0c6      	b.n	80038b4 <HAL_PCD_Init+0x224>
  }

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003726:	2300      	movs	r3, #0
 8003728:	73fb      	strb	r3, [r7, #15]
 800372a:	e04a      	b.n	80037c2 <HAL_PCD_Init+0x132>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 800372c:	7bfa      	ldrb	r2, [r7, #15]
 800372e:	6879      	ldr	r1, [r7, #4]
 8003730:	4613      	mov	r3, r2
 8003732:	00db      	lsls	r3, r3, #3
 8003734:	4413      	add	r3, r2
 8003736:	009b      	lsls	r3, r3, #2
 8003738:	440b      	add	r3, r1
 800373a:	3315      	adds	r3, #21
 800373c:	2201      	movs	r2, #1
 800373e:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8003740:	7bfa      	ldrb	r2, [r7, #15]
 8003742:	6879      	ldr	r1, [r7, #4]
 8003744:	4613      	mov	r3, r2
 8003746:	00db      	lsls	r3, r3, #3
 8003748:	4413      	add	r3, r2
 800374a:	009b      	lsls	r3, r3, #2
 800374c:	440b      	add	r3, r1
 800374e:	3314      	adds	r3, #20
 8003750:	7bfa      	ldrb	r2, [r7, #15]
 8003752:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8003754:	7bfa      	ldrb	r2, [r7, #15]
 8003756:	7bfb      	ldrb	r3, [r7, #15]
 8003758:	b298      	uxth	r0, r3
 800375a:	6879      	ldr	r1, [r7, #4]
 800375c:	4613      	mov	r3, r2
 800375e:	00db      	lsls	r3, r3, #3
 8003760:	4413      	add	r3, r2
 8003762:	009b      	lsls	r3, r3, #2
 8003764:	440b      	add	r3, r1
 8003766:	332e      	adds	r3, #46	; 0x2e
 8003768:	4602      	mov	r2, r0
 800376a:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 800376c:	7bfa      	ldrb	r2, [r7, #15]
 800376e:	6879      	ldr	r1, [r7, #4]
 8003770:	4613      	mov	r3, r2
 8003772:	00db      	lsls	r3, r3, #3
 8003774:	4413      	add	r3, r2
 8003776:	009b      	lsls	r3, r3, #2
 8003778:	440b      	add	r3, r1
 800377a:	3318      	adds	r3, #24
 800377c:	2200      	movs	r2, #0
 800377e:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8003780:	7bfa      	ldrb	r2, [r7, #15]
 8003782:	6879      	ldr	r1, [r7, #4]
 8003784:	4613      	mov	r3, r2
 8003786:	00db      	lsls	r3, r3, #3
 8003788:	4413      	add	r3, r2
 800378a:	009b      	lsls	r3, r3, #2
 800378c:	440b      	add	r3, r1
 800378e:	331c      	adds	r3, #28
 8003790:	2200      	movs	r2, #0
 8003792:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8003794:	7bfa      	ldrb	r2, [r7, #15]
 8003796:	6879      	ldr	r1, [r7, #4]
 8003798:	4613      	mov	r3, r2
 800379a:	00db      	lsls	r3, r3, #3
 800379c:	4413      	add	r3, r2
 800379e:	009b      	lsls	r3, r3, #2
 80037a0:	440b      	add	r3, r1
 80037a2:	3320      	adds	r3, #32
 80037a4:	2200      	movs	r2, #0
 80037a6:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 80037a8:	7bfa      	ldrb	r2, [r7, #15]
 80037aa:	6879      	ldr	r1, [r7, #4]
 80037ac:	4613      	mov	r3, r2
 80037ae:	00db      	lsls	r3, r3, #3
 80037b0:	4413      	add	r3, r2
 80037b2:	009b      	lsls	r3, r3, #2
 80037b4:	440b      	add	r3, r1
 80037b6:	3324      	adds	r3, #36	; 0x24
 80037b8:	2200      	movs	r2, #0
 80037ba:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80037bc:	7bfb      	ldrb	r3, [r7, #15]
 80037be:	3301      	adds	r3, #1
 80037c0:	73fb      	strb	r3, [r7, #15]
 80037c2:	687b      	ldr	r3, [r7, #4]
 80037c4:	791b      	ldrb	r3, [r3, #4]
 80037c6:	7bfa      	ldrb	r2, [r7, #15]
 80037c8:	429a      	cmp	r2, r3
 80037ca:	d3af      	bcc.n	800372c <HAL_PCD_Init+0x9c>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80037cc:	2300      	movs	r3, #0
 80037ce:	73fb      	strb	r3, [r7, #15]
 80037d0:	e044      	b.n	800385c <HAL_PCD_Init+0x1cc>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 80037d2:	7bfa      	ldrb	r2, [r7, #15]
 80037d4:	6879      	ldr	r1, [r7, #4]
 80037d6:	4613      	mov	r3, r2
 80037d8:	00db      	lsls	r3, r3, #3
 80037da:	4413      	add	r3, r2
 80037dc:	009b      	lsls	r3, r3, #2
 80037de:	440b      	add	r3, r1
 80037e0:	f203 2355 	addw	r3, r3, #597	; 0x255
 80037e4:	2200      	movs	r2, #0
 80037e6:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 80037e8:	7bfa      	ldrb	r2, [r7, #15]
 80037ea:	6879      	ldr	r1, [r7, #4]
 80037ec:	4613      	mov	r3, r2
 80037ee:	00db      	lsls	r3, r3, #3
 80037f0:	4413      	add	r3, r2
 80037f2:	009b      	lsls	r3, r3, #2
 80037f4:	440b      	add	r3, r1
 80037f6:	f503 7315 	add.w	r3, r3, #596	; 0x254
 80037fa:	7bfa      	ldrb	r2, [r7, #15]
 80037fc:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 80037fe:	7bfa      	ldrb	r2, [r7, #15]
 8003800:	6879      	ldr	r1, [r7, #4]
 8003802:	4613      	mov	r3, r2
 8003804:	00db      	lsls	r3, r3, #3
 8003806:	4413      	add	r3, r2
 8003808:	009b      	lsls	r3, r3, #2
 800380a:	440b      	add	r3, r1
 800380c:	f503 7316 	add.w	r3, r3, #600	; 0x258
 8003810:	2200      	movs	r2, #0
 8003812:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8003814:	7bfa      	ldrb	r2, [r7, #15]
 8003816:	6879      	ldr	r1, [r7, #4]
 8003818:	4613      	mov	r3, r2
 800381a:	00db      	lsls	r3, r3, #3
 800381c:	4413      	add	r3, r2
 800381e:	009b      	lsls	r3, r3, #2
 8003820:	440b      	add	r3, r1
 8003822:	f503 7317 	add.w	r3, r3, #604	; 0x25c
 8003826:	2200      	movs	r2, #0
 8003828:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 800382a:	7bfa      	ldrb	r2, [r7, #15]
 800382c:	6879      	ldr	r1, [r7, #4]
 800382e:	4613      	mov	r3, r2
 8003830:	00db      	lsls	r3, r3, #3
 8003832:	4413      	add	r3, r2
 8003834:	009b      	lsls	r3, r3, #2
 8003836:	440b      	add	r3, r1
 8003838:	f503 7318 	add.w	r3, r3, #608	; 0x260
 800383c:	2200      	movs	r2, #0
 800383e:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8003840:	7bfa      	ldrb	r2, [r7, #15]
 8003842:	6879      	ldr	r1, [r7, #4]
 8003844:	4613      	mov	r3, r2
 8003846:	00db      	lsls	r3, r3, #3
 8003848:	4413      	add	r3, r2
 800384a:	009b      	lsls	r3, r3, #2
 800384c:	440b      	add	r3, r1
 800384e:	f503 7319 	add.w	r3, r3, #612	; 0x264
 8003852:	2200      	movs	r2, #0
 8003854:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003856:	7bfb      	ldrb	r3, [r7, #15]
 8003858:	3301      	adds	r3, #1
 800385a:	73fb      	strb	r3, [r7, #15]
 800385c:	687b      	ldr	r3, [r7, #4]
 800385e:	791b      	ldrb	r3, [r3, #4]
 8003860:	7bfa      	ldrb	r2, [r7, #15]
 8003862:	429a      	cmp	r2, r3
 8003864:	d3b5      	bcc.n	80037d2 <HAL_PCD_Init+0x142>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8003866:	687b      	ldr	r3, [r7, #4]
 8003868:	6818      	ldr	r0, [r3, #0]
 800386a:	687b      	ldr	r3, [r7, #4]
 800386c:	7c1a      	ldrb	r2, [r3, #16]
 800386e:	f88d 2000 	strb.w	r2, [sp]
 8003872:	3304      	adds	r3, #4
 8003874:	cb0e      	ldmia	r3, {r1, r2, r3}
 8003876:	f003 fc73 	bl	8007160 <USB_DevInit>
 800387a:	4603      	mov	r3, r0
 800387c:	2b00      	cmp	r3, #0
 800387e:	d005      	beq.n	800388c <HAL_PCD_Init+0x1fc>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8003880:	687b      	ldr	r3, [r7, #4]
 8003882:	2202      	movs	r2, #2
 8003884:	f883 2495 	strb.w	r2, [r3, #1173]	; 0x495
    return HAL_ERROR;
 8003888:	2301      	movs	r3, #1
 800388a:	e013      	b.n	80038b4 <HAL_PCD_Init+0x224>
  }

  hpcd->USB_Address = 0U;
 800388c:	687b      	ldr	r3, [r7, #4]
 800388e:	2200      	movs	r2, #0
 8003890:	745a      	strb	r2, [r3, #17]
  hpcd->State = HAL_PCD_STATE_READY;
 8003892:	687b      	ldr	r3, [r7, #4]
 8003894:	2201      	movs	r2, #1
 8003896:	f883 2495 	strb.w	r2, [r3, #1173]	; 0x495
#if defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) \
 || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) \
 || defined(STM32F423xx)
  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 800389a:	687b      	ldr	r3, [r7, #4]
 800389c:	7b1b      	ldrb	r3, [r3, #12]
 800389e:	2b01      	cmp	r3, #1
 80038a0:	d102      	bne.n	80038a8 <HAL_PCD_Init+0x218>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 80038a2:	6878      	ldr	r0, [r7, #4]
 80038a4:	f001 f96c 	bl	8004b80 <HAL_PCDEx_ActivateLPM>
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) ||
          defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) ||
          defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 80038a8:	687b      	ldr	r3, [r7, #4]
 80038aa:	681b      	ldr	r3, [r3, #0]
 80038ac:	4618      	mov	r0, r3
 80038ae:	f004 fcaa 	bl	8008206 <USB_DevDisconnect>

  return HAL_OK;
 80038b2:	2300      	movs	r3, #0
}
 80038b4:	4618      	mov	r0, r3
 80038b6:	3710      	adds	r7, #16
 80038b8:	46bd      	mov	sp, r7
 80038ba:	bd80      	pop	{r7, pc}

080038bc <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 80038bc:	b580      	push	{r7, lr}
 80038be:	b084      	sub	sp, #16
 80038c0:	af00      	add	r7, sp, #0
 80038c2:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80038c4:	687b      	ldr	r3, [r7, #4]
 80038c6:	681b      	ldr	r3, [r3, #0]
 80038c8:	60fb      	str	r3, [r7, #12]

  __HAL_LOCK(hpcd);
 80038ca:	687b      	ldr	r3, [r7, #4]
 80038cc:	f893 3494 	ldrb.w	r3, [r3, #1172]	; 0x494
 80038d0:	2b01      	cmp	r3, #1
 80038d2:	d101      	bne.n	80038d8 <HAL_PCD_Start+0x1c>
 80038d4:	2302      	movs	r3, #2
 80038d6:	e022      	b.n	800391e <HAL_PCD_Start+0x62>
 80038d8:	687b      	ldr	r3, [r7, #4]
 80038da:	2201      	movs	r2, #1
 80038dc:	f883 2494 	strb.w	r2, [r3, #1172]	; 0x494

  if (((USBx->GUSBCFG & USB_OTG_GUSBCFG_PHYSEL) != 0U) &&
 80038e0:	68fb      	ldr	r3, [r7, #12]
 80038e2:	68db      	ldr	r3, [r3, #12]
 80038e4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80038e8:	2b00      	cmp	r3, #0
 80038ea:	d009      	beq.n	8003900 <HAL_PCD_Start+0x44>
      (hpcd->Init.battery_charging_enable == 1U))
 80038ec:	687b      	ldr	r3, [r7, #4]
 80038ee:	7b5b      	ldrb	r3, [r3, #13]
  if (((USBx->GUSBCFG & USB_OTG_GUSBCFG_PHYSEL) != 0U) &&
 80038f0:	2b01      	cmp	r3, #1
 80038f2:	d105      	bne.n	8003900 <HAL_PCD_Start+0x44>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 80038f4:	68fb      	ldr	r3, [r7, #12]
 80038f6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80038f8:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 80038fc:	68fb      	ldr	r3, [r7, #12]
 80038fe:	639a      	str	r2, [r3, #56]	; 0x38
  }

  __HAL_PCD_ENABLE(hpcd);
 8003900:	687b      	ldr	r3, [r7, #4]
 8003902:	681b      	ldr	r3, [r3, #0]
 8003904:	4618      	mov	r0, r3
 8003906:	f003 fbbd 	bl	8007084 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 800390a:	687b      	ldr	r3, [r7, #4]
 800390c:	681b      	ldr	r3, [r3, #0]
 800390e:	4618      	mov	r0, r3
 8003910:	f004 fc58 	bl	80081c4 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8003914:	687b      	ldr	r3, [r7, #4]
 8003916:	2200      	movs	r2, #0
 8003918:	f883 2494 	strb.w	r2, [r3, #1172]	; 0x494

  return HAL_OK;
 800391c:	2300      	movs	r3, #0
}
 800391e:	4618      	mov	r0, r3
 8003920:	3710      	adds	r7, #16
 8003922:	46bd      	mov	sp, r7
 8003924:	bd80      	pop	{r7, pc}

08003926 <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8003926:	b590      	push	{r4, r7, lr}
 8003928:	b08d      	sub	sp, #52	; 0x34
 800392a:	af00      	add	r7, sp, #0
 800392c:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800392e:	687b      	ldr	r3, [r7, #4]
 8003930:	681b      	ldr	r3, [r3, #0]
 8003932:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003934:	6a3b      	ldr	r3, [r7, #32]
 8003936:	61fb      	str	r3, [r7, #28]
  uint32_t epnum;
  uint32_t fifoemptymsk;
  uint32_t RegVal;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 8003938:	687b      	ldr	r3, [r7, #4]
 800393a:	681b      	ldr	r3, [r3, #0]
 800393c:	4618      	mov	r0, r3
 800393e:	f004 fd16 	bl	800836e <USB_GetMode>
 8003942:	4603      	mov	r3, r0
 8003944:	2b00      	cmp	r3, #0
 8003946:	f040 84b9 	bne.w	80042bc <HAL_PCD_IRQHandler+0x996>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 800394a:	687b      	ldr	r3, [r7, #4]
 800394c:	681b      	ldr	r3, [r3, #0]
 800394e:	4618      	mov	r0, r3
 8003950:	f004 fc7a 	bl	8008248 <USB_ReadInterrupts>
 8003954:	4603      	mov	r3, r0
 8003956:	2b00      	cmp	r3, #0
 8003958:	f000 84af 	beq.w	80042ba <HAL_PCD_IRQHandler+0x994>
    {
      return;
    }

    /* store current frame number */
    hpcd->FrameNumber = (USBx_DEVICE->DSTS & USB_OTG_DSTS_FNSOF_Msk) >> USB_OTG_DSTS_FNSOF_Pos;
 800395c:	69fb      	ldr	r3, [r7, #28]
 800395e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003962:	689b      	ldr	r3, [r3, #8]
 8003964:	0a1b      	lsrs	r3, r3, #8
 8003966:	f3c3 020d 	ubfx	r2, r3, #0, #14
 800396a:	687b      	ldr	r3, [r7, #4]
 800396c:	f8c3 24d4 	str.w	r2, [r3, #1236]	; 0x4d4

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 8003970:	687b      	ldr	r3, [r7, #4]
 8003972:	681b      	ldr	r3, [r3, #0]
 8003974:	4618      	mov	r0, r3
 8003976:	f004 fc67 	bl	8008248 <USB_ReadInterrupts>
 800397a:	4603      	mov	r3, r0
 800397c:	f003 0302 	and.w	r3, r3, #2
 8003980:	2b02      	cmp	r3, #2
 8003982:	d107      	bne.n	8003994 <HAL_PCD_IRQHandler+0x6e>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 8003984:	687b      	ldr	r3, [r7, #4]
 8003986:	681b      	ldr	r3, [r3, #0]
 8003988:	695a      	ldr	r2, [r3, #20]
 800398a:	687b      	ldr	r3, [r7, #4]
 800398c:	681b      	ldr	r3, [r3, #0]
 800398e:	f002 0202 	and.w	r2, r2, #2
 8003992:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 8003994:	687b      	ldr	r3, [r7, #4]
 8003996:	681b      	ldr	r3, [r3, #0]
 8003998:	4618      	mov	r0, r3
 800399a:	f004 fc55 	bl	8008248 <USB_ReadInterrupts>
 800399e:	4603      	mov	r3, r0
 80039a0:	f003 0310 	and.w	r3, r3, #16
 80039a4:	2b10      	cmp	r3, #16
 80039a6:	d161      	bne.n	8003a6c <HAL_PCD_IRQHandler+0x146>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 80039a8:	687b      	ldr	r3, [r7, #4]
 80039aa:	681b      	ldr	r3, [r3, #0]
 80039ac:	699a      	ldr	r2, [r3, #24]
 80039ae:	687b      	ldr	r3, [r7, #4]
 80039b0:	681b      	ldr	r3, [r3, #0]
 80039b2:	f022 0210 	bic.w	r2, r2, #16
 80039b6:	619a      	str	r2, [r3, #24]

      RegVal = USBx->GRXSTSP;
 80039b8:	6a3b      	ldr	r3, [r7, #32]
 80039ba:	6a1b      	ldr	r3, [r3, #32]
 80039bc:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[RegVal & USB_OTG_GRXSTSP_EPNUM];
 80039be:	69bb      	ldr	r3, [r7, #24]
 80039c0:	f003 020f 	and.w	r2, r3, #15
 80039c4:	4613      	mov	r3, r2
 80039c6:	00db      	lsls	r3, r3, #3
 80039c8:	4413      	add	r3, r2
 80039ca:	009b      	lsls	r3, r3, #2
 80039cc:	f503 7314 	add.w	r3, r3, #592	; 0x250
 80039d0:	687a      	ldr	r2, [r7, #4]
 80039d2:	4413      	add	r3, r2
 80039d4:	3304      	adds	r3, #4
 80039d6:	617b      	str	r3, [r7, #20]

      if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 80039d8:	69bb      	ldr	r3, [r7, #24]
 80039da:	0c5b      	lsrs	r3, r3, #17
 80039dc:	f003 030f 	and.w	r3, r3, #15
 80039e0:	2b02      	cmp	r3, #2
 80039e2:	d124      	bne.n	8003a2e <HAL_PCD_IRQHandler+0x108>
      {
        if ((RegVal & USB_OTG_GRXSTSP_BCNT) != 0U)
 80039e4:	69ba      	ldr	r2, [r7, #24]
 80039e6:	f647 73f0 	movw	r3, #32752	; 0x7ff0
 80039ea:	4013      	ands	r3, r2
 80039ec:	2b00      	cmp	r3, #0
 80039ee:	d035      	beq.n	8003a5c <HAL_PCD_IRQHandler+0x136>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 80039f0:	697b      	ldr	r3, [r7, #20]
 80039f2:	68d9      	ldr	r1, [r3, #12]
                               (uint16_t)((RegVal & USB_OTG_GRXSTSP_BCNT) >> 4));
 80039f4:	69bb      	ldr	r3, [r7, #24]
 80039f6:	091b      	lsrs	r3, r3, #4
 80039f8:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 80039fa:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80039fe:	b29b      	uxth	r3, r3
 8003a00:	461a      	mov	r2, r3
 8003a02:	6a38      	ldr	r0, [r7, #32]
 8003a04:	f004 fa8c 	bl	8007f20 <USB_ReadPacket>

          ep->xfer_buff += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8003a08:	697b      	ldr	r3, [r7, #20]
 8003a0a:	68da      	ldr	r2, [r3, #12]
 8003a0c:	69bb      	ldr	r3, [r7, #24]
 8003a0e:	091b      	lsrs	r3, r3, #4
 8003a10:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8003a14:	441a      	add	r2, r3
 8003a16:	697b      	ldr	r3, [r7, #20]
 8003a18:	60da      	str	r2, [r3, #12]
          ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8003a1a:	697b      	ldr	r3, [r7, #20]
 8003a1c:	695a      	ldr	r2, [r3, #20]
 8003a1e:	69bb      	ldr	r3, [r7, #24]
 8003a20:	091b      	lsrs	r3, r3, #4
 8003a22:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8003a26:	441a      	add	r2, r3
 8003a28:	697b      	ldr	r3, [r7, #20]
 8003a2a:	615a      	str	r2, [r3, #20]
 8003a2c:	e016      	b.n	8003a5c <HAL_PCD_IRQHandler+0x136>
        }
      }
      else if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) == STS_SETUP_UPDT)
 8003a2e:	69bb      	ldr	r3, [r7, #24]
 8003a30:	0c5b      	lsrs	r3, r3, #17
 8003a32:	f003 030f 	and.w	r3, r3, #15
 8003a36:	2b06      	cmp	r3, #6
 8003a38:	d110      	bne.n	8003a5c <HAL_PCD_IRQHandler+0x136>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 8003a3a:	687b      	ldr	r3, [r7, #4]
 8003a3c:	f203 439c 	addw	r3, r3, #1180	; 0x49c
 8003a40:	2208      	movs	r2, #8
 8003a42:	4619      	mov	r1, r3
 8003a44:	6a38      	ldr	r0, [r7, #32]
 8003a46:	f004 fa6b 	bl	8007f20 <USB_ReadPacket>
        ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8003a4a:	697b      	ldr	r3, [r7, #20]
 8003a4c:	695a      	ldr	r2, [r3, #20]
 8003a4e:	69bb      	ldr	r3, [r7, #24]
 8003a50:	091b      	lsrs	r3, r3, #4
 8003a52:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8003a56:	441a      	add	r2, r3
 8003a58:	697b      	ldr	r3, [r7, #20]
 8003a5a:	615a      	str	r2, [r3, #20]
      else
      {
        /* ... */
      }

      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8003a5c:	687b      	ldr	r3, [r7, #4]
 8003a5e:	681b      	ldr	r3, [r3, #0]
 8003a60:	699a      	ldr	r2, [r3, #24]
 8003a62:	687b      	ldr	r3, [r7, #4]
 8003a64:	681b      	ldr	r3, [r3, #0]
 8003a66:	f042 0210 	orr.w	r2, r2, #16
 8003a6a:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 8003a6c:	687b      	ldr	r3, [r7, #4]
 8003a6e:	681b      	ldr	r3, [r3, #0]
 8003a70:	4618      	mov	r0, r3
 8003a72:	f004 fbe9 	bl	8008248 <USB_ReadInterrupts>
 8003a76:	4603      	mov	r3, r0
 8003a78:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003a7c:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8003a80:	f040 80a7 	bne.w	8003bd2 <HAL_PCD_IRQHandler+0x2ac>
    {
      epnum = 0U;
 8003a84:	2300      	movs	r3, #0
 8003a86:	627b      	str	r3, [r7, #36]	; 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 8003a88:	687b      	ldr	r3, [r7, #4]
 8003a8a:	681b      	ldr	r3, [r3, #0]
 8003a8c:	4618      	mov	r0, r3
 8003a8e:	f004 fbee 	bl	800826e <USB_ReadDevAllOutEpInterrupt>
 8003a92:	62b8      	str	r0, [r7, #40]	; 0x28

      while (ep_intr != 0U)
 8003a94:	e099      	b.n	8003bca <HAL_PCD_IRQHandler+0x2a4>
      {
        if ((ep_intr & 0x1U) != 0U)
 8003a96:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003a98:	f003 0301 	and.w	r3, r3, #1
 8003a9c:	2b00      	cmp	r3, #0
 8003a9e:	f000 808e 	beq.w	8003bbe <HAL_PCD_IRQHandler+0x298>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8003aa2:	687b      	ldr	r3, [r7, #4]
 8003aa4:	681b      	ldr	r3, [r3, #0]
 8003aa6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003aa8:	b2d2      	uxtb	r2, r2
 8003aaa:	4611      	mov	r1, r2
 8003aac:	4618      	mov	r0, r3
 8003aae:	f004 fc12 	bl	80082d6 <USB_ReadDevOutEPInterrupt>
 8003ab2:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 8003ab4:	693b      	ldr	r3, [r7, #16]
 8003ab6:	f003 0301 	and.w	r3, r3, #1
 8003aba:	2b00      	cmp	r3, #0
 8003abc:	d00c      	beq.n	8003ad8 <HAL_PCD_IRQHandler+0x1b2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 8003abe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ac0:	015a      	lsls	r2, r3, #5
 8003ac2:	69fb      	ldr	r3, [r7, #28]
 8003ac4:	4413      	add	r3, r2
 8003ac6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003aca:	461a      	mov	r2, r3
 8003acc:	2301      	movs	r3, #1
 8003ace:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 8003ad0:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8003ad2:	6878      	ldr	r0, [r7, #4]
 8003ad4:	f000 fece 	bl	8004874 <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 8003ad8:	693b      	ldr	r3, [r7, #16]
 8003ada:	f003 0308 	and.w	r3, r3, #8
 8003ade:	2b00      	cmp	r3, #0
 8003ae0:	d00c      	beq.n	8003afc <HAL_PCD_IRQHandler+0x1d6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 8003ae2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ae4:	015a      	lsls	r2, r3, #5
 8003ae6:	69fb      	ldr	r3, [r7, #28]
 8003ae8:	4413      	add	r3, r2
 8003aea:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003aee:	461a      	mov	r2, r3
 8003af0:	2308      	movs	r3, #8
 8003af2:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 8003af4:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8003af6:	6878      	ldr	r0, [r7, #4]
 8003af8:	f000 ffa4 	bl	8004a44 <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 8003afc:	693b      	ldr	r3, [r7, #16]
 8003afe:	f003 0310 	and.w	r3, r3, #16
 8003b02:	2b00      	cmp	r3, #0
 8003b04:	d008      	beq.n	8003b18 <HAL_PCD_IRQHandler+0x1f2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 8003b06:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b08:	015a      	lsls	r2, r3, #5
 8003b0a:	69fb      	ldr	r3, [r7, #28]
 8003b0c:	4413      	add	r3, r2
 8003b0e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003b12:	461a      	mov	r2, r3
 8003b14:	2310      	movs	r3, #16
 8003b16:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT Endpoint disable interrupt */
          if ((epint & USB_OTG_DOEPINT_EPDISD) == USB_OTG_DOEPINT_EPDISD)
 8003b18:	693b      	ldr	r3, [r7, #16]
 8003b1a:	f003 0302 	and.w	r3, r3, #2
 8003b1e:	2b00      	cmp	r3, #0
 8003b20:	d030      	beq.n	8003b84 <HAL_PCD_IRQHandler+0x25e>
          {
            if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == USB_OTG_GINTSTS_BOUTNAKEFF)
 8003b22:	6a3b      	ldr	r3, [r7, #32]
 8003b24:	695b      	ldr	r3, [r3, #20]
 8003b26:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003b2a:	2b80      	cmp	r3, #128	; 0x80
 8003b2c:	d109      	bne.n	8003b42 <HAL_PCD_IRQHandler+0x21c>
            {
              USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGONAK;
 8003b2e:	69fb      	ldr	r3, [r7, #28]
 8003b30:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003b34:	685b      	ldr	r3, [r3, #4]
 8003b36:	69fa      	ldr	r2, [r7, #28]
 8003b38:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003b3c:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8003b40:	6053      	str	r3, [r2, #4]
            }

            ep = &hpcd->OUT_ep[epnum];
 8003b42:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003b44:	4613      	mov	r3, r2
 8003b46:	00db      	lsls	r3, r3, #3
 8003b48:	4413      	add	r3, r2
 8003b4a:	009b      	lsls	r3, r3, #2
 8003b4c:	f503 7314 	add.w	r3, r3, #592	; 0x250
 8003b50:	687a      	ldr	r2, [r7, #4]
 8003b52:	4413      	add	r3, r2
 8003b54:	3304      	adds	r3, #4
 8003b56:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 8003b58:	697b      	ldr	r3, [r7, #20]
 8003b5a:	78db      	ldrb	r3, [r3, #3]
 8003b5c:	2b01      	cmp	r3, #1
 8003b5e:	d108      	bne.n	8003b72 <HAL_PCD_IRQHandler+0x24c>
            {
              ep->is_iso_incomplete = 0U;
 8003b60:	697b      	ldr	r3, [r7, #20]
 8003b62:	2200      	movs	r2, #0
 8003b64:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 8003b66:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b68:	b2db      	uxtb	r3, r3
 8003b6a:	4619      	mov	r1, r3
 8003b6c:	6878      	ldr	r0, [r7, #4]
 8003b6e:	f00a f84d 	bl	800dc0c <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_EPDISD);
 8003b72:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b74:	015a      	lsls	r2, r3, #5
 8003b76:	69fb      	ldr	r3, [r7, #28]
 8003b78:	4413      	add	r3, r2
 8003b7a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003b7e:	461a      	mov	r2, r3
 8003b80:	2302      	movs	r3, #2
 8003b82:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8003b84:	693b      	ldr	r3, [r7, #16]
 8003b86:	f003 0320 	and.w	r3, r3, #32
 8003b8a:	2b00      	cmp	r3, #0
 8003b8c:	d008      	beq.n	8003ba0 <HAL_PCD_IRQHandler+0x27a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8003b8e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b90:	015a      	lsls	r2, r3, #5
 8003b92:	69fb      	ldr	r3, [r7, #28]
 8003b94:	4413      	add	r3, r2
 8003b96:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003b9a:	461a      	mov	r2, r3
 8003b9c:	2320      	movs	r3, #32
 8003b9e:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 8003ba0:	693b      	ldr	r3, [r7, #16]
 8003ba2:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003ba6:	2b00      	cmp	r3, #0
 8003ba8:	d009      	beq.n	8003bbe <HAL_PCD_IRQHandler+0x298>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 8003baa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003bac:	015a      	lsls	r2, r3, #5
 8003bae:	69fb      	ldr	r3, [r7, #28]
 8003bb0:	4413      	add	r3, r2
 8003bb2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003bb6:	461a      	mov	r2, r3
 8003bb8:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8003bbc:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 8003bbe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003bc0:	3301      	adds	r3, #1
 8003bc2:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8003bc4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003bc6:	085b      	lsrs	r3, r3, #1
 8003bc8:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 8003bca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003bcc:	2b00      	cmp	r3, #0
 8003bce:	f47f af62 	bne.w	8003a96 <HAL_PCD_IRQHandler+0x170>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 8003bd2:	687b      	ldr	r3, [r7, #4]
 8003bd4:	681b      	ldr	r3, [r3, #0]
 8003bd6:	4618      	mov	r0, r3
 8003bd8:	f004 fb36 	bl	8008248 <USB_ReadInterrupts>
 8003bdc:	4603      	mov	r3, r0
 8003bde:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003be2:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8003be6:	f040 80db 	bne.w	8003da0 <HAL_PCD_IRQHandler+0x47a>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 8003bea:	687b      	ldr	r3, [r7, #4]
 8003bec:	681b      	ldr	r3, [r3, #0]
 8003bee:	4618      	mov	r0, r3
 8003bf0:	f004 fb57 	bl	80082a2 <USB_ReadDevAllInEpInterrupt>
 8003bf4:	62b8      	str	r0, [r7, #40]	; 0x28

      epnum = 0U;
 8003bf6:	2300      	movs	r3, #0
 8003bf8:	627b      	str	r3, [r7, #36]	; 0x24

      while (ep_intr != 0U)
 8003bfa:	e0cd      	b.n	8003d98 <HAL_PCD_IRQHandler+0x472>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 8003bfc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003bfe:	f003 0301 	and.w	r3, r3, #1
 8003c02:	2b00      	cmp	r3, #0
 8003c04:	f000 80c2 	beq.w	8003d8c <HAL_PCD_IRQHandler+0x466>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8003c08:	687b      	ldr	r3, [r7, #4]
 8003c0a:	681b      	ldr	r3, [r3, #0]
 8003c0c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003c0e:	b2d2      	uxtb	r2, r2
 8003c10:	4611      	mov	r1, r2
 8003c12:	4618      	mov	r0, r3
 8003c14:	f004 fb7d 	bl	8008312 <USB_ReadDevInEPInterrupt>
 8003c18:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 8003c1a:	693b      	ldr	r3, [r7, #16]
 8003c1c:	f003 0301 	and.w	r3, r3, #1
 8003c20:	2b00      	cmp	r3, #0
 8003c22:	d057      	beq.n	8003cd4 <HAL_PCD_IRQHandler+0x3ae>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8003c24:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c26:	f003 030f 	and.w	r3, r3, #15
 8003c2a:	2201      	movs	r2, #1
 8003c2c:	fa02 f303 	lsl.w	r3, r2, r3
 8003c30:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8003c32:	69fb      	ldr	r3, [r7, #28]
 8003c34:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003c38:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003c3a:	68fb      	ldr	r3, [r7, #12]
 8003c3c:	43db      	mvns	r3, r3
 8003c3e:	69f9      	ldr	r1, [r7, #28]
 8003c40:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8003c44:	4013      	ands	r3, r2
 8003c46:	634b      	str	r3, [r1, #52]	; 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 8003c48:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c4a:	015a      	lsls	r2, r3, #5
 8003c4c:	69fb      	ldr	r3, [r7, #28]
 8003c4e:	4413      	add	r3, r2
 8003c50:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003c54:	461a      	mov	r2, r3
 8003c56:	2301      	movs	r3, #1
 8003c58:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 8003c5a:	687b      	ldr	r3, [r7, #4]
 8003c5c:	799b      	ldrb	r3, [r3, #6]
 8003c5e:	2b01      	cmp	r3, #1
 8003c60:	d132      	bne.n	8003cc8 <HAL_PCD_IRQHandler+0x3a2>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 8003c62:	6879      	ldr	r1, [r7, #4]
 8003c64:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003c66:	4613      	mov	r3, r2
 8003c68:	00db      	lsls	r3, r3, #3
 8003c6a:	4413      	add	r3, r2
 8003c6c:	009b      	lsls	r3, r3, #2
 8003c6e:	440b      	add	r3, r1
 8003c70:	3320      	adds	r3, #32
 8003c72:	6819      	ldr	r1, [r3, #0]
 8003c74:	6878      	ldr	r0, [r7, #4]
 8003c76:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003c78:	4613      	mov	r3, r2
 8003c7a:	00db      	lsls	r3, r3, #3
 8003c7c:	4413      	add	r3, r2
 8003c7e:	009b      	lsls	r3, r3, #2
 8003c80:	4403      	add	r3, r0
 8003c82:	331c      	adds	r3, #28
 8003c84:	681b      	ldr	r3, [r3, #0]
 8003c86:	4419      	add	r1, r3
 8003c88:	6878      	ldr	r0, [r7, #4]
 8003c8a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003c8c:	4613      	mov	r3, r2
 8003c8e:	00db      	lsls	r3, r3, #3
 8003c90:	4413      	add	r3, r2
 8003c92:	009b      	lsls	r3, r3, #2
 8003c94:	4403      	add	r3, r0
 8003c96:	3320      	adds	r3, #32
 8003c98:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 8003c9a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c9c:	2b00      	cmp	r3, #0
 8003c9e:	d113      	bne.n	8003cc8 <HAL_PCD_IRQHandler+0x3a2>
 8003ca0:	6879      	ldr	r1, [r7, #4]
 8003ca2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003ca4:	4613      	mov	r3, r2
 8003ca6:	00db      	lsls	r3, r3, #3
 8003ca8:	4413      	add	r3, r2
 8003caa:	009b      	lsls	r3, r3, #2
 8003cac:	440b      	add	r3, r1
 8003cae:	3324      	adds	r3, #36	; 0x24
 8003cb0:	681b      	ldr	r3, [r3, #0]
 8003cb2:	2b00      	cmp	r3, #0
 8003cb4:	d108      	bne.n	8003cc8 <HAL_PCD_IRQHandler+0x3a2>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8003cb6:	687b      	ldr	r3, [r7, #4]
 8003cb8:	6818      	ldr	r0, [r3, #0]
 8003cba:	687b      	ldr	r3, [r7, #4]
 8003cbc:	f203 439c 	addw	r3, r3, #1180	; 0x49c
 8003cc0:	461a      	mov	r2, r3
 8003cc2:	2101      	movs	r1, #1
 8003cc4:	f004 fb84 	bl	80083d0 <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 8003cc8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003cca:	b2db      	uxtb	r3, r3
 8003ccc:	4619      	mov	r1, r3
 8003cce:	6878      	ldr	r0, [r7, #4]
 8003cd0:	f009 ff17 	bl	800db02 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 8003cd4:	693b      	ldr	r3, [r7, #16]
 8003cd6:	f003 0308 	and.w	r3, r3, #8
 8003cda:	2b00      	cmp	r3, #0
 8003cdc:	d008      	beq.n	8003cf0 <HAL_PCD_IRQHandler+0x3ca>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 8003cde:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ce0:	015a      	lsls	r2, r3, #5
 8003ce2:	69fb      	ldr	r3, [r7, #28]
 8003ce4:	4413      	add	r3, r2
 8003ce6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003cea:	461a      	mov	r2, r3
 8003cec:	2308      	movs	r3, #8
 8003cee:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 8003cf0:	693b      	ldr	r3, [r7, #16]
 8003cf2:	f003 0310 	and.w	r3, r3, #16
 8003cf6:	2b00      	cmp	r3, #0
 8003cf8:	d008      	beq.n	8003d0c <HAL_PCD_IRQHandler+0x3e6>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 8003cfa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003cfc:	015a      	lsls	r2, r3, #5
 8003cfe:	69fb      	ldr	r3, [r7, #28]
 8003d00:	4413      	add	r3, r2
 8003d02:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003d06:	461a      	mov	r2, r3
 8003d08:	2310      	movs	r3, #16
 8003d0a:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 8003d0c:	693b      	ldr	r3, [r7, #16]
 8003d0e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003d12:	2b00      	cmp	r3, #0
 8003d14:	d008      	beq.n	8003d28 <HAL_PCD_IRQHandler+0x402>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 8003d16:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d18:	015a      	lsls	r2, r3, #5
 8003d1a:	69fb      	ldr	r3, [r7, #28]
 8003d1c:	4413      	add	r3, r2
 8003d1e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003d22:	461a      	mov	r2, r3
 8003d24:	2340      	movs	r3, #64	; 0x40
 8003d26:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 8003d28:	693b      	ldr	r3, [r7, #16]
 8003d2a:	f003 0302 	and.w	r3, r3, #2
 8003d2e:	2b00      	cmp	r3, #0
 8003d30:	d023      	beq.n	8003d7a <HAL_PCD_IRQHandler+0x454>
          {
            (void)USB_FlushTxFifo(USBx, epnum);
 8003d32:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8003d34:	6a38      	ldr	r0, [r7, #32]
 8003d36:	f003 fb71 	bl	800741c <USB_FlushTxFifo>

            ep = &hpcd->IN_ep[epnum];
 8003d3a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003d3c:	4613      	mov	r3, r2
 8003d3e:	00db      	lsls	r3, r3, #3
 8003d40:	4413      	add	r3, r2
 8003d42:	009b      	lsls	r3, r3, #2
 8003d44:	3310      	adds	r3, #16
 8003d46:	687a      	ldr	r2, [r7, #4]
 8003d48:	4413      	add	r3, r2
 8003d4a:	3304      	adds	r3, #4
 8003d4c:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 8003d4e:	697b      	ldr	r3, [r7, #20]
 8003d50:	78db      	ldrb	r3, [r3, #3]
 8003d52:	2b01      	cmp	r3, #1
 8003d54:	d108      	bne.n	8003d68 <HAL_PCD_IRQHandler+0x442>
            {
              ep->is_iso_incomplete = 0U;
 8003d56:	697b      	ldr	r3, [r7, #20]
 8003d58:	2200      	movs	r2, #0
 8003d5a:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 8003d5c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d5e:	b2db      	uxtb	r3, r3
 8003d60:	4619      	mov	r1, r3
 8003d62:	6878      	ldr	r0, [r7, #4]
 8003d64:	f009 ff64 	bl	800dc30 <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 8003d68:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d6a:	015a      	lsls	r2, r3, #5
 8003d6c:	69fb      	ldr	r3, [r7, #28]
 8003d6e:	4413      	add	r3, r2
 8003d70:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003d74:	461a      	mov	r2, r3
 8003d76:	2302      	movs	r3, #2
 8003d78:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 8003d7a:	693b      	ldr	r3, [r7, #16]
 8003d7c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003d80:	2b00      	cmp	r3, #0
 8003d82:	d003      	beq.n	8003d8c <HAL_PCD_IRQHandler+0x466>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 8003d84:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8003d86:	6878      	ldr	r0, [r7, #4]
 8003d88:	f000 fce8 	bl	800475c <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 8003d8c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d8e:	3301      	adds	r3, #1
 8003d90:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8003d92:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003d94:	085b      	lsrs	r3, r3, #1
 8003d96:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 8003d98:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003d9a:	2b00      	cmp	r3, #0
 8003d9c:	f47f af2e 	bne.w	8003bfc <HAL_PCD_IRQHandler+0x2d6>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 8003da0:	687b      	ldr	r3, [r7, #4]
 8003da2:	681b      	ldr	r3, [r3, #0]
 8003da4:	4618      	mov	r0, r3
 8003da6:	f004 fa4f 	bl	8008248 <USB_ReadInterrupts>
 8003daa:	4603      	mov	r3, r0
 8003dac:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8003db0:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8003db4:	d122      	bne.n	8003dfc <HAL_PCD_IRQHandler+0x4d6>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8003db6:	69fb      	ldr	r3, [r7, #28]
 8003db8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003dbc:	685b      	ldr	r3, [r3, #4]
 8003dbe:	69fa      	ldr	r2, [r7, #28]
 8003dc0:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003dc4:	f023 0301 	bic.w	r3, r3, #1
 8003dc8:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 8003dca:	687b      	ldr	r3, [r7, #4]
 8003dcc:	f893 34cc 	ldrb.w	r3, [r3, #1228]	; 0x4cc
 8003dd0:	2b01      	cmp	r3, #1
 8003dd2:	d108      	bne.n	8003de6 <HAL_PCD_IRQHandler+0x4c0>
      {
        hpcd->LPM_State = LPM_L0;
 8003dd4:	687b      	ldr	r3, [r7, #4]
 8003dd6:	2200      	movs	r2, #0
 8003dd8:	f883 24cc 	strb.w	r2, [r3, #1228]	; 0x4cc

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 8003ddc:	2100      	movs	r1, #0
 8003dde:	6878      	ldr	r0, [r7, #4]
 8003de0:	f000 fef2 	bl	8004bc8 <HAL_PCDEx_LPM_Callback>
 8003de4:	e002      	b.n	8003dec <HAL_PCD_IRQHandler+0x4c6>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 8003de6:	6878      	ldr	r0, [r7, #4]
 8003de8:	f009 ff02 	bl	800dbf0 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 8003dec:	687b      	ldr	r3, [r7, #4]
 8003dee:	681b      	ldr	r3, [r3, #0]
 8003df0:	695a      	ldr	r2, [r3, #20]
 8003df2:	687b      	ldr	r3, [r7, #4]
 8003df4:	681b      	ldr	r3, [r3, #0]
 8003df6:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 8003dfa:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 8003dfc:	687b      	ldr	r3, [r7, #4]
 8003dfe:	681b      	ldr	r3, [r3, #0]
 8003e00:	4618      	mov	r0, r3
 8003e02:	f004 fa21 	bl	8008248 <USB_ReadInterrupts>
 8003e06:	4603      	mov	r3, r0
 8003e08:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003e0c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003e10:	d112      	bne.n	8003e38 <HAL_PCD_IRQHandler+0x512>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 8003e12:	69fb      	ldr	r3, [r7, #28]
 8003e14:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003e18:	689b      	ldr	r3, [r3, #8]
 8003e1a:	f003 0301 	and.w	r3, r3, #1
 8003e1e:	2b01      	cmp	r3, #1
 8003e20:	d102      	bne.n	8003e28 <HAL_PCD_IRQHandler+0x502>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 8003e22:	6878      	ldr	r0, [r7, #4]
 8003e24:	f009 febe 	bl	800dba4 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 8003e28:	687b      	ldr	r3, [r7, #4]
 8003e2a:	681b      	ldr	r3, [r3, #0]
 8003e2c:	695a      	ldr	r2, [r3, #20]
 8003e2e:	687b      	ldr	r3, [r7, #4]
 8003e30:	681b      	ldr	r3, [r3, #0]
 8003e32:	f402 6200 	and.w	r2, r2, #2048	; 0x800
 8003e36:	615a      	str	r2, [r3, #20]
    }
#if defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) \
 || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) \
 || defined(STM32F423xx)
    /* Handle LPM Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT))
 8003e38:	687b      	ldr	r3, [r7, #4]
 8003e3a:	681b      	ldr	r3, [r3, #0]
 8003e3c:	4618      	mov	r0, r3
 8003e3e:	f004 fa03 	bl	8008248 <USB_ReadInterrupts>
 8003e42:	4603      	mov	r3, r0
 8003e44:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003e48:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003e4c:	d121      	bne.n	8003e92 <HAL_PCD_IRQHandler+0x56c>
    {
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT);
 8003e4e:	687b      	ldr	r3, [r7, #4]
 8003e50:	681b      	ldr	r3, [r3, #0]
 8003e52:	695a      	ldr	r2, [r3, #20]
 8003e54:	687b      	ldr	r3, [r7, #4]
 8003e56:	681b      	ldr	r3, [r3, #0]
 8003e58:	f002 6200 	and.w	r2, r2, #134217728	; 0x8000000
 8003e5c:	615a      	str	r2, [r3, #20]

      if (hpcd->LPM_State == LPM_L0)
 8003e5e:	687b      	ldr	r3, [r7, #4]
 8003e60:	f893 34cc 	ldrb.w	r3, [r3, #1228]	; 0x4cc
 8003e64:	2b00      	cmp	r3, #0
 8003e66:	d111      	bne.n	8003e8c <HAL_PCD_IRQHandler+0x566>
      {
        hpcd->LPM_State = LPM_L1;
 8003e68:	687b      	ldr	r3, [r7, #4]
 8003e6a:	2201      	movs	r2, #1
 8003e6c:	f883 24cc 	strb.w	r2, [r3, #1228]	; 0x4cc
        hpcd->BESL = (hpcd->Instance->GLPMCFG & USB_OTG_GLPMCFG_BESL) >> 2U;
 8003e70:	687b      	ldr	r3, [r7, #4]
 8003e72:	681b      	ldr	r3, [r3, #0]
 8003e74:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003e76:	089b      	lsrs	r3, r3, #2
 8003e78:	f003 020f 	and.w	r2, r3, #15
 8003e7c:	687b      	ldr	r3, [r7, #4]
 8003e7e:	f8c3 24d0 	str.w	r2, [r3, #1232]	; 0x4d0

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L1_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L1_ACTIVE);
 8003e82:	2101      	movs	r1, #1
 8003e84:	6878      	ldr	r0, [r7, #4]
 8003e86:	f000 fe9f 	bl	8004bc8 <HAL_PCDEx_LPM_Callback>
 8003e8a:	e002      	b.n	8003e92 <HAL_PCD_IRQHandler+0x56c>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 8003e8c:	6878      	ldr	r0, [r7, #4]
 8003e8e:	f009 fe89 	bl	800dba4 <HAL_PCD_SuspendCallback>
    }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) ||
          defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) ||
          defined(STM32F423xx) */
    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 8003e92:	687b      	ldr	r3, [r7, #4]
 8003e94:	681b      	ldr	r3, [r3, #0]
 8003e96:	4618      	mov	r0, r3
 8003e98:	f004 f9d6 	bl	8008248 <USB_ReadInterrupts>
 8003e9c:	4603      	mov	r3, r0
 8003e9e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003ea2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003ea6:	f040 80b7 	bne.w	8004018 <HAL_PCD_IRQHandler+0x6f2>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8003eaa:	69fb      	ldr	r3, [r7, #28]
 8003eac:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003eb0:	685b      	ldr	r3, [r3, #4]
 8003eb2:	69fa      	ldr	r2, [r7, #28]
 8003eb4:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003eb8:	f023 0301 	bic.w	r3, r3, #1
 8003ebc:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 8003ebe:	687b      	ldr	r3, [r7, #4]
 8003ec0:	681b      	ldr	r3, [r3, #0]
 8003ec2:	2110      	movs	r1, #16
 8003ec4:	4618      	mov	r0, r3
 8003ec6:	f003 faa9 	bl	800741c <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003eca:	2300      	movs	r3, #0
 8003ecc:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003ece:	e046      	b.n	8003f5e <HAL_PCD_IRQHandler+0x638>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 8003ed0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003ed2:	015a      	lsls	r2, r3, #5
 8003ed4:	69fb      	ldr	r3, [r7, #28]
 8003ed6:	4413      	add	r3, r2
 8003ed8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003edc:	461a      	mov	r2, r3
 8003ede:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8003ee2:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8003ee4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003ee6:	015a      	lsls	r2, r3, #5
 8003ee8:	69fb      	ldr	r3, [r7, #28]
 8003eea:	4413      	add	r3, r2
 8003eec:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003ef0:	681b      	ldr	r3, [r3, #0]
 8003ef2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003ef4:	0151      	lsls	r1, r2, #5
 8003ef6:	69fa      	ldr	r2, [r7, #28]
 8003ef8:	440a      	add	r2, r1
 8003efa:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003efe:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8003f02:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 8003f04:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003f06:	015a      	lsls	r2, r3, #5
 8003f08:	69fb      	ldr	r3, [r7, #28]
 8003f0a:	4413      	add	r3, r2
 8003f0c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003f10:	461a      	mov	r2, r3
 8003f12:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8003f16:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8003f18:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003f1a:	015a      	lsls	r2, r3, #5
 8003f1c:	69fb      	ldr	r3, [r7, #28]
 8003f1e:	4413      	add	r3, r2
 8003f20:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003f24:	681b      	ldr	r3, [r3, #0]
 8003f26:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003f28:	0151      	lsls	r1, r2, #5
 8003f2a:	69fa      	ldr	r2, [r7, #28]
 8003f2c:	440a      	add	r2, r1
 8003f2e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8003f32:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8003f36:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8003f38:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003f3a:	015a      	lsls	r2, r3, #5
 8003f3c:	69fb      	ldr	r3, [r7, #28]
 8003f3e:	4413      	add	r3, r2
 8003f40:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003f44:	681b      	ldr	r3, [r3, #0]
 8003f46:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003f48:	0151      	lsls	r1, r2, #5
 8003f4a:	69fa      	ldr	r2, [r7, #28]
 8003f4c:	440a      	add	r2, r1
 8003f4e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8003f52:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8003f56:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003f58:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003f5a:	3301      	adds	r3, #1
 8003f5c:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003f5e:	687b      	ldr	r3, [r7, #4]
 8003f60:	791b      	ldrb	r3, [r3, #4]
 8003f62:	461a      	mov	r2, r3
 8003f64:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003f66:	4293      	cmp	r3, r2
 8003f68:	d3b2      	bcc.n	8003ed0 <HAL_PCD_IRQHandler+0x5aa>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 8003f6a:	69fb      	ldr	r3, [r7, #28]
 8003f6c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003f70:	69db      	ldr	r3, [r3, #28]
 8003f72:	69fa      	ldr	r2, [r7, #28]
 8003f74:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003f78:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
 8003f7c:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 8003f7e:	687b      	ldr	r3, [r7, #4]
 8003f80:	7bdb      	ldrb	r3, [r3, #15]
 8003f82:	2b00      	cmp	r3, #0
 8003f84:	d016      	beq.n	8003fb4 <HAL_PCD_IRQHandler+0x68e>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 8003f86:	69fb      	ldr	r3, [r7, #28]
 8003f88:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003f8c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003f90:	69fa      	ldr	r2, [r7, #28]
 8003f92:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003f96:	f043 030b 	orr.w	r3, r3, #11
 8003f9a:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 8003f9e:	69fb      	ldr	r3, [r7, #28]
 8003fa0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003fa4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003fa6:	69fa      	ldr	r2, [r7, #28]
 8003fa8:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003fac:	f043 030b 	orr.w	r3, r3, #11
 8003fb0:	6453      	str	r3, [r2, #68]	; 0x44
 8003fb2:	e015      	b.n	8003fe0 <HAL_PCD_IRQHandler+0x6ba>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 8003fb4:	69fb      	ldr	r3, [r7, #28]
 8003fb6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003fba:	695b      	ldr	r3, [r3, #20]
 8003fbc:	69fa      	ldr	r2, [r7, #28]
 8003fbe:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003fc2:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8003fc6:	f043 032b 	orr.w	r3, r3, #43	; 0x2b
 8003fca:	6153      	str	r3, [r2, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 8003fcc:	69fb      	ldr	r3, [r7, #28]
 8003fce:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003fd2:	691b      	ldr	r3, [r3, #16]
 8003fd4:	69fa      	ldr	r2, [r7, #28]
 8003fd6:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003fda:	f043 030b 	orr.w	r3, r3, #11
 8003fde:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 8003fe0:	69fb      	ldr	r3, [r7, #28]
 8003fe2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003fe6:	681b      	ldr	r3, [r3, #0]
 8003fe8:	69fa      	ldr	r2, [r7, #28]
 8003fea:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003fee:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 8003ff2:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8003ff4:	687b      	ldr	r3, [r7, #4]
 8003ff6:	6818      	ldr	r0, [r3, #0]
 8003ff8:	687b      	ldr	r3, [r7, #4]
 8003ffa:	7999      	ldrb	r1, [r3, #6]
                             (uint8_t *)hpcd->Setup);
 8003ffc:	687b      	ldr	r3, [r7, #4]
 8003ffe:	f203 439c 	addw	r3, r3, #1180	; 0x49c
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8004002:	461a      	mov	r2, r3
 8004004:	f004 f9e4 	bl	80083d0 <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 8004008:	687b      	ldr	r3, [r7, #4]
 800400a:	681b      	ldr	r3, [r3, #0]
 800400c:	695a      	ldr	r2, [r3, #20]
 800400e:	687b      	ldr	r3, [r7, #4]
 8004010:	681b      	ldr	r3, [r3, #0]
 8004012:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 8004016:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 8004018:	687b      	ldr	r3, [r7, #4]
 800401a:	681b      	ldr	r3, [r3, #0]
 800401c:	4618      	mov	r0, r3
 800401e:	f004 f913 	bl	8008248 <USB_ReadInterrupts>
 8004022:	4603      	mov	r3, r0
 8004024:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8004028:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800402c:	d123      	bne.n	8004076 <HAL_PCD_IRQHandler+0x750>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 800402e:	687b      	ldr	r3, [r7, #4]
 8004030:	681b      	ldr	r3, [r3, #0]
 8004032:	4618      	mov	r0, r3
 8004034:	f004 f9a9 	bl	800838a <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 8004038:	687b      	ldr	r3, [r7, #4]
 800403a:	681b      	ldr	r3, [r3, #0]
 800403c:	4618      	mov	r0, r3
 800403e:	f003 fa66 	bl	800750e <USB_GetDevSpeed>
 8004042:	4603      	mov	r3, r0
 8004044:	461a      	mov	r2, r3
 8004046:	687b      	ldr	r3, [r7, #4]
 8004048:	71da      	strb	r2, [r3, #7]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 800404a:	687b      	ldr	r3, [r7, #4]
 800404c:	681c      	ldr	r4, [r3, #0]
 800404e:	f000 fefd 	bl	8004e4c <HAL_RCC_GetHCLKFreq>
 8004052:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 8004054:	687b      	ldr	r3, [r7, #4]
 8004056:	79db      	ldrb	r3, [r3, #7]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8004058:	461a      	mov	r2, r3
 800405a:	4620      	mov	r0, r4
 800405c:	f002 ff70 	bl	8006f40 <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 8004060:	6878      	ldr	r0, [r7, #4]
 8004062:	f009 fd76 	bl	800db52 <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 8004066:	687b      	ldr	r3, [r7, #4]
 8004068:	681b      	ldr	r3, [r3, #0]
 800406a:	695a      	ldr	r2, [r3, #20]
 800406c:	687b      	ldr	r3, [r7, #4]
 800406e:	681b      	ldr	r3, [r3, #0]
 8004070:	f402 5200 	and.w	r2, r2, #8192	; 0x2000
 8004074:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 8004076:	687b      	ldr	r3, [r7, #4]
 8004078:	681b      	ldr	r3, [r3, #0]
 800407a:	4618      	mov	r0, r3
 800407c:	f004 f8e4 	bl	8008248 <USB_ReadInterrupts>
 8004080:	4603      	mov	r3, r0
 8004082:	f003 0308 	and.w	r3, r3, #8
 8004086:	2b08      	cmp	r3, #8
 8004088:	d10a      	bne.n	80040a0 <HAL_PCD_IRQHandler+0x77a>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 800408a:	6878      	ldr	r0, [r7, #4]
 800408c:	f009 fd53 	bl	800db36 <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 8004090:	687b      	ldr	r3, [r7, #4]
 8004092:	681b      	ldr	r3, [r3, #0]
 8004094:	695a      	ldr	r2, [r3, #20]
 8004096:	687b      	ldr	r3, [r7, #4]
 8004098:	681b      	ldr	r3, [r3, #0]
 800409a:	f002 0208 	and.w	r2, r2, #8
 800409e:	615a      	str	r2, [r3, #20]
    }

    /* Handle Global OUT NAK effective Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_BOUTNAKEFF))
 80040a0:	687b      	ldr	r3, [r7, #4]
 80040a2:	681b      	ldr	r3, [r3, #0]
 80040a4:	4618      	mov	r0, r3
 80040a6:	f004 f8cf 	bl	8008248 <USB_ReadInterrupts>
 80040aa:	4603      	mov	r3, r0
 80040ac:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80040b0:	2b80      	cmp	r3, #128	; 0x80
 80040b2:	d123      	bne.n	80040fc <HAL_PCD_IRQHandler+0x7d6>
    {
      USBx->GINTMSK &= ~USB_OTG_GINTMSK_GONAKEFFM;
 80040b4:	6a3b      	ldr	r3, [r7, #32]
 80040b6:	699b      	ldr	r3, [r3, #24]
 80040b8:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80040bc:	6a3b      	ldr	r3, [r7, #32]
 80040be:	619a      	str	r2, [r3, #24]

      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80040c0:	2301      	movs	r3, #1
 80040c2:	627b      	str	r3, [r7, #36]	; 0x24
 80040c4:	e014      	b.n	80040f0 <HAL_PCD_IRQHandler+0x7ca>
      {
        if (hpcd->OUT_ep[epnum].is_iso_incomplete == 1U)
 80040c6:	6879      	ldr	r1, [r7, #4]
 80040c8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80040ca:	4613      	mov	r3, r2
 80040cc:	00db      	lsls	r3, r3, #3
 80040ce:	4413      	add	r3, r2
 80040d0:	009b      	lsls	r3, r3, #2
 80040d2:	440b      	add	r3, r1
 80040d4:	f203 2357 	addw	r3, r3, #599	; 0x257
 80040d8:	781b      	ldrb	r3, [r3, #0]
 80040da:	2b01      	cmp	r3, #1
 80040dc:	d105      	bne.n	80040ea <HAL_PCD_IRQHandler+0x7c4>
        {
          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)epnum);
 80040de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80040e0:	b2db      	uxtb	r3, r3
 80040e2:	4619      	mov	r1, r3
 80040e4:	6878      	ldr	r0, [r7, #4]
 80040e6:	f000 fb08 	bl	80046fa <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80040ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80040ec:	3301      	adds	r3, #1
 80040ee:	627b      	str	r3, [r7, #36]	; 0x24
 80040f0:	687b      	ldr	r3, [r7, #4]
 80040f2:	791b      	ldrb	r3, [r3, #4]
 80040f4:	461a      	mov	r2, r3
 80040f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80040f8:	4293      	cmp	r3, r2
 80040fa:	d3e4      	bcc.n	80040c6 <HAL_PCD_IRQHandler+0x7a0>
        }
      }
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 80040fc:	687b      	ldr	r3, [r7, #4]
 80040fe:	681b      	ldr	r3, [r3, #0]
 8004100:	4618      	mov	r0, r3
 8004102:	f004 f8a1 	bl	8008248 <USB_ReadInterrupts>
 8004106:	4603      	mov	r3, r0
 8004108:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800410c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004110:	d13c      	bne.n	800418c <HAL_PCD_IRQHandler+0x866>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8004112:	2301      	movs	r3, #1
 8004114:	627b      	str	r3, [r7, #36]	; 0x24
 8004116:	e02b      	b.n	8004170 <HAL_PCD_IRQHandler+0x84a>
      {
        RegVal = USBx_INEP(epnum)->DIEPCTL;
 8004118:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800411a:	015a      	lsls	r2, r3, #5
 800411c:	69fb      	ldr	r3, [r7, #28]
 800411e:	4413      	add	r3, r2
 8004120:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004124:	681b      	ldr	r3, [r3, #0]
 8004126:	61bb      	str	r3, [r7, #24]

        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8004128:	6879      	ldr	r1, [r7, #4]
 800412a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800412c:	4613      	mov	r3, r2
 800412e:	00db      	lsls	r3, r3, #3
 8004130:	4413      	add	r3, r2
 8004132:	009b      	lsls	r3, r3, #2
 8004134:	440b      	add	r3, r1
 8004136:	3318      	adds	r3, #24
 8004138:	781b      	ldrb	r3, [r3, #0]
 800413a:	2b01      	cmp	r3, #1
 800413c:	d115      	bne.n	800416a <HAL_PCD_IRQHandler+0x844>
            ((RegVal & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA))
 800413e:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8004140:	2b00      	cmp	r3, #0
 8004142:	da12      	bge.n	800416a <HAL_PCD_IRQHandler+0x844>
        {
          hpcd->IN_ep[epnum].is_iso_incomplete = 1U;
 8004144:	6879      	ldr	r1, [r7, #4]
 8004146:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004148:	4613      	mov	r3, r2
 800414a:	00db      	lsls	r3, r3, #3
 800414c:	4413      	add	r3, r2
 800414e:	009b      	lsls	r3, r3, #2
 8004150:	440b      	add	r3, r1
 8004152:	3317      	adds	r3, #23
 8004154:	2201      	movs	r2, #1
 8004156:	701a      	strb	r2, [r3, #0]

          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)(epnum | 0x80U));
 8004158:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800415a:	b2db      	uxtb	r3, r3
 800415c:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8004160:	b2db      	uxtb	r3, r3
 8004162:	4619      	mov	r1, r3
 8004164:	6878      	ldr	r0, [r7, #4]
 8004166:	f000 fac8 	bl	80046fa <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 800416a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800416c:	3301      	adds	r3, #1
 800416e:	627b      	str	r3, [r7, #36]	; 0x24
 8004170:	687b      	ldr	r3, [r7, #4]
 8004172:	791b      	ldrb	r3, [r3, #4]
 8004174:	461a      	mov	r2, r3
 8004176:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004178:	4293      	cmp	r3, r2
 800417a:	d3cd      	bcc.n	8004118 <HAL_PCD_IRQHandler+0x7f2>
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 800417c:	687b      	ldr	r3, [r7, #4]
 800417e:	681b      	ldr	r3, [r3, #0]
 8004180:	695a      	ldr	r2, [r3, #20]
 8004182:	687b      	ldr	r3, [r7, #4]
 8004184:	681b      	ldr	r3, [r3, #0]
 8004186:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
 800418a:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 800418c:	687b      	ldr	r3, [r7, #4]
 800418e:	681b      	ldr	r3, [r3, #0]
 8004190:	4618      	mov	r0, r3
 8004192:	f004 f859 	bl	8008248 <USB_ReadInterrupts>
 8004196:	4603      	mov	r3, r0
 8004198:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800419c:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80041a0:	d156      	bne.n	8004250 <HAL_PCD_IRQHandler+0x92a>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80041a2:	2301      	movs	r3, #1
 80041a4:	627b      	str	r3, [r7, #36]	; 0x24
 80041a6:	e045      	b.n	8004234 <HAL_PCD_IRQHandler+0x90e>
      {
        RegVal = USBx_OUTEP(epnum)->DOEPCTL;
 80041a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80041aa:	015a      	lsls	r2, r3, #5
 80041ac:	69fb      	ldr	r3, [r7, #28]
 80041ae:	4413      	add	r3, r2
 80041b0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80041b4:	681b      	ldr	r3, [r3, #0]
 80041b6:	61bb      	str	r3, [r7, #24]

        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 80041b8:	6879      	ldr	r1, [r7, #4]
 80041ba:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80041bc:	4613      	mov	r3, r2
 80041be:	00db      	lsls	r3, r3, #3
 80041c0:	4413      	add	r3, r2
 80041c2:	009b      	lsls	r3, r3, #2
 80041c4:	440b      	add	r3, r1
 80041c6:	f503 7316 	add.w	r3, r3, #600	; 0x258
 80041ca:	781b      	ldrb	r3, [r3, #0]
 80041cc:	2b01      	cmp	r3, #1
 80041ce:	d12e      	bne.n	800422e <HAL_PCD_IRQHandler+0x908>
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 80041d0:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 80041d2:	2b00      	cmp	r3, #0
 80041d4:	da2b      	bge.n	800422e <HAL_PCD_IRQHandler+0x908>
            ((RegVal & (0x1U << 16)) == (hpcd->FrameNumber & 0x1U)))
 80041d6:	69bb      	ldr	r3, [r7, #24]
 80041d8:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 80041dc:	687b      	ldr	r3, [r7, #4]
 80041de:	f8d3 34d4 	ldr.w	r3, [r3, #1236]	; 0x4d4
 80041e2:	f003 0301 	and.w	r3, r3, #1
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 80041e6:	429a      	cmp	r2, r3
 80041e8:	d121      	bne.n	800422e <HAL_PCD_IRQHandler+0x908>
        {
          hpcd->OUT_ep[epnum].is_iso_incomplete = 1U;
 80041ea:	6879      	ldr	r1, [r7, #4]
 80041ec:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80041ee:	4613      	mov	r3, r2
 80041f0:	00db      	lsls	r3, r3, #3
 80041f2:	4413      	add	r3, r2
 80041f4:	009b      	lsls	r3, r3, #2
 80041f6:	440b      	add	r3, r1
 80041f8:	f203 2357 	addw	r3, r3, #599	; 0x257
 80041fc:	2201      	movs	r2, #1
 80041fe:	701a      	strb	r2, [r3, #0]

          USBx->GINTMSK |= USB_OTG_GINTMSK_GONAKEFFM;
 8004200:	6a3b      	ldr	r3, [r7, #32]
 8004202:	699b      	ldr	r3, [r3, #24]
 8004204:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8004208:	6a3b      	ldr	r3, [r7, #32]
 800420a:	619a      	str	r2, [r3, #24]

          if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == 0U)
 800420c:	6a3b      	ldr	r3, [r7, #32]
 800420e:	695b      	ldr	r3, [r3, #20]
 8004210:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004214:	2b00      	cmp	r3, #0
 8004216:	d10a      	bne.n	800422e <HAL_PCD_IRQHandler+0x908>
          {
            USBx_DEVICE->DCTL |= USB_OTG_DCTL_SGONAK;
 8004218:	69fb      	ldr	r3, [r7, #28]
 800421a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800421e:	685b      	ldr	r3, [r3, #4]
 8004220:	69fa      	ldr	r2, [r7, #28]
 8004222:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004226:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800422a:	6053      	str	r3, [r2, #4]
            break;
 800422c:	e008      	b.n	8004240 <HAL_PCD_IRQHandler+0x91a>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 800422e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004230:	3301      	adds	r3, #1
 8004232:	627b      	str	r3, [r7, #36]	; 0x24
 8004234:	687b      	ldr	r3, [r7, #4]
 8004236:	791b      	ldrb	r3, [r3, #4]
 8004238:	461a      	mov	r2, r3
 800423a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800423c:	4293      	cmp	r3, r2
 800423e:	d3b3      	bcc.n	80041a8 <HAL_PCD_IRQHandler+0x882>
          }
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8004240:	687b      	ldr	r3, [r7, #4]
 8004242:	681b      	ldr	r3, [r3, #0]
 8004244:	695a      	ldr	r2, [r3, #20]
 8004246:	687b      	ldr	r3, [r7, #4]
 8004248:	681b      	ldr	r3, [r3, #0]
 800424a:	f402 1200 	and.w	r2, r2, #2097152	; 0x200000
 800424e:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 8004250:	687b      	ldr	r3, [r7, #4]
 8004252:	681b      	ldr	r3, [r3, #0]
 8004254:	4618      	mov	r0, r3
 8004256:	f003 fff7 	bl	8008248 <USB_ReadInterrupts>
 800425a:	4603      	mov	r3, r0
 800425c:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8004260:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004264:	d10a      	bne.n	800427c <HAL_PCD_IRQHandler+0x956>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 8004266:	6878      	ldr	r0, [r7, #4]
 8004268:	f009 fcf4 	bl	800dc54 <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 800426c:	687b      	ldr	r3, [r7, #4]
 800426e:	681b      	ldr	r3, [r3, #0]
 8004270:	695a      	ldr	r2, [r3, #20]
 8004272:	687b      	ldr	r3, [r7, #4]
 8004274:	681b      	ldr	r3, [r3, #0]
 8004276:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 800427a:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 800427c:	687b      	ldr	r3, [r7, #4]
 800427e:	681b      	ldr	r3, [r3, #0]
 8004280:	4618      	mov	r0, r3
 8004282:	f003 ffe1 	bl	8008248 <USB_ReadInterrupts>
 8004286:	4603      	mov	r3, r0
 8004288:	f003 0304 	and.w	r3, r3, #4
 800428c:	2b04      	cmp	r3, #4
 800428e:	d115      	bne.n	80042bc <HAL_PCD_IRQHandler+0x996>
    {
      RegVal = hpcd->Instance->GOTGINT;
 8004290:	687b      	ldr	r3, [r7, #4]
 8004292:	681b      	ldr	r3, [r3, #0]
 8004294:	685b      	ldr	r3, [r3, #4]
 8004296:	61bb      	str	r3, [r7, #24]

      if ((RegVal & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 8004298:	69bb      	ldr	r3, [r7, #24]
 800429a:	f003 0304 	and.w	r3, r3, #4
 800429e:	2b00      	cmp	r3, #0
 80042a0:	d002      	beq.n	80042a8 <HAL_PCD_IRQHandler+0x982>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 80042a2:	6878      	ldr	r0, [r7, #4]
 80042a4:	f009 fce4 	bl	800dc70 <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= RegVal;
 80042a8:	687b      	ldr	r3, [r7, #4]
 80042aa:	681b      	ldr	r3, [r3, #0]
 80042ac:	6859      	ldr	r1, [r3, #4]
 80042ae:	687b      	ldr	r3, [r7, #4]
 80042b0:	681b      	ldr	r3, [r3, #0]
 80042b2:	69ba      	ldr	r2, [r7, #24]
 80042b4:	430a      	orrs	r2, r1
 80042b6:	605a      	str	r2, [r3, #4]
 80042b8:	e000      	b.n	80042bc <HAL_PCD_IRQHandler+0x996>
      return;
 80042ba:	bf00      	nop
    }
  }
}
 80042bc:	3734      	adds	r7, #52	; 0x34
 80042be:	46bd      	mov	sp, r7
 80042c0:	bd90      	pop	{r4, r7, pc}

080042c2 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 80042c2:	b580      	push	{r7, lr}
 80042c4:	b082      	sub	sp, #8
 80042c6:	af00      	add	r7, sp, #0
 80042c8:	6078      	str	r0, [r7, #4]
 80042ca:	460b      	mov	r3, r1
 80042cc:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 80042ce:	687b      	ldr	r3, [r7, #4]
 80042d0:	f893 3494 	ldrb.w	r3, [r3, #1172]	; 0x494
 80042d4:	2b01      	cmp	r3, #1
 80042d6:	d101      	bne.n	80042dc <HAL_PCD_SetAddress+0x1a>
 80042d8:	2302      	movs	r3, #2
 80042da:	e012      	b.n	8004302 <HAL_PCD_SetAddress+0x40>
 80042dc:	687b      	ldr	r3, [r7, #4]
 80042de:	2201      	movs	r2, #1
 80042e0:	f883 2494 	strb.w	r2, [r3, #1172]	; 0x494
  hpcd->USB_Address = address;
 80042e4:	687b      	ldr	r3, [r7, #4]
 80042e6:	78fa      	ldrb	r2, [r7, #3]
 80042e8:	745a      	strb	r2, [r3, #17]
  (void)USB_SetDevAddress(hpcd->Instance, address);
 80042ea:	687b      	ldr	r3, [r7, #4]
 80042ec:	681b      	ldr	r3, [r3, #0]
 80042ee:	78fa      	ldrb	r2, [r7, #3]
 80042f0:	4611      	mov	r1, r2
 80042f2:	4618      	mov	r0, r3
 80042f4:	f003 ff40 	bl	8008178 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 80042f8:	687b      	ldr	r3, [r7, #4]
 80042fa:	2200      	movs	r2, #0
 80042fc:	f883 2494 	strb.w	r2, [r3, #1172]	; 0x494

  return HAL_OK;
 8004300:	2300      	movs	r3, #0
}
 8004302:	4618      	mov	r0, r3
 8004304:	3708      	adds	r7, #8
 8004306:	46bd      	mov	sp, r7
 8004308:	bd80      	pop	{r7, pc}

0800430a <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 800430a:	b580      	push	{r7, lr}
 800430c:	b084      	sub	sp, #16
 800430e:	af00      	add	r7, sp, #0
 8004310:	6078      	str	r0, [r7, #4]
 8004312:	4608      	mov	r0, r1
 8004314:	4611      	mov	r1, r2
 8004316:	461a      	mov	r2, r3
 8004318:	4603      	mov	r3, r0
 800431a:	70fb      	strb	r3, [r7, #3]
 800431c:	460b      	mov	r3, r1
 800431e:	803b      	strh	r3, [r7, #0]
 8004320:	4613      	mov	r3, r2
 8004322:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 8004324:	2300      	movs	r3, #0
 8004326:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8004328:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800432c:	2b00      	cmp	r3, #0
 800432e:	da0f      	bge.n	8004350 <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8004330:	78fb      	ldrb	r3, [r7, #3]
 8004332:	f003 020f 	and.w	r2, r3, #15
 8004336:	4613      	mov	r3, r2
 8004338:	00db      	lsls	r3, r3, #3
 800433a:	4413      	add	r3, r2
 800433c:	009b      	lsls	r3, r3, #2
 800433e:	3310      	adds	r3, #16
 8004340:	687a      	ldr	r2, [r7, #4]
 8004342:	4413      	add	r3, r2
 8004344:	3304      	adds	r3, #4
 8004346:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8004348:	68fb      	ldr	r3, [r7, #12]
 800434a:	2201      	movs	r2, #1
 800434c:	705a      	strb	r2, [r3, #1]
 800434e:	e00f      	b.n	8004370 <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8004350:	78fb      	ldrb	r3, [r7, #3]
 8004352:	f003 020f 	and.w	r2, r3, #15
 8004356:	4613      	mov	r3, r2
 8004358:	00db      	lsls	r3, r3, #3
 800435a:	4413      	add	r3, r2
 800435c:	009b      	lsls	r3, r3, #2
 800435e:	f503 7314 	add.w	r3, r3, #592	; 0x250
 8004362:	687a      	ldr	r2, [r7, #4]
 8004364:	4413      	add	r3, r2
 8004366:	3304      	adds	r3, #4
 8004368:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800436a:	68fb      	ldr	r3, [r7, #12]
 800436c:	2200      	movs	r2, #0
 800436e:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8004370:	78fb      	ldrb	r3, [r7, #3]
 8004372:	f003 030f 	and.w	r3, r3, #15
 8004376:	b2da      	uxtb	r2, r3
 8004378:	68fb      	ldr	r3, [r7, #12]
 800437a:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 800437c:	883a      	ldrh	r2, [r7, #0]
 800437e:	68fb      	ldr	r3, [r7, #12]
 8004380:	609a      	str	r2, [r3, #8]
  ep->type = ep_type;
 8004382:	68fb      	ldr	r3, [r7, #12]
 8004384:	78ba      	ldrb	r2, [r7, #2]
 8004386:	711a      	strb	r2, [r3, #4]

  if (ep->is_in != 0U)
 8004388:	68fb      	ldr	r3, [r7, #12]
 800438a:	785b      	ldrb	r3, [r3, #1]
 800438c:	2b00      	cmp	r3, #0
 800438e:	d004      	beq.n	800439a <HAL_PCD_EP_Open+0x90>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 8004390:	68fb      	ldr	r3, [r7, #12]
 8004392:	781b      	ldrb	r3, [r3, #0]
 8004394:	b29a      	uxth	r2, r3
 8004396:	68fb      	ldr	r3, [r7, #12]
 8004398:	835a      	strh	r2, [r3, #26]
  }

  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 800439a:	78bb      	ldrb	r3, [r7, #2]
 800439c:	2b02      	cmp	r3, #2
 800439e:	d102      	bne.n	80043a6 <HAL_PCD_EP_Open+0x9c>
  {
    ep->data_pid_start = 0U;
 80043a0:	68fb      	ldr	r3, [r7, #12]
 80043a2:	2200      	movs	r2, #0
 80043a4:	715a      	strb	r2, [r3, #5]
  }

  __HAL_LOCK(hpcd);
 80043a6:	687b      	ldr	r3, [r7, #4]
 80043a8:	f893 3494 	ldrb.w	r3, [r3, #1172]	; 0x494
 80043ac:	2b01      	cmp	r3, #1
 80043ae:	d101      	bne.n	80043b4 <HAL_PCD_EP_Open+0xaa>
 80043b0:	2302      	movs	r3, #2
 80043b2:	e00e      	b.n	80043d2 <HAL_PCD_EP_Open+0xc8>
 80043b4:	687b      	ldr	r3, [r7, #4]
 80043b6:	2201      	movs	r2, #1
 80043b8:	f883 2494 	strb.w	r2, [r3, #1172]	; 0x494
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 80043bc:	687b      	ldr	r3, [r7, #4]
 80043be:	681b      	ldr	r3, [r3, #0]
 80043c0:	68f9      	ldr	r1, [r7, #12]
 80043c2:	4618      	mov	r0, r3
 80043c4:	f003 f8c8 	bl	8007558 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 80043c8:	687b      	ldr	r3, [r7, #4]
 80043ca:	2200      	movs	r2, #0
 80043cc:	f883 2494 	strb.w	r2, [r3, #1172]	; 0x494

  return ret;
 80043d0:	7afb      	ldrb	r3, [r7, #11]
}
 80043d2:	4618      	mov	r0, r3
 80043d4:	3710      	adds	r7, #16
 80043d6:	46bd      	mov	sp, r7
 80043d8:	bd80      	pop	{r7, pc}

080043da <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80043da:	b580      	push	{r7, lr}
 80043dc:	b084      	sub	sp, #16
 80043de:	af00      	add	r7, sp, #0
 80043e0:	6078      	str	r0, [r7, #4]
 80043e2:	460b      	mov	r3, r1
 80043e4:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 80043e6:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80043ea:	2b00      	cmp	r3, #0
 80043ec:	da0f      	bge.n	800440e <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80043ee:	78fb      	ldrb	r3, [r7, #3]
 80043f0:	f003 020f 	and.w	r2, r3, #15
 80043f4:	4613      	mov	r3, r2
 80043f6:	00db      	lsls	r3, r3, #3
 80043f8:	4413      	add	r3, r2
 80043fa:	009b      	lsls	r3, r3, #2
 80043fc:	3310      	adds	r3, #16
 80043fe:	687a      	ldr	r2, [r7, #4]
 8004400:	4413      	add	r3, r2
 8004402:	3304      	adds	r3, #4
 8004404:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8004406:	68fb      	ldr	r3, [r7, #12]
 8004408:	2201      	movs	r2, #1
 800440a:	705a      	strb	r2, [r3, #1]
 800440c:	e00f      	b.n	800442e <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800440e:	78fb      	ldrb	r3, [r7, #3]
 8004410:	f003 020f 	and.w	r2, r3, #15
 8004414:	4613      	mov	r3, r2
 8004416:	00db      	lsls	r3, r3, #3
 8004418:	4413      	add	r3, r2
 800441a:	009b      	lsls	r3, r3, #2
 800441c:	f503 7314 	add.w	r3, r3, #592	; 0x250
 8004420:	687a      	ldr	r2, [r7, #4]
 8004422:	4413      	add	r3, r2
 8004424:	3304      	adds	r3, #4
 8004426:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8004428:	68fb      	ldr	r3, [r7, #12]
 800442a:	2200      	movs	r2, #0
 800442c:	705a      	strb	r2, [r3, #1]
  }
  ep->num = ep_addr & EP_ADDR_MSK;
 800442e:	78fb      	ldrb	r3, [r7, #3]
 8004430:	f003 030f 	and.w	r3, r3, #15
 8004434:	b2da      	uxtb	r2, r3
 8004436:	68fb      	ldr	r3, [r7, #12]
 8004438:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800443a:	687b      	ldr	r3, [r7, #4]
 800443c:	f893 3494 	ldrb.w	r3, [r3, #1172]	; 0x494
 8004440:	2b01      	cmp	r3, #1
 8004442:	d101      	bne.n	8004448 <HAL_PCD_EP_Close+0x6e>
 8004444:	2302      	movs	r3, #2
 8004446:	e00e      	b.n	8004466 <HAL_PCD_EP_Close+0x8c>
 8004448:	687b      	ldr	r3, [r7, #4]
 800444a:	2201      	movs	r2, #1
 800444c:	f883 2494 	strb.w	r2, [r3, #1172]	; 0x494
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8004450:	687b      	ldr	r3, [r7, #4]
 8004452:	681b      	ldr	r3, [r3, #0]
 8004454:	68f9      	ldr	r1, [r7, #12]
 8004456:	4618      	mov	r0, r3
 8004458:	f003 f906 	bl	8007668 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 800445c:	687b      	ldr	r3, [r7, #4]
 800445e:	2200      	movs	r2, #0
 8004460:	f883 2494 	strb.w	r2, [r3, #1172]	; 0x494
  return HAL_OK;
 8004464:	2300      	movs	r3, #0
}
 8004466:	4618      	mov	r0, r3
 8004468:	3710      	adds	r7, #16
 800446a:	46bd      	mov	sp, r7
 800446c:	bd80      	pop	{r7, pc}

0800446e <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 800446e:	b580      	push	{r7, lr}
 8004470:	b086      	sub	sp, #24
 8004472:	af00      	add	r7, sp, #0
 8004474:	60f8      	str	r0, [r7, #12]
 8004476:	607a      	str	r2, [r7, #4]
 8004478:	603b      	str	r3, [r7, #0]
 800447a:	460b      	mov	r3, r1
 800447c:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800447e:	7afb      	ldrb	r3, [r7, #11]
 8004480:	f003 020f 	and.w	r2, r3, #15
 8004484:	4613      	mov	r3, r2
 8004486:	00db      	lsls	r3, r3, #3
 8004488:	4413      	add	r3, r2
 800448a:	009b      	lsls	r3, r3, #2
 800448c:	f503 7314 	add.w	r3, r3, #592	; 0x250
 8004490:	68fa      	ldr	r2, [r7, #12]
 8004492:	4413      	add	r3, r2
 8004494:	3304      	adds	r3, #4
 8004496:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8004498:	697b      	ldr	r3, [r7, #20]
 800449a:	687a      	ldr	r2, [r7, #4]
 800449c:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 800449e:	697b      	ldr	r3, [r7, #20]
 80044a0:	683a      	ldr	r2, [r7, #0]
 80044a2:	611a      	str	r2, [r3, #16]
  ep->xfer_count = 0U;
 80044a4:	697b      	ldr	r3, [r7, #20]
 80044a6:	2200      	movs	r2, #0
 80044a8:	615a      	str	r2, [r3, #20]
  ep->is_in = 0U;
 80044aa:	697b      	ldr	r3, [r7, #20]
 80044ac:	2200      	movs	r2, #0
 80044ae:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 80044b0:	7afb      	ldrb	r3, [r7, #11]
 80044b2:	f003 030f 	and.w	r3, r3, #15
 80044b6:	b2da      	uxtb	r2, r3
 80044b8:	697b      	ldr	r3, [r7, #20]
 80044ba:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 80044bc:	68fb      	ldr	r3, [r7, #12]
 80044be:	799b      	ldrb	r3, [r3, #6]
 80044c0:	2b01      	cmp	r3, #1
 80044c2:	d102      	bne.n	80044ca <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 80044c4:	687a      	ldr	r2, [r7, #4]
 80044c6:	697b      	ldr	r3, [r7, #20]
 80044c8:	61da      	str	r2, [r3, #28]
  }

  (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 80044ca:	68fb      	ldr	r3, [r7, #12]
 80044cc:	6818      	ldr	r0, [r3, #0]
 80044ce:	68fb      	ldr	r3, [r7, #12]
 80044d0:	799b      	ldrb	r3, [r3, #6]
 80044d2:	461a      	mov	r2, r3
 80044d4:	6979      	ldr	r1, [r7, #20]
 80044d6:	f003 f9a3 	bl	8007820 <USB_EPStartXfer>

  return HAL_OK;
 80044da:	2300      	movs	r3, #0
}
 80044dc:	4618      	mov	r0, r3
 80044de:	3718      	adds	r7, #24
 80044e0:	46bd      	mov	sp, r7
 80044e2:	bd80      	pop	{r7, pc}

080044e4 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef const *hpcd, uint8_t ep_addr)
{
 80044e4:	b480      	push	{r7}
 80044e6:	b083      	sub	sp, #12
 80044e8:	af00      	add	r7, sp, #0
 80044ea:	6078      	str	r0, [r7, #4]
 80044ec:	460b      	mov	r3, r1
 80044ee:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 80044f0:	78fb      	ldrb	r3, [r7, #3]
 80044f2:	f003 020f 	and.w	r2, r3, #15
 80044f6:	6879      	ldr	r1, [r7, #4]
 80044f8:	4613      	mov	r3, r2
 80044fa:	00db      	lsls	r3, r3, #3
 80044fc:	4413      	add	r3, r2
 80044fe:	009b      	lsls	r3, r3, #2
 8004500:	440b      	add	r3, r1
 8004502:	f503 731a 	add.w	r3, r3, #616	; 0x268
 8004506:	681b      	ldr	r3, [r3, #0]
}
 8004508:	4618      	mov	r0, r3
 800450a:	370c      	adds	r7, #12
 800450c:	46bd      	mov	sp, r7
 800450e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004512:	4770      	bx	lr

08004514 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8004514:	b580      	push	{r7, lr}
 8004516:	b086      	sub	sp, #24
 8004518:	af00      	add	r7, sp, #0
 800451a:	60f8      	str	r0, [r7, #12]
 800451c:	607a      	str	r2, [r7, #4]
 800451e:	603b      	str	r3, [r7, #0]
 8004520:	460b      	mov	r3, r1
 8004522:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8004524:	7afb      	ldrb	r3, [r7, #11]
 8004526:	f003 020f 	and.w	r2, r3, #15
 800452a:	4613      	mov	r3, r2
 800452c:	00db      	lsls	r3, r3, #3
 800452e:	4413      	add	r3, r2
 8004530:	009b      	lsls	r3, r3, #2
 8004532:	3310      	adds	r3, #16
 8004534:	68fa      	ldr	r2, [r7, #12]
 8004536:	4413      	add	r3, r2
 8004538:	3304      	adds	r3, #4
 800453a:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 800453c:	697b      	ldr	r3, [r7, #20]
 800453e:	687a      	ldr	r2, [r7, #4]
 8004540:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 8004542:	697b      	ldr	r3, [r7, #20]
 8004544:	683a      	ldr	r2, [r7, #0]
 8004546:	611a      	str	r2, [r3, #16]
  ep->xfer_count = 0U;
 8004548:	697b      	ldr	r3, [r7, #20]
 800454a:	2200      	movs	r2, #0
 800454c:	615a      	str	r2, [r3, #20]
  ep->is_in = 1U;
 800454e:	697b      	ldr	r3, [r7, #20]
 8004550:	2201      	movs	r2, #1
 8004552:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8004554:	7afb      	ldrb	r3, [r7, #11]
 8004556:	f003 030f 	and.w	r3, r3, #15
 800455a:	b2da      	uxtb	r2, r3
 800455c:	697b      	ldr	r3, [r7, #20]
 800455e:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8004560:	68fb      	ldr	r3, [r7, #12]
 8004562:	799b      	ldrb	r3, [r3, #6]
 8004564:	2b01      	cmp	r3, #1
 8004566:	d102      	bne.n	800456e <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8004568:	687a      	ldr	r2, [r7, #4]
 800456a:	697b      	ldr	r3, [r7, #20]
 800456c:	61da      	str	r2, [r3, #28]
  }

  (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 800456e:	68fb      	ldr	r3, [r7, #12]
 8004570:	6818      	ldr	r0, [r3, #0]
 8004572:	68fb      	ldr	r3, [r7, #12]
 8004574:	799b      	ldrb	r3, [r3, #6]
 8004576:	461a      	mov	r2, r3
 8004578:	6979      	ldr	r1, [r7, #20]
 800457a:	f003 f951 	bl	8007820 <USB_EPStartXfer>

  return HAL_OK;
 800457e:	2300      	movs	r3, #0
}
 8004580:	4618      	mov	r0, r3
 8004582:	3718      	adds	r7, #24
 8004584:	46bd      	mov	sp, r7
 8004586:	bd80      	pop	{r7, pc}

08004588 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8004588:	b580      	push	{r7, lr}
 800458a:	b084      	sub	sp, #16
 800458c:	af00      	add	r7, sp, #0
 800458e:	6078      	str	r0, [r7, #4]
 8004590:	460b      	mov	r3, r1
 8004592:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8004594:	78fb      	ldrb	r3, [r7, #3]
 8004596:	f003 030f 	and.w	r3, r3, #15
 800459a:	687a      	ldr	r2, [r7, #4]
 800459c:	7912      	ldrb	r2, [r2, #4]
 800459e:	4293      	cmp	r3, r2
 80045a0:	d901      	bls.n	80045a6 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 80045a2:	2301      	movs	r3, #1
 80045a4:	e04f      	b.n	8004646 <HAL_PCD_EP_SetStall+0xbe>
  }

  if ((0x80U & ep_addr) == 0x80U)
 80045a6:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80045aa:	2b00      	cmp	r3, #0
 80045ac:	da0f      	bge.n	80045ce <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80045ae:	78fb      	ldrb	r3, [r7, #3]
 80045b0:	f003 020f 	and.w	r2, r3, #15
 80045b4:	4613      	mov	r3, r2
 80045b6:	00db      	lsls	r3, r3, #3
 80045b8:	4413      	add	r3, r2
 80045ba:	009b      	lsls	r3, r3, #2
 80045bc:	3310      	adds	r3, #16
 80045be:	687a      	ldr	r2, [r7, #4]
 80045c0:	4413      	add	r3, r2
 80045c2:	3304      	adds	r3, #4
 80045c4:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80045c6:	68fb      	ldr	r3, [r7, #12]
 80045c8:	2201      	movs	r2, #1
 80045ca:	705a      	strb	r2, [r3, #1]
 80045cc:	e00d      	b.n	80045ea <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 80045ce:	78fa      	ldrb	r2, [r7, #3]
 80045d0:	4613      	mov	r3, r2
 80045d2:	00db      	lsls	r3, r3, #3
 80045d4:	4413      	add	r3, r2
 80045d6:	009b      	lsls	r3, r3, #2
 80045d8:	f503 7314 	add.w	r3, r3, #592	; 0x250
 80045dc:	687a      	ldr	r2, [r7, #4]
 80045de:	4413      	add	r3, r2
 80045e0:	3304      	adds	r3, #4
 80045e2:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80045e4:	68fb      	ldr	r3, [r7, #12]
 80045e6:	2200      	movs	r2, #0
 80045e8:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 80045ea:	68fb      	ldr	r3, [r7, #12]
 80045ec:	2201      	movs	r2, #1
 80045ee:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 80045f0:	78fb      	ldrb	r3, [r7, #3]
 80045f2:	f003 030f 	and.w	r3, r3, #15
 80045f6:	b2da      	uxtb	r2, r3
 80045f8:	68fb      	ldr	r3, [r7, #12]
 80045fa:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80045fc:	687b      	ldr	r3, [r7, #4]
 80045fe:	f893 3494 	ldrb.w	r3, [r3, #1172]	; 0x494
 8004602:	2b01      	cmp	r3, #1
 8004604:	d101      	bne.n	800460a <HAL_PCD_EP_SetStall+0x82>
 8004606:	2302      	movs	r3, #2
 8004608:	e01d      	b.n	8004646 <HAL_PCD_EP_SetStall+0xbe>
 800460a:	687b      	ldr	r3, [r7, #4]
 800460c:	2201      	movs	r2, #1
 800460e:	f883 2494 	strb.w	r2, [r3, #1172]	; 0x494

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8004612:	687b      	ldr	r3, [r7, #4]
 8004614:	681b      	ldr	r3, [r3, #0]
 8004616:	68f9      	ldr	r1, [r7, #12]
 8004618:	4618      	mov	r0, r3
 800461a:	f003 fcd9 	bl	8007fd0 <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 800461e:	78fb      	ldrb	r3, [r7, #3]
 8004620:	f003 030f 	and.w	r3, r3, #15
 8004624:	2b00      	cmp	r3, #0
 8004626:	d109      	bne.n	800463c <HAL_PCD_EP_SetStall+0xb4>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 8004628:	687b      	ldr	r3, [r7, #4]
 800462a:	6818      	ldr	r0, [r3, #0]
 800462c:	687b      	ldr	r3, [r7, #4]
 800462e:	7999      	ldrb	r1, [r3, #6]
 8004630:	687b      	ldr	r3, [r7, #4]
 8004632:	f203 439c 	addw	r3, r3, #1180	; 0x49c
 8004636:	461a      	mov	r2, r3
 8004638:	f003 feca 	bl	80083d0 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 800463c:	687b      	ldr	r3, [r7, #4]
 800463e:	2200      	movs	r2, #0
 8004640:	f883 2494 	strb.w	r2, [r3, #1172]	; 0x494

  return HAL_OK;
 8004644:	2300      	movs	r3, #0
}
 8004646:	4618      	mov	r0, r3
 8004648:	3710      	adds	r7, #16
 800464a:	46bd      	mov	sp, r7
 800464c:	bd80      	pop	{r7, pc}

0800464e <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800464e:	b580      	push	{r7, lr}
 8004650:	b084      	sub	sp, #16
 8004652:	af00      	add	r7, sp, #0
 8004654:	6078      	str	r0, [r7, #4]
 8004656:	460b      	mov	r3, r1
 8004658:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 800465a:	78fb      	ldrb	r3, [r7, #3]
 800465c:	f003 030f 	and.w	r3, r3, #15
 8004660:	687a      	ldr	r2, [r7, #4]
 8004662:	7912      	ldrb	r2, [r2, #4]
 8004664:	4293      	cmp	r3, r2
 8004666:	d901      	bls.n	800466c <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8004668:	2301      	movs	r3, #1
 800466a:	e042      	b.n	80046f2 <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 800466c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8004670:	2b00      	cmp	r3, #0
 8004672:	da0f      	bge.n	8004694 <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8004674:	78fb      	ldrb	r3, [r7, #3]
 8004676:	f003 020f 	and.w	r2, r3, #15
 800467a:	4613      	mov	r3, r2
 800467c:	00db      	lsls	r3, r3, #3
 800467e:	4413      	add	r3, r2
 8004680:	009b      	lsls	r3, r3, #2
 8004682:	3310      	adds	r3, #16
 8004684:	687a      	ldr	r2, [r7, #4]
 8004686:	4413      	add	r3, r2
 8004688:	3304      	adds	r3, #4
 800468a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800468c:	68fb      	ldr	r3, [r7, #12]
 800468e:	2201      	movs	r2, #1
 8004690:	705a      	strb	r2, [r3, #1]
 8004692:	e00f      	b.n	80046b4 <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8004694:	78fb      	ldrb	r3, [r7, #3]
 8004696:	f003 020f 	and.w	r2, r3, #15
 800469a:	4613      	mov	r3, r2
 800469c:	00db      	lsls	r3, r3, #3
 800469e:	4413      	add	r3, r2
 80046a0:	009b      	lsls	r3, r3, #2
 80046a2:	f503 7314 	add.w	r3, r3, #592	; 0x250
 80046a6:	687a      	ldr	r2, [r7, #4]
 80046a8:	4413      	add	r3, r2
 80046aa:	3304      	adds	r3, #4
 80046ac:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80046ae:	68fb      	ldr	r3, [r7, #12]
 80046b0:	2200      	movs	r2, #0
 80046b2:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 80046b4:	68fb      	ldr	r3, [r7, #12]
 80046b6:	2200      	movs	r2, #0
 80046b8:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 80046ba:	78fb      	ldrb	r3, [r7, #3]
 80046bc:	f003 030f 	and.w	r3, r3, #15
 80046c0:	b2da      	uxtb	r2, r3
 80046c2:	68fb      	ldr	r3, [r7, #12]
 80046c4:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80046c6:	687b      	ldr	r3, [r7, #4]
 80046c8:	f893 3494 	ldrb.w	r3, [r3, #1172]	; 0x494
 80046cc:	2b01      	cmp	r3, #1
 80046ce:	d101      	bne.n	80046d4 <HAL_PCD_EP_ClrStall+0x86>
 80046d0:	2302      	movs	r3, #2
 80046d2:	e00e      	b.n	80046f2 <HAL_PCD_EP_ClrStall+0xa4>
 80046d4:	687b      	ldr	r3, [r7, #4]
 80046d6:	2201      	movs	r2, #1
 80046d8:	f883 2494 	strb.w	r2, [r3, #1172]	; 0x494
  (void)USB_EPClearStall(hpcd->Instance, ep);
 80046dc:	687b      	ldr	r3, [r7, #4]
 80046de:	681b      	ldr	r3, [r3, #0]
 80046e0:	68f9      	ldr	r1, [r7, #12]
 80046e2:	4618      	mov	r0, r3
 80046e4:	f003 fce2 	bl	80080ac <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 80046e8:	687b      	ldr	r3, [r7, #4]
 80046ea:	2200      	movs	r2, #0
 80046ec:	f883 2494 	strb.w	r2, [r3, #1172]	; 0x494

  return HAL_OK;
 80046f0:	2300      	movs	r3, #0
}
 80046f2:	4618      	mov	r0, r3
 80046f4:	3710      	adds	r7, #16
 80046f6:	46bd      	mov	sp, r7
 80046f8:	bd80      	pop	{r7, pc}

080046fa <HAL_PCD_EP_Abort>:
   * @param  hpcd PCD handle
   * @param  ep_addr endpoint address
   * @retval HAL status
   */
HAL_StatusTypeDef HAL_PCD_EP_Abort(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80046fa:	b580      	push	{r7, lr}
 80046fc:	b084      	sub	sp, #16
 80046fe:	af00      	add	r7, sp, #0
 8004700:	6078      	str	r0, [r7, #4]
 8004702:	460b      	mov	r3, r1
 8004704:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef ret;
  PCD_EPTypeDef *ep;

  if ((0x80U & ep_addr) == 0x80U)
 8004706:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800470a:	2b00      	cmp	r3, #0
 800470c:	da0c      	bge.n	8004728 <HAL_PCD_EP_Abort+0x2e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800470e:	78fb      	ldrb	r3, [r7, #3]
 8004710:	f003 020f 	and.w	r2, r3, #15
 8004714:	4613      	mov	r3, r2
 8004716:	00db      	lsls	r3, r3, #3
 8004718:	4413      	add	r3, r2
 800471a:	009b      	lsls	r3, r3, #2
 800471c:	3310      	adds	r3, #16
 800471e:	687a      	ldr	r2, [r7, #4]
 8004720:	4413      	add	r3, r2
 8004722:	3304      	adds	r3, #4
 8004724:	60fb      	str	r3, [r7, #12]
 8004726:	e00c      	b.n	8004742 <HAL_PCD_EP_Abort+0x48>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8004728:	78fb      	ldrb	r3, [r7, #3]
 800472a:	f003 020f 	and.w	r2, r3, #15
 800472e:	4613      	mov	r3, r2
 8004730:	00db      	lsls	r3, r3, #3
 8004732:	4413      	add	r3, r2
 8004734:	009b      	lsls	r3, r3, #2
 8004736:	f503 7314 	add.w	r3, r3, #592	; 0x250
 800473a:	687a      	ldr	r2, [r7, #4]
 800473c:	4413      	add	r3, r2
 800473e:	3304      	adds	r3, #4
 8004740:	60fb      	str	r3, [r7, #12]
  }

  /* Stop Xfer */
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 8004742:	687b      	ldr	r3, [r7, #4]
 8004744:	681b      	ldr	r3, [r3, #0]
 8004746:	68f9      	ldr	r1, [r7, #12]
 8004748:	4618      	mov	r0, r3
 800474a:	f003 fb01 	bl	8007d50 <USB_EPStopXfer>
 800474e:	4603      	mov	r3, r0
 8004750:	72fb      	strb	r3, [r7, #11]

  return ret;
 8004752:	7afb      	ldrb	r3, [r7, #11]
}
 8004754:	4618      	mov	r0, r3
 8004756:	3710      	adds	r7, #16
 8004758:	46bd      	mov	sp, r7
 800475a:	bd80      	pop	{r7, pc}

0800475c <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 800475c:	b580      	push	{r7, lr}
 800475e:	b08a      	sub	sp, #40	; 0x28
 8004760:	af02      	add	r7, sp, #8
 8004762:	6078      	str	r0, [r7, #4]
 8004764:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8004766:	687b      	ldr	r3, [r7, #4]
 8004768:	681b      	ldr	r3, [r3, #0]
 800476a:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800476c:	697b      	ldr	r3, [r7, #20]
 800476e:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 8004770:	683a      	ldr	r2, [r7, #0]
 8004772:	4613      	mov	r3, r2
 8004774:	00db      	lsls	r3, r3, #3
 8004776:	4413      	add	r3, r2
 8004778:	009b      	lsls	r3, r3, #2
 800477a:	3310      	adds	r3, #16
 800477c:	687a      	ldr	r2, [r7, #4]
 800477e:	4413      	add	r3, r2
 8004780:	3304      	adds	r3, #4
 8004782:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 8004784:	68fb      	ldr	r3, [r7, #12]
 8004786:	695a      	ldr	r2, [r3, #20]
 8004788:	68fb      	ldr	r3, [r7, #12]
 800478a:	691b      	ldr	r3, [r3, #16]
 800478c:	429a      	cmp	r2, r3
 800478e:	d901      	bls.n	8004794 <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 8004790:	2301      	movs	r3, #1
 8004792:	e06b      	b.n	800486c <PCD_WriteEmptyTxFifo+0x110>
  }

  len = ep->xfer_len - ep->xfer_count;
 8004794:	68fb      	ldr	r3, [r7, #12]
 8004796:	691a      	ldr	r2, [r3, #16]
 8004798:	68fb      	ldr	r3, [r7, #12]
 800479a:	695b      	ldr	r3, [r3, #20]
 800479c:	1ad3      	subs	r3, r2, r3
 800479e:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 80047a0:	68fb      	ldr	r3, [r7, #12]
 80047a2:	689b      	ldr	r3, [r3, #8]
 80047a4:	69fa      	ldr	r2, [r7, #28]
 80047a6:	429a      	cmp	r2, r3
 80047a8:	d902      	bls.n	80047b0 <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 80047aa:	68fb      	ldr	r3, [r7, #12]
 80047ac:	689b      	ldr	r3, [r3, #8]
 80047ae:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 80047b0:	69fb      	ldr	r3, [r7, #28]
 80047b2:	3303      	adds	r3, #3
 80047b4:	089b      	lsrs	r3, r3, #2
 80047b6:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 80047b8:	e02a      	b.n	8004810 <PCD_WriteEmptyTxFifo+0xb4>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 80047ba:	68fb      	ldr	r3, [r7, #12]
 80047bc:	691a      	ldr	r2, [r3, #16]
 80047be:	68fb      	ldr	r3, [r7, #12]
 80047c0:	695b      	ldr	r3, [r3, #20]
 80047c2:	1ad3      	subs	r3, r2, r3
 80047c4:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 80047c6:	68fb      	ldr	r3, [r7, #12]
 80047c8:	689b      	ldr	r3, [r3, #8]
 80047ca:	69fa      	ldr	r2, [r7, #28]
 80047cc:	429a      	cmp	r2, r3
 80047ce:	d902      	bls.n	80047d6 <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 80047d0:	68fb      	ldr	r3, [r7, #12]
 80047d2:	689b      	ldr	r3, [r3, #8]
 80047d4:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 80047d6:	69fb      	ldr	r3, [r7, #28]
 80047d8:	3303      	adds	r3, #3
 80047da:	089b      	lsrs	r3, r3, #2
 80047dc:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 80047de:	68fb      	ldr	r3, [r7, #12]
 80047e0:	68d9      	ldr	r1, [r3, #12]
 80047e2:	683b      	ldr	r3, [r7, #0]
 80047e4:	b2da      	uxtb	r2, r3
 80047e6:	69fb      	ldr	r3, [r7, #28]
 80047e8:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 80047ea:	687b      	ldr	r3, [r7, #4]
 80047ec:	799b      	ldrb	r3, [r3, #6]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 80047ee:	9300      	str	r3, [sp, #0]
 80047f0:	4603      	mov	r3, r0
 80047f2:	6978      	ldr	r0, [r7, #20]
 80047f4:	f003 fb56 	bl	8007ea4 <USB_WritePacket>

    ep->xfer_buff  += len;
 80047f8:	68fb      	ldr	r3, [r7, #12]
 80047fa:	68da      	ldr	r2, [r3, #12]
 80047fc:	69fb      	ldr	r3, [r7, #28]
 80047fe:	441a      	add	r2, r3
 8004800:	68fb      	ldr	r3, [r7, #12]
 8004802:	60da      	str	r2, [r3, #12]
    ep->xfer_count += len;
 8004804:	68fb      	ldr	r3, [r7, #12]
 8004806:	695a      	ldr	r2, [r3, #20]
 8004808:	69fb      	ldr	r3, [r7, #28]
 800480a:	441a      	add	r2, r3
 800480c:	68fb      	ldr	r3, [r7, #12]
 800480e:	615a      	str	r2, [r3, #20]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8004810:	683b      	ldr	r3, [r7, #0]
 8004812:	015a      	lsls	r2, r3, #5
 8004814:	693b      	ldr	r3, [r7, #16]
 8004816:	4413      	add	r3, r2
 8004818:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800481c:	699b      	ldr	r3, [r3, #24]
 800481e:	b29b      	uxth	r3, r3
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8004820:	69ba      	ldr	r2, [r7, #24]
 8004822:	429a      	cmp	r2, r3
 8004824:	d809      	bhi.n	800483a <PCD_WriteEmptyTxFifo+0xde>
 8004826:	68fb      	ldr	r3, [r7, #12]
 8004828:	695a      	ldr	r2, [r3, #20]
 800482a:	68fb      	ldr	r3, [r7, #12]
 800482c:	691b      	ldr	r3, [r3, #16]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 800482e:	429a      	cmp	r2, r3
 8004830:	d203      	bcs.n	800483a <PCD_WriteEmptyTxFifo+0xde>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8004832:	68fb      	ldr	r3, [r7, #12]
 8004834:	691b      	ldr	r3, [r3, #16]
 8004836:	2b00      	cmp	r3, #0
 8004838:	d1bf      	bne.n	80047ba <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 800483a:	68fb      	ldr	r3, [r7, #12]
 800483c:	691a      	ldr	r2, [r3, #16]
 800483e:	68fb      	ldr	r3, [r7, #12]
 8004840:	695b      	ldr	r3, [r3, #20]
 8004842:	429a      	cmp	r2, r3
 8004844:	d811      	bhi.n	800486a <PCD_WriteEmptyTxFifo+0x10e>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8004846:	683b      	ldr	r3, [r7, #0]
 8004848:	f003 030f 	and.w	r3, r3, #15
 800484c:	2201      	movs	r2, #1
 800484e:	fa02 f303 	lsl.w	r3, r2, r3
 8004852:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8004854:	693b      	ldr	r3, [r7, #16]
 8004856:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800485a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800485c:	68bb      	ldr	r3, [r7, #8]
 800485e:	43db      	mvns	r3, r3
 8004860:	6939      	ldr	r1, [r7, #16]
 8004862:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8004866:	4013      	ands	r3, r2
 8004868:	634b      	str	r3, [r1, #52]	; 0x34
  }

  return HAL_OK;
 800486a:	2300      	movs	r3, #0
}
 800486c:	4618      	mov	r0, r3
 800486e:	3720      	adds	r7, #32
 8004870:	46bd      	mov	sp, r7
 8004872:	bd80      	pop	{r7, pc}

08004874 <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8004874:	b580      	push	{r7, lr}
 8004876:	b088      	sub	sp, #32
 8004878:	af00      	add	r7, sp, #0
 800487a:	6078      	str	r0, [r7, #4]
 800487c:	6039      	str	r1, [r7, #0]
  USB_OTG_EPTypeDef *ep;
  const USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800487e:	687b      	ldr	r3, [r7, #4]
 8004880:	681b      	ldr	r3, [r3, #0]
 8004882:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004884:	69fb      	ldr	r3, [r7, #28]
 8004886:	61bb      	str	r3, [r7, #24]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 8004888:	69fb      	ldr	r3, [r7, #28]
 800488a:	333c      	adds	r3, #60	; 0x3c
 800488c:	3304      	adds	r3, #4
 800488e:	681b      	ldr	r3, [r3, #0]
 8004890:	617b      	str	r3, [r7, #20]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8004892:	683b      	ldr	r3, [r7, #0]
 8004894:	015a      	lsls	r2, r3, #5
 8004896:	69bb      	ldr	r3, [r7, #24]
 8004898:	4413      	add	r3, r2
 800489a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800489e:	689b      	ldr	r3, [r3, #8]
 80048a0:	613b      	str	r3, [r7, #16]

  if (hpcd->Init.dma_enable == 1U)
 80048a2:	687b      	ldr	r3, [r7, #4]
 80048a4:	799b      	ldrb	r3, [r3, #6]
 80048a6:	2b01      	cmp	r3, #1
 80048a8:	d17b      	bne.n	80049a2 <PCD_EP_OutXfrComplete_int+0x12e>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 80048aa:	693b      	ldr	r3, [r7, #16]
 80048ac:	f003 0308 	and.w	r3, r3, #8
 80048b0:	2b00      	cmp	r3, #0
 80048b2:	d015      	beq.n	80048e0 <PCD_EP_OutXfrComplete_int+0x6c>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80048b4:	697b      	ldr	r3, [r7, #20]
 80048b6:	4a61      	ldr	r2, [pc, #388]	; (8004a3c <PCD_EP_OutXfrComplete_int+0x1c8>)
 80048b8:	4293      	cmp	r3, r2
 80048ba:	f240 80b9 	bls.w	8004a30 <PCD_EP_OutXfrComplete_int+0x1bc>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 80048be:	693b      	ldr	r3, [r7, #16]
 80048c0:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80048c4:	2b00      	cmp	r3, #0
 80048c6:	f000 80b3 	beq.w	8004a30 <PCD_EP_OutXfrComplete_int+0x1bc>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80048ca:	683b      	ldr	r3, [r7, #0]
 80048cc:	015a      	lsls	r2, r3, #5
 80048ce:	69bb      	ldr	r3, [r7, #24]
 80048d0:	4413      	add	r3, r2
 80048d2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80048d6:	461a      	mov	r2, r3
 80048d8:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80048dc:	6093      	str	r3, [r2, #8]
 80048de:	e0a7      	b.n	8004a30 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 80048e0:	693b      	ldr	r3, [r7, #16]
 80048e2:	f003 0320 	and.w	r3, r3, #32
 80048e6:	2b00      	cmp	r3, #0
 80048e8:	d009      	beq.n	80048fe <PCD_EP_OutXfrComplete_int+0x8a>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 80048ea:	683b      	ldr	r3, [r7, #0]
 80048ec:	015a      	lsls	r2, r3, #5
 80048ee:	69bb      	ldr	r3, [r7, #24]
 80048f0:	4413      	add	r3, r2
 80048f2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80048f6:	461a      	mov	r2, r3
 80048f8:	2320      	movs	r3, #32
 80048fa:	6093      	str	r3, [r2, #8]
 80048fc:	e098      	b.n	8004a30 <PCD_EP_OutXfrComplete_int+0x1bc>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 80048fe:	693b      	ldr	r3, [r7, #16]
 8004900:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8004904:	2b00      	cmp	r3, #0
 8004906:	f040 8093 	bne.w	8004a30 <PCD_EP_OutXfrComplete_int+0x1bc>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800490a:	697b      	ldr	r3, [r7, #20]
 800490c:	4a4b      	ldr	r2, [pc, #300]	; (8004a3c <PCD_EP_OutXfrComplete_int+0x1c8>)
 800490e:	4293      	cmp	r3, r2
 8004910:	d90f      	bls.n	8004932 <PCD_EP_OutXfrComplete_int+0xbe>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8004912:	693b      	ldr	r3, [r7, #16]
 8004914:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8004918:	2b00      	cmp	r3, #0
 800491a:	d00a      	beq.n	8004932 <PCD_EP_OutXfrComplete_int+0xbe>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 800491c:	683b      	ldr	r3, [r7, #0]
 800491e:	015a      	lsls	r2, r3, #5
 8004920:	69bb      	ldr	r3, [r7, #24]
 8004922:	4413      	add	r3, r2
 8004924:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004928:	461a      	mov	r2, r3
 800492a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800492e:	6093      	str	r3, [r2, #8]
 8004930:	e07e      	b.n	8004a30 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        ep = &hpcd->OUT_ep[epnum];
 8004932:	683a      	ldr	r2, [r7, #0]
 8004934:	4613      	mov	r3, r2
 8004936:	00db      	lsls	r3, r3, #3
 8004938:	4413      	add	r3, r2
 800493a:	009b      	lsls	r3, r3, #2
 800493c:	f503 7314 	add.w	r3, r3, #592	; 0x250
 8004940:	687a      	ldr	r2, [r7, #4]
 8004942:	4413      	add	r3, r2
 8004944:	3304      	adds	r3, #4
 8004946:	60fb      	str	r3, [r7, #12]

        /* out data packet received over EP */
        ep->xfer_count = ep->xfer_size - (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 8004948:	68fb      	ldr	r3, [r7, #12]
 800494a:	6a1a      	ldr	r2, [r3, #32]
 800494c:	683b      	ldr	r3, [r7, #0]
 800494e:	0159      	lsls	r1, r3, #5
 8004950:	69bb      	ldr	r3, [r7, #24]
 8004952:	440b      	add	r3, r1
 8004954:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004958:	691b      	ldr	r3, [r3, #16]
 800495a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800495e:	1ad2      	subs	r2, r2, r3
 8004960:	68fb      	ldr	r3, [r7, #12]
 8004962:	615a      	str	r2, [r3, #20]

        if (epnum == 0U)
 8004964:	683b      	ldr	r3, [r7, #0]
 8004966:	2b00      	cmp	r3, #0
 8004968:	d114      	bne.n	8004994 <PCD_EP_OutXfrComplete_int+0x120>
        {
          if (ep->xfer_len == 0U)
 800496a:	68fb      	ldr	r3, [r7, #12]
 800496c:	691b      	ldr	r3, [r3, #16]
 800496e:	2b00      	cmp	r3, #0
 8004970:	d109      	bne.n	8004986 <PCD_EP_OutXfrComplete_int+0x112>
          {
            /* this is ZLP, so prepare EP0 for next setup */
            (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8004972:	687b      	ldr	r3, [r7, #4]
 8004974:	6818      	ldr	r0, [r3, #0]
 8004976:	687b      	ldr	r3, [r7, #4]
 8004978:	f203 439c 	addw	r3, r3, #1180	; 0x49c
 800497c:	461a      	mov	r2, r3
 800497e:	2101      	movs	r1, #1
 8004980:	f003 fd26 	bl	80083d0 <USB_EP0_OutStart>
 8004984:	e006      	b.n	8004994 <PCD_EP_OutXfrComplete_int+0x120>
          }
          else
          {
            ep->xfer_buff += ep->xfer_count;
 8004986:	68fb      	ldr	r3, [r7, #12]
 8004988:	68da      	ldr	r2, [r3, #12]
 800498a:	68fb      	ldr	r3, [r7, #12]
 800498c:	695b      	ldr	r3, [r3, #20]
 800498e:	441a      	add	r2, r3
 8004990:	68fb      	ldr	r3, [r7, #12]
 8004992:	60da      	str	r2, [r3, #12]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8004994:	683b      	ldr	r3, [r7, #0]
 8004996:	b2db      	uxtb	r3, r3
 8004998:	4619      	mov	r1, r3
 800499a:	6878      	ldr	r0, [r7, #4]
 800499c:	f009 f896 	bl	800dacc <HAL_PCD_DataOutStageCallback>
 80049a0:	e046      	b.n	8004a30 <PCD_EP_OutXfrComplete_int+0x1bc>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 80049a2:	697b      	ldr	r3, [r7, #20]
 80049a4:	4a26      	ldr	r2, [pc, #152]	; (8004a40 <PCD_EP_OutXfrComplete_int+0x1cc>)
 80049a6:	4293      	cmp	r3, r2
 80049a8:	d124      	bne.n	80049f4 <PCD_EP_OutXfrComplete_int+0x180>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 80049aa:	693b      	ldr	r3, [r7, #16]
 80049ac:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80049b0:	2b00      	cmp	r3, #0
 80049b2:	d00a      	beq.n	80049ca <PCD_EP_OutXfrComplete_int+0x156>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80049b4:	683b      	ldr	r3, [r7, #0]
 80049b6:	015a      	lsls	r2, r3, #5
 80049b8:	69bb      	ldr	r3, [r7, #24]
 80049ba:	4413      	add	r3, r2
 80049bc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80049c0:	461a      	mov	r2, r3
 80049c2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80049c6:	6093      	str	r3, [r2, #8]
 80049c8:	e032      	b.n	8004a30 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 80049ca:	693b      	ldr	r3, [r7, #16]
 80049cc:	f003 0320 	and.w	r3, r3, #32
 80049d0:	2b00      	cmp	r3, #0
 80049d2:	d008      	beq.n	80049e6 <PCD_EP_OutXfrComplete_int+0x172>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 80049d4:	683b      	ldr	r3, [r7, #0]
 80049d6:	015a      	lsls	r2, r3, #5
 80049d8:	69bb      	ldr	r3, [r7, #24]
 80049da:	4413      	add	r3, r2
 80049dc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80049e0:	461a      	mov	r2, r3
 80049e2:	2320      	movs	r3, #32
 80049e4:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 80049e6:	683b      	ldr	r3, [r7, #0]
 80049e8:	b2db      	uxtb	r3, r3
 80049ea:	4619      	mov	r1, r3
 80049ec:	6878      	ldr	r0, [r7, #4]
 80049ee:	f009 f86d 	bl	800dacc <HAL_PCD_DataOutStageCallback>
 80049f2:	e01d      	b.n	8004a30 <PCD_EP_OutXfrComplete_int+0x1bc>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 80049f4:	683b      	ldr	r3, [r7, #0]
 80049f6:	2b00      	cmp	r3, #0
 80049f8:	d114      	bne.n	8004a24 <PCD_EP_OutXfrComplete_int+0x1b0>
 80049fa:	6879      	ldr	r1, [r7, #4]
 80049fc:	683a      	ldr	r2, [r7, #0]
 80049fe:	4613      	mov	r3, r2
 8004a00:	00db      	lsls	r3, r3, #3
 8004a02:	4413      	add	r3, r2
 8004a04:	009b      	lsls	r3, r3, #2
 8004a06:	440b      	add	r3, r1
 8004a08:	f503 7319 	add.w	r3, r3, #612	; 0x264
 8004a0c:	681b      	ldr	r3, [r3, #0]
 8004a0e:	2b00      	cmp	r3, #0
 8004a10:	d108      	bne.n	8004a24 <PCD_EP_OutXfrComplete_int+0x1b0>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 8004a12:	687b      	ldr	r3, [r7, #4]
 8004a14:	6818      	ldr	r0, [r3, #0]
 8004a16:	687b      	ldr	r3, [r7, #4]
 8004a18:	f203 439c 	addw	r3, r3, #1180	; 0x49c
 8004a1c:	461a      	mov	r2, r3
 8004a1e:	2100      	movs	r1, #0
 8004a20:	f003 fcd6 	bl	80083d0 <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8004a24:	683b      	ldr	r3, [r7, #0]
 8004a26:	b2db      	uxtb	r3, r3
 8004a28:	4619      	mov	r1, r3
 8004a2a:	6878      	ldr	r0, [r7, #4]
 8004a2c:	f009 f84e 	bl	800dacc <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 8004a30:	2300      	movs	r3, #0
}
 8004a32:	4618      	mov	r0, r3
 8004a34:	3720      	adds	r7, #32
 8004a36:	46bd      	mov	sp, r7
 8004a38:	bd80      	pop	{r7, pc}
 8004a3a:	bf00      	nop
 8004a3c:	4f54300a 	.word	0x4f54300a
 8004a40:	4f54310a 	.word	0x4f54310a

08004a44 <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8004a44:	b580      	push	{r7, lr}
 8004a46:	b086      	sub	sp, #24
 8004a48:	af00      	add	r7, sp, #0
 8004a4a:	6078      	str	r0, [r7, #4]
 8004a4c:	6039      	str	r1, [r7, #0]
  const USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8004a4e:	687b      	ldr	r3, [r7, #4]
 8004a50:	681b      	ldr	r3, [r3, #0]
 8004a52:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004a54:	697b      	ldr	r3, [r7, #20]
 8004a56:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 8004a58:	697b      	ldr	r3, [r7, #20]
 8004a5a:	333c      	adds	r3, #60	; 0x3c
 8004a5c:	3304      	adds	r3, #4
 8004a5e:	681b      	ldr	r3, [r3, #0]
 8004a60:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8004a62:	683b      	ldr	r3, [r7, #0]
 8004a64:	015a      	lsls	r2, r3, #5
 8004a66:	693b      	ldr	r3, [r7, #16]
 8004a68:	4413      	add	r3, r2
 8004a6a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004a6e:	689b      	ldr	r3, [r3, #8]
 8004a70:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8004a72:	68fb      	ldr	r3, [r7, #12]
 8004a74:	4a15      	ldr	r2, [pc, #84]	; (8004acc <PCD_EP_OutSetupPacket_int+0x88>)
 8004a76:	4293      	cmp	r3, r2
 8004a78:	d90e      	bls.n	8004a98 <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8004a7a:	68bb      	ldr	r3, [r7, #8]
 8004a7c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8004a80:	2b00      	cmp	r3, #0
 8004a82:	d009      	beq.n	8004a98 <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8004a84:	683b      	ldr	r3, [r7, #0]
 8004a86:	015a      	lsls	r2, r3, #5
 8004a88:	693b      	ldr	r3, [r7, #16]
 8004a8a:	4413      	add	r3, r2
 8004a8c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004a90:	461a      	mov	r2, r3
 8004a92:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004a96:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 8004a98:	6878      	ldr	r0, [r7, #4]
 8004a9a:	f009 f805 	bl	800daa8 <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 8004a9e:	68fb      	ldr	r3, [r7, #12]
 8004aa0:	4a0a      	ldr	r2, [pc, #40]	; (8004acc <PCD_EP_OutSetupPacket_int+0x88>)
 8004aa2:	4293      	cmp	r3, r2
 8004aa4:	d90c      	bls.n	8004ac0 <PCD_EP_OutSetupPacket_int+0x7c>
 8004aa6:	687b      	ldr	r3, [r7, #4]
 8004aa8:	799b      	ldrb	r3, [r3, #6]
 8004aaa:	2b01      	cmp	r3, #1
 8004aac:	d108      	bne.n	8004ac0 <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8004aae:	687b      	ldr	r3, [r7, #4]
 8004ab0:	6818      	ldr	r0, [r3, #0]
 8004ab2:	687b      	ldr	r3, [r7, #4]
 8004ab4:	f203 439c 	addw	r3, r3, #1180	; 0x49c
 8004ab8:	461a      	mov	r2, r3
 8004aba:	2101      	movs	r1, #1
 8004abc:	f003 fc88 	bl	80083d0 <USB_EP0_OutStart>
  }

  return HAL_OK;
 8004ac0:	2300      	movs	r3, #0
}
 8004ac2:	4618      	mov	r0, r3
 8004ac4:	3718      	adds	r7, #24
 8004ac6:	46bd      	mov	sp, r7
 8004ac8:	bd80      	pop	{r7, pc}
 8004aca:	bf00      	nop
 8004acc:	4f54300a 	.word	0x4f54300a

08004ad0 <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 8004ad0:	b480      	push	{r7}
 8004ad2:	b085      	sub	sp, #20
 8004ad4:	af00      	add	r7, sp, #0
 8004ad6:	6078      	str	r0, [r7, #4]
 8004ad8:	460b      	mov	r3, r1
 8004ada:	70fb      	strb	r3, [r7, #3]
 8004adc:	4613      	mov	r3, r2
 8004ade:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 8004ae0:	687b      	ldr	r3, [r7, #4]
 8004ae2:	681b      	ldr	r3, [r3, #0]
 8004ae4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ae6:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 8004ae8:	78fb      	ldrb	r3, [r7, #3]
 8004aea:	2b00      	cmp	r3, #0
 8004aec:	d107      	bne.n	8004afe <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 8004aee:	883b      	ldrh	r3, [r7, #0]
 8004af0:	0419      	lsls	r1, r3, #16
 8004af2:	687b      	ldr	r3, [r7, #4]
 8004af4:	681b      	ldr	r3, [r3, #0]
 8004af6:	68ba      	ldr	r2, [r7, #8]
 8004af8:	430a      	orrs	r2, r1
 8004afa:	629a      	str	r2, [r3, #40]	; 0x28
 8004afc:	e028      	b.n	8004b50 <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 8004afe:	687b      	ldr	r3, [r7, #4]
 8004b00:	681b      	ldr	r3, [r3, #0]
 8004b02:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004b04:	0c1b      	lsrs	r3, r3, #16
 8004b06:	68ba      	ldr	r2, [r7, #8]
 8004b08:	4413      	add	r3, r2
 8004b0a:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8004b0c:	2300      	movs	r3, #0
 8004b0e:	73fb      	strb	r3, [r7, #15]
 8004b10:	e00d      	b.n	8004b2e <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 8004b12:	687b      	ldr	r3, [r7, #4]
 8004b14:	681a      	ldr	r2, [r3, #0]
 8004b16:	7bfb      	ldrb	r3, [r7, #15]
 8004b18:	3340      	adds	r3, #64	; 0x40
 8004b1a:	009b      	lsls	r3, r3, #2
 8004b1c:	4413      	add	r3, r2
 8004b1e:	685b      	ldr	r3, [r3, #4]
 8004b20:	0c1b      	lsrs	r3, r3, #16
 8004b22:	68ba      	ldr	r2, [r7, #8]
 8004b24:	4413      	add	r3, r2
 8004b26:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8004b28:	7bfb      	ldrb	r3, [r7, #15]
 8004b2a:	3301      	adds	r3, #1
 8004b2c:	73fb      	strb	r3, [r7, #15]
 8004b2e:	7bfa      	ldrb	r2, [r7, #15]
 8004b30:	78fb      	ldrb	r3, [r7, #3]
 8004b32:	3b01      	subs	r3, #1
 8004b34:	429a      	cmp	r2, r3
 8004b36:	d3ec      	bcc.n	8004b12 <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 8004b38:	883b      	ldrh	r3, [r7, #0]
 8004b3a:	0418      	lsls	r0, r3, #16
 8004b3c:	687b      	ldr	r3, [r7, #4]
 8004b3e:	6819      	ldr	r1, [r3, #0]
 8004b40:	78fb      	ldrb	r3, [r7, #3]
 8004b42:	3b01      	subs	r3, #1
 8004b44:	68ba      	ldr	r2, [r7, #8]
 8004b46:	4302      	orrs	r2, r0
 8004b48:	3340      	adds	r3, #64	; 0x40
 8004b4a:	009b      	lsls	r3, r3, #2
 8004b4c:	440b      	add	r3, r1
 8004b4e:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 8004b50:	2300      	movs	r3, #0
}
 8004b52:	4618      	mov	r0, r3
 8004b54:	3714      	adds	r7, #20
 8004b56:	46bd      	mov	sp, r7
 8004b58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b5c:	4770      	bx	lr

08004b5e <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 8004b5e:	b480      	push	{r7}
 8004b60:	b083      	sub	sp, #12
 8004b62:	af00      	add	r7, sp, #0
 8004b64:	6078      	str	r0, [r7, #4]
 8004b66:	460b      	mov	r3, r1
 8004b68:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 8004b6a:	687b      	ldr	r3, [r7, #4]
 8004b6c:	681b      	ldr	r3, [r3, #0]
 8004b6e:	887a      	ldrh	r2, [r7, #2]
 8004b70:	625a      	str	r2, [r3, #36]	; 0x24

  return HAL_OK;
 8004b72:	2300      	movs	r3, #0
}
 8004b74:	4618      	mov	r0, r3
 8004b76:	370c      	adds	r7, #12
 8004b78:	46bd      	mov	sp, r7
 8004b7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b7e:	4770      	bx	lr

08004b80 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 8004b80:	b480      	push	{r7}
 8004b82:	b085      	sub	sp, #20
 8004b84:	af00      	add	r7, sp, #0
 8004b86:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8004b88:	687b      	ldr	r3, [r7, #4]
 8004b8a:	681b      	ldr	r3, [r3, #0]
 8004b8c:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 8004b8e:	687b      	ldr	r3, [r7, #4]
 8004b90:	2201      	movs	r2, #1
 8004b92:	f8c3 24d8 	str.w	r2, [r3, #1240]	; 0x4d8
  hpcd->LPM_State = LPM_L0;
 8004b96:	687b      	ldr	r3, [r7, #4]
 8004b98:	2200      	movs	r2, #0
 8004b9a:	f883 24cc 	strb.w	r2, [r3, #1228]	; 0x4cc
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 8004b9e:	68fb      	ldr	r3, [r7, #12]
 8004ba0:	699b      	ldr	r3, [r3, #24]
 8004ba2:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8004ba6:	68fb      	ldr	r3, [r7, #12]
 8004ba8:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 8004baa:	68fb      	ldr	r3, [r7, #12]
 8004bac:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004bae:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004bb2:	f043 0303 	orr.w	r3, r3, #3
 8004bb6:	68fa      	ldr	r2, [r7, #12]
 8004bb8:	6553      	str	r3, [r2, #84]	; 0x54

  return HAL_OK;
 8004bba:	2300      	movs	r3, #0
}
 8004bbc:	4618      	mov	r0, r3
 8004bbe:	3714      	adds	r7, #20
 8004bc0:	46bd      	mov	sp, r7
 8004bc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bc6:	4770      	bx	lr

08004bc8 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 8004bc8:	b480      	push	{r7}
 8004bca:	b083      	sub	sp, #12
 8004bcc:	af00      	add	r7, sp, #0
 8004bce:	6078      	str	r0, [r7, #4]
 8004bd0:	460b      	mov	r3, r1
 8004bd2:	70fb      	strb	r3, [r7, #3]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 8004bd4:	bf00      	nop
 8004bd6:	370c      	adds	r7, #12
 8004bd8:	46bd      	mov	sp, r7
 8004bda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bde:	4770      	bx	lr

08004be0 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 8004be0:	b580      	push	{r7, lr}
 8004be2:	b082      	sub	sp, #8
 8004be4:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0U;
 8004be6:	2300      	movs	r3, #0
 8004be8:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 8004bea:	2300      	movs	r3, #0
 8004bec:	603b      	str	r3, [r7, #0]
 8004bee:	4b20      	ldr	r3, [pc, #128]	; (8004c70 <HAL_PWREx_EnableOverDrive+0x90>)
 8004bf0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004bf2:	4a1f      	ldr	r2, [pc, #124]	; (8004c70 <HAL_PWREx_EnableOverDrive+0x90>)
 8004bf4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004bf8:	6413      	str	r3, [r2, #64]	; 0x40
 8004bfa:	4b1d      	ldr	r3, [pc, #116]	; (8004c70 <HAL_PWREx_EnableOverDrive+0x90>)
 8004bfc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004bfe:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004c02:	603b      	str	r3, [r7, #0]
 8004c04:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 180 Mhz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 8004c06:	4b1b      	ldr	r3, [pc, #108]	; (8004c74 <HAL_PWREx_EnableOverDrive+0x94>)
 8004c08:	2201      	movs	r2, #1
 8004c0a:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8004c0c:	f7fd f89a 	bl	8001d44 <HAL_GetTick>
 8004c10:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8004c12:	e009      	b.n	8004c28 <HAL_PWREx_EnableOverDrive+0x48>
  {
    if((HAL_GetTick() - tickstart) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8004c14:	f7fd f896 	bl	8001d44 <HAL_GetTick>
 8004c18:	4602      	mov	r2, r0
 8004c1a:	687b      	ldr	r3, [r7, #4]
 8004c1c:	1ad3      	subs	r3, r2, r3
 8004c1e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8004c22:	d901      	bls.n	8004c28 <HAL_PWREx_EnableOverDrive+0x48>
    {
      return HAL_TIMEOUT;
 8004c24:	2303      	movs	r3, #3
 8004c26:	e01f      	b.n	8004c68 <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8004c28:	4b13      	ldr	r3, [pc, #76]	; (8004c78 <HAL_PWREx_EnableOverDrive+0x98>)
 8004c2a:	685b      	ldr	r3, [r3, #4]
 8004c2c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004c30:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004c34:	d1ee      	bne.n	8004c14 <HAL_PWREx_EnableOverDrive+0x34>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 8004c36:	4b11      	ldr	r3, [pc, #68]	; (8004c7c <HAL_PWREx_EnableOverDrive+0x9c>)
 8004c38:	2201      	movs	r2, #1
 8004c3a:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8004c3c:	f7fd f882 	bl	8001d44 <HAL_GetTick>
 8004c40:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8004c42:	e009      	b.n	8004c58 <HAL_PWREx_EnableOverDrive+0x78>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8004c44:	f7fd f87e 	bl	8001d44 <HAL_GetTick>
 8004c48:	4602      	mov	r2, r0
 8004c4a:	687b      	ldr	r3, [r7, #4]
 8004c4c:	1ad3      	subs	r3, r2, r3
 8004c4e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8004c52:	d901      	bls.n	8004c58 <HAL_PWREx_EnableOverDrive+0x78>
    {
      return HAL_TIMEOUT;
 8004c54:	2303      	movs	r3, #3
 8004c56:	e007      	b.n	8004c68 <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8004c58:	4b07      	ldr	r3, [pc, #28]	; (8004c78 <HAL_PWREx_EnableOverDrive+0x98>)
 8004c5a:	685b      	ldr	r3, [r3, #4]
 8004c5c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004c60:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8004c64:	d1ee      	bne.n	8004c44 <HAL_PWREx_EnableOverDrive+0x64>
    }
  } 
  return HAL_OK;
 8004c66:	2300      	movs	r3, #0
}
 8004c68:	4618      	mov	r0, r3
 8004c6a:	3708      	adds	r7, #8
 8004c6c:	46bd      	mov	sp, r7
 8004c6e:	bd80      	pop	{r7, pc}
 8004c70:	40023800 	.word	0x40023800
 8004c74:	420e0040 	.word	0x420e0040
 8004c78:	40007000 	.word	0x40007000
 8004c7c:	420e0044 	.word	0x420e0044

08004c80 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004c80:	b580      	push	{r7, lr}
 8004c82:	b084      	sub	sp, #16
 8004c84:	af00      	add	r7, sp, #0
 8004c86:	6078      	str	r0, [r7, #4]
 8004c88:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8004c8a:	687b      	ldr	r3, [r7, #4]
 8004c8c:	2b00      	cmp	r3, #0
 8004c8e:	d101      	bne.n	8004c94 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004c90:	2301      	movs	r3, #1
 8004c92:	e0cc      	b.n	8004e2e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8004c94:	4b68      	ldr	r3, [pc, #416]	; (8004e38 <HAL_RCC_ClockConfig+0x1b8>)
 8004c96:	681b      	ldr	r3, [r3, #0]
 8004c98:	f003 030f 	and.w	r3, r3, #15
 8004c9c:	683a      	ldr	r2, [r7, #0]
 8004c9e:	429a      	cmp	r2, r3
 8004ca0:	d90c      	bls.n	8004cbc <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004ca2:	4b65      	ldr	r3, [pc, #404]	; (8004e38 <HAL_RCC_ClockConfig+0x1b8>)
 8004ca4:	683a      	ldr	r2, [r7, #0]
 8004ca6:	b2d2      	uxtb	r2, r2
 8004ca8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004caa:	4b63      	ldr	r3, [pc, #396]	; (8004e38 <HAL_RCC_ClockConfig+0x1b8>)
 8004cac:	681b      	ldr	r3, [r3, #0]
 8004cae:	f003 030f 	and.w	r3, r3, #15
 8004cb2:	683a      	ldr	r2, [r7, #0]
 8004cb4:	429a      	cmp	r2, r3
 8004cb6:	d001      	beq.n	8004cbc <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8004cb8:	2301      	movs	r3, #1
 8004cba:	e0b8      	b.n	8004e2e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004cbc:	687b      	ldr	r3, [r7, #4]
 8004cbe:	681b      	ldr	r3, [r3, #0]
 8004cc0:	f003 0302 	and.w	r3, r3, #2
 8004cc4:	2b00      	cmp	r3, #0
 8004cc6:	d020      	beq.n	8004d0a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004cc8:	687b      	ldr	r3, [r7, #4]
 8004cca:	681b      	ldr	r3, [r3, #0]
 8004ccc:	f003 0304 	and.w	r3, r3, #4
 8004cd0:	2b00      	cmp	r3, #0
 8004cd2:	d005      	beq.n	8004ce0 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004cd4:	4b59      	ldr	r3, [pc, #356]	; (8004e3c <HAL_RCC_ClockConfig+0x1bc>)
 8004cd6:	689b      	ldr	r3, [r3, #8]
 8004cd8:	4a58      	ldr	r2, [pc, #352]	; (8004e3c <HAL_RCC_ClockConfig+0x1bc>)
 8004cda:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8004cde:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004ce0:	687b      	ldr	r3, [r7, #4]
 8004ce2:	681b      	ldr	r3, [r3, #0]
 8004ce4:	f003 0308 	and.w	r3, r3, #8
 8004ce8:	2b00      	cmp	r3, #0
 8004cea:	d005      	beq.n	8004cf8 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8004cec:	4b53      	ldr	r3, [pc, #332]	; (8004e3c <HAL_RCC_ClockConfig+0x1bc>)
 8004cee:	689b      	ldr	r3, [r3, #8]
 8004cf0:	4a52      	ldr	r2, [pc, #328]	; (8004e3c <HAL_RCC_ClockConfig+0x1bc>)
 8004cf2:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8004cf6:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004cf8:	4b50      	ldr	r3, [pc, #320]	; (8004e3c <HAL_RCC_ClockConfig+0x1bc>)
 8004cfa:	689b      	ldr	r3, [r3, #8]
 8004cfc:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004d00:	687b      	ldr	r3, [r7, #4]
 8004d02:	689b      	ldr	r3, [r3, #8]
 8004d04:	494d      	ldr	r1, [pc, #308]	; (8004e3c <HAL_RCC_ClockConfig+0x1bc>)
 8004d06:	4313      	orrs	r3, r2
 8004d08:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004d0a:	687b      	ldr	r3, [r7, #4]
 8004d0c:	681b      	ldr	r3, [r3, #0]
 8004d0e:	f003 0301 	and.w	r3, r3, #1
 8004d12:	2b00      	cmp	r3, #0
 8004d14:	d044      	beq.n	8004da0 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004d16:	687b      	ldr	r3, [r7, #4]
 8004d18:	685b      	ldr	r3, [r3, #4]
 8004d1a:	2b01      	cmp	r3, #1
 8004d1c:	d107      	bne.n	8004d2e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004d1e:	4b47      	ldr	r3, [pc, #284]	; (8004e3c <HAL_RCC_ClockConfig+0x1bc>)
 8004d20:	681b      	ldr	r3, [r3, #0]
 8004d22:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004d26:	2b00      	cmp	r3, #0
 8004d28:	d119      	bne.n	8004d5e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004d2a:	2301      	movs	r3, #1
 8004d2c:	e07f      	b.n	8004e2e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004d2e:	687b      	ldr	r3, [r7, #4]
 8004d30:	685b      	ldr	r3, [r3, #4]
 8004d32:	2b02      	cmp	r3, #2
 8004d34:	d003      	beq.n	8004d3e <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8004d36:	687b      	ldr	r3, [r7, #4]
 8004d38:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004d3a:	2b03      	cmp	r3, #3
 8004d3c:	d107      	bne.n	8004d4e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004d3e:	4b3f      	ldr	r3, [pc, #252]	; (8004e3c <HAL_RCC_ClockConfig+0x1bc>)
 8004d40:	681b      	ldr	r3, [r3, #0]
 8004d42:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004d46:	2b00      	cmp	r3, #0
 8004d48:	d109      	bne.n	8004d5e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004d4a:	2301      	movs	r3, #1
 8004d4c:	e06f      	b.n	8004e2e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004d4e:	4b3b      	ldr	r3, [pc, #236]	; (8004e3c <HAL_RCC_ClockConfig+0x1bc>)
 8004d50:	681b      	ldr	r3, [r3, #0]
 8004d52:	f003 0302 	and.w	r3, r3, #2
 8004d56:	2b00      	cmp	r3, #0
 8004d58:	d101      	bne.n	8004d5e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004d5a:	2301      	movs	r3, #1
 8004d5c:	e067      	b.n	8004e2e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8004d5e:	4b37      	ldr	r3, [pc, #220]	; (8004e3c <HAL_RCC_ClockConfig+0x1bc>)
 8004d60:	689b      	ldr	r3, [r3, #8]
 8004d62:	f023 0203 	bic.w	r2, r3, #3
 8004d66:	687b      	ldr	r3, [r7, #4]
 8004d68:	685b      	ldr	r3, [r3, #4]
 8004d6a:	4934      	ldr	r1, [pc, #208]	; (8004e3c <HAL_RCC_ClockConfig+0x1bc>)
 8004d6c:	4313      	orrs	r3, r2
 8004d6e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8004d70:	f7fc ffe8 	bl	8001d44 <HAL_GetTick>
 8004d74:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004d76:	e00a      	b.n	8004d8e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004d78:	f7fc ffe4 	bl	8001d44 <HAL_GetTick>
 8004d7c:	4602      	mov	r2, r0
 8004d7e:	68fb      	ldr	r3, [r7, #12]
 8004d80:	1ad3      	subs	r3, r2, r3
 8004d82:	f241 3288 	movw	r2, #5000	; 0x1388
 8004d86:	4293      	cmp	r3, r2
 8004d88:	d901      	bls.n	8004d8e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8004d8a:	2303      	movs	r3, #3
 8004d8c:	e04f      	b.n	8004e2e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004d8e:	4b2b      	ldr	r3, [pc, #172]	; (8004e3c <HAL_RCC_ClockConfig+0x1bc>)
 8004d90:	689b      	ldr	r3, [r3, #8]
 8004d92:	f003 020c 	and.w	r2, r3, #12
 8004d96:	687b      	ldr	r3, [r7, #4]
 8004d98:	685b      	ldr	r3, [r3, #4]
 8004d9a:	009b      	lsls	r3, r3, #2
 8004d9c:	429a      	cmp	r2, r3
 8004d9e:	d1eb      	bne.n	8004d78 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8004da0:	4b25      	ldr	r3, [pc, #148]	; (8004e38 <HAL_RCC_ClockConfig+0x1b8>)
 8004da2:	681b      	ldr	r3, [r3, #0]
 8004da4:	f003 030f 	and.w	r3, r3, #15
 8004da8:	683a      	ldr	r2, [r7, #0]
 8004daa:	429a      	cmp	r2, r3
 8004dac:	d20c      	bcs.n	8004dc8 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004dae:	4b22      	ldr	r3, [pc, #136]	; (8004e38 <HAL_RCC_ClockConfig+0x1b8>)
 8004db0:	683a      	ldr	r2, [r7, #0]
 8004db2:	b2d2      	uxtb	r2, r2
 8004db4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004db6:	4b20      	ldr	r3, [pc, #128]	; (8004e38 <HAL_RCC_ClockConfig+0x1b8>)
 8004db8:	681b      	ldr	r3, [r3, #0]
 8004dba:	f003 030f 	and.w	r3, r3, #15
 8004dbe:	683a      	ldr	r2, [r7, #0]
 8004dc0:	429a      	cmp	r2, r3
 8004dc2:	d001      	beq.n	8004dc8 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8004dc4:	2301      	movs	r3, #1
 8004dc6:	e032      	b.n	8004e2e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004dc8:	687b      	ldr	r3, [r7, #4]
 8004dca:	681b      	ldr	r3, [r3, #0]
 8004dcc:	f003 0304 	and.w	r3, r3, #4
 8004dd0:	2b00      	cmp	r3, #0
 8004dd2:	d008      	beq.n	8004de6 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004dd4:	4b19      	ldr	r3, [pc, #100]	; (8004e3c <HAL_RCC_ClockConfig+0x1bc>)
 8004dd6:	689b      	ldr	r3, [r3, #8]
 8004dd8:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8004ddc:	687b      	ldr	r3, [r7, #4]
 8004dde:	68db      	ldr	r3, [r3, #12]
 8004de0:	4916      	ldr	r1, [pc, #88]	; (8004e3c <HAL_RCC_ClockConfig+0x1bc>)
 8004de2:	4313      	orrs	r3, r2
 8004de4:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004de6:	687b      	ldr	r3, [r7, #4]
 8004de8:	681b      	ldr	r3, [r3, #0]
 8004dea:	f003 0308 	and.w	r3, r3, #8
 8004dee:	2b00      	cmp	r3, #0
 8004df0:	d009      	beq.n	8004e06 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8004df2:	4b12      	ldr	r3, [pc, #72]	; (8004e3c <HAL_RCC_ClockConfig+0x1bc>)
 8004df4:	689b      	ldr	r3, [r3, #8]
 8004df6:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8004dfa:	687b      	ldr	r3, [r7, #4]
 8004dfc:	691b      	ldr	r3, [r3, #16]
 8004dfe:	00db      	lsls	r3, r3, #3
 8004e00:	490e      	ldr	r1, [pc, #56]	; (8004e3c <HAL_RCC_ClockConfig+0x1bc>)
 8004e02:	4313      	orrs	r3, r2
 8004e04:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8004e06:	f000 fbb1 	bl	800556c <HAL_RCC_GetSysClockFreq>
 8004e0a:	4602      	mov	r2, r0
 8004e0c:	4b0b      	ldr	r3, [pc, #44]	; (8004e3c <HAL_RCC_ClockConfig+0x1bc>)
 8004e0e:	689b      	ldr	r3, [r3, #8]
 8004e10:	091b      	lsrs	r3, r3, #4
 8004e12:	f003 030f 	and.w	r3, r3, #15
 8004e16:	490a      	ldr	r1, [pc, #40]	; (8004e40 <HAL_RCC_ClockConfig+0x1c0>)
 8004e18:	5ccb      	ldrb	r3, [r1, r3]
 8004e1a:	fa22 f303 	lsr.w	r3, r2, r3
 8004e1e:	4a09      	ldr	r2, [pc, #36]	; (8004e44 <HAL_RCC_ClockConfig+0x1c4>)
 8004e20:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8004e22:	4b09      	ldr	r3, [pc, #36]	; (8004e48 <HAL_RCC_ClockConfig+0x1c8>)
 8004e24:	681b      	ldr	r3, [r3, #0]
 8004e26:	4618      	mov	r0, r3
 8004e28:	f7fc fe00 	bl	8001a2c <HAL_InitTick>

  return HAL_OK;
 8004e2c:	2300      	movs	r3, #0
}
 8004e2e:	4618      	mov	r0, r3
 8004e30:	3710      	adds	r7, #16
 8004e32:	46bd      	mov	sp, r7
 8004e34:	bd80      	pop	{r7, pc}
 8004e36:	bf00      	nop
 8004e38:	40023c00 	.word	0x40023c00
 8004e3c:	40023800 	.word	0x40023800
 8004e40:	0800e310 	.word	0x0800e310
 8004e44:	20000000 	.word	0x20000000
 8004e48:	20000004 	.word	0x20000004

08004e4c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004e4c:	b480      	push	{r7}
 8004e4e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004e50:	4b03      	ldr	r3, [pc, #12]	; (8004e60 <HAL_RCC_GetHCLKFreq+0x14>)
 8004e52:	681b      	ldr	r3, [r3, #0]
}
 8004e54:	4618      	mov	r0, r3
 8004e56:	46bd      	mov	sp, r7
 8004e58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e5c:	4770      	bx	lr
 8004e5e:	bf00      	nop
 8004e60:	20000000 	.word	0x20000000

08004e64 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004e64:	b580      	push	{r7, lr}
 8004e66:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8004e68:	f7ff fff0 	bl	8004e4c <HAL_RCC_GetHCLKFreq>
 8004e6c:	4602      	mov	r2, r0
 8004e6e:	4b05      	ldr	r3, [pc, #20]	; (8004e84 <HAL_RCC_GetPCLK1Freq+0x20>)
 8004e70:	689b      	ldr	r3, [r3, #8]
 8004e72:	0a9b      	lsrs	r3, r3, #10
 8004e74:	f003 0307 	and.w	r3, r3, #7
 8004e78:	4903      	ldr	r1, [pc, #12]	; (8004e88 <HAL_RCC_GetPCLK1Freq+0x24>)
 8004e7a:	5ccb      	ldrb	r3, [r1, r3]
 8004e7c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004e80:	4618      	mov	r0, r3
 8004e82:	bd80      	pop	{r7, pc}
 8004e84:	40023800 	.word	0x40023800
 8004e88:	0800e320 	.word	0x0800e320

08004e8c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004e8c:	b580      	push	{r7, lr}
 8004e8e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8004e90:	f7ff ffdc 	bl	8004e4c <HAL_RCC_GetHCLKFreq>
 8004e94:	4602      	mov	r2, r0
 8004e96:	4b05      	ldr	r3, [pc, #20]	; (8004eac <HAL_RCC_GetPCLK2Freq+0x20>)
 8004e98:	689b      	ldr	r3, [r3, #8]
 8004e9a:	0b5b      	lsrs	r3, r3, #13
 8004e9c:	f003 0307 	and.w	r3, r3, #7
 8004ea0:	4903      	ldr	r1, [pc, #12]	; (8004eb0 <HAL_RCC_GetPCLK2Freq+0x24>)
 8004ea2:	5ccb      	ldrb	r3, [r1, r3]
 8004ea4:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004ea8:	4618      	mov	r0, r3
 8004eaa:	bd80      	pop	{r7, pc}
 8004eac:	40023800 	.word	0x40023800
 8004eb0:	0800e320 	.word	0x0800e320

08004eb4 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8004eb4:	b480      	push	{r7}
 8004eb6:	b083      	sub	sp, #12
 8004eb8:	af00      	add	r7, sp, #0
 8004eba:	6078      	str	r0, [r7, #4]
 8004ebc:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8004ebe:	687b      	ldr	r3, [r7, #4]
 8004ec0:	220f      	movs	r2, #15
 8004ec2:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8004ec4:	4b12      	ldr	r3, [pc, #72]	; (8004f10 <HAL_RCC_GetClockConfig+0x5c>)
 8004ec6:	689b      	ldr	r3, [r3, #8]
 8004ec8:	f003 0203 	and.w	r2, r3, #3
 8004ecc:	687b      	ldr	r3, [r7, #4]
 8004ece:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8004ed0:	4b0f      	ldr	r3, [pc, #60]	; (8004f10 <HAL_RCC_GetClockConfig+0x5c>)
 8004ed2:	689b      	ldr	r3, [r3, #8]
 8004ed4:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8004ed8:	687b      	ldr	r3, [r7, #4]
 8004eda:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8004edc:	4b0c      	ldr	r3, [pc, #48]	; (8004f10 <HAL_RCC_GetClockConfig+0x5c>)
 8004ede:	689b      	ldr	r3, [r3, #8]
 8004ee0:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8004ee4:	687b      	ldr	r3, [r7, #4]
 8004ee6:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8004ee8:	4b09      	ldr	r3, [pc, #36]	; (8004f10 <HAL_RCC_GetClockConfig+0x5c>)
 8004eea:	689b      	ldr	r3, [r3, #8]
 8004eec:	08db      	lsrs	r3, r3, #3
 8004eee:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8004ef2:	687b      	ldr	r3, [r7, #4]
 8004ef4:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8004ef6:	4b07      	ldr	r3, [pc, #28]	; (8004f14 <HAL_RCC_GetClockConfig+0x60>)
 8004ef8:	681b      	ldr	r3, [r3, #0]
 8004efa:	f003 020f 	and.w	r2, r3, #15
 8004efe:	683b      	ldr	r3, [r7, #0]
 8004f00:	601a      	str	r2, [r3, #0]
}
 8004f02:	bf00      	nop
 8004f04:	370c      	adds	r7, #12
 8004f06:	46bd      	mov	sp, r7
 8004f08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f0c:	4770      	bx	lr
 8004f0e:	bf00      	nop
 8004f10:	40023800 	.word	0x40023800
 8004f14:	40023c00 	.word	0x40023c00

08004f18 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004f18:	b580      	push	{r7, lr}
 8004f1a:	b08c      	sub	sp, #48	; 0x30
 8004f1c:	af00      	add	r7, sp, #0
 8004f1e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8004f20:	2300      	movs	r3, #0
 8004f22:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t tmpreg1 = 0U;
 8004f24:	2300      	movs	r3, #0
 8004f26:	623b      	str	r3, [r7, #32]
  uint32_t plli2sp = 0U;
 8004f28:	2300      	movs	r3, #0
 8004f2a:	61fb      	str	r3, [r7, #28]
  uint32_t plli2sq = 0U;
 8004f2c:	2300      	movs	r3, #0
 8004f2e:	61bb      	str	r3, [r7, #24]
  uint32_t plli2sr = 0U;
 8004f30:	2300      	movs	r3, #0
 8004f32:	617b      	str	r3, [r7, #20]
  uint32_t pllsaip = 0U;
 8004f34:	2300      	movs	r3, #0
 8004f36:	613b      	str	r3, [r7, #16]
  uint32_t pllsaiq = 0U;
 8004f38:	2300      	movs	r3, #0
 8004f3a:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0U;
 8004f3c:	2300      	movs	r3, #0
 8004f3e:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t pllsaiused = 0U;
 8004f40:	2300      	movs	r3, #0
 8004f42:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Check the peripheral clock selection parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------ I2S APB1 configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB1) == (RCC_PERIPHCLK_I2S_APB1))
 8004f44:	687b      	ldr	r3, [r7, #4]
 8004f46:	681b      	ldr	r3, [r3, #0]
 8004f48:	f003 0301 	and.w	r3, r3, #1
 8004f4c:	2b00      	cmp	r3, #0
 8004f4e:	d010      	beq.n	8004f72 <HAL_RCCEx_PeriphCLKConfig+0x5a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SAPB1CLKSOURCE(PeriphClkInit->I2sApb1ClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_APB1_CONFIG(PeriphClkInit->I2sApb1ClockSelection);
 8004f50:	4b6f      	ldr	r3, [pc, #444]	; (8005110 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8004f52:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004f56:	f023 62c0 	bic.w	r2, r3, #100663296	; 0x6000000
 8004f5a:	687b      	ldr	r3, [r7, #4]
 8004f5c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004f5e:	496c      	ldr	r1, [pc, #432]	; (8005110 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8004f60:	4313      	orrs	r3, r2
 8004f62:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sApb1ClockSelection == RCC_I2SAPB1CLKSOURCE_PLLI2S)
 8004f66:	687b      	ldr	r3, [r7, #4]
 8004f68:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004f6a:	2b00      	cmp	r3, #0
 8004f6c:	d101      	bne.n	8004f72 <HAL_RCCEx_PeriphCLKConfig+0x5a>
    {
      plli2sused = 1U;
 8004f6e:	2301      	movs	r3, #1
 8004f70:	62fb      	str	r3, [r7, #44]	; 0x2c
    }
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- I2S APB2 configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB2) == (RCC_PERIPHCLK_I2S_APB2))
 8004f72:	687b      	ldr	r3, [r7, #4]
 8004f74:	681b      	ldr	r3, [r3, #0]
 8004f76:	f003 0302 	and.w	r3, r3, #2
 8004f7a:	2b00      	cmp	r3, #0
 8004f7c:	d010      	beq.n	8004fa0 <HAL_RCCEx_PeriphCLKConfig+0x88>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SAPB2CLKSOURCE(PeriphClkInit->I2sApb2ClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_APB2_CONFIG(PeriphClkInit->I2sApb2ClockSelection);
 8004f7e:	4b64      	ldr	r3, [pc, #400]	; (8005110 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8004f80:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004f84:	f023 52c0 	bic.w	r2, r3, #402653184	; 0x18000000
 8004f88:	687b      	ldr	r3, [r7, #4]
 8004f8a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004f8c:	4960      	ldr	r1, [pc, #384]	; (8005110 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8004f8e:	4313      	orrs	r3, r2
 8004f90:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sApb2ClockSelection == RCC_I2SAPB2CLKSOURCE_PLLI2S)
 8004f94:	687b      	ldr	r3, [r7, #4]
 8004f96:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004f98:	2b00      	cmp	r3, #0
 8004f9a:	d101      	bne.n	8004fa0 <HAL_RCCEx_PeriphCLKConfig+0x88>
    {
      plli2sused = 1U;
 8004f9c:	2301      	movs	r3, #1
 8004f9e:	62fb      	str	r3, [r7, #44]	; 0x2c
    }
  }
  /*--------------------------------------------------------------------------*/

  /*--------------------------- SAI1 configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 8004fa0:	687b      	ldr	r3, [r7, #4]
 8004fa2:	681b      	ldr	r3, [r3, #0]
 8004fa4:	f003 0304 	and.w	r3, r3, #4
 8004fa8:	2b00      	cmp	r3, #0
 8004faa:	d017      	beq.n	8004fdc <HAL_RCCEx_PeriphCLKConfig+0xc4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8004fac:	4b58      	ldr	r3, [pc, #352]	; (8005110 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8004fae:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004fb2:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8004fb6:	687b      	ldr	r3, [r7, #4]
 8004fb8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004fba:	4955      	ldr	r1, [pc, #340]	; (8005110 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8004fbc:	4313      	orrs	r3, r2
 8004fbe:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 8004fc2:	687b      	ldr	r3, [r7, #4]
 8004fc4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004fc6:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004fca:	d101      	bne.n	8004fd0 <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      plli2sused = 1U;
 8004fcc:	2301      	movs	r3, #1
 8004fce:	62fb      	str	r3, [r7, #44]	; 0x2c
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 8004fd0:	687b      	ldr	r3, [r7, #4]
 8004fd2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004fd4:	2b00      	cmp	r3, #0
 8004fd6:	d101      	bne.n	8004fdc <HAL_RCCEx_PeriphCLKConfig+0xc4>
    {
      pllsaiused = 1U;
 8004fd8:	2301      	movs	r3, #1
 8004fda:	62bb      	str	r3, [r7, #40]	; 0x28
    }
  }
  /*--------------------------------------------------------------------------*/

  /*-------------------------- SAI2 configuration ----------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 8004fdc:	687b      	ldr	r3, [r7, #4]
 8004fde:	681b      	ldr	r3, [r3, #0]
 8004fe0:	f003 0308 	and.w	r3, r3, #8
 8004fe4:	2b00      	cmp	r3, #0
 8004fe6:	d017      	beq.n	8005018 <HAL_RCCEx_PeriphCLKConfig+0x100>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8004fe8:	4b49      	ldr	r3, [pc, #292]	; (8005110 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8004fea:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004fee:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8004ff2:	687b      	ldr	r3, [r7, #4]
 8004ff4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004ff6:	4946      	ldr	r1, [pc, #280]	; (8005110 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8004ff8:	4313      	orrs	r3, r2
 8004ffa:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 8004ffe:	687b      	ldr	r3, [r7, #4]
 8005000:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005002:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8005006:	d101      	bne.n	800500c <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      plli2sused = 1U;
 8005008:	2301      	movs	r3, #1
 800500a:	62fb      	str	r3, [r7, #44]	; 0x2c
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 800500c:	687b      	ldr	r3, [r7, #4]
 800500e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005010:	2b00      	cmp	r3, #0
 8005012:	d101      	bne.n	8005018 <HAL_RCCEx_PeriphCLKConfig+0x100>
    {
      pllsaiused = 1U;
 8005014:	2301      	movs	r3, #1
 8005016:	62bb      	str	r3, [r7, #40]	; 0x28
    }
  }
  /*--------------------------------------------------------------------------*/

  /*----------------------------- RTC configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8005018:	687b      	ldr	r3, [r7, #4]
 800501a:	681b      	ldr	r3, [r3, #0]
 800501c:	f003 0320 	and.w	r3, r3, #32
 8005020:	2b00      	cmp	r3, #0
 8005022:	f000 808a 	beq.w	800513a <HAL_RCCEx_PeriphCLKConfig+0x222>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8005026:	2300      	movs	r3, #0
 8005028:	60bb      	str	r3, [r7, #8]
 800502a:	4b39      	ldr	r3, [pc, #228]	; (8005110 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 800502c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800502e:	4a38      	ldr	r2, [pc, #224]	; (8005110 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8005030:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005034:	6413      	str	r3, [r2, #64]	; 0x40
 8005036:	4b36      	ldr	r3, [pc, #216]	; (8005110 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8005038:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800503a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800503e:	60bb      	str	r3, [r7, #8]
 8005040:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 8005042:	4b34      	ldr	r3, [pc, #208]	; (8005114 <HAL_RCCEx_PeriphCLKConfig+0x1fc>)
 8005044:	681b      	ldr	r3, [r3, #0]
 8005046:	4a33      	ldr	r2, [pc, #204]	; (8005114 <HAL_RCCEx_PeriphCLKConfig+0x1fc>)
 8005048:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800504c:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 800504e:	f7fc fe79 	bl	8001d44 <HAL_GetTick>
 8005052:	6278      	str	r0, [r7, #36]	; 0x24

    while((PWR->CR & PWR_CR_DBP) == RESET)
 8005054:	e008      	b.n	8005068 <HAL_RCCEx_PeriphCLKConfig+0x150>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8005056:	f7fc fe75 	bl	8001d44 <HAL_GetTick>
 800505a:	4602      	mov	r2, r0
 800505c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800505e:	1ad3      	subs	r3, r2, r3
 8005060:	2b02      	cmp	r3, #2
 8005062:	d901      	bls.n	8005068 <HAL_RCCEx_PeriphCLKConfig+0x150>
      {
        return HAL_TIMEOUT;
 8005064:	2303      	movs	r3, #3
 8005066:	e278      	b.n	800555a <HAL_RCCEx_PeriphCLKConfig+0x642>
    while((PWR->CR & PWR_CR_DBP) == RESET)
 8005068:	4b2a      	ldr	r3, [pc, #168]	; (8005114 <HAL_RCCEx_PeriphCLKConfig+0x1fc>)
 800506a:	681b      	ldr	r3, [r3, #0]
 800506c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005070:	2b00      	cmp	r3, #0
 8005072:	d0f0      	beq.n	8005056 <HAL_RCCEx_PeriphCLKConfig+0x13e>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8005074:	4b26      	ldr	r3, [pc, #152]	; (8005110 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8005076:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005078:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800507c:	623b      	str	r3, [r7, #32]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 800507e:	6a3b      	ldr	r3, [r7, #32]
 8005080:	2b00      	cmp	r3, #0
 8005082:	d02f      	beq.n	80050e4 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
 8005084:	687b      	ldr	r3, [r7, #4]
 8005086:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005088:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800508c:	6a3a      	ldr	r2, [r7, #32]
 800508e:	429a      	cmp	r2, r3
 8005090:	d028      	beq.n	80050e4 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8005092:	4b1f      	ldr	r3, [pc, #124]	; (8005110 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8005094:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005096:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800509a:	623b      	str	r3, [r7, #32]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 800509c:	4b1e      	ldr	r3, [pc, #120]	; (8005118 <HAL_RCCEx_PeriphCLKConfig+0x200>)
 800509e:	2201      	movs	r2, #1
 80050a0:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 80050a2:	4b1d      	ldr	r3, [pc, #116]	; (8005118 <HAL_RCCEx_PeriphCLKConfig+0x200>)
 80050a4:	2200      	movs	r2, #0
 80050a6:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 80050a8:	4a19      	ldr	r2, [pc, #100]	; (8005110 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 80050aa:	6a3b      	ldr	r3, [r7, #32]
 80050ac:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 80050ae:	4b18      	ldr	r3, [pc, #96]	; (8005110 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 80050b0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80050b2:	f003 0301 	and.w	r3, r3, #1
 80050b6:	2b01      	cmp	r3, #1
 80050b8:	d114      	bne.n	80050e4 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 80050ba:	f7fc fe43 	bl	8001d44 <HAL_GetTick>
 80050be:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80050c0:	e00a      	b.n	80050d8 <HAL_RCCEx_PeriphCLKConfig+0x1c0>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80050c2:	f7fc fe3f 	bl	8001d44 <HAL_GetTick>
 80050c6:	4602      	mov	r2, r0
 80050c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80050ca:	1ad3      	subs	r3, r2, r3
 80050cc:	f241 3288 	movw	r2, #5000	; 0x1388
 80050d0:	4293      	cmp	r3, r2
 80050d2:	d901      	bls.n	80050d8 <HAL_RCCEx_PeriphCLKConfig+0x1c0>
          {
            return HAL_TIMEOUT;
 80050d4:	2303      	movs	r3, #3
 80050d6:	e240      	b.n	800555a <HAL_RCCEx_PeriphCLKConfig+0x642>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80050d8:	4b0d      	ldr	r3, [pc, #52]	; (8005110 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 80050da:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80050dc:	f003 0302 	and.w	r3, r3, #2
 80050e0:	2b00      	cmp	r3, #0
 80050e2:	d0ee      	beq.n	80050c2 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80050e4:	687b      	ldr	r3, [r7, #4]
 80050e6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80050e8:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80050ec:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80050f0:	d114      	bne.n	800511c <HAL_RCCEx_PeriphCLKConfig+0x204>
 80050f2:	4b07      	ldr	r3, [pc, #28]	; (8005110 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 80050f4:	689b      	ldr	r3, [r3, #8]
 80050f6:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 80050fa:	687b      	ldr	r3, [r7, #4]
 80050fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80050fe:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 8005102:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005106:	4902      	ldr	r1, [pc, #8]	; (8005110 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8005108:	4313      	orrs	r3, r2
 800510a:	608b      	str	r3, [r1, #8]
 800510c:	e00c      	b.n	8005128 <HAL_RCCEx_PeriphCLKConfig+0x210>
 800510e:	bf00      	nop
 8005110:	40023800 	.word	0x40023800
 8005114:	40007000 	.word	0x40007000
 8005118:	42470e40 	.word	0x42470e40
 800511c:	4b4a      	ldr	r3, [pc, #296]	; (8005248 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 800511e:	689b      	ldr	r3, [r3, #8]
 8005120:	4a49      	ldr	r2, [pc, #292]	; (8005248 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8005122:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8005126:	6093      	str	r3, [r2, #8]
 8005128:	4b47      	ldr	r3, [pc, #284]	; (8005248 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 800512a:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800512c:	687b      	ldr	r3, [r7, #4]
 800512e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005130:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005134:	4944      	ldr	r1, [pc, #272]	; (8005248 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8005136:	4313      	orrs	r3, r2
 8005138:	670b      	str	r3, [r1, #112]	; 0x70
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- TIM configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 800513a:	687b      	ldr	r3, [r7, #4]
 800513c:	681b      	ldr	r3, [r3, #0]
 800513e:	f003 0310 	and.w	r3, r3, #16
 8005142:	2b00      	cmp	r3, #0
 8005144:	d004      	beq.n	8005150 <HAL_RCCEx_PeriphCLKConfig+0x238>
  {
    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8005146:	687b      	ldr	r3, [r7, #4]
 8005148:	f893 2058 	ldrb.w	r2, [r3, #88]	; 0x58
 800514c:	4b3f      	ldr	r3, [pc, #252]	; (800524c <HAL_RCCEx_PeriphCLKConfig+0x334>)
 800514e:	601a      	str	r2, [r3, #0]
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- FMPI2C1 Configuration -----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMPI2C1) == RCC_PERIPHCLK_FMPI2C1)
 8005150:	687b      	ldr	r3, [r7, #4]
 8005152:	681b      	ldr	r3, [r3, #0]
 8005154:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005158:	2b00      	cmp	r3, #0
 800515a:	d00a      	beq.n	8005172 <HAL_RCCEx_PeriphCLKConfig+0x25a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FMPI2C1CLKSOURCE(PeriphClkInit->Fmpi2c1ClockSelection));

    /* Configure the FMPI2C1 clock source */
    __HAL_RCC_FMPI2C1_CONFIG(PeriphClkInit->Fmpi2c1ClockSelection);
 800515c:	4b3a      	ldr	r3, [pc, #232]	; (8005248 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 800515e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005162:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8005166:	687b      	ldr	r3, [r7, #4]
 8005168:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800516a:	4937      	ldr	r1, [pc, #220]	; (8005248 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 800516c:	4313      	orrs	r3, r2
 800516e:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
  }
  /*--------------------------------------------------------------------------*/

  /*------------------------------ CEC Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8005172:	687b      	ldr	r3, [r7, #4]
 8005174:	681b      	ldr	r3, [r3, #0]
 8005176:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800517a:	2b00      	cmp	r3, #0
 800517c:	d00a      	beq.n	8005194 <HAL_RCCEx_PeriphCLKConfig+0x27c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 800517e:	4b32      	ldr	r3, [pc, #200]	; (8005248 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8005180:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005184:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 8005188:	687b      	ldr	r3, [r7, #4]
 800518a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800518c:	492e      	ldr	r1, [pc, #184]	; (8005248 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 800518e:	4313      	orrs	r3, r2
 8005190:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
  }
  /*--------------------------------------------------------------------------*/

  /*----------------------------- CLK48 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 8005194:	687b      	ldr	r3, [r7, #4]
 8005196:	681b      	ldr	r3, [r3, #0]
 8005198:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800519c:	2b00      	cmp	r3, #0
 800519e:	d011      	beq.n	80051c4 <HAL_RCCEx_PeriphCLKConfig+0x2ac>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48CLKSOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 clock source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 80051a0:	4b29      	ldr	r3, [pc, #164]	; (8005248 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 80051a2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80051a6:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 80051aa:	687b      	ldr	r3, [r7, #4]
 80051ac:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80051ae:	4926      	ldr	r1, [pc, #152]	; (8005248 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 80051b0:	4313      	orrs	r3, r2
 80051b2:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94

    /* Enable the PLLSAI when it's used as clock source for CLK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48CLKSOURCE_PLLSAIP)
 80051b6:	687b      	ldr	r3, [r7, #4]
 80051b8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80051ba:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80051be:	d101      	bne.n	80051c4 <HAL_RCCEx_PeriphCLKConfig+0x2ac>
    {
      pllsaiused = 1U;
 80051c0:	2301      	movs	r3, #1
 80051c2:	62bb      	str	r3, [r7, #40]	; 0x28
    }
  }
  /*--------------------------------------------------------------------------*/

  /*----------------------------- SDIO Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDIO) == RCC_PERIPHCLK_SDIO)
 80051c4:	687b      	ldr	r3, [r7, #4]
 80051c6:	681b      	ldr	r3, [r3, #0]
 80051c8:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80051cc:	2b00      	cmp	r3, #0
 80051ce:	d00a      	beq.n	80051e6 <HAL_RCCEx_PeriphCLKConfig+0x2ce>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDIOCLKSOURCE(PeriphClkInit->SdioClockSelection));

    /* Configure the SDIO clock source */
    __HAL_RCC_SDIO_CONFIG(PeriphClkInit->SdioClockSelection);
 80051d0:	4b1d      	ldr	r3, [pc, #116]	; (8005248 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 80051d2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80051d6:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 80051da:	687b      	ldr	r3, [r7, #4]
 80051dc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80051de:	491a      	ldr	r1, [pc, #104]	; (8005248 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 80051e0:	4313      	orrs	r3, r2
 80051e2:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
  }
  /*--------------------------------------------------------------------------*/

  /*------------------------------ SPDIFRX Configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 80051e6:	687b      	ldr	r3, [r7, #4]
 80051e8:	681b      	ldr	r3, [r3, #0]
 80051ea:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80051ee:	2b00      	cmp	r3, #0
 80051f0:	d011      	beq.n	8005216 <HAL_RCCEx_PeriphCLKConfig+0x2fe>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SPDIFRXCLKSOURCE(PeriphClkInit->SpdifClockSelection));

    /* Configure the SPDIFRX clock source */
    __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifClockSelection);
 80051f2:	4b15      	ldr	r3, [pc, #84]	; (8005248 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 80051f4:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80051f8:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 80051fc:	687b      	ldr	r3, [r7, #4]
 80051fe:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005200:	4911      	ldr	r1, [pc, #68]	; (8005248 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8005202:	4313      	orrs	r3, r2
 8005204:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
    /* Enable the PLLI2S when it's used as clock source for SPDIFRX */
    if(PeriphClkInit->SpdifClockSelection == RCC_SPDIFRXCLKSOURCE_PLLI2SP)
 8005208:	687b      	ldr	r3, [r7, #4]
 800520a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800520c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005210:	d101      	bne.n	8005216 <HAL_RCCEx_PeriphCLKConfig+0x2fe>
    {
      plli2sused = 1U;
 8005212:	2301      	movs	r3, #1
 8005214:	62fb      	str	r3, [r7, #44]	; 0x2c
  /*--------------------------------------------------------------------------*/

  /*---------------------------- PLLI2S Configuration ------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S on APB1,
     I2S on APB2 or SPDIFRX */
  if((plli2sused == 1U) || (PeriphClkInit->PeriphClockSelection == RCC_PERIPHCLK_PLLI2S))
 8005216:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005218:	2b01      	cmp	r3, #1
 800521a:	d005      	beq.n	8005228 <HAL_RCCEx_PeriphCLKConfig+0x310>
 800521c:	687b      	ldr	r3, [r7, #4]
 800521e:	681b      	ldr	r3, [r3, #0]
 8005220:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005224:	f040 80ff 	bne.w	8005426 <HAL_RCCEx_PeriphCLKConfig+0x50e>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8005228:	4b09      	ldr	r3, [pc, #36]	; (8005250 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800522a:	2200      	movs	r2, #0
 800522c:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 800522e:	f7fc fd89 	bl	8001d44 <HAL_GetTick>
 8005232:	6278      	str	r0, [r7, #36]	; 0x24
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8005234:	e00e      	b.n	8005254 <HAL_RCCEx_PeriphCLKConfig+0x33c>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8005236:	f7fc fd85 	bl	8001d44 <HAL_GetTick>
 800523a:	4602      	mov	r2, r0
 800523c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800523e:	1ad3      	subs	r3, r2, r3
 8005240:	2b02      	cmp	r3, #2
 8005242:	d907      	bls.n	8005254 <HAL_RCCEx_PeriphCLKConfig+0x33c>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8005244:	2303      	movs	r3, #3
 8005246:	e188      	b.n	800555a <HAL_RCCEx_PeriphCLKConfig+0x642>
 8005248:	40023800 	.word	0x40023800
 800524c:	424711e0 	.word	0x424711e0
 8005250:	42470068 	.word	0x42470068
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8005254:	4b7e      	ldr	r3, [pc, #504]	; (8005450 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8005256:	681b      	ldr	r3, [r3, #0]
 8005258:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800525c:	2b00      	cmp	r3, #0
 800525e:	d1ea      	bne.n	8005236 <HAL_RCCEx_PeriphCLKConfig+0x31e>
    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*------ In Case of PLLI2S is selected as source clock for I2S -----------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB1) == RCC_PERIPHCLK_I2S_APB1) && (PeriphClkInit->I2sApb1ClockSelection == RCC_I2SAPB1CLKSOURCE_PLLI2S)) ||
 8005260:	687b      	ldr	r3, [r7, #4]
 8005262:	681b      	ldr	r3, [r3, #0]
 8005264:	f003 0301 	and.w	r3, r3, #1
 8005268:	2b00      	cmp	r3, #0
 800526a:	d003      	beq.n	8005274 <HAL_RCCEx_PeriphCLKConfig+0x35c>
 800526c:	687b      	ldr	r3, [r7, #4]
 800526e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005270:	2b00      	cmp	r3, #0
 8005272:	d009      	beq.n	8005288 <HAL_RCCEx_PeriphCLKConfig+0x370>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB2) == RCC_PERIPHCLK_I2S_APB2) && (PeriphClkInit->I2sApb2ClockSelection == RCC_I2SAPB2CLKSOURCE_PLLI2S)))
 8005274:	687b      	ldr	r3, [r7, #4]
 8005276:	681b      	ldr	r3, [r3, #0]
 8005278:	f003 0302 	and.w	r3, r3, #2
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB1) == RCC_PERIPHCLK_I2S_APB1) && (PeriphClkInit->I2sApb1ClockSelection == RCC_I2SAPB1CLKSOURCE_PLLI2S)) ||
 800527c:	2b00      	cmp	r3, #0
 800527e:	d028      	beq.n	80052d2 <HAL_RCCEx_PeriphCLKConfig+0x3ba>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB2) == RCC_PERIPHCLK_I2S_APB2) && (PeriphClkInit->I2sApb2ClockSelection == RCC_I2SAPB2CLKSOURCE_PLLI2S)))
 8005280:	687b      	ldr	r3, [r7, #4]
 8005282:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005284:	2b00      	cmp	r3, #0
 8005286:	d124      	bne.n	80052d2 <HAL_RCCEx_PeriphCLKConfig+0x3ba>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP/PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      plli2sp = ((((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos) + 1U) << 1U);
 8005288:	4b71      	ldr	r3, [pc, #452]	; (8005450 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 800528a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800528e:	0c1b      	lsrs	r3, r3, #16
 8005290:	f003 0303 	and.w	r3, r3, #3
 8005294:	3301      	adds	r3, #1
 8005296:	005b      	lsls	r3, r3, #1
 8005298:	61fb      	str	r3, [r7, #28]
      plli2sq = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 800529a:	4b6d      	ldr	r3, [pc, #436]	; (8005450 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 800529c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80052a0:	0e1b      	lsrs	r3, r3, #24
 80052a2:	f003 030f 	and.w	r3, r3, #15
 80052a6:	61bb      	str	r3, [r7, #24]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLI2SM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN , plli2sp, plli2sq, PeriphClkInit->PLLI2S.PLLI2SR);
 80052a8:	687b      	ldr	r3, [r7, #4]
 80052aa:	685a      	ldr	r2, [r3, #4]
 80052ac:	687b      	ldr	r3, [r7, #4]
 80052ae:	689b      	ldr	r3, [r3, #8]
 80052b0:	019b      	lsls	r3, r3, #6
 80052b2:	431a      	orrs	r2, r3
 80052b4:	69fb      	ldr	r3, [r7, #28]
 80052b6:	085b      	lsrs	r3, r3, #1
 80052b8:	3b01      	subs	r3, #1
 80052ba:	041b      	lsls	r3, r3, #16
 80052bc:	431a      	orrs	r2, r3
 80052be:	69bb      	ldr	r3, [r7, #24]
 80052c0:	061b      	lsls	r3, r3, #24
 80052c2:	431a      	orrs	r2, r3
 80052c4:	687b      	ldr	r3, [r7, #4]
 80052c6:	695b      	ldr	r3, [r3, #20]
 80052c8:	071b      	lsls	r3, r3, #28
 80052ca:	4961      	ldr	r1, [pc, #388]	; (8005450 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 80052cc:	4313      	orrs	r3, r2
 80052ce:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*------- In Case of PLLI2S is selected as source clock for SAI ----------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 80052d2:	687b      	ldr	r3, [r7, #4]
 80052d4:	681b      	ldr	r3, [r3, #0]
 80052d6:	f003 0304 	and.w	r3, r3, #4
 80052da:	2b00      	cmp	r3, #0
 80052dc:	d004      	beq.n	80052e8 <HAL_RCCEx_PeriphCLKConfig+0x3d0>
 80052de:	687b      	ldr	r3, [r7, #4]
 80052e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80052e2:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80052e6:	d00a      	beq.n	80052fe <HAL_RCCEx_PeriphCLKConfig+0x3e6>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 80052e8:	687b      	ldr	r3, [r7, #4]
 80052ea:	681b      	ldr	r3, [r3, #0]
 80052ec:	f003 0308 	and.w	r3, r3, #8
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 80052f0:	2b00      	cmp	r3, #0
 80052f2:	d035      	beq.n	8005360 <HAL_RCCEx_PeriphCLKConfig+0x448>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 80052f4:	687b      	ldr	r3, [r7, #4]
 80052f6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80052f8:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80052fc:	d130      	bne.n	8005360 <HAL_RCCEx_PeriphCLKConfig+0x448>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP/PLLI2SR value from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      plli2sp = ((((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos) + 1U) << 1U);
 80052fe:	4b54      	ldr	r3, [pc, #336]	; (8005450 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8005300:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005304:	0c1b      	lsrs	r3, r3, #16
 8005306:	f003 0303 	and.w	r3, r3, #3
 800530a:	3301      	adds	r3, #1
 800530c:	005b      	lsls	r3, r3, #1
 800530e:	61fb      	str	r3, [r7, #28]
      plli2sr = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8005310:	4b4f      	ldr	r3, [pc, #316]	; (8005450 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8005312:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005316:	0f1b      	lsrs	r3, r3, #28
 8005318:	f003 0307 	and.w	r3, r3, #7
 800531c:	617b      	str	r3, [r7, #20]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLI2SM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN , plli2sp, PeriphClkInit->PLLI2S.PLLI2SQ, plli2sr);
 800531e:	687b      	ldr	r3, [r7, #4]
 8005320:	685a      	ldr	r2, [r3, #4]
 8005322:	687b      	ldr	r3, [r7, #4]
 8005324:	689b      	ldr	r3, [r3, #8]
 8005326:	019b      	lsls	r3, r3, #6
 8005328:	431a      	orrs	r2, r3
 800532a:	69fb      	ldr	r3, [r7, #28]
 800532c:	085b      	lsrs	r3, r3, #1
 800532e:	3b01      	subs	r3, #1
 8005330:	041b      	lsls	r3, r3, #16
 8005332:	431a      	orrs	r2, r3
 8005334:	687b      	ldr	r3, [r7, #4]
 8005336:	691b      	ldr	r3, [r3, #16]
 8005338:	061b      	lsls	r3, r3, #24
 800533a:	431a      	orrs	r2, r3
 800533c:	697b      	ldr	r3, [r7, #20]
 800533e:	071b      	lsls	r3, r3, #28
 8005340:	4943      	ldr	r1, [pc, #268]	; (8005450 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8005342:	4313      	orrs	r3, r2
 8005344:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8005348:	4b41      	ldr	r3, [pc, #260]	; (8005450 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 800534a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800534e:	f023 021f 	bic.w	r2, r3, #31
 8005352:	687b      	ldr	r3, [r7, #4]
 8005354:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005356:	3b01      	subs	r3, #1
 8005358:	493d      	ldr	r1, [pc, #244]	; (8005450 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 800535a:	4313      	orrs	r3, r2
 800535c:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*------ In Case of PLLI2S is selected as source clock for SPDIFRX -------*/
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX) && (PeriphClkInit->SpdifClockSelection == RCC_SPDIFRXCLKSOURCE_PLLI2SP))
 8005360:	687b      	ldr	r3, [r7, #4]
 8005362:	681b      	ldr	r3, [r3, #0]
 8005364:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005368:	2b00      	cmp	r3, #0
 800536a:	d029      	beq.n	80053c0 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
 800536c:	687b      	ldr	r3, [r7, #4]
 800536e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005370:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005374:	d124      	bne.n	80053c0 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));
      /* Read PLLI2SR value from PLLI2SCFGR register (this value is not need for SAI configuration) */
      plli2sq = ((((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos) + 1U) << 1U);
 8005376:	4b36      	ldr	r3, [pc, #216]	; (8005450 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8005378:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800537c:	0c1b      	lsrs	r3, r3, #16
 800537e:	f003 0303 	and.w	r3, r3, #3
 8005382:	3301      	adds	r3, #1
 8005384:	005b      	lsls	r3, r3, #1
 8005386:	61bb      	str	r3, [r7, #24]
      plli2sr = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8005388:	4b31      	ldr	r3, [pc, #196]	; (8005450 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 800538a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800538e:	0f1b      	lsrs	r3, r3, #28
 8005390:	f003 0307 	and.w	r3, r3, #7
 8005394:	617b      	str	r3, [r7, #20]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, plli2sq, plli2sr);
 8005396:	687b      	ldr	r3, [r7, #4]
 8005398:	685a      	ldr	r2, [r3, #4]
 800539a:	687b      	ldr	r3, [r7, #4]
 800539c:	689b      	ldr	r3, [r3, #8]
 800539e:	019b      	lsls	r3, r3, #6
 80053a0:	431a      	orrs	r2, r3
 80053a2:	687b      	ldr	r3, [r7, #4]
 80053a4:	68db      	ldr	r3, [r3, #12]
 80053a6:	085b      	lsrs	r3, r3, #1
 80053a8:	3b01      	subs	r3, #1
 80053aa:	041b      	lsls	r3, r3, #16
 80053ac:	431a      	orrs	r2, r3
 80053ae:	69bb      	ldr	r3, [r7, #24]
 80053b0:	061b      	lsls	r3, r3, #24
 80053b2:	431a      	orrs	r2, r3
 80053b4:	697b      	ldr	r3, [r7, #20]
 80053b6:	071b      	lsls	r3, r3, #28
 80053b8:	4925      	ldr	r1, [pc, #148]	; (8005450 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 80053ba:	4313      	orrs	r3, r2
 80053bc:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

     /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 80053c0:	687b      	ldr	r3, [r7, #4]
 80053c2:	681b      	ldr	r3, [r3, #0]
 80053c4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80053c8:	2b00      	cmp	r3, #0
 80053ca:	d016      	beq.n	80053fa <HAL_RCCEx_PeriphCLKConfig+0x4e2>
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLI2SM) */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 80053cc:	687b      	ldr	r3, [r7, #4]
 80053ce:	685a      	ldr	r2, [r3, #4]
 80053d0:	687b      	ldr	r3, [r7, #4]
 80053d2:	689b      	ldr	r3, [r3, #8]
 80053d4:	019b      	lsls	r3, r3, #6
 80053d6:	431a      	orrs	r2, r3
 80053d8:	687b      	ldr	r3, [r7, #4]
 80053da:	68db      	ldr	r3, [r3, #12]
 80053dc:	085b      	lsrs	r3, r3, #1
 80053de:	3b01      	subs	r3, #1
 80053e0:	041b      	lsls	r3, r3, #16
 80053e2:	431a      	orrs	r2, r3
 80053e4:	687b      	ldr	r3, [r7, #4]
 80053e6:	691b      	ldr	r3, [r3, #16]
 80053e8:	061b      	lsls	r3, r3, #24
 80053ea:	431a      	orrs	r2, r3
 80053ec:	687b      	ldr	r3, [r7, #4]
 80053ee:	695b      	ldr	r3, [r3, #20]
 80053f0:	071b      	lsls	r3, r3, #28
 80053f2:	4917      	ldr	r1, [pc, #92]	; (8005450 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 80053f4:	4313      	orrs	r3, r2
 80053f6:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 80053fa:	4b16      	ldr	r3, [pc, #88]	; (8005454 <HAL_RCCEx_PeriphCLKConfig+0x53c>)
 80053fc:	2201      	movs	r2, #1
 80053fe:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8005400:	f7fc fca0 	bl	8001d44 <HAL_GetTick>
 8005404:	6278      	str	r0, [r7, #36]	; 0x24
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8005406:	e008      	b.n	800541a <HAL_RCCEx_PeriphCLKConfig+0x502>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8005408:	f7fc fc9c 	bl	8001d44 <HAL_GetTick>
 800540c:	4602      	mov	r2, r0
 800540e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005410:	1ad3      	subs	r3, r2, r3
 8005412:	2b02      	cmp	r3, #2
 8005414:	d901      	bls.n	800541a <HAL_RCCEx_PeriphCLKConfig+0x502>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8005416:	2303      	movs	r3, #3
 8005418:	e09f      	b.n	800555a <HAL_RCCEx_PeriphCLKConfig+0x642>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 800541a:	4b0d      	ldr	r3, [pc, #52]	; (8005450 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 800541c:	681b      	ldr	r3, [r3, #0]
 800541e:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005422:	2b00      	cmp	r3, #0
 8005424:	d0f0      	beq.n	8005408 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
  }
  /*--------------------------------------------------------------------------*/

  /*----------------------------- PLLSAI Configuration -----------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, CLK48 or SDIO */
  if(pllsaiused == 1U)
 8005426:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005428:	2b01      	cmp	r3, #1
 800542a:	f040 8095 	bne.w	8005558 <HAL_RCCEx_PeriphCLKConfig+0x640>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 800542e:	4b0a      	ldr	r3, [pc, #40]	; (8005458 <HAL_RCCEx_PeriphCLKConfig+0x540>)
 8005430:	2200      	movs	r2, #0
 8005432:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8005434:	f7fc fc86 	bl	8001d44 <HAL_GetTick>
 8005438:	6278      	str	r0, [r7, #36]	; 0x24
    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 800543a:	e00f      	b.n	800545c <HAL_RCCEx_PeriphCLKConfig+0x544>
    {
      if((HAL_GetTick() - tickstart ) > PLLSAI_TIMEOUT_VALUE)
 800543c:	f7fc fc82 	bl	8001d44 <HAL_GetTick>
 8005440:	4602      	mov	r2, r0
 8005442:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005444:	1ad3      	subs	r3, r2, r3
 8005446:	2b02      	cmp	r3, #2
 8005448:	d908      	bls.n	800545c <HAL_RCCEx_PeriphCLKConfig+0x544>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800544a:	2303      	movs	r3, #3
 800544c:	e085      	b.n	800555a <HAL_RCCEx_PeriphCLKConfig+0x642>
 800544e:	bf00      	nop
 8005450:	40023800 	.word	0x40023800
 8005454:	42470068 	.word	0x42470068
 8005458:	42470070 	.word	0x42470070
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 800545c:	4b41      	ldr	r3, [pc, #260]	; (8005564 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 800545e:	681b      	ldr	r3, [r3, #0]
 8005460:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8005464:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005468:	d0e8      	beq.n	800543c <HAL_RCCEx_PeriphCLKConfig+0x524>
    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIM_VALUE(PeriphClkInit->PLLSAI.PLLSAIM));
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*------ In Case of PLLSAI is selected as source clock for SAI -----------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||
 800546a:	687b      	ldr	r3, [r7, #4]
 800546c:	681b      	ldr	r3, [r3, #0]
 800546e:	f003 0304 	and.w	r3, r3, #4
 8005472:	2b00      	cmp	r3, #0
 8005474:	d003      	beq.n	800547e <HAL_RCCEx_PeriphCLKConfig+0x566>
 8005476:	687b      	ldr	r3, [r7, #4]
 8005478:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800547a:	2b00      	cmp	r3, #0
 800547c:	d009      	beq.n	8005492 <HAL_RCCEx_PeriphCLKConfig+0x57a>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 800547e:	687b      	ldr	r3, [r7, #4]
 8005480:	681b      	ldr	r3, [r3, #0]
 8005482:	f003 0308 	and.w	r3, r3, #8
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||
 8005486:	2b00      	cmp	r3, #0
 8005488:	d02b      	beq.n	80054e2 <HAL_RCCEx_PeriphCLKConfig+0x5ca>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 800548a:	687b      	ldr	r3, [r7, #4]
 800548c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800548e:	2b00      	cmp	r3, #0
 8005490:	d127      	bne.n	80054e2 <HAL_RCCEx_PeriphCLKConfig+0x5ca>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      pllsaip = ((((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos) + 1U) << 1U);
 8005492:	4b34      	ldr	r3, [pc, #208]	; (8005564 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8005494:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005498:	0c1b      	lsrs	r3, r3, #16
 800549a:	f003 0303 	and.w	r3, r3, #3
 800549e:	3301      	adds	r3, #1
 80054a0:	005b      	lsls	r3, r3, #1
 80054a2:	613b      	str	r3, [r7, #16]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIM, PeriphClkInit->PLLSAI.PLLSAIN , pllsaip, PeriphClkInit->PLLSAI.PLLSAIQ, 0U);
 80054a4:	687b      	ldr	r3, [r7, #4]
 80054a6:	699a      	ldr	r2, [r3, #24]
 80054a8:	687b      	ldr	r3, [r7, #4]
 80054aa:	69db      	ldr	r3, [r3, #28]
 80054ac:	019b      	lsls	r3, r3, #6
 80054ae:	431a      	orrs	r2, r3
 80054b0:	693b      	ldr	r3, [r7, #16]
 80054b2:	085b      	lsrs	r3, r3, #1
 80054b4:	3b01      	subs	r3, #1
 80054b6:	041b      	lsls	r3, r3, #16
 80054b8:	431a      	orrs	r2, r3
 80054ba:	687b      	ldr	r3, [r7, #4]
 80054bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80054be:	061b      	lsls	r3, r3, #24
 80054c0:	4928      	ldr	r1, [pc, #160]	; (8005564 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 80054c2:	4313      	orrs	r3, r2
 80054c4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 80054c8:	4b26      	ldr	r3, [pc, #152]	; (8005564 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 80054ca:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80054ce:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 80054d2:	687b      	ldr	r3, [r7, #4]
 80054d4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80054d6:	3b01      	subs	r3, #1
 80054d8:	021b      	lsls	r3, r3, #8
 80054da:	4922      	ldr	r1, [pc, #136]	; (8005564 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 80054dc:	4313      	orrs	r3, r2
 80054de:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*------ In Case of PLLSAI is selected as source clock for CLK48 ---------*/
    /* In Case of PLLI2S is selected as source clock for CLK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48CLKSOURCE_PLLSAIP))
 80054e2:	687b      	ldr	r3, [r7, #4]
 80054e4:	681b      	ldr	r3, [r3, #0]
 80054e6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80054ea:	2b00      	cmp	r3, #0
 80054ec:	d01d      	beq.n	800552a <HAL_RCCEx_PeriphCLKConfig+0x612>
 80054ee:	687b      	ldr	r3, [r7, #4]
 80054f0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80054f2:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80054f6:	d118      	bne.n	800552a <HAL_RCCEx_PeriphCLKConfig+0x612>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ value from PLLI2SCFGR register (this value is not need for SAI configuration) */
      pllsaiq = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 80054f8:	4b1a      	ldr	r3, [pc, #104]	; (8005564 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 80054fa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80054fe:	0e1b      	lsrs	r3, r3, #24
 8005500:	f003 030f 	and.w	r3, r3, #15
 8005504:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) * (PLLI2SN/PLLSAIM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIM, PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, pllsaiq, 0U);
 8005506:	687b      	ldr	r3, [r7, #4]
 8005508:	699a      	ldr	r2, [r3, #24]
 800550a:	687b      	ldr	r3, [r7, #4]
 800550c:	69db      	ldr	r3, [r3, #28]
 800550e:	019b      	lsls	r3, r3, #6
 8005510:	431a      	orrs	r2, r3
 8005512:	687b      	ldr	r3, [r7, #4]
 8005514:	6a1b      	ldr	r3, [r3, #32]
 8005516:	085b      	lsrs	r3, r3, #1
 8005518:	3b01      	subs	r3, #1
 800551a:	041b      	lsls	r3, r3, #16
 800551c:	431a      	orrs	r2, r3
 800551e:	68fb      	ldr	r3, [r7, #12]
 8005520:	061b      	lsls	r3, r3, #24
 8005522:	4910      	ldr	r1, [pc, #64]	; (8005564 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8005524:	4313      	orrs	r3, r2
 8005526:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 800552a:	4b0f      	ldr	r3, [pc, #60]	; (8005568 <HAL_RCCEx_PeriphCLKConfig+0x650>)
 800552c:	2201      	movs	r2, #1
 800552e:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8005530:	f7fc fc08 	bl	8001d44 <HAL_GetTick>
 8005534:	6278      	str	r0, [r7, #36]	; 0x24
    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8005536:	e008      	b.n	800554a <HAL_RCCEx_PeriphCLKConfig+0x632>
    {
      if((HAL_GetTick() - tickstart ) > PLLSAI_TIMEOUT_VALUE)
 8005538:	f7fc fc04 	bl	8001d44 <HAL_GetTick>
 800553c:	4602      	mov	r2, r0
 800553e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005540:	1ad3      	subs	r3, r2, r3
 8005542:	2b02      	cmp	r3, #2
 8005544:	d901      	bls.n	800554a <HAL_RCCEx_PeriphCLKConfig+0x632>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8005546:	2303      	movs	r3, #3
 8005548:	e007      	b.n	800555a <HAL_RCCEx_PeriphCLKConfig+0x642>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 800554a:	4b06      	ldr	r3, [pc, #24]	; (8005564 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 800554c:	681b      	ldr	r3, [r3, #0]
 800554e:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8005552:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005556:	d1ef      	bne.n	8005538 <HAL_RCCEx_PeriphCLKConfig+0x620>
      }
    }
  }
  return HAL_OK;
 8005558:	2300      	movs	r3, #0
}
 800555a:	4618      	mov	r0, r3
 800555c:	3730      	adds	r7, #48	; 0x30
 800555e:	46bd      	mov	sp, r7
 8005560:	bd80      	pop	{r7, pc}
 8005562:	bf00      	nop
 8005564:	40023800 	.word	0x40023800
 8005568:	42470070 	.word	0x42470070

0800556c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800556c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005570:	b0ae      	sub	sp, #184	; 0xb8
 8005572:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8005574:	2300      	movs	r3, #0
 8005576:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  uint32_t pllvco = 0U;
 800557a:	2300      	movs	r3, #0
 800557c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  uint32_t pllp = 0U;
 8005580:	2300      	movs	r3, #0
 8005582:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  uint32_t pllr = 0U;
 8005586:	2300      	movs	r3, #0
 8005588:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  uint32_t sysclockfreq = 0U;
 800558c:	2300      	movs	r3, #0
 800558e:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8005592:	4bcb      	ldr	r3, [pc, #812]	; (80058c0 <HAL_RCC_GetSysClockFreq+0x354>)
 8005594:	689b      	ldr	r3, [r3, #8]
 8005596:	f003 030c 	and.w	r3, r3, #12
 800559a:	2b0c      	cmp	r3, #12
 800559c:	f200 8206 	bhi.w	80059ac <HAL_RCC_GetSysClockFreq+0x440>
 80055a0:	a201      	add	r2, pc, #4	; (adr r2, 80055a8 <HAL_RCC_GetSysClockFreq+0x3c>)
 80055a2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80055a6:	bf00      	nop
 80055a8:	080055dd 	.word	0x080055dd
 80055ac:	080059ad 	.word	0x080059ad
 80055b0:	080059ad 	.word	0x080059ad
 80055b4:	080059ad 	.word	0x080059ad
 80055b8:	080055e5 	.word	0x080055e5
 80055bc:	080059ad 	.word	0x080059ad
 80055c0:	080059ad 	.word	0x080059ad
 80055c4:	080059ad 	.word	0x080059ad
 80055c8:	080055ed 	.word	0x080055ed
 80055cc:	080059ad 	.word	0x080059ad
 80055d0:	080059ad 	.word	0x080059ad
 80055d4:	080059ad 	.word	0x080059ad
 80055d8:	080057dd 	.word	0x080057dd
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80055dc:	4bb9      	ldr	r3, [pc, #740]	; (80058c4 <HAL_RCC_GetSysClockFreq+0x358>)
 80055de:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
       break;
 80055e2:	e1e7      	b.n	80059b4 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80055e4:	4bb8      	ldr	r3, [pc, #736]	; (80058c8 <HAL_RCC_GetSysClockFreq+0x35c>)
 80055e6:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 80055ea:	e1e3      	b.n	80059b4 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80055ec:	4bb4      	ldr	r3, [pc, #720]	; (80058c0 <HAL_RCC_GetSysClockFreq+0x354>)
 80055ee:	685b      	ldr	r3, [r3, #4]
 80055f0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80055f4:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80055f8:	4bb1      	ldr	r3, [pc, #708]	; (80058c0 <HAL_RCC_GetSysClockFreq+0x354>)
 80055fa:	685b      	ldr	r3, [r3, #4]
 80055fc:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005600:	2b00      	cmp	r3, #0
 8005602:	d071      	beq.n	80056e8 <HAL_RCC_GetSysClockFreq+0x17c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8005604:	4bae      	ldr	r3, [pc, #696]	; (80058c0 <HAL_RCC_GetSysClockFreq+0x354>)
 8005606:	685b      	ldr	r3, [r3, #4]
 8005608:	099b      	lsrs	r3, r3, #6
 800560a:	2200      	movs	r2, #0
 800560c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8005610:	f8c7 209c 	str.w	r2, [r7, #156]	; 0x9c
 8005614:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8005618:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800561c:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8005620:	2300      	movs	r3, #0
 8005622:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8005626:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 800562a:	4622      	mov	r2, r4
 800562c:	462b      	mov	r3, r5
 800562e:	f04f 0000 	mov.w	r0, #0
 8005632:	f04f 0100 	mov.w	r1, #0
 8005636:	0159      	lsls	r1, r3, #5
 8005638:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800563c:	0150      	lsls	r0, r2, #5
 800563e:	4602      	mov	r2, r0
 8005640:	460b      	mov	r3, r1
 8005642:	4621      	mov	r1, r4
 8005644:	1a51      	subs	r1, r2, r1
 8005646:	6439      	str	r1, [r7, #64]	; 0x40
 8005648:	4629      	mov	r1, r5
 800564a:	eb63 0301 	sbc.w	r3, r3, r1
 800564e:	647b      	str	r3, [r7, #68]	; 0x44
 8005650:	f04f 0200 	mov.w	r2, #0
 8005654:	f04f 0300 	mov.w	r3, #0
 8005658:	e9d7 8910 	ldrd	r8, r9, [r7, #64]	; 0x40
 800565c:	4649      	mov	r1, r9
 800565e:	018b      	lsls	r3, r1, #6
 8005660:	4641      	mov	r1, r8
 8005662:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8005666:	4641      	mov	r1, r8
 8005668:	018a      	lsls	r2, r1, #6
 800566a:	4641      	mov	r1, r8
 800566c:	1a51      	subs	r1, r2, r1
 800566e:	63b9      	str	r1, [r7, #56]	; 0x38
 8005670:	4649      	mov	r1, r9
 8005672:	eb63 0301 	sbc.w	r3, r3, r1
 8005676:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005678:	f04f 0200 	mov.w	r2, #0
 800567c:	f04f 0300 	mov.w	r3, #0
 8005680:	e9d7 890e 	ldrd	r8, r9, [r7, #56]	; 0x38
 8005684:	4649      	mov	r1, r9
 8005686:	00cb      	lsls	r3, r1, #3
 8005688:	4641      	mov	r1, r8
 800568a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800568e:	4641      	mov	r1, r8
 8005690:	00ca      	lsls	r2, r1, #3
 8005692:	4610      	mov	r0, r2
 8005694:	4619      	mov	r1, r3
 8005696:	4603      	mov	r3, r0
 8005698:	4622      	mov	r2, r4
 800569a:	189b      	adds	r3, r3, r2
 800569c:	633b      	str	r3, [r7, #48]	; 0x30
 800569e:	462b      	mov	r3, r5
 80056a0:	460a      	mov	r2, r1
 80056a2:	eb42 0303 	adc.w	r3, r2, r3
 80056a6:	637b      	str	r3, [r7, #52]	; 0x34
 80056a8:	f04f 0200 	mov.w	r2, #0
 80056ac:	f04f 0300 	mov.w	r3, #0
 80056b0:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 80056b4:	4629      	mov	r1, r5
 80056b6:	024b      	lsls	r3, r1, #9
 80056b8:	4621      	mov	r1, r4
 80056ba:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 80056be:	4621      	mov	r1, r4
 80056c0:	024a      	lsls	r2, r1, #9
 80056c2:	4610      	mov	r0, r2
 80056c4:	4619      	mov	r1, r3
 80056c6:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80056ca:	2200      	movs	r2, #0
 80056cc:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 80056d0:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 80056d4:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	; 0x88
 80056d8:	f7fa fd9a 	bl	8000210 <__aeabi_uldivmod>
 80056dc:	4602      	mov	r2, r0
 80056de:	460b      	mov	r3, r1
 80056e0:	4613      	mov	r3, r2
 80056e2:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80056e6:	e067      	b.n	80057b8 <HAL_RCC_GetSysClockFreq+0x24c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80056e8:	4b75      	ldr	r3, [pc, #468]	; (80058c0 <HAL_RCC_GetSysClockFreq+0x354>)
 80056ea:	685b      	ldr	r3, [r3, #4]
 80056ec:	099b      	lsrs	r3, r3, #6
 80056ee:	2200      	movs	r2, #0
 80056f0:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80056f4:	f8c7 2084 	str.w	r2, [r7, #132]	; 0x84
 80056f8:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80056fc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005700:	67bb      	str	r3, [r7, #120]	; 0x78
 8005702:	2300      	movs	r3, #0
 8005704:	67fb      	str	r3, [r7, #124]	; 0x7c
 8005706:	e9d7 451e 	ldrd	r4, r5, [r7, #120]	; 0x78
 800570a:	4622      	mov	r2, r4
 800570c:	462b      	mov	r3, r5
 800570e:	f04f 0000 	mov.w	r0, #0
 8005712:	f04f 0100 	mov.w	r1, #0
 8005716:	0159      	lsls	r1, r3, #5
 8005718:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800571c:	0150      	lsls	r0, r2, #5
 800571e:	4602      	mov	r2, r0
 8005720:	460b      	mov	r3, r1
 8005722:	4621      	mov	r1, r4
 8005724:	1a51      	subs	r1, r2, r1
 8005726:	62b9      	str	r1, [r7, #40]	; 0x28
 8005728:	4629      	mov	r1, r5
 800572a:	eb63 0301 	sbc.w	r3, r3, r1
 800572e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005730:	f04f 0200 	mov.w	r2, #0
 8005734:	f04f 0300 	mov.w	r3, #0
 8005738:	e9d7 890a 	ldrd	r8, r9, [r7, #40]	; 0x28
 800573c:	4649      	mov	r1, r9
 800573e:	018b      	lsls	r3, r1, #6
 8005740:	4641      	mov	r1, r8
 8005742:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8005746:	4641      	mov	r1, r8
 8005748:	018a      	lsls	r2, r1, #6
 800574a:	4641      	mov	r1, r8
 800574c:	ebb2 0a01 	subs.w	sl, r2, r1
 8005750:	4649      	mov	r1, r9
 8005752:	eb63 0b01 	sbc.w	fp, r3, r1
 8005756:	f04f 0200 	mov.w	r2, #0
 800575a:	f04f 0300 	mov.w	r3, #0
 800575e:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8005762:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8005766:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800576a:	4692      	mov	sl, r2
 800576c:	469b      	mov	fp, r3
 800576e:	4623      	mov	r3, r4
 8005770:	eb1a 0303 	adds.w	r3, sl, r3
 8005774:	623b      	str	r3, [r7, #32]
 8005776:	462b      	mov	r3, r5
 8005778:	eb4b 0303 	adc.w	r3, fp, r3
 800577c:	627b      	str	r3, [r7, #36]	; 0x24
 800577e:	f04f 0200 	mov.w	r2, #0
 8005782:	f04f 0300 	mov.w	r3, #0
 8005786:	e9d7 4508 	ldrd	r4, r5, [r7, #32]
 800578a:	4629      	mov	r1, r5
 800578c:	028b      	lsls	r3, r1, #10
 800578e:	4621      	mov	r1, r4
 8005790:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8005794:	4621      	mov	r1, r4
 8005796:	028a      	lsls	r2, r1, #10
 8005798:	4610      	mov	r0, r2
 800579a:	4619      	mov	r1, r3
 800579c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80057a0:	2200      	movs	r2, #0
 80057a2:	673b      	str	r3, [r7, #112]	; 0x70
 80057a4:	677a      	str	r2, [r7, #116]	; 0x74
 80057a6:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	; 0x70
 80057aa:	f7fa fd31 	bl	8000210 <__aeabi_uldivmod>
 80057ae:	4602      	mov	r2, r0
 80057b0:	460b      	mov	r3, r1
 80057b2:	4613      	mov	r3, r2
 80057b4:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80057b8:	4b41      	ldr	r3, [pc, #260]	; (80058c0 <HAL_RCC_GetSysClockFreq+0x354>)
 80057ba:	685b      	ldr	r3, [r3, #4]
 80057bc:	0c1b      	lsrs	r3, r3, #16
 80057be:	f003 0303 	and.w	r3, r3, #3
 80057c2:	3301      	adds	r3, #1
 80057c4:	005b      	lsls	r3, r3, #1
 80057c6:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8

      sysclockfreq = pllvco/pllp;
 80057ca:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 80057ce:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80057d2:	fbb2 f3f3 	udiv	r3, r2, r3
 80057d6:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 80057da:	e0eb      	b.n	80059b4 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80057dc:	4b38      	ldr	r3, [pc, #224]	; (80058c0 <HAL_RCC_GetSysClockFreq+0x354>)
 80057de:	685b      	ldr	r3, [r3, #4]
 80057e0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80057e4:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80057e8:	4b35      	ldr	r3, [pc, #212]	; (80058c0 <HAL_RCC_GetSysClockFreq+0x354>)
 80057ea:	685b      	ldr	r3, [r3, #4]
 80057ec:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80057f0:	2b00      	cmp	r3, #0
 80057f2:	d06b      	beq.n	80058cc <HAL_RCC_GetSysClockFreq+0x360>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80057f4:	4b32      	ldr	r3, [pc, #200]	; (80058c0 <HAL_RCC_GetSysClockFreq+0x354>)
 80057f6:	685b      	ldr	r3, [r3, #4]
 80057f8:	099b      	lsrs	r3, r3, #6
 80057fa:	2200      	movs	r2, #0
 80057fc:	66bb      	str	r3, [r7, #104]	; 0x68
 80057fe:	66fa      	str	r2, [r7, #108]	; 0x6c
 8005800:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8005802:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005806:	663b      	str	r3, [r7, #96]	; 0x60
 8005808:	2300      	movs	r3, #0
 800580a:	667b      	str	r3, [r7, #100]	; 0x64
 800580c:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	; 0x60
 8005810:	4622      	mov	r2, r4
 8005812:	462b      	mov	r3, r5
 8005814:	f04f 0000 	mov.w	r0, #0
 8005818:	f04f 0100 	mov.w	r1, #0
 800581c:	0159      	lsls	r1, r3, #5
 800581e:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8005822:	0150      	lsls	r0, r2, #5
 8005824:	4602      	mov	r2, r0
 8005826:	460b      	mov	r3, r1
 8005828:	4621      	mov	r1, r4
 800582a:	1a51      	subs	r1, r2, r1
 800582c:	61b9      	str	r1, [r7, #24]
 800582e:	4629      	mov	r1, r5
 8005830:	eb63 0301 	sbc.w	r3, r3, r1
 8005834:	61fb      	str	r3, [r7, #28]
 8005836:	f04f 0200 	mov.w	r2, #0
 800583a:	f04f 0300 	mov.w	r3, #0
 800583e:	e9d7 ab06 	ldrd	sl, fp, [r7, #24]
 8005842:	4659      	mov	r1, fp
 8005844:	018b      	lsls	r3, r1, #6
 8005846:	4651      	mov	r1, sl
 8005848:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800584c:	4651      	mov	r1, sl
 800584e:	018a      	lsls	r2, r1, #6
 8005850:	4651      	mov	r1, sl
 8005852:	ebb2 0801 	subs.w	r8, r2, r1
 8005856:	4659      	mov	r1, fp
 8005858:	eb63 0901 	sbc.w	r9, r3, r1
 800585c:	f04f 0200 	mov.w	r2, #0
 8005860:	f04f 0300 	mov.w	r3, #0
 8005864:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8005868:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800586c:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8005870:	4690      	mov	r8, r2
 8005872:	4699      	mov	r9, r3
 8005874:	4623      	mov	r3, r4
 8005876:	eb18 0303 	adds.w	r3, r8, r3
 800587a:	613b      	str	r3, [r7, #16]
 800587c:	462b      	mov	r3, r5
 800587e:	eb49 0303 	adc.w	r3, r9, r3
 8005882:	617b      	str	r3, [r7, #20]
 8005884:	f04f 0200 	mov.w	r2, #0
 8005888:	f04f 0300 	mov.w	r3, #0
 800588c:	e9d7 4504 	ldrd	r4, r5, [r7, #16]
 8005890:	4629      	mov	r1, r5
 8005892:	024b      	lsls	r3, r1, #9
 8005894:	4621      	mov	r1, r4
 8005896:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 800589a:	4621      	mov	r1, r4
 800589c:	024a      	lsls	r2, r1, #9
 800589e:	4610      	mov	r0, r2
 80058a0:	4619      	mov	r1, r3
 80058a2:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80058a6:	2200      	movs	r2, #0
 80058a8:	65bb      	str	r3, [r7, #88]	; 0x58
 80058aa:	65fa      	str	r2, [r7, #92]	; 0x5c
 80058ac:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 80058b0:	f7fa fcae 	bl	8000210 <__aeabi_uldivmod>
 80058b4:	4602      	mov	r2, r0
 80058b6:	460b      	mov	r3, r1
 80058b8:	4613      	mov	r3, r2
 80058ba:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80058be:	e065      	b.n	800598c <HAL_RCC_GetSysClockFreq+0x420>
 80058c0:	40023800 	.word	0x40023800
 80058c4:	00f42400 	.word	0x00f42400
 80058c8:	007a1200 	.word	0x007a1200
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80058cc:	4b3d      	ldr	r3, [pc, #244]	; (80059c4 <HAL_RCC_GetSysClockFreq+0x458>)
 80058ce:	685b      	ldr	r3, [r3, #4]
 80058d0:	099b      	lsrs	r3, r3, #6
 80058d2:	2200      	movs	r2, #0
 80058d4:	4618      	mov	r0, r3
 80058d6:	4611      	mov	r1, r2
 80058d8:	f3c0 0308 	ubfx	r3, r0, #0, #9
 80058dc:	653b      	str	r3, [r7, #80]	; 0x50
 80058de:	2300      	movs	r3, #0
 80058e0:	657b      	str	r3, [r7, #84]	; 0x54
 80058e2:	e9d7 8914 	ldrd	r8, r9, [r7, #80]	; 0x50
 80058e6:	4642      	mov	r2, r8
 80058e8:	464b      	mov	r3, r9
 80058ea:	f04f 0000 	mov.w	r0, #0
 80058ee:	f04f 0100 	mov.w	r1, #0
 80058f2:	0159      	lsls	r1, r3, #5
 80058f4:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80058f8:	0150      	lsls	r0, r2, #5
 80058fa:	4602      	mov	r2, r0
 80058fc:	460b      	mov	r3, r1
 80058fe:	4641      	mov	r1, r8
 8005900:	1a51      	subs	r1, r2, r1
 8005902:	60b9      	str	r1, [r7, #8]
 8005904:	4649      	mov	r1, r9
 8005906:	eb63 0301 	sbc.w	r3, r3, r1
 800590a:	60fb      	str	r3, [r7, #12]
 800590c:	f04f 0200 	mov.w	r2, #0
 8005910:	f04f 0300 	mov.w	r3, #0
 8005914:	e9d7 ab02 	ldrd	sl, fp, [r7, #8]
 8005918:	4659      	mov	r1, fp
 800591a:	018b      	lsls	r3, r1, #6
 800591c:	4651      	mov	r1, sl
 800591e:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8005922:	4651      	mov	r1, sl
 8005924:	018a      	lsls	r2, r1, #6
 8005926:	4651      	mov	r1, sl
 8005928:	1a54      	subs	r4, r2, r1
 800592a:	4659      	mov	r1, fp
 800592c:	eb63 0501 	sbc.w	r5, r3, r1
 8005930:	f04f 0200 	mov.w	r2, #0
 8005934:	f04f 0300 	mov.w	r3, #0
 8005938:	00eb      	lsls	r3, r5, #3
 800593a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800593e:	00e2      	lsls	r2, r4, #3
 8005940:	4614      	mov	r4, r2
 8005942:	461d      	mov	r5, r3
 8005944:	4643      	mov	r3, r8
 8005946:	18e3      	adds	r3, r4, r3
 8005948:	603b      	str	r3, [r7, #0]
 800594a:	464b      	mov	r3, r9
 800594c:	eb45 0303 	adc.w	r3, r5, r3
 8005950:	607b      	str	r3, [r7, #4]
 8005952:	f04f 0200 	mov.w	r2, #0
 8005956:	f04f 0300 	mov.w	r3, #0
 800595a:	e9d7 4500 	ldrd	r4, r5, [r7]
 800595e:	4629      	mov	r1, r5
 8005960:	028b      	lsls	r3, r1, #10
 8005962:	4621      	mov	r1, r4
 8005964:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8005968:	4621      	mov	r1, r4
 800596a:	028a      	lsls	r2, r1, #10
 800596c:	4610      	mov	r0, r2
 800596e:	4619      	mov	r1, r3
 8005970:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8005974:	2200      	movs	r2, #0
 8005976:	64bb      	str	r3, [r7, #72]	; 0x48
 8005978:	64fa      	str	r2, [r7, #76]	; 0x4c
 800597a:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 800597e:	f7fa fc47 	bl	8000210 <__aeabi_uldivmod>
 8005982:	4602      	mov	r2, r0
 8005984:	460b      	mov	r3, r1
 8005986:	4613      	mov	r3, r2
 8005988:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 800598c:	4b0d      	ldr	r3, [pc, #52]	; (80059c4 <HAL_RCC_GetSysClockFreq+0x458>)
 800598e:	685b      	ldr	r3, [r3, #4]
 8005990:	0f1b      	lsrs	r3, r3, #28
 8005992:	f003 0307 	and.w	r3, r3, #7
 8005996:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4

      sysclockfreq = pllvco/pllr;
 800599a:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 800599e:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 80059a2:	fbb2 f3f3 	udiv	r3, r2, r3
 80059a6:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 80059aa:	e003      	b.n	80059b4 <HAL_RCC_GetSysClockFreq+0x448>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80059ac:	4b06      	ldr	r3, [pc, #24]	; (80059c8 <HAL_RCC_GetSysClockFreq+0x45c>)
 80059ae:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 80059b2:	bf00      	nop
    }
  }
  return sysclockfreq;
 80059b4:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
}
 80059b8:	4618      	mov	r0, r3
 80059ba:	37b8      	adds	r7, #184	; 0xb8
 80059bc:	46bd      	mov	sp, r7
 80059be:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80059c2:	bf00      	nop
 80059c4:	40023800 	.word	0x40023800
 80059c8:	00f42400 	.word	0x00f42400

080059cc <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80059cc:	b580      	push	{r7, lr}
 80059ce:	b086      	sub	sp, #24
 80059d0:	af00      	add	r7, sp, #0
 80059d2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80059d4:	687b      	ldr	r3, [r7, #4]
 80059d6:	2b00      	cmp	r3, #0
 80059d8:	d101      	bne.n	80059de <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80059da:	2301      	movs	r3, #1
 80059dc:	e28d      	b.n	8005efa <HAL_RCC_OscConfig+0x52e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80059de:	687b      	ldr	r3, [r7, #4]
 80059e0:	681b      	ldr	r3, [r3, #0]
 80059e2:	f003 0301 	and.w	r3, r3, #1
 80059e6:	2b00      	cmp	r3, #0
 80059e8:	f000 8083 	beq.w	8005af2 <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 80059ec:	4b94      	ldr	r3, [pc, #592]	; (8005c40 <HAL_RCC_OscConfig+0x274>)
 80059ee:	689b      	ldr	r3, [r3, #8]
 80059f0:	f003 030c 	and.w	r3, r3, #12
 80059f4:	2b04      	cmp	r3, #4
 80059f6:	d019      	beq.n	8005a2c <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 80059f8:	4b91      	ldr	r3, [pc, #580]	; (8005c40 <HAL_RCC_OscConfig+0x274>)
 80059fa:	689b      	ldr	r3, [r3, #8]
 80059fc:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8005a00:	2b08      	cmp	r3, #8
 8005a02:	d106      	bne.n	8005a12 <HAL_RCC_OscConfig+0x46>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8005a04:	4b8e      	ldr	r3, [pc, #568]	; (8005c40 <HAL_RCC_OscConfig+0x274>)
 8005a06:	685b      	ldr	r3, [r3, #4]
 8005a08:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005a0c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8005a10:	d00c      	beq.n	8005a2c <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8005a12:	4b8b      	ldr	r3, [pc, #556]	; (8005c40 <HAL_RCC_OscConfig+0x274>)
 8005a14:	689b      	ldr	r3, [r3, #8]
 8005a16:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8005a1a:	2b0c      	cmp	r3, #12
 8005a1c:	d112      	bne.n	8005a44 <HAL_RCC_OscConfig+0x78>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8005a1e:	4b88      	ldr	r3, [pc, #544]	; (8005c40 <HAL_RCC_OscConfig+0x274>)
 8005a20:	685b      	ldr	r3, [r3, #4]
 8005a22:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005a26:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8005a2a:	d10b      	bne.n	8005a44 <HAL_RCC_OscConfig+0x78>
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005a2c:	4b84      	ldr	r3, [pc, #528]	; (8005c40 <HAL_RCC_OscConfig+0x274>)
 8005a2e:	681b      	ldr	r3, [r3, #0]
 8005a30:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005a34:	2b00      	cmp	r3, #0
 8005a36:	d05b      	beq.n	8005af0 <HAL_RCC_OscConfig+0x124>
 8005a38:	687b      	ldr	r3, [r7, #4]
 8005a3a:	685b      	ldr	r3, [r3, #4]
 8005a3c:	2b00      	cmp	r3, #0
 8005a3e:	d157      	bne.n	8005af0 <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
 8005a40:	2301      	movs	r3, #1
 8005a42:	e25a      	b.n	8005efa <HAL_RCC_OscConfig+0x52e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8005a44:	687b      	ldr	r3, [r7, #4]
 8005a46:	685b      	ldr	r3, [r3, #4]
 8005a48:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005a4c:	d106      	bne.n	8005a5c <HAL_RCC_OscConfig+0x90>
 8005a4e:	4b7c      	ldr	r3, [pc, #496]	; (8005c40 <HAL_RCC_OscConfig+0x274>)
 8005a50:	681b      	ldr	r3, [r3, #0]
 8005a52:	4a7b      	ldr	r2, [pc, #492]	; (8005c40 <HAL_RCC_OscConfig+0x274>)
 8005a54:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005a58:	6013      	str	r3, [r2, #0]
 8005a5a:	e01d      	b.n	8005a98 <HAL_RCC_OscConfig+0xcc>
 8005a5c:	687b      	ldr	r3, [r7, #4]
 8005a5e:	685b      	ldr	r3, [r3, #4]
 8005a60:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8005a64:	d10c      	bne.n	8005a80 <HAL_RCC_OscConfig+0xb4>
 8005a66:	4b76      	ldr	r3, [pc, #472]	; (8005c40 <HAL_RCC_OscConfig+0x274>)
 8005a68:	681b      	ldr	r3, [r3, #0]
 8005a6a:	4a75      	ldr	r2, [pc, #468]	; (8005c40 <HAL_RCC_OscConfig+0x274>)
 8005a6c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8005a70:	6013      	str	r3, [r2, #0]
 8005a72:	4b73      	ldr	r3, [pc, #460]	; (8005c40 <HAL_RCC_OscConfig+0x274>)
 8005a74:	681b      	ldr	r3, [r3, #0]
 8005a76:	4a72      	ldr	r2, [pc, #456]	; (8005c40 <HAL_RCC_OscConfig+0x274>)
 8005a78:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005a7c:	6013      	str	r3, [r2, #0]
 8005a7e:	e00b      	b.n	8005a98 <HAL_RCC_OscConfig+0xcc>
 8005a80:	4b6f      	ldr	r3, [pc, #444]	; (8005c40 <HAL_RCC_OscConfig+0x274>)
 8005a82:	681b      	ldr	r3, [r3, #0]
 8005a84:	4a6e      	ldr	r2, [pc, #440]	; (8005c40 <HAL_RCC_OscConfig+0x274>)
 8005a86:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005a8a:	6013      	str	r3, [r2, #0]
 8005a8c:	4b6c      	ldr	r3, [pc, #432]	; (8005c40 <HAL_RCC_OscConfig+0x274>)
 8005a8e:	681b      	ldr	r3, [r3, #0]
 8005a90:	4a6b      	ldr	r2, [pc, #428]	; (8005c40 <HAL_RCC_OscConfig+0x274>)
 8005a92:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8005a96:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8005a98:	687b      	ldr	r3, [r7, #4]
 8005a9a:	685b      	ldr	r3, [r3, #4]
 8005a9c:	2b00      	cmp	r3, #0
 8005a9e:	d013      	beq.n	8005ac8 <HAL_RCC_OscConfig+0xfc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005aa0:	f7fc f950 	bl	8001d44 <HAL_GetTick>
 8005aa4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005aa6:	e008      	b.n	8005aba <HAL_RCC_OscConfig+0xee>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8005aa8:	f7fc f94c 	bl	8001d44 <HAL_GetTick>
 8005aac:	4602      	mov	r2, r0
 8005aae:	693b      	ldr	r3, [r7, #16]
 8005ab0:	1ad3      	subs	r3, r2, r3
 8005ab2:	2b64      	cmp	r3, #100	; 0x64
 8005ab4:	d901      	bls.n	8005aba <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 8005ab6:	2303      	movs	r3, #3
 8005ab8:	e21f      	b.n	8005efa <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005aba:	4b61      	ldr	r3, [pc, #388]	; (8005c40 <HAL_RCC_OscConfig+0x274>)
 8005abc:	681b      	ldr	r3, [r3, #0]
 8005abe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005ac2:	2b00      	cmp	r3, #0
 8005ac4:	d0f0      	beq.n	8005aa8 <HAL_RCC_OscConfig+0xdc>
 8005ac6:	e014      	b.n	8005af2 <HAL_RCC_OscConfig+0x126>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005ac8:	f7fc f93c 	bl	8001d44 <HAL_GetTick>
 8005acc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8005ace:	e008      	b.n	8005ae2 <HAL_RCC_OscConfig+0x116>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8005ad0:	f7fc f938 	bl	8001d44 <HAL_GetTick>
 8005ad4:	4602      	mov	r2, r0
 8005ad6:	693b      	ldr	r3, [r7, #16]
 8005ad8:	1ad3      	subs	r3, r2, r3
 8005ada:	2b64      	cmp	r3, #100	; 0x64
 8005adc:	d901      	bls.n	8005ae2 <HAL_RCC_OscConfig+0x116>
          {
            return HAL_TIMEOUT;
 8005ade:	2303      	movs	r3, #3
 8005ae0:	e20b      	b.n	8005efa <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8005ae2:	4b57      	ldr	r3, [pc, #348]	; (8005c40 <HAL_RCC_OscConfig+0x274>)
 8005ae4:	681b      	ldr	r3, [r3, #0]
 8005ae6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005aea:	2b00      	cmp	r3, #0
 8005aec:	d1f0      	bne.n	8005ad0 <HAL_RCC_OscConfig+0x104>
 8005aee:	e000      	b.n	8005af2 <HAL_RCC_OscConfig+0x126>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005af0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8005af2:	687b      	ldr	r3, [r7, #4]
 8005af4:	681b      	ldr	r3, [r3, #0]
 8005af6:	f003 0302 	and.w	r3, r3, #2
 8005afa:	2b00      	cmp	r3, #0
 8005afc:	d06f      	beq.n	8005bde <HAL_RCC_OscConfig+0x212>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8005afe:	4b50      	ldr	r3, [pc, #320]	; (8005c40 <HAL_RCC_OscConfig+0x274>)
 8005b00:	689b      	ldr	r3, [r3, #8]
 8005b02:	f003 030c 	and.w	r3, r3, #12
 8005b06:	2b00      	cmp	r3, #0
 8005b08:	d017      	beq.n	8005b3a <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8005b0a:	4b4d      	ldr	r3, [pc, #308]	; (8005c40 <HAL_RCC_OscConfig+0x274>)
 8005b0c:	689b      	ldr	r3, [r3, #8]
 8005b0e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8005b12:	2b08      	cmp	r3, #8
 8005b14:	d105      	bne.n	8005b22 <HAL_RCC_OscConfig+0x156>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8005b16:	4b4a      	ldr	r3, [pc, #296]	; (8005c40 <HAL_RCC_OscConfig+0x274>)
 8005b18:	685b      	ldr	r3, [r3, #4]
 8005b1a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005b1e:	2b00      	cmp	r3, #0
 8005b20:	d00b      	beq.n	8005b3a <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8005b22:	4b47      	ldr	r3, [pc, #284]	; (8005c40 <HAL_RCC_OscConfig+0x274>)
 8005b24:	689b      	ldr	r3, [r3, #8]
 8005b26:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8005b2a:	2b0c      	cmp	r3, #12
 8005b2c:	d11c      	bne.n	8005b68 <HAL_RCC_OscConfig+0x19c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8005b2e:	4b44      	ldr	r3, [pc, #272]	; (8005c40 <HAL_RCC_OscConfig+0x274>)
 8005b30:	685b      	ldr	r3, [r3, #4]
 8005b32:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005b36:	2b00      	cmp	r3, #0
 8005b38:	d116      	bne.n	8005b68 <HAL_RCC_OscConfig+0x19c>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8005b3a:	4b41      	ldr	r3, [pc, #260]	; (8005c40 <HAL_RCC_OscConfig+0x274>)
 8005b3c:	681b      	ldr	r3, [r3, #0]
 8005b3e:	f003 0302 	and.w	r3, r3, #2
 8005b42:	2b00      	cmp	r3, #0
 8005b44:	d005      	beq.n	8005b52 <HAL_RCC_OscConfig+0x186>
 8005b46:	687b      	ldr	r3, [r7, #4]
 8005b48:	68db      	ldr	r3, [r3, #12]
 8005b4a:	2b01      	cmp	r3, #1
 8005b4c:	d001      	beq.n	8005b52 <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 8005b4e:	2301      	movs	r3, #1
 8005b50:	e1d3      	b.n	8005efa <HAL_RCC_OscConfig+0x52e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005b52:	4b3b      	ldr	r3, [pc, #236]	; (8005c40 <HAL_RCC_OscConfig+0x274>)
 8005b54:	681b      	ldr	r3, [r3, #0]
 8005b56:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8005b5a:	687b      	ldr	r3, [r7, #4]
 8005b5c:	691b      	ldr	r3, [r3, #16]
 8005b5e:	00db      	lsls	r3, r3, #3
 8005b60:	4937      	ldr	r1, [pc, #220]	; (8005c40 <HAL_RCC_OscConfig+0x274>)
 8005b62:	4313      	orrs	r3, r2
 8005b64:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8005b66:	e03a      	b.n	8005bde <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8005b68:	687b      	ldr	r3, [r7, #4]
 8005b6a:	68db      	ldr	r3, [r3, #12]
 8005b6c:	2b00      	cmp	r3, #0
 8005b6e:	d020      	beq.n	8005bb2 <HAL_RCC_OscConfig+0x1e6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8005b70:	4b34      	ldr	r3, [pc, #208]	; (8005c44 <HAL_RCC_OscConfig+0x278>)
 8005b72:	2201      	movs	r2, #1
 8005b74:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005b76:	f7fc f8e5 	bl	8001d44 <HAL_GetTick>
 8005b7a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005b7c:	e008      	b.n	8005b90 <HAL_RCC_OscConfig+0x1c4>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8005b7e:	f7fc f8e1 	bl	8001d44 <HAL_GetTick>
 8005b82:	4602      	mov	r2, r0
 8005b84:	693b      	ldr	r3, [r7, #16]
 8005b86:	1ad3      	subs	r3, r2, r3
 8005b88:	2b02      	cmp	r3, #2
 8005b8a:	d901      	bls.n	8005b90 <HAL_RCC_OscConfig+0x1c4>
          {
            return HAL_TIMEOUT;
 8005b8c:	2303      	movs	r3, #3
 8005b8e:	e1b4      	b.n	8005efa <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005b90:	4b2b      	ldr	r3, [pc, #172]	; (8005c40 <HAL_RCC_OscConfig+0x274>)
 8005b92:	681b      	ldr	r3, [r3, #0]
 8005b94:	f003 0302 	and.w	r3, r3, #2
 8005b98:	2b00      	cmp	r3, #0
 8005b9a:	d0f0      	beq.n	8005b7e <HAL_RCC_OscConfig+0x1b2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005b9c:	4b28      	ldr	r3, [pc, #160]	; (8005c40 <HAL_RCC_OscConfig+0x274>)
 8005b9e:	681b      	ldr	r3, [r3, #0]
 8005ba0:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8005ba4:	687b      	ldr	r3, [r7, #4]
 8005ba6:	691b      	ldr	r3, [r3, #16]
 8005ba8:	00db      	lsls	r3, r3, #3
 8005baa:	4925      	ldr	r1, [pc, #148]	; (8005c40 <HAL_RCC_OscConfig+0x274>)
 8005bac:	4313      	orrs	r3, r2
 8005bae:	600b      	str	r3, [r1, #0]
 8005bb0:	e015      	b.n	8005bde <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8005bb2:	4b24      	ldr	r3, [pc, #144]	; (8005c44 <HAL_RCC_OscConfig+0x278>)
 8005bb4:	2200      	movs	r2, #0
 8005bb6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005bb8:	f7fc f8c4 	bl	8001d44 <HAL_GetTick>
 8005bbc:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8005bbe:	e008      	b.n	8005bd2 <HAL_RCC_OscConfig+0x206>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8005bc0:	f7fc f8c0 	bl	8001d44 <HAL_GetTick>
 8005bc4:	4602      	mov	r2, r0
 8005bc6:	693b      	ldr	r3, [r7, #16]
 8005bc8:	1ad3      	subs	r3, r2, r3
 8005bca:	2b02      	cmp	r3, #2
 8005bcc:	d901      	bls.n	8005bd2 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8005bce:	2303      	movs	r3, #3
 8005bd0:	e193      	b.n	8005efa <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8005bd2:	4b1b      	ldr	r3, [pc, #108]	; (8005c40 <HAL_RCC_OscConfig+0x274>)
 8005bd4:	681b      	ldr	r3, [r3, #0]
 8005bd6:	f003 0302 	and.w	r3, r3, #2
 8005bda:	2b00      	cmp	r3, #0
 8005bdc:	d1f0      	bne.n	8005bc0 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8005bde:	687b      	ldr	r3, [r7, #4]
 8005be0:	681b      	ldr	r3, [r3, #0]
 8005be2:	f003 0308 	and.w	r3, r3, #8
 8005be6:	2b00      	cmp	r3, #0
 8005be8:	d036      	beq.n	8005c58 <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8005bea:	687b      	ldr	r3, [r7, #4]
 8005bec:	695b      	ldr	r3, [r3, #20]
 8005bee:	2b00      	cmp	r3, #0
 8005bf0:	d016      	beq.n	8005c20 <HAL_RCC_OscConfig+0x254>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8005bf2:	4b15      	ldr	r3, [pc, #84]	; (8005c48 <HAL_RCC_OscConfig+0x27c>)
 8005bf4:	2201      	movs	r2, #1
 8005bf6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005bf8:	f7fc f8a4 	bl	8001d44 <HAL_GetTick>
 8005bfc:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005bfe:	e008      	b.n	8005c12 <HAL_RCC_OscConfig+0x246>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8005c00:	f7fc f8a0 	bl	8001d44 <HAL_GetTick>
 8005c04:	4602      	mov	r2, r0
 8005c06:	693b      	ldr	r3, [r7, #16]
 8005c08:	1ad3      	subs	r3, r2, r3
 8005c0a:	2b02      	cmp	r3, #2
 8005c0c:	d901      	bls.n	8005c12 <HAL_RCC_OscConfig+0x246>
        {
          return HAL_TIMEOUT;
 8005c0e:	2303      	movs	r3, #3
 8005c10:	e173      	b.n	8005efa <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005c12:	4b0b      	ldr	r3, [pc, #44]	; (8005c40 <HAL_RCC_OscConfig+0x274>)
 8005c14:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005c16:	f003 0302 	and.w	r3, r3, #2
 8005c1a:	2b00      	cmp	r3, #0
 8005c1c:	d0f0      	beq.n	8005c00 <HAL_RCC_OscConfig+0x234>
 8005c1e:	e01b      	b.n	8005c58 <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8005c20:	4b09      	ldr	r3, [pc, #36]	; (8005c48 <HAL_RCC_OscConfig+0x27c>)
 8005c22:	2200      	movs	r2, #0
 8005c24:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005c26:	f7fc f88d 	bl	8001d44 <HAL_GetTick>
 8005c2a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005c2c:	e00e      	b.n	8005c4c <HAL_RCC_OscConfig+0x280>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8005c2e:	f7fc f889 	bl	8001d44 <HAL_GetTick>
 8005c32:	4602      	mov	r2, r0
 8005c34:	693b      	ldr	r3, [r7, #16]
 8005c36:	1ad3      	subs	r3, r2, r3
 8005c38:	2b02      	cmp	r3, #2
 8005c3a:	d907      	bls.n	8005c4c <HAL_RCC_OscConfig+0x280>
        {
          return HAL_TIMEOUT;
 8005c3c:	2303      	movs	r3, #3
 8005c3e:	e15c      	b.n	8005efa <HAL_RCC_OscConfig+0x52e>
 8005c40:	40023800 	.word	0x40023800
 8005c44:	42470000 	.word	0x42470000
 8005c48:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005c4c:	4b8a      	ldr	r3, [pc, #552]	; (8005e78 <HAL_RCC_OscConfig+0x4ac>)
 8005c4e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005c50:	f003 0302 	and.w	r3, r3, #2
 8005c54:	2b00      	cmp	r3, #0
 8005c56:	d1ea      	bne.n	8005c2e <HAL_RCC_OscConfig+0x262>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8005c58:	687b      	ldr	r3, [r7, #4]
 8005c5a:	681b      	ldr	r3, [r3, #0]
 8005c5c:	f003 0304 	and.w	r3, r3, #4
 8005c60:	2b00      	cmp	r3, #0
 8005c62:	f000 8097 	beq.w	8005d94 <HAL_RCC_OscConfig+0x3c8>
  {
    FlagStatus       pwrclkchanged = RESET;
 8005c66:	2300      	movs	r3, #0
 8005c68:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8005c6a:	4b83      	ldr	r3, [pc, #524]	; (8005e78 <HAL_RCC_OscConfig+0x4ac>)
 8005c6c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005c6e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005c72:	2b00      	cmp	r3, #0
 8005c74:	d10f      	bne.n	8005c96 <HAL_RCC_OscConfig+0x2ca>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005c76:	2300      	movs	r3, #0
 8005c78:	60bb      	str	r3, [r7, #8]
 8005c7a:	4b7f      	ldr	r3, [pc, #508]	; (8005e78 <HAL_RCC_OscConfig+0x4ac>)
 8005c7c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005c7e:	4a7e      	ldr	r2, [pc, #504]	; (8005e78 <HAL_RCC_OscConfig+0x4ac>)
 8005c80:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005c84:	6413      	str	r3, [r2, #64]	; 0x40
 8005c86:	4b7c      	ldr	r3, [pc, #496]	; (8005e78 <HAL_RCC_OscConfig+0x4ac>)
 8005c88:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005c8a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005c8e:	60bb      	str	r3, [r7, #8]
 8005c90:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8005c92:	2301      	movs	r3, #1
 8005c94:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005c96:	4b79      	ldr	r3, [pc, #484]	; (8005e7c <HAL_RCC_OscConfig+0x4b0>)
 8005c98:	681b      	ldr	r3, [r3, #0]
 8005c9a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005c9e:	2b00      	cmp	r3, #0
 8005ca0:	d118      	bne.n	8005cd4 <HAL_RCC_OscConfig+0x308>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8005ca2:	4b76      	ldr	r3, [pc, #472]	; (8005e7c <HAL_RCC_OscConfig+0x4b0>)
 8005ca4:	681b      	ldr	r3, [r3, #0]
 8005ca6:	4a75      	ldr	r2, [pc, #468]	; (8005e7c <HAL_RCC_OscConfig+0x4b0>)
 8005ca8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005cac:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8005cae:	f7fc f849 	bl	8001d44 <HAL_GetTick>
 8005cb2:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005cb4:	e008      	b.n	8005cc8 <HAL_RCC_OscConfig+0x2fc>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005cb6:	f7fc f845 	bl	8001d44 <HAL_GetTick>
 8005cba:	4602      	mov	r2, r0
 8005cbc:	693b      	ldr	r3, [r7, #16]
 8005cbe:	1ad3      	subs	r3, r2, r3
 8005cc0:	2b02      	cmp	r3, #2
 8005cc2:	d901      	bls.n	8005cc8 <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 8005cc4:	2303      	movs	r3, #3
 8005cc6:	e118      	b.n	8005efa <HAL_RCC_OscConfig+0x52e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005cc8:	4b6c      	ldr	r3, [pc, #432]	; (8005e7c <HAL_RCC_OscConfig+0x4b0>)
 8005cca:	681b      	ldr	r3, [r3, #0]
 8005ccc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005cd0:	2b00      	cmp	r3, #0
 8005cd2:	d0f0      	beq.n	8005cb6 <HAL_RCC_OscConfig+0x2ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8005cd4:	687b      	ldr	r3, [r7, #4]
 8005cd6:	689b      	ldr	r3, [r3, #8]
 8005cd8:	2b01      	cmp	r3, #1
 8005cda:	d106      	bne.n	8005cea <HAL_RCC_OscConfig+0x31e>
 8005cdc:	4b66      	ldr	r3, [pc, #408]	; (8005e78 <HAL_RCC_OscConfig+0x4ac>)
 8005cde:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005ce0:	4a65      	ldr	r2, [pc, #404]	; (8005e78 <HAL_RCC_OscConfig+0x4ac>)
 8005ce2:	f043 0301 	orr.w	r3, r3, #1
 8005ce6:	6713      	str	r3, [r2, #112]	; 0x70
 8005ce8:	e01c      	b.n	8005d24 <HAL_RCC_OscConfig+0x358>
 8005cea:	687b      	ldr	r3, [r7, #4]
 8005cec:	689b      	ldr	r3, [r3, #8]
 8005cee:	2b05      	cmp	r3, #5
 8005cf0:	d10c      	bne.n	8005d0c <HAL_RCC_OscConfig+0x340>
 8005cf2:	4b61      	ldr	r3, [pc, #388]	; (8005e78 <HAL_RCC_OscConfig+0x4ac>)
 8005cf4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005cf6:	4a60      	ldr	r2, [pc, #384]	; (8005e78 <HAL_RCC_OscConfig+0x4ac>)
 8005cf8:	f043 0304 	orr.w	r3, r3, #4
 8005cfc:	6713      	str	r3, [r2, #112]	; 0x70
 8005cfe:	4b5e      	ldr	r3, [pc, #376]	; (8005e78 <HAL_RCC_OscConfig+0x4ac>)
 8005d00:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005d02:	4a5d      	ldr	r2, [pc, #372]	; (8005e78 <HAL_RCC_OscConfig+0x4ac>)
 8005d04:	f043 0301 	orr.w	r3, r3, #1
 8005d08:	6713      	str	r3, [r2, #112]	; 0x70
 8005d0a:	e00b      	b.n	8005d24 <HAL_RCC_OscConfig+0x358>
 8005d0c:	4b5a      	ldr	r3, [pc, #360]	; (8005e78 <HAL_RCC_OscConfig+0x4ac>)
 8005d0e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005d10:	4a59      	ldr	r2, [pc, #356]	; (8005e78 <HAL_RCC_OscConfig+0x4ac>)
 8005d12:	f023 0301 	bic.w	r3, r3, #1
 8005d16:	6713      	str	r3, [r2, #112]	; 0x70
 8005d18:	4b57      	ldr	r3, [pc, #348]	; (8005e78 <HAL_RCC_OscConfig+0x4ac>)
 8005d1a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005d1c:	4a56      	ldr	r2, [pc, #344]	; (8005e78 <HAL_RCC_OscConfig+0x4ac>)
 8005d1e:	f023 0304 	bic.w	r3, r3, #4
 8005d22:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8005d24:	687b      	ldr	r3, [r7, #4]
 8005d26:	689b      	ldr	r3, [r3, #8]
 8005d28:	2b00      	cmp	r3, #0
 8005d2a:	d015      	beq.n	8005d58 <HAL_RCC_OscConfig+0x38c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005d2c:	f7fc f80a 	bl	8001d44 <HAL_GetTick>
 8005d30:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005d32:	e00a      	b.n	8005d4a <HAL_RCC_OscConfig+0x37e>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005d34:	f7fc f806 	bl	8001d44 <HAL_GetTick>
 8005d38:	4602      	mov	r2, r0
 8005d3a:	693b      	ldr	r3, [r7, #16]
 8005d3c:	1ad3      	subs	r3, r2, r3
 8005d3e:	f241 3288 	movw	r2, #5000	; 0x1388
 8005d42:	4293      	cmp	r3, r2
 8005d44:	d901      	bls.n	8005d4a <HAL_RCC_OscConfig+0x37e>
        {
          return HAL_TIMEOUT;
 8005d46:	2303      	movs	r3, #3
 8005d48:	e0d7      	b.n	8005efa <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005d4a:	4b4b      	ldr	r3, [pc, #300]	; (8005e78 <HAL_RCC_OscConfig+0x4ac>)
 8005d4c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005d4e:	f003 0302 	and.w	r3, r3, #2
 8005d52:	2b00      	cmp	r3, #0
 8005d54:	d0ee      	beq.n	8005d34 <HAL_RCC_OscConfig+0x368>
 8005d56:	e014      	b.n	8005d82 <HAL_RCC_OscConfig+0x3b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005d58:	f7fb fff4 	bl	8001d44 <HAL_GetTick>
 8005d5c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005d5e:	e00a      	b.n	8005d76 <HAL_RCC_OscConfig+0x3aa>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005d60:	f7fb fff0 	bl	8001d44 <HAL_GetTick>
 8005d64:	4602      	mov	r2, r0
 8005d66:	693b      	ldr	r3, [r7, #16]
 8005d68:	1ad3      	subs	r3, r2, r3
 8005d6a:	f241 3288 	movw	r2, #5000	; 0x1388
 8005d6e:	4293      	cmp	r3, r2
 8005d70:	d901      	bls.n	8005d76 <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 8005d72:	2303      	movs	r3, #3
 8005d74:	e0c1      	b.n	8005efa <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005d76:	4b40      	ldr	r3, [pc, #256]	; (8005e78 <HAL_RCC_OscConfig+0x4ac>)
 8005d78:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005d7a:	f003 0302 	and.w	r3, r3, #2
 8005d7e:	2b00      	cmp	r3, #0
 8005d80:	d1ee      	bne.n	8005d60 <HAL_RCC_OscConfig+0x394>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8005d82:	7dfb      	ldrb	r3, [r7, #23]
 8005d84:	2b01      	cmp	r3, #1
 8005d86:	d105      	bne.n	8005d94 <HAL_RCC_OscConfig+0x3c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005d88:	4b3b      	ldr	r3, [pc, #236]	; (8005e78 <HAL_RCC_OscConfig+0x4ac>)
 8005d8a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005d8c:	4a3a      	ldr	r2, [pc, #232]	; (8005e78 <HAL_RCC_OscConfig+0x4ac>)
 8005d8e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005d92:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8005d94:	687b      	ldr	r3, [r7, #4]
 8005d96:	699b      	ldr	r3, [r3, #24]
 8005d98:	2b00      	cmp	r3, #0
 8005d9a:	f000 80ad 	beq.w	8005ef8 <HAL_RCC_OscConfig+0x52c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8005d9e:	4b36      	ldr	r3, [pc, #216]	; (8005e78 <HAL_RCC_OscConfig+0x4ac>)
 8005da0:	689b      	ldr	r3, [r3, #8]
 8005da2:	f003 030c 	and.w	r3, r3, #12
 8005da6:	2b08      	cmp	r3, #8
 8005da8:	d060      	beq.n	8005e6c <HAL_RCC_OscConfig+0x4a0>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8005daa:	687b      	ldr	r3, [r7, #4]
 8005dac:	699b      	ldr	r3, [r3, #24]
 8005dae:	2b02      	cmp	r3, #2
 8005db0:	d145      	bne.n	8005e3e <HAL_RCC_OscConfig+0x472>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005db2:	4b33      	ldr	r3, [pc, #204]	; (8005e80 <HAL_RCC_OscConfig+0x4b4>)
 8005db4:	2200      	movs	r2, #0
 8005db6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005db8:	f7fb ffc4 	bl	8001d44 <HAL_GetTick>
 8005dbc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005dbe:	e008      	b.n	8005dd2 <HAL_RCC_OscConfig+0x406>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005dc0:	f7fb ffc0 	bl	8001d44 <HAL_GetTick>
 8005dc4:	4602      	mov	r2, r0
 8005dc6:	693b      	ldr	r3, [r7, #16]
 8005dc8:	1ad3      	subs	r3, r2, r3
 8005dca:	2b02      	cmp	r3, #2
 8005dcc:	d901      	bls.n	8005dd2 <HAL_RCC_OscConfig+0x406>
          {
            return HAL_TIMEOUT;
 8005dce:	2303      	movs	r3, #3
 8005dd0:	e093      	b.n	8005efa <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005dd2:	4b29      	ldr	r3, [pc, #164]	; (8005e78 <HAL_RCC_OscConfig+0x4ac>)
 8005dd4:	681b      	ldr	r3, [r3, #0]
 8005dd6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005dda:	2b00      	cmp	r3, #0
 8005ddc:	d1f0      	bne.n	8005dc0 <HAL_RCC_OscConfig+0x3f4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8005dde:	687b      	ldr	r3, [r7, #4]
 8005de0:	69da      	ldr	r2, [r3, #28]
 8005de2:	687b      	ldr	r3, [r7, #4]
 8005de4:	6a1b      	ldr	r3, [r3, #32]
 8005de6:	431a      	orrs	r2, r3
 8005de8:	687b      	ldr	r3, [r7, #4]
 8005dea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005dec:	019b      	lsls	r3, r3, #6
 8005dee:	431a      	orrs	r2, r3
 8005df0:	687b      	ldr	r3, [r7, #4]
 8005df2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005df4:	085b      	lsrs	r3, r3, #1
 8005df6:	3b01      	subs	r3, #1
 8005df8:	041b      	lsls	r3, r3, #16
 8005dfa:	431a      	orrs	r2, r3
 8005dfc:	687b      	ldr	r3, [r7, #4]
 8005dfe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005e00:	061b      	lsls	r3, r3, #24
 8005e02:	431a      	orrs	r2, r3
 8005e04:	687b      	ldr	r3, [r7, #4]
 8005e06:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005e08:	071b      	lsls	r3, r3, #28
 8005e0a:	491b      	ldr	r1, [pc, #108]	; (8005e78 <HAL_RCC_OscConfig+0x4ac>)
 8005e0c:	4313      	orrs	r3, r2
 8005e0e:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8005e10:	4b1b      	ldr	r3, [pc, #108]	; (8005e80 <HAL_RCC_OscConfig+0x4b4>)
 8005e12:	2201      	movs	r2, #1
 8005e14:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005e16:	f7fb ff95 	bl	8001d44 <HAL_GetTick>
 8005e1a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005e1c:	e008      	b.n	8005e30 <HAL_RCC_OscConfig+0x464>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005e1e:	f7fb ff91 	bl	8001d44 <HAL_GetTick>
 8005e22:	4602      	mov	r2, r0
 8005e24:	693b      	ldr	r3, [r7, #16]
 8005e26:	1ad3      	subs	r3, r2, r3
 8005e28:	2b02      	cmp	r3, #2
 8005e2a:	d901      	bls.n	8005e30 <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 8005e2c:	2303      	movs	r3, #3
 8005e2e:	e064      	b.n	8005efa <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005e30:	4b11      	ldr	r3, [pc, #68]	; (8005e78 <HAL_RCC_OscConfig+0x4ac>)
 8005e32:	681b      	ldr	r3, [r3, #0]
 8005e34:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005e38:	2b00      	cmp	r3, #0
 8005e3a:	d0f0      	beq.n	8005e1e <HAL_RCC_OscConfig+0x452>
 8005e3c:	e05c      	b.n	8005ef8 <HAL_RCC_OscConfig+0x52c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005e3e:	4b10      	ldr	r3, [pc, #64]	; (8005e80 <HAL_RCC_OscConfig+0x4b4>)
 8005e40:	2200      	movs	r2, #0
 8005e42:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005e44:	f7fb ff7e 	bl	8001d44 <HAL_GetTick>
 8005e48:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005e4a:	e008      	b.n	8005e5e <HAL_RCC_OscConfig+0x492>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005e4c:	f7fb ff7a 	bl	8001d44 <HAL_GetTick>
 8005e50:	4602      	mov	r2, r0
 8005e52:	693b      	ldr	r3, [r7, #16]
 8005e54:	1ad3      	subs	r3, r2, r3
 8005e56:	2b02      	cmp	r3, #2
 8005e58:	d901      	bls.n	8005e5e <HAL_RCC_OscConfig+0x492>
          {
            return HAL_TIMEOUT;
 8005e5a:	2303      	movs	r3, #3
 8005e5c:	e04d      	b.n	8005efa <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005e5e:	4b06      	ldr	r3, [pc, #24]	; (8005e78 <HAL_RCC_OscConfig+0x4ac>)
 8005e60:	681b      	ldr	r3, [r3, #0]
 8005e62:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005e66:	2b00      	cmp	r3, #0
 8005e68:	d1f0      	bne.n	8005e4c <HAL_RCC_OscConfig+0x480>
 8005e6a:	e045      	b.n	8005ef8 <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8005e6c:	687b      	ldr	r3, [r7, #4]
 8005e6e:	699b      	ldr	r3, [r3, #24]
 8005e70:	2b01      	cmp	r3, #1
 8005e72:	d107      	bne.n	8005e84 <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_ERROR;
 8005e74:	2301      	movs	r3, #1
 8005e76:	e040      	b.n	8005efa <HAL_RCC_OscConfig+0x52e>
 8005e78:	40023800 	.word	0x40023800
 8005e7c:	40007000 	.word	0x40007000
 8005e80:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8005e84:	4b1f      	ldr	r3, [pc, #124]	; (8005f04 <HAL_RCC_OscConfig+0x538>)
 8005e86:	685b      	ldr	r3, [r3, #4]
 8005e88:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8005e8a:	687b      	ldr	r3, [r7, #4]
 8005e8c:	699b      	ldr	r3, [r3, #24]
 8005e8e:	2b01      	cmp	r3, #1
 8005e90:	d030      	beq.n	8005ef4 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005e92:	68fb      	ldr	r3, [r7, #12]
 8005e94:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8005e98:	687b      	ldr	r3, [r7, #4]
 8005e9a:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8005e9c:	429a      	cmp	r2, r3
 8005e9e:	d129      	bne.n	8005ef4 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8005ea0:	68fb      	ldr	r3, [r7, #12]
 8005ea2:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8005ea6:	687b      	ldr	r3, [r7, #4]
 8005ea8:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005eaa:	429a      	cmp	r2, r3
 8005eac:	d122      	bne.n	8005ef4 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8005eae:	68fa      	ldr	r2, [r7, #12]
 8005eb0:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8005eb4:	4013      	ands	r3, r2
 8005eb6:	687a      	ldr	r2, [r7, #4]
 8005eb8:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8005eba:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8005ebc:	4293      	cmp	r3, r2
 8005ebe:	d119      	bne.n	8005ef4 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8005ec0:	68fb      	ldr	r3, [r7, #12]
 8005ec2:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8005ec6:	687b      	ldr	r3, [r7, #4]
 8005ec8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005eca:	085b      	lsrs	r3, r3, #1
 8005ecc:	3b01      	subs	r3, #1
 8005ece:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8005ed0:	429a      	cmp	r2, r3
 8005ed2:	d10f      	bne.n	8005ef4 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8005ed4:	68fb      	ldr	r3, [r7, #12]
 8005ed6:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8005eda:	687b      	ldr	r3, [r7, #4]
 8005edc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005ede:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8005ee0:	429a      	cmp	r2, r3
 8005ee2:	d107      	bne.n	8005ef4 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8005ee4:	68fb      	ldr	r3, [r7, #12]
 8005ee6:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 8005eea:	687b      	ldr	r3, [r7, #4]
 8005eec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005eee:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8005ef0:	429a      	cmp	r2, r3
 8005ef2:	d001      	beq.n	8005ef8 <HAL_RCC_OscConfig+0x52c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
        {
          return HAL_ERROR;
 8005ef4:	2301      	movs	r3, #1
 8005ef6:	e000      	b.n	8005efa <HAL_RCC_OscConfig+0x52e>
        }
      }
    }
  }
  return HAL_OK;
 8005ef8:	2300      	movs	r3, #0
}
 8005efa:	4618      	mov	r0, r3
 8005efc:	3718      	adds	r7, #24
 8005efe:	46bd      	mov	sp, r7
 8005f00:	bd80      	pop	{r7, pc}
 8005f02:	bf00      	nop
 8005f04:	40023800 	.word	0x40023800

08005f08 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8005f08:	b580      	push	{r7, lr}
 8005f0a:	b082      	sub	sp, #8
 8005f0c:	af00      	add	r7, sp, #0
 8005f0e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005f10:	687b      	ldr	r3, [r7, #4]
 8005f12:	2b00      	cmp	r3, #0
 8005f14:	d101      	bne.n	8005f1a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8005f16:	2301      	movs	r3, #1
 8005f18:	e041      	b.n	8005f9e <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005f1a:	687b      	ldr	r3, [r7, #4]
 8005f1c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005f20:	b2db      	uxtb	r3, r3
 8005f22:	2b00      	cmp	r3, #0
 8005f24:	d106      	bne.n	8005f34 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005f26:	687b      	ldr	r3, [r7, #4]
 8005f28:	2200      	movs	r2, #0
 8005f2a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8005f2e:	6878      	ldr	r0, [r7, #4]
 8005f30:	f7fb fb3e 	bl	80015b0 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005f34:	687b      	ldr	r3, [r7, #4]
 8005f36:	2202      	movs	r2, #2
 8005f38:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005f3c:	687b      	ldr	r3, [r7, #4]
 8005f3e:	681a      	ldr	r2, [r3, #0]
 8005f40:	687b      	ldr	r3, [r7, #4]
 8005f42:	3304      	adds	r3, #4
 8005f44:	4619      	mov	r1, r3
 8005f46:	4610      	mov	r0, r2
 8005f48:	f000 fbbe 	bl	80066c8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005f4c:	687b      	ldr	r3, [r7, #4]
 8005f4e:	2201      	movs	r2, #1
 8005f50:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005f54:	687b      	ldr	r3, [r7, #4]
 8005f56:	2201      	movs	r2, #1
 8005f58:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005f5c:	687b      	ldr	r3, [r7, #4]
 8005f5e:	2201      	movs	r2, #1
 8005f60:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005f64:	687b      	ldr	r3, [r7, #4]
 8005f66:	2201      	movs	r2, #1
 8005f68:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005f6c:	687b      	ldr	r3, [r7, #4]
 8005f6e:	2201      	movs	r2, #1
 8005f70:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005f74:	687b      	ldr	r3, [r7, #4]
 8005f76:	2201      	movs	r2, #1
 8005f78:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8005f7c:	687b      	ldr	r3, [r7, #4]
 8005f7e:	2201      	movs	r2, #1
 8005f80:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8005f84:	687b      	ldr	r3, [r7, #4]
 8005f86:	2201      	movs	r2, #1
 8005f88:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005f8c:	687b      	ldr	r3, [r7, #4]
 8005f8e:	2201      	movs	r2, #1
 8005f90:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005f94:	687b      	ldr	r3, [r7, #4]
 8005f96:	2201      	movs	r2, #1
 8005f98:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8005f9c:	2300      	movs	r3, #0
}
 8005f9e:	4618      	mov	r0, r3
 8005fa0:	3708      	adds	r7, #8
 8005fa2:	46bd      	mov	sp, r7
 8005fa4:	bd80      	pop	{r7, pc}
	...

08005fa8 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8005fa8:	b480      	push	{r7}
 8005faa:	b085      	sub	sp, #20
 8005fac:	af00      	add	r7, sp, #0
 8005fae:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8005fb0:	687b      	ldr	r3, [r7, #4]
 8005fb2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005fb6:	b2db      	uxtb	r3, r3
 8005fb8:	2b01      	cmp	r3, #1
 8005fba:	d001      	beq.n	8005fc0 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8005fbc:	2301      	movs	r3, #1
 8005fbe:	e04e      	b.n	800605e <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005fc0:	687b      	ldr	r3, [r7, #4]
 8005fc2:	2202      	movs	r2, #2
 8005fc4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8005fc8:	687b      	ldr	r3, [r7, #4]
 8005fca:	681b      	ldr	r3, [r3, #0]
 8005fcc:	68da      	ldr	r2, [r3, #12]
 8005fce:	687b      	ldr	r3, [r7, #4]
 8005fd0:	681b      	ldr	r3, [r3, #0]
 8005fd2:	f042 0201 	orr.w	r2, r2, #1
 8005fd6:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005fd8:	687b      	ldr	r3, [r7, #4]
 8005fda:	681b      	ldr	r3, [r3, #0]
 8005fdc:	4a23      	ldr	r2, [pc, #140]	; (800606c <HAL_TIM_Base_Start_IT+0xc4>)
 8005fde:	4293      	cmp	r3, r2
 8005fe0:	d022      	beq.n	8006028 <HAL_TIM_Base_Start_IT+0x80>
 8005fe2:	687b      	ldr	r3, [r7, #4]
 8005fe4:	681b      	ldr	r3, [r3, #0]
 8005fe6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005fea:	d01d      	beq.n	8006028 <HAL_TIM_Base_Start_IT+0x80>
 8005fec:	687b      	ldr	r3, [r7, #4]
 8005fee:	681b      	ldr	r3, [r3, #0]
 8005ff0:	4a1f      	ldr	r2, [pc, #124]	; (8006070 <HAL_TIM_Base_Start_IT+0xc8>)
 8005ff2:	4293      	cmp	r3, r2
 8005ff4:	d018      	beq.n	8006028 <HAL_TIM_Base_Start_IT+0x80>
 8005ff6:	687b      	ldr	r3, [r7, #4]
 8005ff8:	681b      	ldr	r3, [r3, #0]
 8005ffa:	4a1e      	ldr	r2, [pc, #120]	; (8006074 <HAL_TIM_Base_Start_IT+0xcc>)
 8005ffc:	4293      	cmp	r3, r2
 8005ffe:	d013      	beq.n	8006028 <HAL_TIM_Base_Start_IT+0x80>
 8006000:	687b      	ldr	r3, [r7, #4]
 8006002:	681b      	ldr	r3, [r3, #0]
 8006004:	4a1c      	ldr	r2, [pc, #112]	; (8006078 <HAL_TIM_Base_Start_IT+0xd0>)
 8006006:	4293      	cmp	r3, r2
 8006008:	d00e      	beq.n	8006028 <HAL_TIM_Base_Start_IT+0x80>
 800600a:	687b      	ldr	r3, [r7, #4]
 800600c:	681b      	ldr	r3, [r3, #0]
 800600e:	4a1b      	ldr	r2, [pc, #108]	; (800607c <HAL_TIM_Base_Start_IT+0xd4>)
 8006010:	4293      	cmp	r3, r2
 8006012:	d009      	beq.n	8006028 <HAL_TIM_Base_Start_IT+0x80>
 8006014:	687b      	ldr	r3, [r7, #4]
 8006016:	681b      	ldr	r3, [r3, #0]
 8006018:	4a19      	ldr	r2, [pc, #100]	; (8006080 <HAL_TIM_Base_Start_IT+0xd8>)
 800601a:	4293      	cmp	r3, r2
 800601c:	d004      	beq.n	8006028 <HAL_TIM_Base_Start_IT+0x80>
 800601e:	687b      	ldr	r3, [r7, #4]
 8006020:	681b      	ldr	r3, [r3, #0]
 8006022:	4a18      	ldr	r2, [pc, #96]	; (8006084 <HAL_TIM_Base_Start_IT+0xdc>)
 8006024:	4293      	cmp	r3, r2
 8006026:	d111      	bne.n	800604c <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8006028:	687b      	ldr	r3, [r7, #4]
 800602a:	681b      	ldr	r3, [r3, #0]
 800602c:	689b      	ldr	r3, [r3, #8]
 800602e:	f003 0307 	and.w	r3, r3, #7
 8006032:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006034:	68fb      	ldr	r3, [r7, #12]
 8006036:	2b06      	cmp	r3, #6
 8006038:	d010      	beq.n	800605c <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 800603a:	687b      	ldr	r3, [r7, #4]
 800603c:	681b      	ldr	r3, [r3, #0]
 800603e:	681a      	ldr	r2, [r3, #0]
 8006040:	687b      	ldr	r3, [r7, #4]
 8006042:	681b      	ldr	r3, [r3, #0]
 8006044:	f042 0201 	orr.w	r2, r2, #1
 8006048:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800604a:	e007      	b.n	800605c <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800604c:	687b      	ldr	r3, [r7, #4]
 800604e:	681b      	ldr	r3, [r3, #0]
 8006050:	681a      	ldr	r2, [r3, #0]
 8006052:	687b      	ldr	r3, [r7, #4]
 8006054:	681b      	ldr	r3, [r3, #0]
 8006056:	f042 0201 	orr.w	r2, r2, #1
 800605a:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800605c:	2300      	movs	r3, #0
}
 800605e:	4618      	mov	r0, r3
 8006060:	3714      	adds	r7, #20
 8006062:	46bd      	mov	sp, r7
 8006064:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006068:	4770      	bx	lr
 800606a:	bf00      	nop
 800606c:	40010000 	.word	0x40010000
 8006070:	40000400 	.word	0x40000400
 8006074:	40000800 	.word	0x40000800
 8006078:	40000c00 	.word	0x40000c00
 800607c:	40010400 	.word	0x40010400
 8006080:	40014000 	.word	0x40014000
 8006084:	40001800 	.word	0x40001800

08006088 <HAL_TIM_Base_Stop_IT>:
  * @brief  Stops the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop_IT(TIM_HandleTypeDef *htim)
{
 8006088:	b480      	push	{r7}
 800608a:	b083      	sub	sp, #12
 800608c:	af00      	add	r7, sp, #0
 800608e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the TIM Update interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_UPDATE);
 8006090:	687b      	ldr	r3, [r7, #4]
 8006092:	681b      	ldr	r3, [r3, #0]
 8006094:	68da      	ldr	r2, [r3, #12]
 8006096:	687b      	ldr	r3, [r7, #4]
 8006098:	681b      	ldr	r3, [r3, #0]
 800609a:	f022 0201 	bic.w	r2, r2, #1
 800609e:	60da      	str	r2, [r3, #12]

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 80060a0:	687b      	ldr	r3, [r7, #4]
 80060a2:	681b      	ldr	r3, [r3, #0]
 80060a4:	6a1a      	ldr	r2, [r3, #32]
 80060a6:	f241 1311 	movw	r3, #4369	; 0x1111
 80060aa:	4013      	ands	r3, r2
 80060ac:	2b00      	cmp	r3, #0
 80060ae:	d10f      	bne.n	80060d0 <HAL_TIM_Base_Stop_IT+0x48>
 80060b0:	687b      	ldr	r3, [r7, #4]
 80060b2:	681b      	ldr	r3, [r3, #0]
 80060b4:	6a1a      	ldr	r2, [r3, #32]
 80060b6:	f240 4344 	movw	r3, #1092	; 0x444
 80060ba:	4013      	ands	r3, r2
 80060bc:	2b00      	cmp	r3, #0
 80060be:	d107      	bne.n	80060d0 <HAL_TIM_Base_Stop_IT+0x48>
 80060c0:	687b      	ldr	r3, [r7, #4]
 80060c2:	681b      	ldr	r3, [r3, #0]
 80060c4:	681a      	ldr	r2, [r3, #0]
 80060c6:	687b      	ldr	r3, [r7, #4]
 80060c8:	681b      	ldr	r3, [r3, #0]
 80060ca:	f022 0201 	bic.w	r2, r2, #1
 80060ce:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 80060d0:	687b      	ldr	r3, [r7, #4]
 80060d2:	2201      	movs	r2, #1
 80060d4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 80060d8:	2300      	movs	r3, #0
}
 80060da:	4618      	mov	r0, r3
 80060dc:	370c      	adds	r7, #12
 80060de:	46bd      	mov	sp, r7
 80060e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060e4:	4770      	bx	lr

080060e6 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80060e6:	b580      	push	{r7, lr}
 80060e8:	b082      	sub	sp, #8
 80060ea:	af00      	add	r7, sp, #0
 80060ec:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80060ee:	687b      	ldr	r3, [r7, #4]
 80060f0:	2b00      	cmp	r3, #0
 80060f2:	d101      	bne.n	80060f8 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80060f4:	2301      	movs	r3, #1
 80060f6:	e041      	b.n	800617c <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80060f8:	687b      	ldr	r3, [r7, #4]
 80060fa:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80060fe:	b2db      	uxtb	r3, r3
 8006100:	2b00      	cmp	r3, #0
 8006102:	d106      	bne.n	8006112 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006104:	687b      	ldr	r3, [r7, #4]
 8006106:	2200      	movs	r2, #0
 8006108:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800610c:	6878      	ldr	r0, [r7, #4]
 800610e:	f000 f839 	bl	8006184 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006112:	687b      	ldr	r3, [r7, #4]
 8006114:	2202      	movs	r2, #2
 8006116:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800611a:	687b      	ldr	r3, [r7, #4]
 800611c:	681a      	ldr	r2, [r3, #0]
 800611e:	687b      	ldr	r3, [r7, #4]
 8006120:	3304      	adds	r3, #4
 8006122:	4619      	mov	r1, r3
 8006124:	4610      	mov	r0, r2
 8006126:	f000 facf 	bl	80066c8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800612a:	687b      	ldr	r3, [r7, #4]
 800612c:	2201      	movs	r2, #1
 800612e:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006132:	687b      	ldr	r3, [r7, #4]
 8006134:	2201      	movs	r2, #1
 8006136:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800613a:	687b      	ldr	r3, [r7, #4]
 800613c:	2201      	movs	r2, #1
 800613e:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8006142:	687b      	ldr	r3, [r7, #4]
 8006144:	2201      	movs	r2, #1
 8006146:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800614a:	687b      	ldr	r3, [r7, #4]
 800614c:	2201      	movs	r2, #1
 800614e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006152:	687b      	ldr	r3, [r7, #4]
 8006154:	2201      	movs	r2, #1
 8006156:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800615a:	687b      	ldr	r3, [r7, #4]
 800615c:	2201      	movs	r2, #1
 800615e:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8006162:	687b      	ldr	r3, [r7, #4]
 8006164:	2201      	movs	r2, #1
 8006166:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800616a:	687b      	ldr	r3, [r7, #4]
 800616c:	2201      	movs	r2, #1
 800616e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006172:	687b      	ldr	r3, [r7, #4]
 8006174:	2201      	movs	r2, #1
 8006176:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800617a:	2300      	movs	r3, #0
}
 800617c:	4618      	mov	r0, r3
 800617e:	3708      	adds	r7, #8
 8006180:	46bd      	mov	sp, r7
 8006182:	bd80      	pop	{r7, pc}

08006184 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8006184:	b480      	push	{r7}
 8006186:	b083      	sub	sp, #12
 8006188:	af00      	add	r7, sp, #0
 800618a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 800618c:	bf00      	nop
 800618e:	370c      	adds	r7, #12
 8006190:	46bd      	mov	sp, r7
 8006192:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006196:	4770      	bx	lr

08006198 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8006198:	b580      	push	{r7, lr}
 800619a:	b084      	sub	sp, #16
 800619c:	af00      	add	r7, sp, #0
 800619e:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 80061a0:	687b      	ldr	r3, [r7, #4]
 80061a2:	681b      	ldr	r3, [r3, #0]
 80061a4:	68db      	ldr	r3, [r3, #12]
 80061a6:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 80061a8:	687b      	ldr	r3, [r7, #4]
 80061aa:	681b      	ldr	r3, [r3, #0]
 80061ac:	691b      	ldr	r3, [r3, #16]
 80061ae:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 80061b0:	68bb      	ldr	r3, [r7, #8]
 80061b2:	f003 0302 	and.w	r3, r3, #2
 80061b6:	2b00      	cmp	r3, #0
 80061b8:	d020      	beq.n	80061fc <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 80061ba:	68fb      	ldr	r3, [r7, #12]
 80061bc:	f003 0302 	and.w	r3, r3, #2
 80061c0:	2b00      	cmp	r3, #0
 80061c2:	d01b      	beq.n	80061fc <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 80061c4:	687b      	ldr	r3, [r7, #4]
 80061c6:	681b      	ldr	r3, [r3, #0]
 80061c8:	f06f 0202 	mvn.w	r2, #2
 80061cc:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80061ce:	687b      	ldr	r3, [r7, #4]
 80061d0:	2201      	movs	r2, #1
 80061d2:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80061d4:	687b      	ldr	r3, [r7, #4]
 80061d6:	681b      	ldr	r3, [r3, #0]
 80061d8:	699b      	ldr	r3, [r3, #24]
 80061da:	f003 0303 	and.w	r3, r3, #3
 80061de:	2b00      	cmp	r3, #0
 80061e0:	d003      	beq.n	80061ea <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80061e2:	6878      	ldr	r0, [r7, #4]
 80061e4:	f000 fa5b 	bl	800669e <HAL_TIM_IC_CaptureCallback>
 80061e8:	e005      	b.n	80061f6 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80061ea:	6878      	ldr	r0, [r7, #4]
 80061ec:	f000 fa4d 	bl	800668a <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80061f0:	6878      	ldr	r0, [r7, #4]
 80061f2:	f7fa ffeb 	bl	80011cc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80061f6:	687b      	ldr	r3, [r7, #4]
 80061f8:	2200      	movs	r2, #0
 80061fa:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 80061fc:	68bb      	ldr	r3, [r7, #8]
 80061fe:	f003 0304 	and.w	r3, r3, #4
 8006202:	2b00      	cmp	r3, #0
 8006204:	d020      	beq.n	8006248 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8006206:	68fb      	ldr	r3, [r7, #12]
 8006208:	f003 0304 	and.w	r3, r3, #4
 800620c:	2b00      	cmp	r3, #0
 800620e:	d01b      	beq.n	8006248 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8006210:	687b      	ldr	r3, [r7, #4]
 8006212:	681b      	ldr	r3, [r3, #0]
 8006214:	f06f 0204 	mvn.w	r2, #4
 8006218:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800621a:	687b      	ldr	r3, [r7, #4]
 800621c:	2202      	movs	r2, #2
 800621e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8006220:	687b      	ldr	r3, [r7, #4]
 8006222:	681b      	ldr	r3, [r3, #0]
 8006224:	699b      	ldr	r3, [r3, #24]
 8006226:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800622a:	2b00      	cmp	r3, #0
 800622c:	d003      	beq.n	8006236 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800622e:	6878      	ldr	r0, [r7, #4]
 8006230:	f000 fa35 	bl	800669e <HAL_TIM_IC_CaptureCallback>
 8006234:	e005      	b.n	8006242 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006236:	6878      	ldr	r0, [r7, #4]
 8006238:	f000 fa27 	bl	800668a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800623c:	6878      	ldr	r0, [r7, #4]
 800623e:	f7fa ffc5 	bl	80011cc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006242:	687b      	ldr	r3, [r7, #4]
 8006244:	2200      	movs	r2, #0
 8006246:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8006248:	68bb      	ldr	r3, [r7, #8]
 800624a:	f003 0308 	and.w	r3, r3, #8
 800624e:	2b00      	cmp	r3, #0
 8006250:	d020      	beq.n	8006294 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8006252:	68fb      	ldr	r3, [r7, #12]
 8006254:	f003 0308 	and.w	r3, r3, #8
 8006258:	2b00      	cmp	r3, #0
 800625a:	d01b      	beq.n	8006294 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 800625c:	687b      	ldr	r3, [r7, #4]
 800625e:	681b      	ldr	r3, [r3, #0]
 8006260:	f06f 0208 	mvn.w	r2, #8
 8006264:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8006266:	687b      	ldr	r3, [r7, #4]
 8006268:	2204      	movs	r2, #4
 800626a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800626c:	687b      	ldr	r3, [r7, #4]
 800626e:	681b      	ldr	r3, [r3, #0]
 8006270:	69db      	ldr	r3, [r3, #28]
 8006272:	f003 0303 	and.w	r3, r3, #3
 8006276:	2b00      	cmp	r3, #0
 8006278:	d003      	beq.n	8006282 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800627a:	6878      	ldr	r0, [r7, #4]
 800627c:	f000 fa0f 	bl	800669e <HAL_TIM_IC_CaptureCallback>
 8006280:	e005      	b.n	800628e <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006282:	6878      	ldr	r0, [r7, #4]
 8006284:	f000 fa01 	bl	800668a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006288:	6878      	ldr	r0, [r7, #4]
 800628a:	f7fa ff9f 	bl	80011cc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800628e:	687b      	ldr	r3, [r7, #4]
 8006290:	2200      	movs	r2, #0
 8006292:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8006294:	68bb      	ldr	r3, [r7, #8]
 8006296:	f003 0310 	and.w	r3, r3, #16
 800629a:	2b00      	cmp	r3, #0
 800629c:	d020      	beq.n	80062e0 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 800629e:	68fb      	ldr	r3, [r7, #12]
 80062a0:	f003 0310 	and.w	r3, r3, #16
 80062a4:	2b00      	cmp	r3, #0
 80062a6:	d01b      	beq.n	80062e0 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 80062a8:	687b      	ldr	r3, [r7, #4]
 80062aa:	681b      	ldr	r3, [r3, #0]
 80062ac:	f06f 0210 	mvn.w	r2, #16
 80062b0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80062b2:	687b      	ldr	r3, [r7, #4]
 80062b4:	2208      	movs	r2, #8
 80062b6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80062b8:	687b      	ldr	r3, [r7, #4]
 80062ba:	681b      	ldr	r3, [r3, #0]
 80062bc:	69db      	ldr	r3, [r3, #28]
 80062be:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80062c2:	2b00      	cmp	r3, #0
 80062c4:	d003      	beq.n	80062ce <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80062c6:	6878      	ldr	r0, [r7, #4]
 80062c8:	f000 f9e9 	bl	800669e <HAL_TIM_IC_CaptureCallback>
 80062cc:	e005      	b.n	80062da <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80062ce:	6878      	ldr	r0, [r7, #4]
 80062d0:	f000 f9db 	bl	800668a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80062d4:	6878      	ldr	r0, [r7, #4]
 80062d6:	f7fa ff79 	bl	80011cc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80062da:	687b      	ldr	r3, [r7, #4]
 80062dc:	2200      	movs	r2, #0
 80062de:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 80062e0:	68bb      	ldr	r3, [r7, #8]
 80062e2:	f003 0301 	and.w	r3, r3, #1
 80062e6:	2b00      	cmp	r3, #0
 80062e8:	d00c      	beq.n	8006304 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 80062ea:	68fb      	ldr	r3, [r7, #12]
 80062ec:	f003 0301 	and.w	r3, r3, #1
 80062f0:	2b00      	cmp	r3, #0
 80062f2:	d007      	beq.n	8006304 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 80062f4:	687b      	ldr	r3, [r7, #4]
 80062f6:	681b      	ldr	r3, [r3, #0]
 80062f8:	f06f 0201 	mvn.w	r2, #1
 80062fc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80062fe:	6878      	ldr	r0, [r7, #4]
 8006300:	f7fa ff1e 	bl	8001140 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8006304:	68bb      	ldr	r3, [r7, #8]
 8006306:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800630a:	2b00      	cmp	r3, #0
 800630c:	d00c      	beq.n	8006328 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800630e:	68fb      	ldr	r3, [r7, #12]
 8006310:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006314:	2b00      	cmp	r3, #0
 8006316:	d007      	beq.n	8006328 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 8006318:	687b      	ldr	r3, [r7, #4]
 800631a:	681b      	ldr	r3, [r3, #0]
 800631c:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8006320:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8006322:	6878      	ldr	r0, [r7, #4]
 8006324:	f000 fd9e 	bl	8006e64 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8006328:	68bb      	ldr	r3, [r7, #8]
 800632a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800632e:	2b00      	cmp	r3, #0
 8006330:	d00c      	beq.n	800634c <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8006332:	68fb      	ldr	r3, [r7, #12]
 8006334:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006338:	2b00      	cmp	r3, #0
 800633a:	d007      	beq.n	800634c <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 800633c:	687b      	ldr	r3, [r7, #4]
 800633e:	681b      	ldr	r3, [r3, #0]
 8006340:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8006344:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8006346:	6878      	ldr	r0, [r7, #4]
 8006348:	f000 f9b3 	bl	80066b2 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 800634c:	68bb      	ldr	r3, [r7, #8]
 800634e:	f003 0320 	and.w	r3, r3, #32
 8006352:	2b00      	cmp	r3, #0
 8006354:	d00c      	beq.n	8006370 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8006356:	68fb      	ldr	r3, [r7, #12]
 8006358:	f003 0320 	and.w	r3, r3, #32
 800635c:	2b00      	cmp	r3, #0
 800635e:	d007      	beq.n	8006370 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8006360:	687b      	ldr	r3, [r7, #4]
 8006362:	681b      	ldr	r3, [r3, #0]
 8006364:	f06f 0220 	mvn.w	r2, #32
 8006368:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800636a:	6878      	ldr	r0, [r7, #4]
 800636c:	f000 fd70 	bl	8006e50 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8006370:	bf00      	nop
 8006372:	3710      	adds	r7, #16
 8006374:	46bd      	mov	sp, r7
 8006376:	bd80      	pop	{r7, pc}

08006378 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8006378:	b580      	push	{r7, lr}
 800637a:	b086      	sub	sp, #24
 800637c:	af00      	add	r7, sp, #0
 800637e:	60f8      	str	r0, [r7, #12]
 8006380:	60b9      	str	r1, [r7, #8]
 8006382:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8006384:	2300      	movs	r3, #0
 8006386:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8006388:	68fb      	ldr	r3, [r7, #12]
 800638a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800638e:	2b01      	cmp	r3, #1
 8006390:	d101      	bne.n	8006396 <HAL_TIM_PWM_ConfigChannel+0x1e>
 8006392:	2302      	movs	r3, #2
 8006394:	e0ae      	b.n	80064f4 <HAL_TIM_PWM_ConfigChannel+0x17c>
 8006396:	68fb      	ldr	r3, [r7, #12]
 8006398:	2201      	movs	r2, #1
 800639a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 800639e:	687b      	ldr	r3, [r7, #4]
 80063a0:	2b0c      	cmp	r3, #12
 80063a2:	f200 809f 	bhi.w	80064e4 <HAL_TIM_PWM_ConfigChannel+0x16c>
 80063a6:	a201      	add	r2, pc, #4	; (adr r2, 80063ac <HAL_TIM_PWM_ConfigChannel+0x34>)
 80063a8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80063ac:	080063e1 	.word	0x080063e1
 80063b0:	080064e5 	.word	0x080064e5
 80063b4:	080064e5 	.word	0x080064e5
 80063b8:	080064e5 	.word	0x080064e5
 80063bc:	08006421 	.word	0x08006421
 80063c0:	080064e5 	.word	0x080064e5
 80063c4:	080064e5 	.word	0x080064e5
 80063c8:	080064e5 	.word	0x080064e5
 80063cc:	08006463 	.word	0x08006463
 80063d0:	080064e5 	.word	0x080064e5
 80063d4:	080064e5 	.word	0x080064e5
 80063d8:	080064e5 	.word	0x080064e5
 80063dc:	080064a3 	.word	0x080064a3
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80063e0:	68fb      	ldr	r3, [r7, #12]
 80063e2:	681b      	ldr	r3, [r3, #0]
 80063e4:	68b9      	ldr	r1, [r7, #8]
 80063e6:	4618      	mov	r0, r3
 80063e8:	f000 fa1a 	bl	8006820 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80063ec:	68fb      	ldr	r3, [r7, #12]
 80063ee:	681b      	ldr	r3, [r3, #0]
 80063f0:	699a      	ldr	r2, [r3, #24]
 80063f2:	68fb      	ldr	r3, [r7, #12]
 80063f4:	681b      	ldr	r3, [r3, #0]
 80063f6:	f042 0208 	orr.w	r2, r2, #8
 80063fa:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80063fc:	68fb      	ldr	r3, [r7, #12]
 80063fe:	681b      	ldr	r3, [r3, #0]
 8006400:	699a      	ldr	r2, [r3, #24]
 8006402:	68fb      	ldr	r3, [r7, #12]
 8006404:	681b      	ldr	r3, [r3, #0]
 8006406:	f022 0204 	bic.w	r2, r2, #4
 800640a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800640c:	68fb      	ldr	r3, [r7, #12]
 800640e:	681b      	ldr	r3, [r3, #0]
 8006410:	6999      	ldr	r1, [r3, #24]
 8006412:	68bb      	ldr	r3, [r7, #8]
 8006414:	691a      	ldr	r2, [r3, #16]
 8006416:	68fb      	ldr	r3, [r7, #12]
 8006418:	681b      	ldr	r3, [r3, #0]
 800641a:	430a      	orrs	r2, r1
 800641c:	619a      	str	r2, [r3, #24]
      break;
 800641e:	e064      	b.n	80064ea <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8006420:	68fb      	ldr	r3, [r7, #12]
 8006422:	681b      	ldr	r3, [r3, #0]
 8006424:	68b9      	ldr	r1, [r7, #8]
 8006426:	4618      	mov	r0, r3
 8006428:	f000 fa6a 	bl	8006900 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800642c:	68fb      	ldr	r3, [r7, #12]
 800642e:	681b      	ldr	r3, [r3, #0]
 8006430:	699a      	ldr	r2, [r3, #24]
 8006432:	68fb      	ldr	r3, [r7, #12]
 8006434:	681b      	ldr	r3, [r3, #0]
 8006436:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800643a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800643c:	68fb      	ldr	r3, [r7, #12]
 800643e:	681b      	ldr	r3, [r3, #0]
 8006440:	699a      	ldr	r2, [r3, #24]
 8006442:	68fb      	ldr	r3, [r7, #12]
 8006444:	681b      	ldr	r3, [r3, #0]
 8006446:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800644a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800644c:	68fb      	ldr	r3, [r7, #12]
 800644e:	681b      	ldr	r3, [r3, #0]
 8006450:	6999      	ldr	r1, [r3, #24]
 8006452:	68bb      	ldr	r3, [r7, #8]
 8006454:	691b      	ldr	r3, [r3, #16]
 8006456:	021a      	lsls	r2, r3, #8
 8006458:	68fb      	ldr	r3, [r7, #12]
 800645a:	681b      	ldr	r3, [r3, #0]
 800645c:	430a      	orrs	r2, r1
 800645e:	619a      	str	r2, [r3, #24]
      break;
 8006460:	e043      	b.n	80064ea <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8006462:	68fb      	ldr	r3, [r7, #12]
 8006464:	681b      	ldr	r3, [r3, #0]
 8006466:	68b9      	ldr	r1, [r7, #8]
 8006468:	4618      	mov	r0, r3
 800646a:	f000 fabf 	bl	80069ec <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800646e:	68fb      	ldr	r3, [r7, #12]
 8006470:	681b      	ldr	r3, [r3, #0]
 8006472:	69da      	ldr	r2, [r3, #28]
 8006474:	68fb      	ldr	r3, [r7, #12]
 8006476:	681b      	ldr	r3, [r3, #0]
 8006478:	f042 0208 	orr.w	r2, r2, #8
 800647c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800647e:	68fb      	ldr	r3, [r7, #12]
 8006480:	681b      	ldr	r3, [r3, #0]
 8006482:	69da      	ldr	r2, [r3, #28]
 8006484:	68fb      	ldr	r3, [r7, #12]
 8006486:	681b      	ldr	r3, [r3, #0]
 8006488:	f022 0204 	bic.w	r2, r2, #4
 800648c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800648e:	68fb      	ldr	r3, [r7, #12]
 8006490:	681b      	ldr	r3, [r3, #0]
 8006492:	69d9      	ldr	r1, [r3, #28]
 8006494:	68bb      	ldr	r3, [r7, #8]
 8006496:	691a      	ldr	r2, [r3, #16]
 8006498:	68fb      	ldr	r3, [r7, #12]
 800649a:	681b      	ldr	r3, [r3, #0]
 800649c:	430a      	orrs	r2, r1
 800649e:	61da      	str	r2, [r3, #28]
      break;
 80064a0:	e023      	b.n	80064ea <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80064a2:	68fb      	ldr	r3, [r7, #12]
 80064a4:	681b      	ldr	r3, [r3, #0]
 80064a6:	68b9      	ldr	r1, [r7, #8]
 80064a8:	4618      	mov	r0, r3
 80064aa:	f000 fb13 	bl	8006ad4 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80064ae:	68fb      	ldr	r3, [r7, #12]
 80064b0:	681b      	ldr	r3, [r3, #0]
 80064b2:	69da      	ldr	r2, [r3, #28]
 80064b4:	68fb      	ldr	r3, [r7, #12]
 80064b6:	681b      	ldr	r3, [r3, #0]
 80064b8:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80064bc:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80064be:	68fb      	ldr	r3, [r7, #12]
 80064c0:	681b      	ldr	r3, [r3, #0]
 80064c2:	69da      	ldr	r2, [r3, #28]
 80064c4:	68fb      	ldr	r3, [r7, #12]
 80064c6:	681b      	ldr	r3, [r3, #0]
 80064c8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80064cc:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80064ce:	68fb      	ldr	r3, [r7, #12]
 80064d0:	681b      	ldr	r3, [r3, #0]
 80064d2:	69d9      	ldr	r1, [r3, #28]
 80064d4:	68bb      	ldr	r3, [r7, #8]
 80064d6:	691b      	ldr	r3, [r3, #16]
 80064d8:	021a      	lsls	r2, r3, #8
 80064da:	68fb      	ldr	r3, [r7, #12]
 80064dc:	681b      	ldr	r3, [r3, #0]
 80064de:	430a      	orrs	r2, r1
 80064e0:	61da      	str	r2, [r3, #28]
      break;
 80064e2:	e002      	b.n	80064ea <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 80064e4:	2301      	movs	r3, #1
 80064e6:	75fb      	strb	r3, [r7, #23]
      break;
 80064e8:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 80064ea:	68fb      	ldr	r3, [r7, #12]
 80064ec:	2200      	movs	r2, #0
 80064ee:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80064f2:	7dfb      	ldrb	r3, [r7, #23]
}
 80064f4:	4618      	mov	r0, r3
 80064f6:	3718      	adds	r7, #24
 80064f8:	46bd      	mov	sp, r7
 80064fa:	bd80      	pop	{r7, pc}

080064fc <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80064fc:	b580      	push	{r7, lr}
 80064fe:	b084      	sub	sp, #16
 8006500:	af00      	add	r7, sp, #0
 8006502:	6078      	str	r0, [r7, #4]
 8006504:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8006506:	2300      	movs	r3, #0
 8006508:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800650a:	687b      	ldr	r3, [r7, #4]
 800650c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006510:	2b01      	cmp	r3, #1
 8006512:	d101      	bne.n	8006518 <HAL_TIM_ConfigClockSource+0x1c>
 8006514:	2302      	movs	r3, #2
 8006516:	e0b4      	b.n	8006682 <HAL_TIM_ConfigClockSource+0x186>
 8006518:	687b      	ldr	r3, [r7, #4]
 800651a:	2201      	movs	r2, #1
 800651c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8006520:	687b      	ldr	r3, [r7, #4]
 8006522:	2202      	movs	r2, #2
 8006524:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8006528:	687b      	ldr	r3, [r7, #4]
 800652a:	681b      	ldr	r3, [r3, #0]
 800652c:	689b      	ldr	r3, [r3, #8]
 800652e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8006530:	68bb      	ldr	r3, [r7, #8]
 8006532:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8006536:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006538:	68bb      	ldr	r3, [r7, #8]
 800653a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800653e:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8006540:	687b      	ldr	r3, [r7, #4]
 8006542:	681b      	ldr	r3, [r3, #0]
 8006544:	68ba      	ldr	r2, [r7, #8]
 8006546:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8006548:	683b      	ldr	r3, [r7, #0]
 800654a:	681b      	ldr	r3, [r3, #0]
 800654c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006550:	d03e      	beq.n	80065d0 <HAL_TIM_ConfigClockSource+0xd4>
 8006552:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006556:	f200 8087 	bhi.w	8006668 <HAL_TIM_ConfigClockSource+0x16c>
 800655a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800655e:	f000 8086 	beq.w	800666e <HAL_TIM_ConfigClockSource+0x172>
 8006562:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006566:	d87f      	bhi.n	8006668 <HAL_TIM_ConfigClockSource+0x16c>
 8006568:	2b70      	cmp	r3, #112	; 0x70
 800656a:	d01a      	beq.n	80065a2 <HAL_TIM_ConfigClockSource+0xa6>
 800656c:	2b70      	cmp	r3, #112	; 0x70
 800656e:	d87b      	bhi.n	8006668 <HAL_TIM_ConfigClockSource+0x16c>
 8006570:	2b60      	cmp	r3, #96	; 0x60
 8006572:	d050      	beq.n	8006616 <HAL_TIM_ConfigClockSource+0x11a>
 8006574:	2b60      	cmp	r3, #96	; 0x60
 8006576:	d877      	bhi.n	8006668 <HAL_TIM_ConfigClockSource+0x16c>
 8006578:	2b50      	cmp	r3, #80	; 0x50
 800657a:	d03c      	beq.n	80065f6 <HAL_TIM_ConfigClockSource+0xfa>
 800657c:	2b50      	cmp	r3, #80	; 0x50
 800657e:	d873      	bhi.n	8006668 <HAL_TIM_ConfigClockSource+0x16c>
 8006580:	2b40      	cmp	r3, #64	; 0x40
 8006582:	d058      	beq.n	8006636 <HAL_TIM_ConfigClockSource+0x13a>
 8006584:	2b40      	cmp	r3, #64	; 0x40
 8006586:	d86f      	bhi.n	8006668 <HAL_TIM_ConfigClockSource+0x16c>
 8006588:	2b30      	cmp	r3, #48	; 0x30
 800658a:	d064      	beq.n	8006656 <HAL_TIM_ConfigClockSource+0x15a>
 800658c:	2b30      	cmp	r3, #48	; 0x30
 800658e:	d86b      	bhi.n	8006668 <HAL_TIM_ConfigClockSource+0x16c>
 8006590:	2b20      	cmp	r3, #32
 8006592:	d060      	beq.n	8006656 <HAL_TIM_ConfigClockSource+0x15a>
 8006594:	2b20      	cmp	r3, #32
 8006596:	d867      	bhi.n	8006668 <HAL_TIM_ConfigClockSource+0x16c>
 8006598:	2b00      	cmp	r3, #0
 800659a:	d05c      	beq.n	8006656 <HAL_TIM_ConfigClockSource+0x15a>
 800659c:	2b10      	cmp	r3, #16
 800659e:	d05a      	beq.n	8006656 <HAL_TIM_ConfigClockSource+0x15a>
 80065a0:	e062      	b.n	8006668 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80065a2:	687b      	ldr	r3, [r7, #4]
 80065a4:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80065a6:	683b      	ldr	r3, [r7, #0]
 80065a8:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80065aa:	683b      	ldr	r3, [r7, #0]
 80065ac:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80065ae:	683b      	ldr	r3, [r7, #0]
 80065b0:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80065b2:	f000 fb5f 	bl	8006c74 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80065b6:	687b      	ldr	r3, [r7, #4]
 80065b8:	681b      	ldr	r3, [r3, #0]
 80065ba:	689b      	ldr	r3, [r3, #8]
 80065bc:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80065be:	68bb      	ldr	r3, [r7, #8]
 80065c0:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80065c4:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80065c6:	687b      	ldr	r3, [r7, #4]
 80065c8:	681b      	ldr	r3, [r3, #0]
 80065ca:	68ba      	ldr	r2, [r7, #8]
 80065cc:	609a      	str	r2, [r3, #8]
      break;
 80065ce:	e04f      	b.n	8006670 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80065d0:	687b      	ldr	r3, [r7, #4]
 80065d2:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80065d4:	683b      	ldr	r3, [r7, #0]
 80065d6:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80065d8:	683b      	ldr	r3, [r7, #0]
 80065da:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80065dc:	683b      	ldr	r3, [r7, #0]
 80065de:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80065e0:	f000 fb48 	bl	8006c74 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80065e4:	687b      	ldr	r3, [r7, #4]
 80065e6:	681b      	ldr	r3, [r3, #0]
 80065e8:	689a      	ldr	r2, [r3, #8]
 80065ea:	687b      	ldr	r3, [r7, #4]
 80065ec:	681b      	ldr	r3, [r3, #0]
 80065ee:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80065f2:	609a      	str	r2, [r3, #8]
      break;
 80065f4:	e03c      	b.n	8006670 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80065f6:	687b      	ldr	r3, [r7, #4]
 80065f8:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80065fa:	683b      	ldr	r3, [r7, #0]
 80065fc:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80065fe:	683b      	ldr	r3, [r7, #0]
 8006600:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8006602:	461a      	mov	r2, r3
 8006604:	f000 fabc 	bl	8006b80 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8006608:	687b      	ldr	r3, [r7, #4]
 800660a:	681b      	ldr	r3, [r3, #0]
 800660c:	2150      	movs	r1, #80	; 0x50
 800660e:	4618      	mov	r0, r3
 8006610:	f000 fb15 	bl	8006c3e <TIM_ITRx_SetConfig>
      break;
 8006614:	e02c      	b.n	8006670 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8006616:	687b      	ldr	r3, [r7, #4]
 8006618:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800661a:	683b      	ldr	r3, [r7, #0]
 800661c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800661e:	683b      	ldr	r3, [r7, #0]
 8006620:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8006622:	461a      	mov	r2, r3
 8006624:	f000 fadb 	bl	8006bde <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8006628:	687b      	ldr	r3, [r7, #4]
 800662a:	681b      	ldr	r3, [r3, #0]
 800662c:	2160      	movs	r1, #96	; 0x60
 800662e:	4618      	mov	r0, r3
 8006630:	f000 fb05 	bl	8006c3e <TIM_ITRx_SetConfig>
      break;
 8006634:	e01c      	b.n	8006670 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8006636:	687b      	ldr	r3, [r7, #4]
 8006638:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800663a:	683b      	ldr	r3, [r7, #0]
 800663c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800663e:	683b      	ldr	r3, [r7, #0]
 8006640:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8006642:	461a      	mov	r2, r3
 8006644:	f000 fa9c 	bl	8006b80 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8006648:	687b      	ldr	r3, [r7, #4]
 800664a:	681b      	ldr	r3, [r3, #0]
 800664c:	2140      	movs	r1, #64	; 0x40
 800664e:	4618      	mov	r0, r3
 8006650:	f000 faf5 	bl	8006c3e <TIM_ITRx_SetConfig>
      break;
 8006654:	e00c      	b.n	8006670 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8006656:	687b      	ldr	r3, [r7, #4]
 8006658:	681a      	ldr	r2, [r3, #0]
 800665a:	683b      	ldr	r3, [r7, #0]
 800665c:	681b      	ldr	r3, [r3, #0]
 800665e:	4619      	mov	r1, r3
 8006660:	4610      	mov	r0, r2
 8006662:	f000 faec 	bl	8006c3e <TIM_ITRx_SetConfig>
      break;
 8006666:	e003      	b.n	8006670 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8006668:	2301      	movs	r3, #1
 800666a:	73fb      	strb	r3, [r7, #15]
      break;
 800666c:	e000      	b.n	8006670 <HAL_TIM_ConfigClockSource+0x174>
      break;
 800666e:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8006670:	687b      	ldr	r3, [r7, #4]
 8006672:	2201      	movs	r2, #1
 8006674:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8006678:	687b      	ldr	r3, [r7, #4]
 800667a:	2200      	movs	r2, #0
 800667c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8006680:	7bfb      	ldrb	r3, [r7, #15]
}
 8006682:	4618      	mov	r0, r3
 8006684:	3710      	adds	r7, #16
 8006686:	46bd      	mov	sp, r7
 8006688:	bd80      	pop	{r7, pc}

0800668a <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800668a:	b480      	push	{r7}
 800668c:	b083      	sub	sp, #12
 800668e:	af00      	add	r7, sp, #0
 8006690:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8006692:	bf00      	nop
 8006694:	370c      	adds	r7, #12
 8006696:	46bd      	mov	sp, r7
 8006698:	f85d 7b04 	ldr.w	r7, [sp], #4
 800669c:	4770      	bx	lr

0800669e <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800669e:	b480      	push	{r7}
 80066a0:	b083      	sub	sp, #12
 80066a2:	af00      	add	r7, sp, #0
 80066a4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80066a6:	bf00      	nop
 80066a8:	370c      	adds	r7, #12
 80066aa:	46bd      	mov	sp, r7
 80066ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066b0:	4770      	bx	lr

080066b2 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80066b2:	b480      	push	{r7}
 80066b4:	b083      	sub	sp, #12
 80066b6:	af00      	add	r7, sp, #0
 80066b8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80066ba:	bf00      	nop
 80066bc:	370c      	adds	r7, #12
 80066be:	46bd      	mov	sp, r7
 80066c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066c4:	4770      	bx	lr
	...

080066c8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80066c8:	b480      	push	{r7}
 80066ca:	b085      	sub	sp, #20
 80066cc:	af00      	add	r7, sp, #0
 80066ce:	6078      	str	r0, [r7, #4]
 80066d0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80066d2:	687b      	ldr	r3, [r7, #4]
 80066d4:	681b      	ldr	r3, [r3, #0]
 80066d6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80066d8:	687b      	ldr	r3, [r7, #4]
 80066da:	4a46      	ldr	r2, [pc, #280]	; (80067f4 <TIM_Base_SetConfig+0x12c>)
 80066dc:	4293      	cmp	r3, r2
 80066de:	d013      	beq.n	8006708 <TIM_Base_SetConfig+0x40>
 80066e0:	687b      	ldr	r3, [r7, #4]
 80066e2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80066e6:	d00f      	beq.n	8006708 <TIM_Base_SetConfig+0x40>
 80066e8:	687b      	ldr	r3, [r7, #4]
 80066ea:	4a43      	ldr	r2, [pc, #268]	; (80067f8 <TIM_Base_SetConfig+0x130>)
 80066ec:	4293      	cmp	r3, r2
 80066ee:	d00b      	beq.n	8006708 <TIM_Base_SetConfig+0x40>
 80066f0:	687b      	ldr	r3, [r7, #4]
 80066f2:	4a42      	ldr	r2, [pc, #264]	; (80067fc <TIM_Base_SetConfig+0x134>)
 80066f4:	4293      	cmp	r3, r2
 80066f6:	d007      	beq.n	8006708 <TIM_Base_SetConfig+0x40>
 80066f8:	687b      	ldr	r3, [r7, #4]
 80066fa:	4a41      	ldr	r2, [pc, #260]	; (8006800 <TIM_Base_SetConfig+0x138>)
 80066fc:	4293      	cmp	r3, r2
 80066fe:	d003      	beq.n	8006708 <TIM_Base_SetConfig+0x40>
 8006700:	687b      	ldr	r3, [r7, #4]
 8006702:	4a40      	ldr	r2, [pc, #256]	; (8006804 <TIM_Base_SetConfig+0x13c>)
 8006704:	4293      	cmp	r3, r2
 8006706:	d108      	bne.n	800671a <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8006708:	68fb      	ldr	r3, [r7, #12]
 800670a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800670e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8006710:	683b      	ldr	r3, [r7, #0]
 8006712:	685b      	ldr	r3, [r3, #4]
 8006714:	68fa      	ldr	r2, [r7, #12]
 8006716:	4313      	orrs	r3, r2
 8006718:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800671a:	687b      	ldr	r3, [r7, #4]
 800671c:	4a35      	ldr	r2, [pc, #212]	; (80067f4 <TIM_Base_SetConfig+0x12c>)
 800671e:	4293      	cmp	r3, r2
 8006720:	d02b      	beq.n	800677a <TIM_Base_SetConfig+0xb2>
 8006722:	687b      	ldr	r3, [r7, #4]
 8006724:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006728:	d027      	beq.n	800677a <TIM_Base_SetConfig+0xb2>
 800672a:	687b      	ldr	r3, [r7, #4]
 800672c:	4a32      	ldr	r2, [pc, #200]	; (80067f8 <TIM_Base_SetConfig+0x130>)
 800672e:	4293      	cmp	r3, r2
 8006730:	d023      	beq.n	800677a <TIM_Base_SetConfig+0xb2>
 8006732:	687b      	ldr	r3, [r7, #4]
 8006734:	4a31      	ldr	r2, [pc, #196]	; (80067fc <TIM_Base_SetConfig+0x134>)
 8006736:	4293      	cmp	r3, r2
 8006738:	d01f      	beq.n	800677a <TIM_Base_SetConfig+0xb2>
 800673a:	687b      	ldr	r3, [r7, #4]
 800673c:	4a30      	ldr	r2, [pc, #192]	; (8006800 <TIM_Base_SetConfig+0x138>)
 800673e:	4293      	cmp	r3, r2
 8006740:	d01b      	beq.n	800677a <TIM_Base_SetConfig+0xb2>
 8006742:	687b      	ldr	r3, [r7, #4]
 8006744:	4a2f      	ldr	r2, [pc, #188]	; (8006804 <TIM_Base_SetConfig+0x13c>)
 8006746:	4293      	cmp	r3, r2
 8006748:	d017      	beq.n	800677a <TIM_Base_SetConfig+0xb2>
 800674a:	687b      	ldr	r3, [r7, #4]
 800674c:	4a2e      	ldr	r2, [pc, #184]	; (8006808 <TIM_Base_SetConfig+0x140>)
 800674e:	4293      	cmp	r3, r2
 8006750:	d013      	beq.n	800677a <TIM_Base_SetConfig+0xb2>
 8006752:	687b      	ldr	r3, [r7, #4]
 8006754:	4a2d      	ldr	r2, [pc, #180]	; (800680c <TIM_Base_SetConfig+0x144>)
 8006756:	4293      	cmp	r3, r2
 8006758:	d00f      	beq.n	800677a <TIM_Base_SetConfig+0xb2>
 800675a:	687b      	ldr	r3, [r7, #4]
 800675c:	4a2c      	ldr	r2, [pc, #176]	; (8006810 <TIM_Base_SetConfig+0x148>)
 800675e:	4293      	cmp	r3, r2
 8006760:	d00b      	beq.n	800677a <TIM_Base_SetConfig+0xb2>
 8006762:	687b      	ldr	r3, [r7, #4]
 8006764:	4a2b      	ldr	r2, [pc, #172]	; (8006814 <TIM_Base_SetConfig+0x14c>)
 8006766:	4293      	cmp	r3, r2
 8006768:	d007      	beq.n	800677a <TIM_Base_SetConfig+0xb2>
 800676a:	687b      	ldr	r3, [r7, #4]
 800676c:	4a2a      	ldr	r2, [pc, #168]	; (8006818 <TIM_Base_SetConfig+0x150>)
 800676e:	4293      	cmp	r3, r2
 8006770:	d003      	beq.n	800677a <TIM_Base_SetConfig+0xb2>
 8006772:	687b      	ldr	r3, [r7, #4]
 8006774:	4a29      	ldr	r2, [pc, #164]	; (800681c <TIM_Base_SetConfig+0x154>)
 8006776:	4293      	cmp	r3, r2
 8006778:	d108      	bne.n	800678c <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800677a:	68fb      	ldr	r3, [r7, #12]
 800677c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006780:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8006782:	683b      	ldr	r3, [r7, #0]
 8006784:	68db      	ldr	r3, [r3, #12]
 8006786:	68fa      	ldr	r2, [r7, #12]
 8006788:	4313      	orrs	r3, r2
 800678a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800678c:	68fb      	ldr	r3, [r7, #12]
 800678e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8006792:	683b      	ldr	r3, [r7, #0]
 8006794:	695b      	ldr	r3, [r3, #20]
 8006796:	4313      	orrs	r3, r2
 8006798:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800679a:	687b      	ldr	r3, [r7, #4]
 800679c:	68fa      	ldr	r2, [r7, #12]
 800679e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80067a0:	683b      	ldr	r3, [r7, #0]
 80067a2:	689a      	ldr	r2, [r3, #8]
 80067a4:	687b      	ldr	r3, [r7, #4]
 80067a6:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80067a8:	683b      	ldr	r3, [r7, #0]
 80067aa:	681a      	ldr	r2, [r3, #0]
 80067ac:	687b      	ldr	r3, [r7, #4]
 80067ae:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80067b0:	687b      	ldr	r3, [r7, #4]
 80067b2:	4a10      	ldr	r2, [pc, #64]	; (80067f4 <TIM_Base_SetConfig+0x12c>)
 80067b4:	4293      	cmp	r3, r2
 80067b6:	d003      	beq.n	80067c0 <TIM_Base_SetConfig+0xf8>
 80067b8:	687b      	ldr	r3, [r7, #4]
 80067ba:	4a12      	ldr	r2, [pc, #72]	; (8006804 <TIM_Base_SetConfig+0x13c>)
 80067bc:	4293      	cmp	r3, r2
 80067be:	d103      	bne.n	80067c8 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80067c0:	683b      	ldr	r3, [r7, #0]
 80067c2:	691a      	ldr	r2, [r3, #16]
 80067c4:	687b      	ldr	r3, [r7, #4]
 80067c6:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80067c8:	687b      	ldr	r3, [r7, #4]
 80067ca:	2201      	movs	r2, #1
 80067cc:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 80067ce:	687b      	ldr	r3, [r7, #4]
 80067d0:	691b      	ldr	r3, [r3, #16]
 80067d2:	f003 0301 	and.w	r3, r3, #1
 80067d6:	2b01      	cmp	r3, #1
 80067d8:	d105      	bne.n	80067e6 <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 80067da:	687b      	ldr	r3, [r7, #4]
 80067dc:	691b      	ldr	r3, [r3, #16]
 80067de:	f023 0201 	bic.w	r2, r3, #1
 80067e2:	687b      	ldr	r3, [r7, #4]
 80067e4:	611a      	str	r2, [r3, #16]
  }
}
 80067e6:	bf00      	nop
 80067e8:	3714      	adds	r7, #20
 80067ea:	46bd      	mov	sp, r7
 80067ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067f0:	4770      	bx	lr
 80067f2:	bf00      	nop
 80067f4:	40010000 	.word	0x40010000
 80067f8:	40000400 	.word	0x40000400
 80067fc:	40000800 	.word	0x40000800
 8006800:	40000c00 	.word	0x40000c00
 8006804:	40010400 	.word	0x40010400
 8006808:	40014000 	.word	0x40014000
 800680c:	40014400 	.word	0x40014400
 8006810:	40014800 	.word	0x40014800
 8006814:	40001800 	.word	0x40001800
 8006818:	40001c00 	.word	0x40001c00
 800681c:	40002000 	.word	0x40002000

08006820 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8006820:	b480      	push	{r7}
 8006822:	b087      	sub	sp, #28
 8006824:	af00      	add	r7, sp, #0
 8006826:	6078      	str	r0, [r7, #4]
 8006828:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800682a:	687b      	ldr	r3, [r7, #4]
 800682c:	6a1b      	ldr	r3, [r3, #32]
 800682e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8006830:	687b      	ldr	r3, [r7, #4]
 8006832:	6a1b      	ldr	r3, [r3, #32]
 8006834:	f023 0201 	bic.w	r2, r3, #1
 8006838:	687b      	ldr	r3, [r7, #4]
 800683a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800683c:	687b      	ldr	r3, [r7, #4]
 800683e:	685b      	ldr	r3, [r3, #4]
 8006840:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8006842:	687b      	ldr	r3, [r7, #4]
 8006844:	699b      	ldr	r3, [r3, #24]
 8006846:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8006848:	68fb      	ldr	r3, [r7, #12]
 800684a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800684e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8006850:	68fb      	ldr	r3, [r7, #12]
 8006852:	f023 0303 	bic.w	r3, r3, #3
 8006856:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006858:	683b      	ldr	r3, [r7, #0]
 800685a:	681b      	ldr	r3, [r3, #0]
 800685c:	68fa      	ldr	r2, [r7, #12]
 800685e:	4313      	orrs	r3, r2
 8006860:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8006862:	697b      	ldr	r3, [r7, #20]
 8006864:	f023 0302 	bic.w	r3, r3, #2
 8006868:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800686a:	683b      	ldr	r3, [r7, #0]
 800686c:	689b      	ldr	r3, [r3, #8]
 800686e:	697a      	ldr	r2, [r7, #20]
 8006870:	4313      	orrs	r3, r2
 8006872:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8006874:	687b      	ldr	r3, [r7, #4]
 8006876:	4a20      	ldr	r2, [pc, #128]	; (80068f8 <TIM_OC1_SetConfig+0xd8>)
 8006878:	4293      	cmp	r3, r2
 800687a:	d003      	beq.n	8006884 <TIM_OC1_SetConfig+0x64>
 800687c:	687b      	ldr	r3, [r7, #4]
 800687e:	4a1f      	ldr	r2, [pc, #124]	; (80068fc <TIM_OC1_SetConfig+0xdc>)
 8006880:	4293      	cmp	r3, r2
 8006882:	d10c      	bne.n	800689e <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8006884:	697b      	ldr	r3, [r7, #20]
 8006886:	f023 0308 	bic.w	r3, r3, #8
 800688a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800688c:	683b      	ldr	r3, [r7, #0]
 800688e:	68db      	ldr	r3, [r3, #12]
 8006890:	697a      	ldr	r2, [r7, #20]
 8006892:	4313      	orrs	r3, r2
 8006894:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8006896:	697b      	ldr	r3, [r7, #20]
 8006898:	f023 0304 	bic.w	r3, r3, #4
 800689c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800689e:	687b      	ldr	r3, [r7, #4]
 80068a0:	4a15      	ldr	r2, [pc, #84]	; (80068f8 <TIM_OC1_SetConfig+0xd8>)
 80068a2:	4293      	cmp	r3, r2
 80068a4:	d003      	beq.n	80068ae <TIM_OC1_SetConfig+0x8e>
 80068a6:	687b      	ldr	r3, [r7, #4]
 80068a8:	4a14      	ldr	r2, [pc, #80]	; (80068fc <TIM_OC1_SetConfig+0xdc>)
 80068aa:	4293      	cmp	r3, r2
 80068ac:	d111      	bne.n	80068d2 <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80068ae:	693b      	ldr	r3, [r7, #16]
 80068b0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80068b4:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80068b6:	693b      	ldr	r3, [r7, #16]
 80068b8:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80068bc:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80068be:	683b      	ldr	r3, [r7, #0]
 80068c0:	695b      	ldr	r3, [r3, #20]
 80068c2:	693a      	ldr	r2, [r7, #16]
 80068c4:	4313      	orrs	r3, r2
 80068c6:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80068c8:	683b      	ldr	r3, [r7, #0]
 80068ca:	699b      	ldr	r3, [r3, #24]
 80068cc:	693a      	ldr	r2, [r7, #16]
 80068ce:	4313      	orrs	r3, r2
 80068d0:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80068d2:	687b      	ldr	r3, [r7, #4]
 80068d4:	693a      	ldr	r2, [r7, #16]
 80068d6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80068d8:	687b      	ldr	r3, [r7, #4]
 80068da:	68fa      	ldr	r2, [r7, #12]
 80068dc:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80068de:	683b      	ldr	r3, [r7, #0]
 80068e0:	685a      	ldr	r2, [r3, #4]
 80068e2:	687b      	ldr	r3, [r7, #4]
 80068e4:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80068e6:	687b      	ldr	r3, [r7, #4]
 80068e8:	697a      	ldr	r2, [r7, #20]
 80068ea:	621a      	str	r2, [r3, #32]
}
 80068ec:	bf00      	nop
 80068ee:	371c      	adds	r7, #28
 80068f0:	46bd      	mov	sp, r7
 80068f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068f6:	4770      	bx	lr
 80068f8:	40010000 	.word	0x40010000
 80068fc:	40010400 	.word	0x40010400

08006900 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8006900:	b480      	push	{r7}
 8006902:	b087      	sub	sp, #28
 8006904:	af00      	add	r7, sp, #0
 8006906:	6078      	str	r0, [r7, #4]
 8006908:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800690a:	687b      	ldr	r3, [r7, #4]
 800690c:	6a1b      	ldr	r3, [r3, #32]
 800690e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006910:	687b      	ldr	r3, [r7, #4]
 8006912:	6a1b      	ldr	r3, [r3, #32]
 8006914:	f023 0210 	bic.w	r2, r3, #16
 8006918:	687b      	ldr	r3, [r7, #4]
 800691a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800691c:	687b      	ldr	r3, [r7, #4]
 800691e:	685b      	ldr	r3, [r3, #4]
 8006920:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8006922:	687b      	ldr	r3, [r7, #4]
 8006924:	699b      	ldr	r3, [r3, #24]
 8006926:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8006928:	68fb      	ldr	r3, [r7, #12]
 800692a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800692e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8006930:	68fb      	ldr	r3, [r7, #12]
 8006932:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006936:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006938:	683b      	ldr	r3, [r7, #0]
 800693a:	681b      	ldr	r3, [r3, #0]
 800693c:	021b      	lsls	r3, r3, #8
 800693e:	68fa      	ldr	r2, [r7, #12]
 8006940:	4313      	orrs	r3, r2
 8006942:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8006944:	697b      	ldr	r3, [r7, #20]
 8006946:	f023 0320 	bic.w	r3, r3, #32
 800694a:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800694c:	683b      	ldr	r3, [r7, #0]
 800694e:	689b      	ldr	r3, [r3, #8]
 8006950:	011b      	lsls	r3, r3, #4
 8006952:	697a      	ldr	r2, [r7, #20]
 8006954:	4313      	orrs	r3, r2
 8006956:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8006958:	687b      	ldr	r3, [r7, #4]
 800695a:	4a22      	ldr	r2, [pc, #136]	; (80069e4 <TIM_OC2_SetConfig+0xe4>)
 800695c:	4293      	cmp	r3, r2
 800695e:	d003      	beq.n	8006968 <TIM_OC2_SetConfig+0x68>
 8006960:	687b      	ldr	r3, [r7, #4]
 8006962:	4a21      	ldr	r2, [pc, #132]	; (80069e8 <TIM_OC2_SetConfig+0xe8>)
 8006964:	4293      	cmp	r3, r2
 8006966:	d10d      	bne.n	8006984 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8006968:	697b      	ldr	r3, [r7, #20]
 800696a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800696e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8006970:	683b      	ldr	r3, [r7, #0]
 8006972:	68db      	ldr	r3, [r3, #12]
 8006974:	011b      	lsls	r3, r3, #4
 8006976:	697a      	ldr	r2, [r7, #20]
 8006978:	4313      	orrs	r3, r2
 800697a:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800697c:	697b      	ldr	r3, [r7, #20]
 800697e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006982:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006984:	687b      	ldr	r3, [r7, #4]
 8006986:	4a17      	ldr	r2, [pc, #92]	; (80069e4 <TIM_OC2_SetConfig+0xe4>)
 8006988:	4293      	cmp	r3, r2
 800698a:	d003      	beq.n	8006994 <TIM_OC2_SetConfig+0x94>
 800698c:	687b      	ldr	r3, [r7, #4]
 800698e:	4a16      	ldr	r2, [pc, #88]	; (80069e8 <TIM_OC2_SetConfig+0xe8>)
 8006990:	4293      	cmp	r3, r2
 8006992:	d113      	bne.n	80069bc <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8006994:	693b      	ldr	r3, [r7, #16]
 8006996:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800699a:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800699c:	693b      	ldr	r3, [r7, #16]
 800699e:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80069a2:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80069a4:	683b      	ldr	r3, [r7, #0]
 80069a6:	695b      	ldr	r3, [r3, #20]
 80069a8:	009b      	lsls	r3, r3, #2
 80069aa:	693a      	ldr	r2, [r7, #16]
 80069ac:	4313      	orrs	r3, r2
 80069ae:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80069b0:	683b      	ldr	r3, [r7, #0]
 80069b2:	699b      	ldr	r3, [r3, #24]
 80069b4:	009b      	lsls	r3, r3, #2
 80069b6:	693a      	ldr	r2, [r7, #16]
 80069b8:	4313      	orrs	r3, r2
 80069ba:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80069bc:	687b      	ldr	r3, [r7, #4]
 80069be:	693a      	ldr	r2, [r7, #16]
 80069c0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80069c2:	687b      	ldr	r3, [r7, #4]
 80069c4:	68fa      	ldr	r2, [r7, #12]
 80069c6:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80069c8:	683b      	ldr	r3, [r7, #0]
 80069ca:	685a      	ldr	r2, [r3, #4]
 80069cc:	687b      	ldr	r3, [r7, #4]
 80069ce:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80069d0:	687b      	ldr	r3, [r7, #4]
 80069d2:	697a      	ldr	r2, [r7, #20]
 80069d4:	621a      	str	r2, [r3, #32]
}
 80069d6:	bf00      	nop
 80069d8:	371c      	adds	r7, #28
 80069da:	46bd      	mov	sp, r7
 80069dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069e0:	4770      	bx	lr
 80069e2:	bf00      	nop
 80069e4:	40010000 	.word	0x40010000
 80069e8:	40010400 	.word	0x40010400

080069ec <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80069ec:	b480      	push	{r7}
 80069ee:	b087      	sub	sp, #28
 80069f0:	af00      	add	r7, sp, #0
 80069f2:	6078      	str	r0, [r7, #4]
 80069f4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80069f6:	687b      	ldr	r3, [r7, #4]
 80069f8:	6a1b      	ldr	r3, [r3, #32]
 80069fa:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80069fc:	687b      	ldr	r3, [r7, #4]
 80069fe:	6a1b      	ldr	r3, [r3, #32]
 8006a00:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8006a04:	687b      	ldr	r3, [r7, #4]
 8006a06:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006a08:	687b      	ldr	r3, [r7, #4]
 8006a0a:	685b      	ldr	r3, [r3, #4]
 8006a0c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8006a0e:	687b      	ldr	r3, [r7, #4]
 8006a10:	69db      	ldr	r3, [r3, #28]
 8006a12:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8006a14:	68fb      	ldr	r3, [r7, #12]
 8006a16:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006a1a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8006a1c:	68fb      	ldr	r3, [r7, #12]
 8006a1e:	f023 0303 	bic.w	r3, r3, #3
 8006a22:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006a24:	683b      	ldr	r3, [r7, #0]
 8006a26:	681b      	ldr	r3, [r3, #0]
 8006a28:	68fa      	ldr	r2, [r7, #12]
 8006a2a:	4313      	orrs	r3, r2
 8006a2c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8006a2e:	697b      	ldr	r3, [r7, #20]
 8006a30:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8006a34:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8006a36:	683b      	ldr	r3, [r7, #0]
 8006a38:	689b      	ldr	r3, [r3, #8]
 8006a3a:	021b      	lsls	r3, r3, #8
 8006a3c:	697a      	ldr	r2, [r7, #20]
 8006a3e:	4313      	orrs	r3, r2
 8006a40:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8006a42:	687b      	ldr	r3, [r7, #4]
 8006a44:	4a21      	ldr	r2, [pc, #132]	; (8006acc <TIM_OC3_SetConfig+0xe0>)
 8006a46:	4293      	cmp	r3, r2
 8006a48:	d003      	beq.n	8006a52 <TIM_OC3_SetConfig+0x66>
 8006a4a:	687b      	ldr	r3, [r7, #4]
 8006a4c:	4a20      	ldr	r2, [pc, #128]	; (8006ad0 <TIM_OC3_SetConfig+0xe4>)
 8006a4e:	4293      	cmp	r3, r2
 8006a50:	d10d      	bne.n	8006a6e <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8006a52:	697b      	ldr	r3, [r7, #20]
 8006a54:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8006a58:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8006a5a:	683b      	ldr	r3, [r7, #0]
 8006a5c:	68db      	ldr	r3, [r3, #12]
 8006a5e:	021b      	lsls	r3, r3, #8
 8006a60:	697a      	ldr	r2, [r7, #20]
 8006a62:	4313      	orrs	r3, r2
 8006a64:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8006a66:	697b      	ldr	r3, [r7, #20]
 8006a68:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8006a6c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006a6e:	687b      	ldr	r3, [r7, #4]
 8006a70:	4a16      	ldr	r2, [pc, #88]	; (8006acc <TIM_OC3_SetConfig+0xe0>)
 8006a72:	4293      	cmp	r3, r2
 8006a74:	d003      	beq.n	8006a7e <TIM_OC3_SetConfig+0x92>
 8006a76:	687b      	ldr	r3, [r7, #4]
 8006a78:	4a15      	ldr	r2, [pc, #84]	; (8006ad0 <TIM_OC3_SetConfig+0xe4>)
 8006a7a:	4293      	cmp	r3, r2
 8006a7c:	d113      	bne.n	8006aa6 <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8006a7e:	693b      	ldr	r3, [r7, #16]
 8006a80:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8006a84:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8006a86:	693b      	ldr	r3, [r7, #16]
 8006a88:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8006a8c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8006a8e:	683b      	ldr	r3, [r7, #0]
 8006a90:	695b      	ldr	r3, [r3, #20]
 8006a92:	011b      	lsls	r3, r3, #4
 8006a94:	693a      	ldr	r2, [r7, #16]
 8006a96:	4313      	orrs	r3, r2
 8006a98:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8006a9a:	683b      	ldr	r3, [r7, #0]
 8006a9c:	699b      	ldr	r3, [r3, #24]
 8006a9e:	011b      	lsls	r3, r3, #4
 8006aa0:	693a      	ldr	r2, [r7, #16]
 8006aa2:	4313      	orrs	r3, r2
 8006aa4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006aa6:	687b      	ldr	r3, [r7, #4]
 8006aa8:	693a      	ldr	r2, [r7, #16]
 8006aaa:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8006aac:	687b      	ldr	r3, [r7, #4]
 8006aae:	68fa      	ldr	r2, [r7, #12]
 8006ab0:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8006ab2:	683b      	ldr	r3, [r7, #0]
 8006ab4:	685a      	ldr	r2, [r3, #4]
 8006ab6:	687b      	ldr	r3, [r7, #4]
 8006ab8:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006aba:	687b      	ldr	r3, [r7, #4]
 8006abc:	697a      	ldr	r2, [r7, #20]
 8006abe:	621a      	str	r2, [r3, #32]
}
 8006ac0:	bf00      	nop
 8006ac2:	371c      	adds	r7, #28
 8006ac4:	46bd      	mov	sp, r7
 8006ac6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006aca:	4770      	bx	lr
 8006acc:	40010000 	.word	0x40010000
 8006ad0:	40010400 	.word	0x40010400

08006ad4 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8006ad4:	b480      	push	{r7}
 8006ad6:	b087      	sub	sp, #28
 8006ad8:	af00      	add	r7, sp, #0
 8006ada:	6078      	str	r0, [r7, #4]
 8006adc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006ade:	687b      	ldr	r3, [r7, #4]
 8006ae0:	6a1b      	ldr	r3, [r3, #32]
 8006ae2:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8006ae4:	687b      	ldr	r3, [r7, #4]
 8006ae6:	6a1b      	ldr	r3, [r3, #32]
 8006ae8:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8006aec:	687b      	ldr	r3, [r7, #4]
 8006aee:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006af0:	687b      	ldr	r3, [r7, #4]
 8006af2:	685b      	ldr	r3, [r3, #4]
 8006af4:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8006af6:	687b      	ldr	r3, [r7, #4]
 8006af8:	69db      	ldr	r3, [r3, #28]
 8006afa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8006afc:	68fb      	ldr	r3, [r7, #12]
 8006afe:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006b02:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8006b04:	68fb      	ldr	r3, [r7, #12]
 8006b06:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006b0a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006b0c:	683b      	ldr	r3, [r7, #0]
 8006b0e:	681b      	ldr	r3, [r3, #0]
 8006b10:	021b      	lsls	r3, r3, #8
 8006b12:	68fa      	ldr	r2, [r7, #12]
 8006b14:	4313      	orrs	r3, r2
 8006b16:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8006b18:	693b      	ldr	r3, [r7, #16]
 8006b1a:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8006b1e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8006b20:	683b      	ldr	r3, [r7, #0]
 8006b22:	689b      	ldr	r3, [r3, #8]
 8006b24:	031b      	lsls	r3, r3, #12
 8006b26:	693a      	ldr	r2, [r7, #16]
 8006b28:	4313      	orrs	r3, r2
 8006b2a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006b2c:	687b      	ldr	r3, [r7, #4]
 8006b2e:	4a12      	ldr	r2, [pc, #72]	; (8006b78 <TIM_OC4_SetConfig+0xa4>)
 8006b30:	4293      	cmp	r3, r2
 8006b32:	d003      	beq.n	8006b3c <TIM_OC4_SetConfig+0x68>
 8006b34:	687b      	ldr	r3, [r7, #4]
 8006b36:	4a11      	ldr	r2, [pc, #68]	; (8006b7c <TIM_OC4_SetConfig+0xa8>)
 8006b38:	4293      	cmp	r3, r2
 8006b3a:	d109      	bne.n	8006b50 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8006b3c:	697b      	ldr	r3, [r7, #20]
 8006b3e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8006b42:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8006b44:	683b      	ldr	r3, [r7, #0]
 8006b46:	695b      	ldr	r3, [r3, #20]
 8006b48:	019b      	lsls	r3, r3, #6
 8006b4a:	697a      	ldr	r2, [r7, #20]
 8006b4c:	4313      	orrs	r3, r2
 8006b4e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006b50:	687b      	ldr	r3, [r7, #4]
 8006b52:	697a      	ldr	r2, [r7, #20]
 8006b54:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8006b56:	687b      	ldr	r3, [r7, #4]
 8006b58:	68fa      	ldr	r2, [r7, #12]
 8006b5a:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8006b5c:	683b      	ldr	r3, [r7, #0]
 8006b5e:	685a      	ldr	r2, [r3, #4]
 8006b60:	687b      	ldr	r3, [r7, #4]
 8006b62:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006b64:	687b      	ldr	r3, [r7, #4]
 8006b66:	693a      	ldr	r2, [r7, #16]
 8006b68:	621a      	str	r2, [r3, #32]
}
 8006b6a:	bf00      	nop
 8006b6c:	371c      	adds	r7, #28
 8006b6e:	46bd      	mov	sp, r7
 8006b70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b74:	4770      	bx	lr
 8006b76:	bf00      	nop
 8006b78:	40010000 	.word	0x40010000
 8006b7c:	40010400 	.word	0x40010400

08006b80 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006b80:	b480      	push	{r7}
 8006b82:	b087      	sub	sp, #28
 8006b84:	af00      	add	r7, sp, #0
 8006b86:	60f8      	str	r0, [r7, #12]
 8006b88:	60b9      	str	r1, [r7, #8]
 8006b8a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8006b8c:	68fb      	ldr	r3, [r7, #12]
 8006b8e:	6a1b      	ldr	r3, [r3, #32]
 8006b90:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8006b92:	68fb      	ldr	r3, [r7, #12]
 8006b94:	6a1b      	ldr	r3, [r3, #32]
 8006b96:	f023 0201 	bic.w	r2, r3, #1
 8006b9a:	68fb      	ldr	r3, [r7, #12]
 8006b9c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006b9e:	68fb      	ldr	r3, [r7, #12]
 8006ba0:	699b      	ldr	r3, [r3, #24]
 8006ba2:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8006ba4:	693b      	ldr	r3, [r7, #16]
 8006ba6:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8006baa:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8006bac:	687b      	ldr	r3, [r7, #4]
 8006bae:	011b      	lsls	r3, r3, #4
 8006bb0:	693a      	ldr	r2, [r7, #16]
 8006bb2:	4313      	orrs	r3, r2
 8006bb4:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8006bb6:	697b      	ldr	r3, [r7, #20]
 8006bb8:	f023 030a 	bic.w	r3, r3, #10
 8006bbc:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8006bbe:	697a      	ldr	r2, [r7, #20]
 8006bc0:	68bb      	ldr	r3, [r7, #8]
 8006bc2:	4313      	orrs	r3, r2
 8006bc4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8006bc6:	68fb      	ldr	r3, [r7, #12]
 8006bc8:	693a      	ldr	r2, [r7, #16]
 8006bca:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006bcc:	68fb      	ldr	r3, [r7, #12]
 8006bce:	697a      	ldr	r2, [r7, #20]
 8006bd0:	621a      	str	r2, [r3, #32]
}
 8006bd2:	bf00      	nop
 8006bd4:	371c      	adds	r7, #28
 8006bd6:	46bd      	mov	sp, r7
 8006bd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bdc:	4770      	bx	lr

08006bde <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006bde:	b480      	push	{r7}
 8006be0:	b087      	sub	sp, #28
 8006be2:	af00      	add	r7, sp, #0
 8006be4:	60f8      	str	r0, [r7, #12]
 8006be6:	60b9      	str	r1, [r7, #8]
 8006be8:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8006bea:	68fb      	ldr	r3, [r7, #12]
 8006bec:	6a1b      	ldr	r3, [r3, #32]
 8006bee:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006bf0:	68fb      	ldr	r3, [r7, #12]
 8006bf2:	6a1b      	ldr	r3, [r3, #32]
 8006bf4:	f023 0210 	bic.w	r2, r3, #16
 8006bf8:	68fb      	ldr	r3, [r7, #12]
 8006bfa:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006bfc:	68fb      	ldr	r3, [r7, #12]
 8006bfe:	699b      	ldr	r3, [r3, #24]
 8006c00:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8006c02:	693b      	ldr	r3, [r7, #16]
 8006c04:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8006c08:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8006c0a:	687b      	ldr	r3, [r7, #4]
 8006c0c:	031b      	lsls	r3, r3, #12
 8006c0e:	693a      	ldr	r2, [r7, #16]
 8006c10:	4313      	orrs	r3, r2
 8006c12:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8006c14:	697b      	ldr	r3, [r7, #20]
 8006c16:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8006c1a:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8006c1c:	68bb      	ldr	r3, [r7, #8]
 8006c1e:	011b      	lsls	r3, r3, #4
 8006c20:	697a      	ldr	r2, [r7, #20]
 8006c22:	4313      	orrs	r3, r2
 8006c24:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8006c26:	68fb      	ldr	r3, [r7, #12]
 8006c28:	693a      	ldr	r2, [r7, #16]
 8006c2a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006c2c:	68fb      	ldr	r3, [r7, #12]
 8006c2e:	697a      	ldr	r2, [r7, #20]
 8006c30:	621a      	str	r2, [r3, #32]
}
 8006c32:	bf00      	nop
 8006c34:	371c      	adds	r7, #28
 8006c36:	46bd      	mov	sp, r7
 8006c38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c3c:	4770      	bx	lr

08006c3e <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8006c3e:	b480      	push	{r7}
 8006c40:	b085      	sub	sp, #20
 8006c42:	af00      	add	r7, sp, #0
 8006c44:	6078      	str	r0, [r7, #4]
 8006c46:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8006c48:	687b      	ldr	r3, [r7, #4]
 8006c4a:	689b      	ldr	r3, [r3, #8]
 8006c4c:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8006c4e:	68fb      	ldr	r3, [r7, #12]
 8006c50:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006c54:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8006c56:	683a      	ldr	r2, [r7, #0]
 8006c58:	68fb      	ldr	r3, [r7, #12]
 8006c5a:	4313      	orrs	r3, r2
 8006c5c:	f043 0307 	orr.w	r3, r3, #7
 8006c60:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8006c62:	687b      	ldr	r3, [r7, #4]
 8006c64:	68fa      	ldr	r2, [r7, #12]
 8006c66:	609a      	str	r2, [r3, #8]
}
 8006c68:	bf00      	nop
 8006c6a:	3714      	adds	r7, #20
 8006c6c:	46bd      	mov	sp, r7
 8006c6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c72:	4770      	bx	lr

08006c74 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8006c74:	b480      	push	{r7}
 8006c76:	b087      	sub	sp, #28
 8006c78:	af00      	add	r7, sp, #0
 8006c7a:	60f8      	str	r0, [r7, #12]
 8006c7c:	60b9      	str	r1, [r7, #8]
 8006c7e:	607a      	str	r2, [r7, #4]
 8006c80:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8006c82:	68fb      	ldr	r3, [r7, #12]
 8006c84:	689b      	ldr	r3, [r3, #8]
 8006c86:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006c88:	697b      	ldr	r3, [r7, #20]
 8006c8a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8006c8e:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8006c90:	683b      	ldr	r3, [r7, #0]
 8006c92:	021a      	lsls	r2, r3, #8
 8006c94:	687b      	ldr	r3, [r7, #4]
 8006c96:	431a      	orrs	r2, r3
 8006c98:	68bb      	ldr	r3, [r7, #8]
 8006c9a:	4313      	orrs	r3, r2
 8006c9c:	697a      	ldr	r2, [r7, #20]
 8006c9e:	4313      	orrs	r3, r2
 8006ca0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8006ca2:	68fb      	ldr	r3, [r7, #12]
 8006ca4:	697a      	ldr	r2, [r7, #20]
 8006ca6:	609a      	str	r2, [r3, #8]
}
 8006ca8:	bf00      	nop
 8006caa:	371c      	adds	r7, #28
 8006cac:	46bd      	mov	sp, r7
 8006cae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cb2:	4770      	bx	lr

08006cb4 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8006cb4:	b480      	push	{r7}
 8006cb6:	b085      	sub	sp, #20
 8006cb8:	af00      	add	r7, sp, #0
 8006cba:	6078      	str	r0, [r7, #4]
 8006cbc:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8006cbe:	687b      	ldr	r3, [r7, #4]
 8006cc0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006cc4:	2b01      	cmp	r3, #1
 8006cc6:	d101      	bne.n	8006ccc <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8006cc8:	2302      	movs	r3, #2
 8006cca:	e05a      	b.n	8006d82 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8006ccc:	687b      	ldr	r3, [r7, #4]
 8006cce:	2201      	movs	r2, #1
 8006cd0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006cd4:	687b      	ldr	r3, [r7, #4]
 8006cd6:	2202      	movs	r2, #2
 8006cd8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8006cdc:	687b      	ldr	r3, [r7, #4]
 8006cde:	681b      	ldr	r3, [r3, #0]
 8006ce0:	685b      	ldr	r3, [r3, #4]
 8006ce2:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8006ce4:	687b      	ldr	r3, [r7, #4]
 8006ce6:	681b      	ldr	r3, [r3, #0]
 8006ce8:	689b      	ldr	r3, [r3, #8]
 8006cea:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8006cec:	68fb      	ldr	r3, [r7, #12]
 8006cee:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006cf2:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8006cf4:	683b      	ldr	r3, [r7, #0]
 8006cf6:	681b      	ldr	r3, [r3, #0]
 8006cf8:	68fa      	ldr	r2, [r7, #12]
 8006cfa:	4313      	orrs	r3, r2
 8006cfc:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8006cfe:	687b      	ldr	r3, [r7, #4]
 8006d00:	681b      	ldr	r3, [r3, #0]
 8006d02:	68fa      	ldr	r2, [r7, #12]
 8006d04:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006d06:	687b      	ldr	r3, [r7, #4]
 8006d08:	681b      	ldr	r3, [r3, #0]
 8006d0a:	4a21      	ldr	r2, [pc, #132]	; (8006d90 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8006d0c:	4293      	cmp	r3, r2
 8006d0e:	d022      	beq.n	8006d56 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006d10:	687b      	ldr	r3, [r7, #4]
 8006d12:	681b      	ldr	r3, [r3, #0]
 8006d14:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006d18:	d01d      	beq.n	8006d56 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006d1a:	687b      	ldr	r3, [r7, #4]
 8006d1c:	681b      	ldr	r3, [r3, #0]
 8006d1e:	4a1d      	ldr	r2, [pc, #116]	; (8006d94 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8006d20:	4293      	cmp	r3, r2
 8006d22:	d018      	beq.n	8006d56 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006d24:	687b      	ldr	r3, [r7, #4]
 8006d26:	681b      	ldr	r3, [r3, #0]
 8006d28:	4a1b      	ldr	r2, [pc, #108]	; (8006d98 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8006d2a:	4293      	cmp	r3, r2
 8006d2c:	d013      	beq.n	8006d56 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006d2e:	687b      	ldr	r3, [r7, #4]
 8006d30:	681b      	ldr	r3, [r3, #0]
 8006d32:	4a1a      	ldr	r2, [pc, #104]	; (8006d9c <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8006d34:	4293      	cmp	r3, r2
 8006d36:	d00e      	beq.n	8006d56 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006d38:	687b      	ldr	r3, [r7, #4]
 8006d3a:	681b      	ldr	r3, [r3, #0]
 8006d3c:	4a18      	ldr	r2, [pc, #96]	; (8006da0 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8006d3e:	4293      	cmp	r3, r2
 8006d40:	d009      	beq.n	8006d56 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006d42:	687b      	ldr	r3, [r7, #4]
 8006d44:	681b      	ldr	r3, [r3, #0]
 8006d46:	4a17      	ldr	r2, [pc, #92]	; (8006da4 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8006d48:	4293      	cmp	r3, r2
 8006d4a:	d004      	beq.n	8006d56 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006d4c:	687b      	ldr	r3, [r7, #4]
 8006d4e:	681b      	ldr	r3, [r3, #0]
 8006d50:	4a15      	ldr	r2, [pc, #84]	; (8006da8 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8006d52:	4293      	cmp	r3, r2
 8006d54:	d10c      	bne.n	8006d70 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8006d56:	68bb      	ldr	r3, [r7, #8]
 8006d58:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8006d5c:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8006d5e:	683b      	ldr	r3, [r7, #0]
 8006d60:	685b      	ldr	r3, [r3, #4]
 8006d62:	68ba      	ldr	r2, [r7, #8]
 8006d64:	4313      	orrs	r3, r2
 8006d66:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8006d68:	687b      	ldr	r3, [r7, #4]
 8006d6a:	681b      	ldr	r3, [r3, #0]
 8006d6c:	68ba      	ldr	r2, [r7, #8]
 8006d6e:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8006d70:	687b      	ldr	r3, [r7, #4]
 8006d72:	2201      	movs	r2, #1
 8006d74:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8006d78:	687b      	ldr	r3, [r7, #4]
 8006d7a:	2200      	movs	r2, #0
 8006d7c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8006d80:	2300      	movs	r3, #0
}
 8006d82:	4618      	mov	r0, r3
 8006d84:	3714      	adds	r7, #20
 8006d86:	46bd      	mov	sp, r7
 8006d88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d8c:	4770      	bx	lr
 8006d8e:	bf00      	nop
 8006d90:	40010000 	.word	0x40010000
 8006d94:	40000400 	.word	0x40000400
 8006d98:	40000800 	.word	0x40000800
 8006d9c:	40000c00 	.word	0x40000c00
 8006da0:	40010400 	.word	0x40010400
 8006da4:	40014000 	.word	0x40014000
 8006da8:	40001800 	.word	0x40001800

08006dac <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8006dac:	b480      	push	{r7}
 8006dae:	b085      	sub	sp, #20
 8006db0:	af00      	add	r7, sp, #0
 8006db2:	6078      	str	r0, [r7, #4]
 8006db4:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8006db6:	2300      	movs	r3, #0
 8006db8:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8006dba:	687b      	ldr	r3, [r7, #4]
 8006dbc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006dc0:	2b01      	cmp	r3, #1
 8006dc2:	d101      	bne.n	8006dc8 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8006dc4:	2302      	movs	r3, #2
 8006dc6:	e03d      	b.n	8006e44 <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 8006dc8:	687b      	ldr	r3, [r7, #4]
 8006dca:	2201      	movs	r2, #1
 8006dcc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8006dd0:	68fb      	ldr	r3, [r7, #12]
 8006dd2:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8006dd6:	683b      	ldr	r3, [r7, #0]
 8006dd8:	68db      	ldr	r3, [r3, #12]
 8006dda:	4313      	orrs	r3, r2
 8006ddc:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8006dde:	68fb      	ldr	r3, [r7, #12]
 8006de0:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8006de4:	683b      	ldr	r3, [r7, #0]
 8006de6:	689b      	ldr	r3, [r3, #8]
 8006de8:	4313      	orrs	r3, r2
 8006dea:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8006dec:	68fb      	ldr	r3, [r7, #12]
 8006dee:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8006df2:	683b      	ldr	r3, [r7, #0]
 8006df4:	685b      	ldr	r3, [r3, #4]
 8006df6:	4313      	orrs	r3, r2
 8006df8:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8006dfa:	68fb      	ldr	r3, [r7, #12]
 8006dfc:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8006e00:	683b      	ldr	r3, [r7, #0]
 8006e02:	681b      	ldr	r3, [r3, #0]
 8006e04:	4313      	orrs	r3, r2
 8006e06:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8006e08:	68fb      	ldr	r3, [r7, #12]
 8006e0a:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8006e0e:	683b      	ldr	r3, [r7, #0]
 8006e10:	691b      	ldr	r3, [r3, #16]
 8006e12:	4313      	orrs	r3, r2
 8006e14:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8006e16:	68fb      	ldr	r3, [r7, #12]
 8006e18:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8006e1c:	683b      	ldr	r3, [r7, #0]
 8006e1e:	695b      	ldr	r3, [r3, #20]
 8006e20:	4313      	orrs	r3, r2
 8006e22:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8006e24:	68fb      	ldr	r3, [r7, #12]
 8006e26:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8006e2a:	683b      	ldr	r3, [r7, #0]
 8006e2c:	69db      	ldr	r3, [r3, #28]
 8006e2e:	4313      	orrs	r3, r2
 8006e30:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8006e32:	687b      	ldr	r3, [r7, #4]
 8006e34:	681b      	ldr	r3, [r3, #0]
 8006e36:	68fa      	ldr	r2, [r7, #12]
 8006e38:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 8006e3a:	687b      	ldr	r3, [r7, #4]
 8006e3c:	2200      	movs	r2, #0
 8006e3e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8006e42:	2300      	movs	r3, #0
}
 8006e44:	4618      	mov	r0, r3
 8006e46:	3714      	adds	r7, #20
 8006e48:	46bd      	mov	sp, r7
 8006e4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e4e:	4770      	bx	lr

08006e50 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8006e50:	b480      	push	{r7}
 8006e52:	b083      	sub	sp, #12
 8006e54:	af00      	add	r7, sp, #0
 8006e56:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8006e58:	bf00      	nop
 8006e5a:	370c      	adds	r7, #12
 8006e5c:	46bd      	mov	sp, r7
 8006e5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e62:	4770      	bx	lr

08006e64 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8006e64:	b480      	push	{r7}
 8006e66:	b083      	sub	sp, #12
 8006e68:	af00      	add	r7, sp, #0
 8006e6a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8006e6c:	bf00      	nop
 8006e6e:	370c      	adds	r7, #12
 8006e70:	46bd      	mov	sp, r7
 8006e72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e76:	4770      	bx	lr

08006e78 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8006e78:	b084      	sub	sp, #16
 8006e7a:	b580      	push	{r7, lr}
 8006e7c:	b084      	sub	sp, #16
 8006e7e:	af00      	add	r7, sp, #0
 8006e80:	6078      	str	r0, [r7, #4]
 8006e82:	f107 001c 	add.w	r0, r7, #28
 8006e86:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8006e8a:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
 8006e8e:	2b01      	cmp	r3, #1
 8006e90:	d123      	bne.n	8006eda <USB_CoreInit+0x62>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8006e92:	687b      	ldr	r3, [r7, #4]
 8006e94:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006e96:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8006e9a:	687b      	ldr	r3, [r7, #4]
 8006e9c:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8006e9e:	687b      	ldr	r3, [r7, #4]
 8006ea0:	68db      	ldr	r3, [r3, #12]
 8006ea2:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 8006ea6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006eaa:	687a      	ldr	r2, [r7, #4]
 8006eac:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8006eae:	687b      	ldr	r3, [r7, #4]
 8006eb0:	68db      	ldr	r3, [r3, #12]
 8006eb2:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8006eb6:	687b      	ldr	r3, [r7, #4]
 8006eb8:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8006eba:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8006ebe:	2b01      	cmp	r3, #1
 8006ec0:	d105      	bne.n	8006ece <USB_CoreInit+0x56>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8006ec2:	687b      	ldr	r3, [r7, #4]
 8006ec4:	68db      	ldr	r3, [r3, #12]
 8006ec6:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8006eca:	687b      	ldr	r3, [r7, #4]
 8006ecc:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8006ece:	6878      	ldr	r0, [r7, #4]
 8006ed0:	f001 fadc 	bl	800848c <USB_CoreReset>
 8006ed4:	4603      	mov	r3, r0
 8006ed6:	73fb      	strb	r3, [r7, #15]
 8006ed8:	e01b      	b.n	8006f12 <USB_CoreInit+0x9a>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8006eda:	687b      	ldr	r3, [r7, #4]
 8006edc:	68db      	ldr	r3, [r3, #12]
 8006ede:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8006ee2:	687b      	ldr	r3, [r7, #4]
 8006ee4:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8006ee6:	6878      	ldr	r0, [r7, #4]
 8006ee8:	f001 fad0 	bl	800848c <USB_CoreReset>
 8006eec:	4603      	mov	r3, r0
 8006eee:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8006ef0:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 8006ef4:	2b00      	cmp	r3, #0
 8006ef6:	d106      	bne.n	8006f06 <USB_CoreInit+0x8e>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8006ef8:	687b      	ldr	r3, [r7, #4]
 8006efa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006efc:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8006f00:	687b      	ldr	r3, [r7, #4]
 8006f02:	639a      	str	r2, [r3, #56]	; 0x38
 8006f04:	e005      	b.n	8006f12 <USB_CoreInit+0x9a>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8006f06:	687b      	ldr	r3, [r7, #4]
 8006f08:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006f0a:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8006f0e:	687b      	ldr	r3, [r7, #4]
 8006f10:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8006f12:	7fbb      	ldrb	r3, [r7, #30]
 8006f14:	2b01      	cmp	r3, #1
 8006f16:	d10b      	bne.n	8006f30 <USB_CoreInit+0xb8>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8006f18:	687b      	ldr	r3, [r7, #4]
 8006f1a:	689b      	ldr	r3, [r3, #8]
 8006f1c:	f043 0206 	orr.w	r2, r3, #6
 8006f20:	687b      	ldr	r3, [r7, #4]
 8006f22:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8006f24:	687b      	ldr	r3, [r7, #4]
 8006f26:	689b      	ldr	r3, [r3, #8]
 8006f28:	f043 0220 	orr.w	r2, r3, #32
 8006f2c:	687b      	ldr	r3, [r7, #4]
 8006f2e:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8006f30:	7bfb      	ldrb	r3, [r7, #15]
}
 8006f32:	4618      	mov	r0, r3
 8006f34:	3710      	adds	r7, #16
 8006f36:	46bd      	mov	sp, r7
 8006f38:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8006f3c:	b004      	add	sp, #16
 8006f3e:	4770      	bx	lr

08006f40 <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 8006f40:	b480      	push	{r7}
 8006f42:	b087      	sub	sp, #28
 8006f44:	af00      	add	r7, sp, #0
 8006f46:	60f8      	str	r0, [r7, #12]
 8006f48:	60b9      	str	r1, [r7, #8]
 8006f4a:	4613      	mov	r3, r2
 8006f4c:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 8006f4e:	79fb      	ldrb	r3, [r7, #7]
 8006f50:	2b02      	cmp	r3, #2
 8006f52:	d165      	bne.n	8007020 <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 8006f54:	68bb      	ldr	r3, [r7, #8]
 8006f56:	4a41      	ldr	r2, [pc, #260]	; (800705c <USB_SetTurnaroundTime+0x11c>)
 8006f58:	4293      	cmp	r3, r2
 8006f5a:	d906      	bls.n	8006f6a <USB_SetTurnaroundTime+0x2a>
 8006f5c:	68bb      	ldr	r3, [r7, #8]
 8006f5e:	4a40      	ldr	r2, [pc, #256]	; (8007060 <USB_SetTurnaroundTime+0x120>)
 8006f60:	4293      	cmp	r3, r2
 8006f62:	d202      	bcs.n	8006f6a <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 8006f64:	230f      	movs	r3, #15
 8006f66:	617b      	str	r3, [r7, #20]
 8006f68:	e062      	b.n	8007030 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 8006f6a:	68bb      	ldr	r3, [r7, #8]
 8006f6c:	4a3c      	ldr	r2, [pc, #240]	; (8007060 <USB_SetTurnaroundTime+0x120>)
 8006f6e:	4293      	cmp	r3, r2
 8006f70:	d306      	bcc.n	8006f80 <USB_SetTurnaroundTime+0x40>
 8006f72:	68bb      	ldr	r3, [r7, #8]
 8006f74:	4a3b      	ldr	r2, [pc, #236]	; (8007064 <USB_SetTurnaroundTime+0x124>)
 8006f76:	4293      	cmp	r3, r2
 8006f78:	d202      	bcs.n	8006f80 <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 8006f7a:	230e      	movs	r3, #14
 8006f7c:	617b      	str	r3, [r7, #20]
 8006f7e:	e057      	b.n	8007030 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 8006f80:	68bb      	ldr	r3, [r7, #8]
 8006f82:	4a38      	ldr	r2, [pc, #224]	; (8007064 <USB_SetTurnaroundTime+0x124>)
 8006f84:	4293      	cmp	r3, r2
 8006f86:	d306      	bcc.n	8006f96 <USB_SetTurnaroundTime+0x56>
 8006f88:	68bb      	ldr	r3, [r7, #8]
 8006f8a:	4a37      	ldr	r2, [pc, #220]	; (8007068 <USB_SetTurnaroundTime+0x128>)
 8006f8c:	4293      	cmp	r3, r2
 8006f8e:	d202      	bcs.n	8006f96 <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 8006f90:	230d      	movs	r3, #13
 8006f92:	617b      	str	r3, [r7, #20]
 8006f94:	e04c      	b.n	8007030 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 8006f96:	68bb      	ldr	r3, [r7, #8]
 8006f98:	4a33      	ldr	r2, [pc, #204]	; (8007068 <USB_SetTurnaroundTime+0x128>)
 8006f9a:	4293      	cmp	r3, r2
 8006f9c:	d306      	bcc.n	8006fac <USB_SetTurnaroundTime+0x6c>
 8006f9e:	68bb      	ldr	r3, [r7, #8]
 8006fa0:	4a32      	ldr	r2, [pc, #200]	; (800706c <USB_SetTurnaroundTime+0x12c>)
 8006fa2:	4293      	cmp	r3, r2
 8006fa4:	d802      	bhi.n	8006fac <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 8006fa6:	230c      	movs	r3, #12
 8006fa8:	617b      	str	r3, [r7, #20]
 8006faa:	e041      	b.n	8007030 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 8006fac:	68bb      	ldr	r3, [r7, #8]
 8006fae:	4a2f      	ldr	r2, [pc, #188]	; (800706c <USB_SetTurnaroundTime+0x12c>)
 8006fb0:	4293      	cmp	r3, r2
 8006fb2:	d906      	bls.n	8006fc2 <USB_SetTurnaroundTime+0x82>
 8006fb4:	68bb      	ldr	r3, [r7, #8]
 8006fb6:	4a2e      	ldr	r2, [pc, #184]	; (8007070 <USB_SetTurnaroundTime+0x130>)
 8006fb8:	4293      	cmp	r3, r2
 8006fba:	d802      	bhi.n	8006fc2 <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 8006fbc:	230b      	movs	r3, #11
 8006fbe:	617b      	str	r3, [r7, #20]
 8006fc0:	e036      	b.n	8007030 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 8006fc2:	68bb      	ldr	r3, [r7, #8]
 8006fc4:	4a2a      	ldr	r2, [pc, #168]	; (8007070 <USB_SetTurnaroundTime+0x130>)
 8006fc6:	4293      	cmp	r3, r2
 8006fc8:	d906      	bls.n	8006fd8 <USB_SetTurnaroundTime+0x98>
 8006fca:	68bb      	ldr	r3, [r7, #8]
 8006fcc:	4a29      	ldr	r2, [pc, #164]	; (8007074 <USB_SetTurnaroundTime+0x134>)
 8006fce:	4293      	cmp	r3, r2
 8006fd0:	d802      	bhi.n	8006fd8 <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 8006fd2:	230a      	movs	r3, #10
 8006fd4:	617b      	str	r3, [r7, #20]
 8006fd6:	e02b      	b.n	8007030 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 8006fd8:	68bb      	ldr	r3, [r7, #8]
 8006fda:	4a26      	ldr	r2, [pc, #152]	; (8007074 <USB_SetTurnaroundTime+0x134>)
 8006fdc:	4293      	cmp	r3, r2
 8006fde:	d906      	bls.n	8006fee <USB_SetTurnaroundTime+0xae>
 8006fe0:	68bb      	ldr	r3, [r7, #8]
 8006fe2:	4a25      	ldr	r2, [pc, #148]	; (8007078 <USB_SetTurnaroundTime+0x138>)
 8006fe4:	4293      	cmp	r3, r2
 8006fe6:	d202      	bcs.n	8006fee <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 8006fe8:	2309      	movs	r3, #9
 8006fea:	617b      	str	r3, [r7, #20]
 8006fec:	e020      	b.n	8007030 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 8006fee:	68bb      	ldr	r3, [r7, #8]
 8006ff0:	4a21      	ldr	r2, [pc, #132]	; (8007078 <USB_SetTurnaroundTime+0x138>)
 8006ff2:	4293      	cmp	r3, r2
 8006ff4:	d306      	bcc.n	8007004 <USB_SetTurnaroundTime+0xc4>
 8006ff6:	68bb      	ldr	r3, [r7, #8]
 8006ff8:	4a20      	ldr	r2, [pc, #128]	; (800707c <USB_SetTurnaroundTime+0x13c>)
 8006ffa:	4293      	cmp	r3, r2
 8006ffc:	d802      	bhi.n	8007004 <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 8006ffe:	2308      	movs	r3, #8
 8007000:	617b      	str	r3, [r7, #20]
 8007002:	e015      	b.n	8007030 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 8007004:	68bb      	ldr	r3, [r7, #8]
 8007006:	4a1d      	ldr	r2, [pc, #116]	; (800707c <USB_SetTurnaroundTime+0x13c>)
 8007008:	4293      	cmp	r3, r2
 800700a:	d906      	bls.n	800701a <USB_SetTurnaroundTime+0xda>
 800700c:	68bb      	ldr	r3, [r7, #8]
 800700e:	4a1c      	ldr	r2, [pc, #112]	; (8007080 <USB_SetTurnaroundTime+0x140>)
 8007010:	4293      	cmp	r3, r2
 8007012:	d202      	bcs.n	800701a <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 8007014:	2307      	movs	r3, #7
 8007016:	617b      	str	r3, [r7, #20]
 8007018:	e00a      	b.n	8007030 <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 800701a:	2306      	movs	r3, #6
 800701c:	617b      	str	r3, [r7, #20]
 800701e:	e007      	b.n	8007030 <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 8007020:	79fb      	ldrb	r3, [r7, #7]
 8007022:	2b00      	cmp	r3, #0
 8007024:	d102      	bne.n	800702c <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 8007026:	2309      	movs	r3, #9
 8007028:	617b      	str	r3, [r7, #20]
 800702a:	e001      	b.n	8007030 <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 800702c:	2309      	movs	r3, #9
 800702e:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 8007030:	68fb      	ldr	r3, [r7, #12]
 8007032:	68db      	ldr	r3, [r3, #12]
 8007034:	f423 5270 	bic.w	r2, r3, #15360	; 0x3c00
 8007038:	68fb      	ldr	r3, [r7, #12]
 800703a:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 800703c:	68fb      	ldr	r3, [r7, #12]
 800703e:	68da      	ldr	r2, [r3, #12]
 8007040:	697b      	ldr	r3, [r7, #20]
 8007042:	029b      	lsls	r3, r3, #10
 8007044:	f403 5370 	and.w	r3, r3, #15360	; 0x3c00
 8007048:	431a      	orrs	r2, r3
 800704a:	68fb      	ldr	r3, [r7, #12]
 800704c:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 800704e:	2300      	movs	r3, #0
}
 8007050:	4618      	mov	r0, r3
 8007052:	371c      	adds	r7, #28
 8007054:	46bd      	mov	sp, r7
 8007056:	f85d 7b04 	ldr.w	r7, [sp], #4
 800705a:	4770      	bx	lr
 800705c:	00d8acbf 	.word	0x00d8acbf
 8007060:	00e4e1c0 	.word	0x00e4e1c0
 8007064:	00f42400 	.word	0x00f42400
 8007068:	01067380 	.word	0x01067380
 800706c:	011a499f 	.word	0x011a499f
 8007070:	01312cff 	.word	0x01312cff
 8007074:	014ca43f 	.word	0x014ca43f
 8007078:	016e3600 	.word	0x016e3600
 800707c:	01a6ab1f 	.word	0x01a6ab1f
 8007080:	01e84800 	.word	0x01e84800

08007084 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8007084:	b480      	push	{r7}
 8007086:	b083      	sub	sp, #12
 8007088:	af00      	add	r7, sp, #0
 800708a:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 800708c:	687b      	ldr	r3, [r7, #4]
 800708e:	689b      	ldr	r3, [r3, #8]
 8007090:	f043 0201 	orr.w	r2, r3, #1
 8007094:	687b      	ldr	r3, [r7, #4]
 8007096:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8007098:	2300      	movs	r3, #0
}
 800709a:	4618      	mov	r0, r3
 800709c:	370c      	adds	r7, #12
 800709e:	46bd      	mov	sp, r7
 80070a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070a4:	4770      	bx	lr

080070a6 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 80070a6:	b480      	push	{r7}
 80070a8:	b083      	sub	sp, #12
 80070aa:	af00      	add	r7, sp, #0
 80070ac:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 80070ae:	687b      	ldr	r3, [r7, #4]
 80070b0:	689b      	ldr	r3, [r3, #8]
 80070b2:	f023 0201 	bic.w	r2, r3, #1
 80070b6:	687b      	ldr	r3, [r7, #4]
 80070b8:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 80070ba:	2300      	movs	r3, #0
}
 80070bc:	4618      	mov	r0, r3
 80070be:	370c      	adds	r7, #12
 80070c0:	46bd      	mov	sp, r7
 80070c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070c6:	4770      	bx	lr

080070c8 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 80070c8:	b580      	push	{r7, lr}
 80070ca:	b084      	sub	sp, #16
 80070cc:	af00      	add	r7, sp, #0
 80070ce:	6078      	str	r0, [r7, #4]
 80070d0:	460b      	mov	r3, r1
 80070d2:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 80070d4:	2300      	movs	r3, #0
 80070d6:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 80070d8:	687b      	ldr	r3, [r7, #4]
 80070da:	68db      	ldr	r3, [r3, #12]
 80070dc:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 80070e0:	687b      	ldr	r3, [r7, #4]
 80070e2:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 80070e4:	78fb      	ldrb	r3, [r7, #3]
 80070e6:	2b01      	cmp	r3, #1
 80070e8:	d115      	bne.n	8007116 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 80070ea:	687b      	ldr	r3, [r7, #4]
 80070ec:	68db      	ldr	r3, [r3, #12]
 80070ee:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 80070f2:	687b      	ldr	r3, [r7, #4]
 80070f4:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 80070f6:	200a      	movs	r0, #10
 80070f8:	f7fa fe30 	bl	8001d5c <HAL_Delay>
      ms += 10U;
 80070fc:	68fb      	ldr	r3, [r7, #12]
 80070fe:	330a      	adds	r3, #10
 8007100:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 8007102:	6878      	ldr	r0, [r7, #4]
 8007104:	f001 f933 	bl	800836e <USB_GetMode>
 8007108:	4603      	mov	r3, r0
 800710a:	2b01      	cmp	r3, #1
 800710c:	d01e      	beq.n	800714c <USB_SetCurrentMode+0x84>
 800710e:	68fb      	ldr	r3, [r7, #12]
 8007110:	2bc7      	cmp	r3, #199	; 0xc7
 8007112:	d9f0      	bls.n	80070f6 <USB_SetCurrentMode+0x2e>
 8007114:	e01a      	b.n	800714c <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8007116:	78fb      	ldrb	r3, [r7, #3]
 8007118:	2b00      	cmp	r3, #0
 800711a:	d115      	bne.n	8007148 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 800711c:	687b      	ldr	r3, [r7, #4]
 800711e:	68db      	ldr	r3, [r3, #12]
 8007120:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8007124:	687b      	ldr	r3, [r7, #4]
 8007126:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 8007128:	200a      	movs	r0, #10
 800712a:	f7fa fe17 	bl	8001d5c <HAL_Delay>
      ms += 10U;
 800712e:	68fb      	ldr	r3, [r7, #12]
 8007130:	330a      	adds	r3, #10
 8007132:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 8007134:	6878      	ldr	r0, [r7, #4]
 8007136:	f001 f91a 	bl	800836e <USB_GetMode>
 800713a:	4603      	mov	r3, r0
 800713c:	2b00      	cmp	r3, #0
 800713e:	d005      	beq.n	800714c <USB_SetCurrentMode+0x84>
 8007140:	68fb      	ldr	r3, [r7, #12]
 8007142:	2bc7      	cmp	r3, #199	; 0xc7
 8007144:	d9f0      	bls.n	8007128 <USB_SetCurrentMode+0x60>
 8007146:	e001      	b.n	800714c <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8007148:	2301      	movs	r3, #1
 800714a:	e005      	b.n	8007158 <USB_SetCurrentMode+0x90>
  }

  if (ms == HAL_USB_CURRENT_MODE_MAX_DELAY_MS)
 800714c:	68fb      	ldr	r3, [r7, #12]
 800714e:	2bc8      	cmp	r3, #200	; 0xc8
 8007150:	d101      	bne.n	8007156 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8007152:	2301      	movs	r3, #1
 8007154:	e000      	b.n	8007158 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8007156:	2300      	movs	r3, #0
}
 8007158:	4618      	mov	r0, r3
 800715a:	3710      	adds	r7, #16
 800715c:	46bd      	mov	sp, r7
 800715e:	bd80      	pop	{r7, pc}

08007160 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8007160:	b084      	sub	sp, #16
 8007162:	b580      	push	{r7, lr}
 8007164:	b086      	sub	sp, #24
 8007166:	af00      	add	r7, sp, #0
 8007168:	6078      	str	r0, [r7, #4]
 800716a:	f107 0024 	add.w	r0, r7, #36	; 0x24
 800716e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8007172:	2300      	movs	r3, #0
 8007174:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007176:	687b      	ldr	r3, [r7, #4]
 8007178:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 800717a:	2300      	movs	r3, #0
 800717c:	613b      	str	r3, [r7, #16]
 800717e:	e009      	b.n	8007194 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8007180:	687a      	ldr	r2, [r7, #4]
 8007182:	693b      	ldr	r3, [r7, #16]
 8007184:	3340      	adds	r3, #64	; 0x40
 8007186:	009b      	lsls	r3, r3, #2
 8007188:	4413      	add	r3, r2
 800718a:	2200      	movs	r2, #0
 800718c:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 800718e:	693b      	ldr	r3, [r7, #16]
 8007190:	3301      	adds	r3, #1
 8007192:	613b      	str	r3, [r7, #16]
 8007194:	693b      	ldr	r3, [r7, #16]
 8007196:	2b0e      	cmp	r3, #14
 8007198:	d9f2      	bls.n	8007180 <USB_DevInit+0x20>

#if defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) \
 || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) \
 || defined(STM32F423xx)
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 800719a:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 800719e:	2b00      	cmp	r3, #0
 80071a0:	d11c      	bne.n	80071dc <USB_DevInit+0x7c>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 80071a2:	68fb      	ldr	r3, [r7, #12]
 80071a4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80071a8:	685b      	ldr	r3, [r3, #4]
 80071aa:	68fa      	ldr	r2, [r7, #12]
 80071ac:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80071b0:	f043 0302 	orr.w	r3, r3, #2
 80071b4:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 80071b6:	687b      	ldr	r3, [r7, #4]
 80071b8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80071ba:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 80071be:	687b      	ldr	r3, [r7, #4]
 80071c0:	639a      	str	r2, [r3, #56]	; 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 80071c2:	687b      	ldr	r3, [r7, #4]
 80071c4:	681b      	ldr	r3, [r3, #0]
 80071c6:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80071ca:	687b      	ldr	r3, [r7, #4]
 80071cc:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 80071ce:	687b      	ldr	r3, [r7, #4]
 80071d0:	681b      	ldr	r3, [r3, #0]
 80071d2:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 80071d6:	687b      	ldr	r3, [r7, #4]
 80071d8:	601a      	str	r2, [r3, #0]
 80071da:	e005      	b.n	80071e8 <USB_DevInit+0x88>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 80071dc:	687b      	ldr	r3, [r7, #4]
 80071de:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80071e0:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 80071e4:	687b      	ldr	r3, [r7, #4]
 80071e6:	639a      	str	r2, [r3, #56]	; 0x38
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) ||
          defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) ||
          defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 80071e8:	68fb      	ldr	r3, [r7, #12]
 80071ea:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 80071ee:	461a      	mov	r2, r3
 80071f0:	2300      	movs	r3, #0
 80071f2:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 80071f4:	f897 3029 	ldrb.w	r3, [r7, #41]	; 0x29
 80071f8:	2b01      	cmp	r3, #1
 80071fa:	d10d      	bne.n	8007218 <USB_DevInit+0xb8>
  {
    if (cfg.speed == USBD_HS_SPEED)
 80071fc:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8007200:	2b00      	cmp	r3, #0
 8007202:	d104      	bne.n	800720e <USB_DevInit+0xae>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 8007204:	2100      	movs	r1, #0
 8007206:	6878      	ldr	r0, [r7, #4]
 8007208:	f000 f968 	bl	80074dc <USB_SetDevSpeed>
 800720c:	e008      	b.n	8007220 <USB_DevInit+0xc0>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 800720e:	2101      	movs	r1, #1
 8007210:	6878      	ldr	r0, [r7, #4]
 8007212:	f000 f963 	bl	80074dc <USB_SetDevSpeed>
 8007216:	e003      	b.n	8007220 <USB_DevInit+0xc0>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8007218:	2103      	movs	r1, #3
 800721a:	6878      	ldr	r0, [r7, #4]
 800721c:	f000 f95e 	bl	80074dc <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8007220:	2110      	movs	r1, #16
 8007222:	6878      	ldr	r0, [r7, #4]
 8007224:	f000 f8fa 	bl	800741c <USB_FlushTxFifo>
 8007228:	4603      	mov	r3, r0
 800722a:	2b00      	cmp	r3, #0
 800722c:	d001      	beq.n	8007232 <USB_DevInit+0xd2>
  {
    ret = HAL_ERROR;
 800722e:	2301      	movs	r3, #1
 8007230:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8007232:	6878      	ldr	r0, [r7, #4]
 8007234:	f000 f924 	bl	8007480 <USB_FlushRxFifo>
 8007238:	4603      	mov	r3, r0
 800723a:	2b00      	cmp	r3, #0
 800723c:	d001      	beq.n	8007242 <USB_DevInit+0xe2>
  {
    ret = HAL_ERROR;
 800723e:	2301      	movs	r3, #1
 8007240:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8007242:	68fb      	ldr	r3, [r7, #12]
 8007244:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007248:	461a      	mov	r2, r3
 800724a:	2300      	movs	r3, #0
 800724c:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 800724e:	68fb      	ldr	r3, [r7, #12]
 8007250:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007254:	461a      	mov	r2, r3
 8007256:	2300      	movs	r3, #0
 8007258:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 800725a:	68fb      	ldr	r3, [r7, #12]
 800725c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007260:	461a      	mov	r2, r3
 8007262:	2300      	movs	r3, #0
 8007264:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8007266:	2300      	movs	r3, #0
 8007268:	613b      	str	r3, [r7, #16]
 800726a:	e043      	b.n	80072f4 <USB_DevInit+0x194>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800726c:	693b      	ldr	r3, [r7, #16]
 800726e:	015a      	lsls	r2, r3, #5
 8007270:	68fb      	ldr	r3, [r7, #12]
 8007272:	4413      	add	r3, r2
 8007274:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007278:	681b      	ldr	r3, [r3, #0]
 800727a:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800727e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8007282:	d118      	bne.n	80072b6 <USB_DevInit+0x156>
    {
      if (i == 0U)
 8007284:	693b      	ldr	r3, [r7, #16]
 8007286:	2b00      	cmp	r3, #0
 8007288:	d10a      	bne.n	80072a0 <USB_DevInit+0x140>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 800728a:	693b      	ldr	r3, [r7, #16]
 800728c:	015a      	lsls	r2, r3, #5
 800728e:	68fb      	ldr	r3, [r7, #12]
 8007290:	4413      	add	r3, r2
 8007292:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007296:	461a      	mov	r2, r3
 8007298:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800729c:	6013      	str	r3, [r2, #0]
 800729e:	e013      	b.n	80072c8 <USB_DevInit+0x168>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 80072a0:	693b      	ldr	r3, [r7, #16]
 80072a2:	015a      	lsls	r2, r3, #5
 80072a4:	68fb      	ldr	r3, [r7, #12]
 80072a6:	4413      	add	r3, r2
 80072a8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80072ac:	461a      	mov	r2, r3
 80072ae:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80072b2:	6013      	str	r3, [r2, #0]
 80072b4:	e008      	b.n	80072c8 <USB_DevInit+0x168>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 80072b6:	693b      	ldr	r3, [r7, #16]
 80072b8:	015a      	lsls	r2, r3, #5
 80072ba:	68fb      	ldr	r3, [r7, #12]
 80072bc:	4413      	add	r3, r2
 80072be:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80072c2:	461a      	mov	r2, r3
 80072c4:	2300      	movs	r3, #0
 80072c6:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 80072c8:	693b      	ldr	r3, [r7, #16]
 80072ca:	015a      	lsls	r2, r3, #5
 80072cc:	68fb      	ldr	r3, [r7, #12]
 80072ce:	4413      	add	r3, r2
 80072d0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80072d4:	461a      	mov	r2, r3
 80072d6:	2300      	movs	r3, #0
 80072d8:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 80072da:	693b      	ldr	r3, [r7, #16]
 80072dc:	015a      	lsls	r2, r3, #5
 80072de:	68fb      	ldr	r3, [r7, #12]
 80072e0:	4413      	add	r3, r2
 80072e2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80072e6:	461a      	mov	r2, r3
 80072e8:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 80072ec:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 80072ee:	693b      	ldr	r3, [r7, #16]
 80072f0:	3301      	adds	r3, #1
 80072f2:	613b      	str	r3, [r7, #16]
 80072f4:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 80072f8:	461a      	mov	r2, r3
 80072fa:	693b      	ldr	r3, [r7, #16]
 80072fc:	4293      	cmp	r3, r2
 80072fe:	d3b5      	bcc.n	800726c <USB_DevInit+0x10c>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8007300:	2300      	movs	r3, #0
 8007302:	613b      	str	r3, [r7, #16]
 8007304:	e043      	b.n	800738e <USB_DevInit+0x22e>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8007306:	693b      	ldr	r3, [r7, #16]
 8007308:	015a      	lsls	r2, r3, #5
 800730a:	68fb      	ldr	r3, [r7, #12]
 800730c:	4413      	add	r3, r2
 800730e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007312:	681b      	ldr	r3, [r3, #0]
 8007314:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8007318:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800731c:	d118      	bne.n	8007350 <USB_DevInit+0x1f0>
    {
      if (i == 0U)
 800731e:	693b      	ldr	r3, [r7, #16]
 8007320:	2b00      	cmp	r3, #0
 8007322:	d10a      	bne.n	800733a <USB_DevInit+0x1da>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8007324:	693b      	ldr	r3, [r7, #16]
 8007326:	015a      	lsls	r2, r3, #5
 8007328:	68fb      	ldr	r3, [r7, #12]
 800732a:	4413      	add	r3, r2
 800732c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007330:	461a      	mov	r2, r3
 8007332:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8007336:	6013      	str	r3, [r2, #0]
 8007338:	e013      	b.n	8007362 <USB_DevInit+0x202>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 800733a:	693b      	ldr	r3, [r7, #16]
 800733c:	015a      	lsls	r2, r3, #5
 800733e:	68fb      	ldr	r3, [r7, #12]
 8007340:	4413      	add	r3, r2
 8007342:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007346:	461a      	mov	r2, r3
 8007348:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800734c:	6013      	str	r3, [r2, #0]
 800734e:	e008      	b.n	8007362 <USB_DevInit+0x202>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8007350:	693b      	ldr	r3, [r7, #16]
 8007352:	015a      	lsls	r2, r3, #5
 8007354:	68fb      	ldr	r3, [r7, #12]
 8007356:	4413      	add	r3, r2
 8007358:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800735c:	461a      	mov	r2, r3
 800735e:	2300      	movs	r3, #0
 8007360:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8007362:	693b      	ldr	r3, [r7, #16]
 8007364:	015a      	lsls	r2, r3, #5
 8007366:	68fb      	ldr	r3, [r7, #12]
 8007368:	4413      	add	r3, r2
 800736a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800736e:	461a      	mov	r2, r3
 8007370:	2300      	movs	r3, #0
 8007372:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8007374:	693b      	ldr	r3, [r7, #16]
 8007376:	015a      	lsls	r2, r3, #5
 8007378:	68fb      	ldr	r3, [r7, #12]
 800737a:	4413      	add	r3, r2
 800737c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007380:	461a      	mov	r2, r3
 8007382:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8007386:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8007388:	693b      	ldr	r3, [r7, #16]
 800738a:	3301      	adds	r3, #1
 800738c:	613b      	str	r3, [r7, #16]
 800738e:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8007392:	461a      	mov	r2, r3
 8007394:	693b      	ldr	r3, [r7, #16]
 8007396:	4293      	cmp	r3, r2
 8007398:	d3b5      	bcc.n	8007306 <USB_DevInit+0x1a6>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 800739a:	68fb      	ldr	r3, [r7, #12]
 800739c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80073a0:	691b      	ldr	r3, [r3, #16]
 80073a2:	68fa      	ldr	r2, [r7, #12]
 80073a4:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80073a8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80073ac:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 80073ae:	687b      	ldr	r3, [r7, #4]
 80073b0:	2200      	movs	r2, #0
 80073b2:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 80073b4:	687b      	ldr	r3, [r7, #4]
 80073b6:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 80073ba:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 80073bc:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 80073c0:	2b00      	cmp	r3, #0
 80073c2:	d105      	bne.n	80073d0 <USB_DevInit+0x270>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 80073c4:	687b      	ldr	r3, [r7, #4]
 80073c6:	699b      	ldr	r3, [r3, #24]
 80073c8:	f043 0210 	orr.w	r2, r3, #16
 80073cc:	687b      	ldr	r3, [r7, #4]
 80073ce:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 80073d0:	687b      	ldr	r3, [r7, #4]
 80073d2:	699a      	ldr	r2, [r3, #24]
 80073d4:	4b10      	ldr	r3, [pc, #64]	; (8007418 <USB_DevInit+0x2b8>)
 80073d6:	4313      	orrs	r3, r2
 80073d8:	687a      	ldr	r2, [r7, #4]
 80073da:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 80073dc:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
 80073e0:	2b00      	cmp	r3, #0
 80073e2:	d005      	beq.n	80073f0 <USB_DevInit+0x290>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 80073e4:	687b      	ldr	r3, [r7, #4]
 80073e6:	699b      	ldr	r3, [r3, #24]
 80073e8:	f043 0208 	orr.w	r2, r3, #8
 80073ec:	687b      	ldr	r3, [r7, #4]
 80073ee:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 80073f0:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 80073f4:	2b01      	cmp	r3, #1
 80073f6:	d107      	bne.n	8007408 <USB_DevInit+0x2a8>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 80073f8:	687b      	ldr	r3, [r7, #4]
 80073fa:	699b      	ldr	r3, [r3, #24]
 80073fc:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8007400:	f043 0304 	orr.w	r3, r3, #4
 8007404:	687a      	ldr	r2, [r7, #4]
 8007406:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8007408:	7dfb      	ldrb	r3, [r7, #23]
}
 800740a:	4618      	mov	r0, r3
 800740c:	3718      	adds	r7, #24
 800740e:	46bd      	mov	sp, r7
 8007410:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8007414:	b004      	add	sp, #16
 8007416:	4770      	bx	lr
 8007418:	803c3800 	.word	0x803c3800

0800741c <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 800741c:	b480      	push	{r7}
 800741e:	b085      	sub	sp, #20
 8007420:	af00      	add	r7, sp, #0
 8007422:	6078      	str	r0, [r7, #4]
 8007424:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8007426:	2300      	movs	r3, #0
 8007428:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800742a:	68fb      	ldr	r3, [r7, #12]
 800742c:	3301      	adds	r3, #1
 800742e:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8007430:	68fb      	ldr	r3, [r7, #12]
 8007432:	f1b3 6f70 	cmp.w	r3, #251658240	; 0xf000000
 8007436:	d901      	bls.n	800743c <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8007438:	2303      	movs	r3, #3
 800743a:	e01b      	b.n	8007474 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800743c:	687b      	ldr	r3, [r7, #4]
 800743e:	691b      	ldr	r3, [r3, #16]
 8007440:	2b00      	cmp	r3, #0
 8007442:	daf2      	bge.n	800742a <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8007444:	2300      	movs	r3, #0
 8007446:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8007448:	683b      	ldr	r3, [r7, #0]
 800744a:	019b      	lsls	r3, r3, #6
 800744c:	f043 0220 	orr.w	r2, r3, #32
 8007450:	687b      	ldr	r3, [r7, #4]
 8007452:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8007454:	68fb      	ldr	r3, [r7, #12]
 8007456:	3301      	adds	r3, #1
 8007458:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800745a:	68fb      	ldr	r3, [r7, #12]
 800745c:	f1b3 6f70 	cmp.w	r3, #251658240	; 0xf000000
 8007460:	d901      	bls.n	8007466 <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 8007462:	2303      	movs	r3, #3
 8007464:	e006      	b.n	8007474 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8007466:	687b      	ldr	r3, [r7, #4]
 8007468:	691b      	ldr	r3, [r3, #16]
 800746a:	f003 0320 	and.w	r3, r3, #32
 800746e:	2b20      	cmp	r3, #32
 8007470:	d0f0      	beq.n	8007454 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 8007472:	2300      	movs	r3, #0
}
 8007474:	4618      	mov	r0, r3
 8007476:	3714      	adds	r7, #20
 8007478:	46bd      	mov	sp, r7
 800747a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800747e:	4770      	bx	lr

08007480 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8007480:	b480      	push	{r7}
 8007482:	b085      	sub	sp, #20
 8007484:	af00      	add	r7, sp, #0
 8007486:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8007488:	2300      	movs	r3, #0
 800748a:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800748c:	68fb      	ldr	r3, [r7, #12]
 800748e:	3301      	adds	r3, #1
 8007490:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8007492:	68fb      	ldr	r3, [r7, #12]
 8007494:	f1b3 6f70 	cmp.w	r3, #251658240	; 0xf000000
 8007498:	d901      	bls.n	800749e <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 800749a:	2303      	movs	r3, #3
 800749c:	e018      	b.n	80074d0 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800749e:	687b      	ldr	r3, [r7, #4]
 80074a0:	691b      	ldr	r3, [r3, #16]
 80074a2:	2b00      	cmp	r3, #0
 80074a4:	daf2      	bge.n	800748c <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 80074a6:	2300      	movs	r3, #0
 80074a8:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 80074aa:	687b      	ldr	r3, [r7, #4]
 80074ac:	2210      	movs	r2, #16
 80074ae:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80074b0:	68fb      	ldr	r3, [r7, #12]
 80074b2:	3301      	adds	r3, #1
 80074b4:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 80074b6:	68fb      	ldr	r3, [r7, #12]
 80074b8:	f1b3 6f70 	cmp.w	r3, #251658240	; 0xf000000
 80074bc:	d901      	bls.n	80074c2 <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 80074be:	2303      	movs	r3, #3
 80074c0:	e006      	b.n	80074d0 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 80074c2:	687b      	ldr	r3, [r7, #4]
 80074c4:	691b      	ldr	r3, [r3, #16]
 80074c6:	f003 0310 	and.w	r3, r3, #16
 80074ca:	2b10      	cmp	r3, #16
 80074cc:	d0f0      	beq.n	80074b0 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 80074ce:	2300      	movs	r3, #0
}
 80074d0:	4618      	mov	r0, r3
 80074d2:	3714      	adds	r7, #20
 80074d4:	46bd      	mov	sp, r7
 80074d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074da:	4770      	bx	lr

080074dc <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(const USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 80074dc:	b480      	push	{r7}
 80074de:	b085      	sub	sp, #20
 80074e0:	af00      	add	r7, sp, #0
 80074e2:	6078      	str	r0, [r7, #4]
 80074e4:	460b      	mov	r3, r1
 80074e6:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80074e8:	687b      	ldr	r3, [r7, #4]
 80074ea:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 80074ec:	68fb      	ldr	r3, [r7, #12]
 80074ee:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80074f2:	681a      	ldr	r2, [r3, #0]
 80074f4:	78fb      	ldrb	r3, [r7, #3]
 80074f6:	68f9      	ldr	r1, [r7, #12]
 80074f8:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80074fc:	4313      	orrs	r3, r2
 80074fe:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8007500:	2300      	movs	r3, #0
}
 8007502:	4618      	mov	r0, r3
 8007504:	3714      	adds	r7, #20
 8007506:	46bd      	mov	sp, r7
 8007508:	f85d 7b04 	ldr.w	r7, [sp], #4
 800750c:	4770      	bx	lr

0800750e <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USBD_HS_SPEED: High speed mode
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(const USB_OTG_GlobalTypeDef *USBx)
{
 800750e:	b480      	push	{r7}
 8007510:	b087      	sub	sp, #28
 8007512:	af00      	add	r7, sp, #0
 8007514:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007516:	687b      	ldr	r3, [r7, #4]
 8007518:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 800751a:	693b      	ldr	r3, [r7, #16]
 800751c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007520:	689b      	ldr	r3, [r3, #8]
 8007522:	f003 0306 	and.w	r3, r3, #6
 8007526:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 8007528:	68fb      	ldr	r3, [r7, #12]
 800752a:	2b00      	cmp	r3, #0
 800752c:	d102      	bne.n	8007534 <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 800752e:	2300      	movs	r3, #0
 8007530:	75fb      	strb	r3, [r7, #23]
 8007532:	e00a      	b.n	800754a <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 8007534:	68fb      	ldr	r3, [r7, #12]
 8007536:	2b02      	cmp	r3, #2
 8007538:	d002      	beq.n	8007540 <USB_GetDevSpeed+0x32>
 800753a:	68fb      	ldr	r3, [r7, #12]
 800753c:	2b06      	cmp	r3, #6
 800753e:	d102      	bne.n	8007546 <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 8007540:	2302      	movs	r3, #2
 8007542:	75fb      	strb	r3, [r7, #23]
 8007544:	e001      	b.n	800754a <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 8007546:	230f      	movs	r3, #15
 8007548:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 800754a:	7dfb      	ldrb	r3, [r7, #23]
}
 800754c:	4618      	mov	r0, r3
 800754e:	371c      	adds	r7, #28
 8007550:	46bd      	mov	sp, r7
 8007552:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007556:	4770      	bx	lr

08007558 <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 8007558:	b480      	push	{r7}
 800755a:	b085      	sub	sp, #20
 800755c:	af00      	add	r7, sp, #0
 800755e:	6078      	str	r0, [r7, #4]
 8007560:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007562:	687b      	ldr	r3, [r7, #4]
 8007564:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8007566:	683b      	ldr	r3, [r7, #0]
 8007568:	781b      	ldrb	r3, [r3, #0]
 800756a:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800756c:	683b      	ldr	r3, [r7, #0]
 800756e:	785b      	ldrb	r3, [r3, #1]
 8007570:	2b01      	cmp	r3, #1
 8007572:	d13a      	bne.n	80075ea <USB_ActivateEndpoint+0x92>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 8007574:	68fb      	ldr	r3, [r7, #12]
 8007576:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800757a:	69da      	ldr	r2, [r3, #28]
 800757c:	683b      	ldr	r3, [r7, #0]
 800757e:	781b      	ldrb	r3, [r3, #0]
 8007580:	f003 030f 	and.w	r3, r3, #15
 8007584:	2101      	movs	r1, #1
 8007586:	fa01 f303 	lsl.w	r3, r1, r3
 800758a:	b29b      	uxth	r3, r3
 800758c:	68f9      	ldr	r1, [r7, #12]
 800758e:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8007592:	4313      	orrs	r3, r2
 8007594:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 8007596:	68bb      	ldr	r3, [r7, #8]
 8007598:	015a      	lsls	r2, r3, #5
 800759a:	68fb      	ldr	r3, [r7, #12]
 800759c:	4413      	add	r3, r2
 800759e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80075a2:	681b      	ldr	r3, [r3, #0]
 80075a4:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80075a8:	2b00      	cmp	r3, #0
 80075aa:	d155      	bne.n	8007658 <USB_ActivateEndpoint+0x100>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 80075ac:	68bb      	ldr	r3, [r7, #8]
 80075ae:	015a      	lsls	r2, r3, #5
 80075b0:	68fb      	ldr	r3, [r7, #12]
 80075b2:	4413      	add	r3, r2
 80075b4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80075b8:	681a      	ldr	r2, [r3, #0]
 80075ba:	683b      	ldr	r3, [r7, #0]
 80075bc:	689b      	ldr	r3, [r3, #8]
 80075be:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 80075c2:	683b      	ldr	r3, [r7, #0]
 80075c4:	791b      	ldrb	r3, [r3, #4]
 80075c6:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 80075c8:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 80075ca:	68bb      	ldr	r3, [r7, #8]
 80075cc:	059b      	lsls	r3, r3, #22
 80075ce:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 80075d0:	4313      	orrs	r3, r2
 80075d2:	68ba      	ldr	r2, [r7, #8]
 80075d4:	0151      	lsls	r1, r2, #5
 80075d6:	68fa      	ldr	r2, [r7, #12]
 80075d8:	440a      	add	r2, r1
 80075da:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80075de:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80075e2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80075e6:	6013      	str	r3, [r2, #0]
 80075e8:	e036      	b.n	8007658 <USB_ActivateEndpoint+0x100>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 80075ea:	68fb      	ldr	r3, [r7, #12]
 80075ec:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80075f0:	69da      	ldr	r2, [r3, #28]
 80075f2:	683b      	ldr	r3, [r7, #0]
 80075f4:	781b      	ldrb	r3, [r3, #0]
 80075f6:	f003 030f 	and.w	r3, r3, #15
 80075fa:	2101      	movs	r1, #1
 80075fc:	fa01 f303 	lsl.w	r3, r1, r3
 8007600:	041b      	lsls	r3, r3, #16
 8007602:	68f9      	ldr	r1, [r7, #12]
 8007604:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8007608:	4313      	orrs	r3, r2
 800760a:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 800760c:	68bb      	ldr	r3, [r7, #8]
 800760e:	015a      	lsls	r2, r3, #5
 8007610:	68fb      	ldr	r3, [r7, #12]
 8007612:	4413      	add	r3, r2
 8007614:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007618:	681b      	ldr	r3, [r3, #0]
 800761a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800761e:	2b00      	cmp	r3, #0
 8007620:	d11a      	bne.n	8007658 <USB_ActivateEndpoint+0x100>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8007622:	68bb      	ldr	r3, [r7, #8]
 8007624:	015a      	lsls	r2, r3, #5
 8007626:	68fb      	ldr	r3, [r7, #12]
 8007628:	4413      	add	r3, r2
 800762a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800762e:	681a      	ldr	r2, [r3, #0]
 8007630:	683b      	ldr	r3, [r7, #0]
 8007632:	689b      	ldr	r3, [r3, #8]
 8007634:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 8007638:	683b      	ldr	r3, [r7, #0]
 800763a:	791b      	ldrb	r3, [r3, #4]
 800763c:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 800763e:	430b      	orrs	r3, r1
 8007640:	4313      	orrs	r3, r2
 8007642:	68ba      	ldr	r2, [r7, #8]
 8007644:	0151      	lsls	r1, r2, #5
 8007646:	68fa      	ldr	r2, [r7, #12]
 8007648:	440a      	add	r2, r1
 800764a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800764e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8007652:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007656:	6013      	str	r3, [r2, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 8007658:	2300      	movs	r3, #0
}
 800765a:	4618      	mov	r0, r3
 800765c:	3714      	adds	r7, #20
 800765e:	46bd      	mov	sp, r7
 8007660:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007664:	4770      	bx	lr
	...

08007668 <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 8007668:	b480      	push	{r7}
 800766a:	b085      	sub	sp, #20
 800766c:	af00      	add	r7, sp, #0
 800766e:	6078      	str	r0, [r7, #4]
 8007670:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007672:	687b      	ldr	r3, [r7, #4]
 8007674:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8007676:	683b      	ldr	r3, [r7, #0]
 8007678:	781b      	ldrb	r3, [r3, #0]
 800767a:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 800767c:	683b      	ldr	r3, [r7, #0]
 800767e:	785b      	ldrb	r3, [r3, #1]
 8007680:	2b01      	cmp	r3, #1
 8007682:	d161      	bne.n	8007748 <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8007684:	68bb      	ldr	r3, [r7, #8]
 8007686:	015a      	lsls	r2, r3, #5
 8007688:	68fb      	ldr	r3, [r7, #12]
 800768a:	4413      	add	r3, r2
 800768c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007690:	681b      	ldr	r3, [r3, #0]
 8007692:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8007696:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800769a:	d11f      	bne.n	80076dc <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 800769c:	68bb      	ldr	r3, [r7, #8]
 800769e:	015a      	lsls	r2, r3, #5
 80076a0:	68fb      	ldr	r3, [r7, #12]
 80076a2:	4413      	add	r3, r2
 80076a4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80076a8:	681b      	ldr	r3, [r3, #0]
 80076aa:	68ba      	ldr	r2, [r7, #8]
 80076ac:	0151      	lsls	r1, r2, #5
 80076ae:	68fa      	ldr	r2, [r7, #12]
 80076b0:	440a      	add	r2, r1
 80076b2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80076b6:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 80076ba:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 80076bc:	68bb      	ldr	r3, [r7, #8]
 80076be:	015a      	lsls	r2, r3, #5
 80076c0:	68fb      	ldr	r3, [r7, #12]
 80076c2:	4413      	add	r3, r2
 80076c4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80076c8:	681b      	ldr	r3, [r3, #0]
 80076ca:	68ba      	ldr	r2, [r7, #8]
 80076cc:	0151      	lsls	r1, r2, #5
 80076ce:	68fa      	ldr	r2, [r7, #12]
 80076d0:	440a      	add	r2, r1
 80076d2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80076d6:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80076da:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 80076dc:	68fb      	ldr	r3, [r7, #12]
 80076de:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80076e2:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80076e4:	683b      	ldr	r3, [r7, #0]
 80076e6:	781b      	ldrb	r3, [r3, #0]
 80076e8:	f003 030f 	and.w	r3, r3, #15
 80076ec:	2101      	movs	r1, #1
 80076ee:	fa01 f303 	lsl.w	r3, r1, r3
 80076f2:	b29b      	uxth	r3, r3
 80076f4:	43db      	mvns	r3, r3
 80076f6:	68f9      	ldr	r1, [r7, #12]
 80076f8:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80076fc:	4013      	ands	r3, r2
 80076fe:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8007700:	68fb      	ldr	r3, [r7, #12]
 8007702:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007706:	69da      	ldr	r2, [r3, #28]
 8007708:	683b      	ldr	r3, [r7, #0]
 800770a:	781b      	ldrb	r3, [r3, #0]
 800770c:	f003 030f 	and.w	r3, r3, #15
 8007710:	2101      	movs	r1, #1
 8007712:	fa01 f303 	lsl.w	r3, r1, r3
 8007716:	b29b      	uxth	r3, r3
 8007718:	43db      	mvns	r3, r3
 800771a:	68f9      	ldr	r1, [r7, #12]
 800771c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8007720:	4013      	ands	r3, r2
 8007722:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 8007724:	68bb      	ldr	r3, [r7, #8]
 8007726:	015a      	lsls	r2, r3, #5
 8007728:	68fb      	ldr	r3, [r7, #12]
 800772a:	4413      	add	r3, r2
 800772c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007730:	681a      	ldr	r2, [r3, #0]
 8007732:	68bb      	ldr	r3, [r7, #8]
 8007734:	0159      	lsls	r1, r3, #5
 8007736:	68fb      	ldr	r3, [r7, #12]
 8007738:	440b      	add	r3, r1
 800773a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800773e:	4619      	mov	r1, r3
 8007740:	4b35      	ldr	r3, [pc, #212]	; (8007818 <USB_DeactivateEndpoint+0x1b0>)
 8007742:	4013      	ands	r3, r2
 8007744:	600b      	str	r3, [r1, #0]
 8007746:	e060      	b.n	800780a <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8007748:	68bb      	ldr	r3, [r7, #8]
 800774a:	015a      	lsls	r2, r3, #5
 800774c:	68fb      	ldr	r3, [r7, #12]
 800774e:	4413      	add	r3, r2
 8007750:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007754:	681b      	ldr	r3, [r3, #0]
 8007756:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800775a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800775e:	d11f      	bne.n	80077a0 <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8007760:	68bb      	ldr	r3, [r7, #8]
 8007762:	015a      	lsls	r2, r3, #5
 8007764:	68fb      	ldr	r3, [r7, #12]
 8007766:	4413      	add	r3, r2
 8007768:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800776c:	681b      	ldr	r3, [r3, #0]
 800776e:	68ba      	ldr	r2, [r7, #8]
 8007770:	0151      	lsls	r1, r2, #5
 8007772:	68fa      	ldr	r2, [r7, #12]
 8007774:	440a      	add	r2, r1
 8007776:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800777a:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800777e:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 8007780:	68bb      	ldr	r3, [r7, #8]
 8007782:	015a      	lsls	r2, r3, #5
 8007784:	68fb      	ldr	r3, [r7, #12]
 8007786:	4413      	add	r3, r2
 8007788:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800778c:	681b      	ldr	r3, [r3, #0]
 800778e:	68ba      	ldr	r2, [r7, #8]
 8007790:	0151      	lsls	r1, r2, #5
 8007792:	68fa      	ldr	r2, [r7, #12]
 8007794:	440a      	add	r2, r1
 8007796:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800779a:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800779e:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 80077a0:	68fb      	ldr	r3, [r7, #12]
 80077a2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80077a6:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80077a8:	683b      	ldr	r3, [r7, #0]
 80077aa:	781b      	ldrb	r3, [r3, #0]
 80077ac:	f003 030f 	and.w	r3, r3, #15
 80077b0:	2101      	movs	r1, #1
 80077b2:	fa01 f303 	lsl.w	r3, r1, r3
 80077b6:	041b      	lsls	r3, r3, #16
 80077b8:	43db      	mvns	r3, r3
 80077ba:	68f9      	ldr	r1, [r7, #12]
 80077bc:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80077c0:	4013      	ands	r3, r2
 80077c2:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 80077c4:	68fb      	ldr	r3, [r7, #12]
 80077c6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80077ca:	69da      	ldr	r2, [r3, #28]
 80077cc:	683b      	ldr	r3, [r7, #0]
 80077ce:	781b      	ldrb	r3, [r3, #0]
 80077d0:	f003 030f 	and.w	r3, r3, #15
 80077d4:	2101      	movs	r1, #1
 80077d6:	fa01 f303 	lsl.w	r3, r1, r3
 80077da:	041b      	lsls	r3, r3, #16
 80077dc:	43db      	mvns	r3, r3
 80077de:	68f9      	ldr	r1, [r7, #12]
 80077e0:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80077e4:	4013      	ands	r3, r2
 80077e6:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 80077e8:	68bb      	ldr	r3, [r7, #8]
 80077ea:	015a      	lsls	r2, r3, #5
 80077ec:	68fb      	ldr	r3, [r7, #12]
 80077ee:	4413      	add	r3, r2
 80077f0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80077f4:	681a      	ldr	r2, [r3, #0]
 80077f6:	68bb      	ldr	r3, [r7, #8]
 80077f8:	0159      	lsls	r1, r3, #5
 80077fa:	68fb      	ldr	r3, [r7, #12]
 80077fc:	440b      	add	r3, r1
 80077fe:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007802:	4619      	mov	r1, r3
 8007804:	4b05      	ldr	r3, [pc, #20]	; (800781c <USB_DeactivateEndpoint+0x1b4>)
 8007806:	4013      	ands	r3, r2
 8007808:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 800780a:	2300      	movs	r3, #0
}
 800780c:	4618      	mov	r0, r3
 800780e:	3714      	adds	r7, #20
 8007810:	46bd      	mov	sp, r7
 8007812:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007816:	4770      	bx	lr
 8007818:	ec337800 	.word	0xec337800
 800781c:	eff37800 	.word	0xeff37800

08007820 <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8007820:	b580      	push	{r7, lr}
 8007822:	b08a      	sub	sp, #40	; 0x28
 8007824:	af02      	add	r7, sp, #8
 8007826:	60f8      	str	r0, [r7, #12]
 8007828:	60b9      	str	r1, [r7, #8]
 800782a:	4613      	mov	r3, r2
 800782c:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800782e:	68fb      	ldr	r3, [r7, #12]
 8007830:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 8007832:	68bb      	ldr	r3, [r7, #8]
 8007834:	781b      	ldrb	r3, [r3, #0]
 8007836:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 8007838:	68bb      	ldr	r3, [r7, #8]
 800783a:	785b      	ldrb	r3, [r3, #1]
 800783c:	2b01      	cmp	r3, #1
 800783e:	f040 817a 	bne.w	8007b36 <USB_EPStartXfer+0x316>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 8007842:	68bb      	ldr	r3, [r7, #8]
 8007844:	691b      	ldr	r3, [r3, #16]
 8007846:	2b00      	cmp	r3, #0
 8007848:	d132      	bne.n	80078b0 <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800784a:	69bb      	ldr	r3, [r7, #24]
 800784c:	015a      	lsls	r2, r3, #5
 800784e:	69fb      	ldr	r3, [r7, #28]
 8007850:	4413      	add	r3, r2
 8007852:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007856:	691b      	ldr	r3, [r3, #16]
 8007858:	69ba      	ldr	r2, [r7, #24]
 800785a:	0151      	lsls	r1, r2, #5
 800785c:	69fa      	ldr	r2, [r7, #28]
 800785e:	440a      	add	r2, r1
 8007860:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007864:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8007868:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800786c:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800786e:	69bb      	ldr	r3, [r7, #24]
 8007870:	015a      	lsls	r2, r3, #5
 8007872:	69fb      	ldr	r3, [r7, #28]
 8007874:	4413      	add	r3, r2
 8007876:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800787a:	691b      	ldr	r3, [r3, #16]
 800787c:	69ba      	ldr	r2, [r7, #24]
 800787e:	0151      	lsls	r1, r2, #5
 8007880:	69fa      	ldr	r2, [r7, #28]
 8007882:	440a      	add	r2, r1
 8007884:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007888:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800788c:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800788e:	69bb      	ldr	r3, [r7, #24]
 8007890:	015a      	lsls	r2, r3, #5
 8007892:	69fb      	ldr	r3, [r7, #28]
 8007894:	4413      	add	r3, r2
 8007896:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800789a:	691b      	ldr	r3, [r3, #16]
 800789c:	69ba      	ldr	r2, [r7, #24]
 800789e:	0151      	lsls	r1, r2, #5
 80078a0:	69fa      	ldr	r2, [r7, #28]
 80078a2:	440a      	add	r2, r1
 80078a4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80078a8:	0cdb      	lsrs	r3, r3, #19
 80078aa:	04db      	lsls	r3, r3, #19
 80078ac:	6113      	str	r3, [r2, #16]
 80078ae:	e092      	b.n	80079d6 <USB_EPStartXfer+0x1b6>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 80078b0:	69bb      	ldr	r3, [r7, #24]
 80078b2:	015a      	lsls	r2, r3, #5
 80078b4:	69fb      	ldr	r3, [r7, #28]
 80078b6:	4413      	add	r3, r2
 80078b8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80078bc:	691b      	ldr	r3, [r3, #16]
 80078be:	69ba      	ldr	r2, [r7, #24]
 80078c0:	0151      	lsls	r1, r2, #5
 80078c2:	69fa      	ldr	r2, [r7, #28]
 80078c4:	440a      	add	r2, r1
 80078c6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80078ca:	0cdb      	lsrs	r3, r3, #19
 80078cc:	04db      	lsls	r3, r3, #19
 80078ce:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 80078d0:	69bb      	ldr	r3, [r7, #24]
 80078d2:	015a      	lsls	r2, r3, #5
 80078d4:	69fb      	ldr	r3, [r7, #28]
 80078d6:	4413      	add	r3, r2
 80078d8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80078dc:	691b      	ldr	r3, [r3, #16]
 80078de:	69ba      	ldr	r2, [r7, #24]
 80078e0:	0151      	lsls	r1, r2, #5
 80078e2:	69fa      	ldr	r2, [r7, #28]
 80078e4:	440a      	add	r2, r1
 80078e6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80078ea:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 80078ee:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 80078f2:	6113      	str	r3, [r2, #16]

      if (epnum == 0U)
 80078f4:	69bb      	ldr	r3, [r7, #24]
 80078f6:	2b00      	cmp	r3, #0
 80078f8:	d11a      	bne.n	8007930 <USB_EPStartXfer+0x110>
      {
        if (ep->xfer_len > ep->maxpacket)
 80078fa:	68bb      	ldr	r3, [r7, #8]
 80078fc:	691a      	ldr	r2, [r3, #16]
 80078fe:	68bb      	ldr	r3, [r7, #8]
 8007900:	689b      	ldr	r3, [r3, #8]
 8007902:	429a      	cmp	r2, r3
 8007904:	d903      	bls.n	800790e <USB_EPStartXfer+0xee>
        {
          ep->xfer_len = ep->maxpacket;
 8007906:	68bb      	ldr	r3, [r7, #8]
 8007908:	689a      	ldr	r2, [r3, #8]
 800790a:	68bb      	ldr	r3, [r7, #8]
 800790c:	611a      	str	r2, [r3, #16]
        }

        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800790e:	69bb      	ldr	r3, [r7, #24]
 8007910:	015a      	lsls	r2, r3, #5
 8007912:	69fb      	ldr	r3, [r7, #28]
 8007914:	4413      	add	r3, r2
 8007916:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800791a:	691b      	ldr	r3, [r3, #16]
 800791c:	69ba      	ldr	r2, [r7, #24]
 800791e:	0151      	lsls	r1, r2, #5
 8007920:	69fa      	ldr	r2, [r7, #28]
 8007922:	440a      	add	r2, r1
 8007924:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007928:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800792c:	6113      	str	r3, [r2, #16]
 800792e:	e01b      	b.n	8007968 <USB_EPStartXfer+0x148>
      }
      else
      {
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 8007930:	69bb      	ldr	r3, [r7, #24]
 8007932:	015a      	lsls	r2, r3, #5
 8007934:	69fb      	ldr	r3, [r7, #28]
 8007936:	4413      	add	r3, r2
 8007938:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800793c:	691a      	ldr	r2, [r3, #16]
                                       (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 800793e:	68bb      	ldr	r3, [r7, #8]
 8007940:	6919      	ldr	r1, [r3, #16]
 8007942:	68bb      	ldr	r3, [r7, #8]
 8007944:	689b      	ldr	r3, [r3, #8]
 8007946:	440b      	add	r3, r1
 8007948:	1e59      	subs	r1, r3, #1
 800794a:	68bb      	ldr	r3, [r7, #8]
 800794c:	689b      	ldr	r3, [r3, #8]
 800794e:	fbb1 f3f3 	udiv	r3, r1, r3
 8007952:	04d9      	lsls	r1, r3, #19
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 8007954:	4ba2      	ldr	r3, [pc, #648]	; (8007be0 <USB_EPStartXfer+0x3c0>)
 8007956:	400b      	ands	r3, r1
 8007958:	69b9      	ldr	r1, [r7, #24]
 800795a:	0148      	lsls	r0, r1, #5
 800795c:	69f9      	ldr	r1, [r7, #28]
 800795e:	4401      	add	r1, r0
 8007960:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8007964:	4313      	orrs	r3, r2
 8007966:	610b      	str	r3, [r1, #16]
      }

      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8007968:	69bb      	ldr	r3, [r7, #24]
 800796a:	015a      	lsls	r2, r3, #5
 800796c:	69fb      	ldr	r3, [r7, #28]
 800796e:	4413      	add	r3, r2
 8007970:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007974:	691a      	ldr	r2, [r3, #16]
 8007976:	68bb      	ldr	r3, [r7, #8]
 8007978:	691b      	ldr	r3, [r3, #16]
 800797a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800797e:	69b9      	ldr	r1, [r7, #24]
 8007980:	0148      	lsls	r0, r1, #5
 8007982:	69f9      	ldr	r1, [r7, #28]
 8007984:	4401      	add	r1, r0
 8007986:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 800798a:	4313      	orrs	r3, r2
 800798c:	610b      	str	r3, [r1, #16]

      if (ep->type == EP_TYPE_ISOC)
 800798e:	68bb      	ldr	r3, [r7, #8]
 8007990:	791b      	ldrb	r3, [r3, #4]
 8007992:	2b01      	cmp	r3, #1
 8007994:	d11f      	bne.n	80079d6 <USB_EPStartXfer+0x1b6>
      {
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 8007996:	69bb      	ldr	r3, [r7, #24]
 8007998:	015a      	lsls	r2, r3, #5
 800799a:	69fb      	ldr	r3, [r7, #28]
 800799c:	4413      	add	r3, r2
 800799e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80079a2:	691b      	ldr	r3, [r3, #16]
 80079a4:	69ba      	ldr	r2, [r7, #24]
 80079a6:	0151      	lsls	r1, r2, #5
 80079a8:	69fa      	ldr	r2, [r7, #28]
 80079aa:	440a      	add	r2, r1
 80079ac:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80079b0:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 80079b4:	6113      	str	r3, [r2, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 80079b6:	69bb      	ldr	r3, [r7, #24]
 80079b8:	015a      	lsls	r2, r3, #5
 80079ba:	69fb      	ldr	r3, [r7, #28]
 80079bc:	4413      	add	r3, r2
 80079be:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80079c2:	691b      	ldr	r3, [r3, #16]
 80079c4:	69ba      	ldr	r2, [r7, #24]
 80079c6:	0151      	lsls	r1, r2, #5
 80079c8:	69fa      	ldr	r2, [r7, #28]
 80079ca:	440a      	add	r2, r1
 80079cc:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80079d0:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80079d4:	6113      	str	r3, [r2, #16]
      }
    }

    if (dma == 1U)
 80079d6:	79fb      	ldrb	r3, [r7, #7]
 80079d8:	2b01      	cmp	r3, #1
 80079da:	d14b      	bne.n	8007a74 <USB_EPStartXfer+0x254>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 80079dc:	68bb      	ldr	r3, [r7, #8]
 80079de:	69db      	ldr	r3, [r3, #28]
 80079e0:	2b00      	cmp	r3, #0
 80079e2:	d009      	beq.n	80079f8 <USB_EPStartXfer+0x1d8>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 80079e4:	69bb      	ldr	r3, [r7, #24]
 80079e6:	015a      	lsls	r2, r3, #5
 80079e8:	69fb      	ldr	r3, [r7, #28]
 80079ea:	4413      	add	r3, r2
 80079ec:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80079f0:	461a      	mov	r2, r3
 80079f2:	68bb      	ldr	r3, [r7, #8]
 80079f4:	69db      	ldr	r3, [r3, #28]
 80079f6:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 80079f8:	68bb      	ldr	r3, [r7, #8]
 80079fa:	791b      	ldrb	r3, [r3, #4]
 80079fc:	2b01      	cmp	r3, #1
 80079fe:	d128      	bne.n	8007a52 <USB_EPStartXfer+0x232>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8007a00:	69fb      	ldr	r3, [r7, #28]
 8007a02:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007a06:	689b      	ldr	r3, [r3, #8]
 8007a08:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007a0c:	2b00      	cmp	r3, #0
 8007a0e:	d110      	bne.n	8007a32 <USB_EPStartXfer+0x212>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8007a10:	69bb      	ldr	r3, [r7, #24]
 8007a12:	015a      	lsls	r2, r3, #5
 8007a14:	69fb      	ldr	r3, [r7, #28]
 8007a16:	4413      	add	r3, r2
 8007a18:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007a1c:	681b      	ldr	r3, [r3, #0]
 8007a1e:	69ba      	ldr	r2, [r7, #24]
 8007a20:	0151      	lsls	r1, r2, #5
 8007a22:	69fa      	ldr	r2, [r7, #28]
 8007a24:	440a      	add	r2, r1
 8007a26:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007a2a:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8007a2e:	6013      	str	r3, [r2, #0]
 8007a30:	e00f      	b.n	8007a52 <USB_EPStartXfer+0x232>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8007a32:	69bb      	ldr	r3, [r7, #24]
 8007a34:	015a      	lsls	r2, r3, #5
 8007a36:	69fb      	ldr	r3, [r7, #28]
 8007a38:	4413      	add	r3, r2
 8007a3a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007a3e:	681b      	ldr	r3, [r3, #0]
 8007a40:	69ba      	ldr	r2, [r7, #24]
 8007a42:	0151      	lsls	r1, r2, #5
 8007a44:	69fa      	ldr	r2, [r7, #28]
 8007a46:	440a      	add	r2, r1
 8007a48:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007a4c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8007a50:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8007a52:	69bb      	ldr	r3, [r7, #24]
 8007a54:	015a      	lsls	r2, r3, #5
 8007a56:	69fb      	ldr	r3, [r7, #28]
 8007a58:	4413      	add	r3, r2
 8007a5a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007a5e:	681b      	ldr	r3, [r3, #0]
 8007a60:	69ba      	ldr	r2, [r7, #24]
 8007a62:	0151      	lsls	r1, r2, #5
 8007a64:	69fa      	ldr	r2, [r7, #28]
 8007a66:	440a      	add	r2, r1
 8007a68:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007a6c:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8007a70:	6013      	str	r3, [r2, #0]
 8007a72:	e165      	b.n	8007d40 <USB_EPStartXfer+0x520>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8007a74:	69bb      	ldr	r3, [r7, #24]
 8007a76:	015a      	lsls	r2, r3, #5
 8007a78:	69fb      	ldr	r3, [r7, #28]
 8007a7a:	4413      	add	r3, r2
 8007a7c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007a80:	681b      	ldr	r3, [r3, #0]
 8007a82:	69ba      	ldr	r2, [r7, #24]
 8007a84:	0151      	lsls	r1, r2, #5
 8007a86:	69fa      	ldr	r2, [r7, #28]
 8007a88:	440a      	add	r2, r1
 8007a8a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007a8e:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8007a92:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8007a94:	68bb      	ldr	r3, [r7, #8]
 8007a96:	791b      	ldrb	r3, [r3, #4]
 8007a98:	2b01      	cmp	r3, #1
 8007a9a:	d015      	beq.n	8007ac8 <USB_EPStartXfer+0x2a8>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 8007a9c:	68bb      	ldr	r3, [r7, #8]
 8007a9e:	691b      	ldr	r3, [r3, #16]
 8007aa0:	2b00      	cmp	r3, #0
 8007aa2:	f000 814d 	beq.w	8007d40 <USB_EPStartXfer+0x520>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 8007aa6:	69fb      	ldr	r3, [r7, #28]
 8007aa8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007aac:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8007aae:	68bb      	ldr	r3, [r7, #8]
 8007ab0:	781b      	ldrb	r3, [r3, #0]
 8007ab2:	f003 030f 	and.w	r3, r3, #15
 8007ab6:	2101      	movs	r1, #1
 8007ab8:	fa01 f303 	lsl.w	r3, r1, r3
 8007abc:	69f9      	ldr	r1, [r7, #28]
 8007abe:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8007ac2:	4313      	orrs	r3, r2
 8007ac4:	634b      	str	r3, [r1, #52]	; 0x34
 8007ac6:	e13b      	b.n	8007d40 <USB_EPStartXfer+0x520>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8007ac8:	69fb      	ldr	r3, [r7, #28]
 8007aca:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007ace:	689b      	ldr	r3, [r3, #8]
 8007ad0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007ad4:	2b00      	cmp	r3, #0
 8007ad6:	d110      	bne.n	8007afa <USB_EPStartXfer+0x2da>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8007ad8:	69bb      	ldr	r3, [r7, #24]
 8007ada:	015a      	lsls	r2, r3, #5
 8007adc:	69fb      	ldr	r3, [r7, #28]
 8007ade:	4413      	add	r3, r2
 8007ae0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007ae4:	681b      	ldr	r3, [r3, #0]
 8007ae6:	69ba      	ldr	r2, [r7, #24]
 8007ae8:	0151      	lsls	r1, r2, #5
 8007aea:	69fa      	ldr	r2, [r7, #28]
 8007aec:	440a      	add	r2, r1
 8007aee:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007af2:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8007af6:	6013      	str	r3, [r2, #0]
 8007af8:	e00f      	b.n	8007b1a <USB_EPStartXfer+0x2fa>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8007afa:	69bb      	ldr	r3, [r7, #24]
 8007afc:	015a      	lsls	r2, r3, #5
 8007afe:	69fb      	ldr	r3, [r7, #28]
 8007b00:	4413      	add	r3, r2
 8007b02:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007b06:	681b      	ldr	r3, [r3, #0]
 8007b08:	69ba      	ldr	r2, [r7, #24]
 8007b0a:	0151      	lsls	r1, r2, #5
 8007b0c:	69fa      	ldr	r2, [r7, #28]
 8007b0e:	440a      	add	r2, r1
 8007b10:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007b14:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8007b18:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 8007b1a:	68bb      	ldr	r3, [r7, #8]
 8007b1c:	68d9      	ldr	r1, [r3, #12]
 8007b1e:	68bb      	ldr	r3, [r7, #8]
 8007b20:	781a      	ldrb	r2, [r3, #0]
 8007b22:	68bb      	ldr	r3, [r7, #8]
 8007b24:	691b      	ldr	r3, [r3, #16]
 8007b26:	b298      	uxth	r0, r3
 8007b28:	79fb      	ldrb	r3, [r7, #7]
 8007b2a:	9300      	str	r3, [sp, #0]
 8007b2c:	4603      	mov	r3, r0
 8007b2e:	68f8      	ldr	r0, [r7, #12]
 8007b30:	f000 f9b8 	bl	8007ea4 <USB_WritePacket>
 8007b34:	e104      	b.n	8007d40 <USB_EPStartXfer+0x520>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8007b36:	69bb      	ldr	r3, [r7, #24]
 8007b38:	015a      	lsls	r2, r3, #5
 8007b3a:	69fb      	ldr	r3, [r7, #28]
 8007b3c:	4413      	add	r3, r2
 8007b3e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007b42:	691b      	ldr	r3, [r3, #16]
 8007b44:	69ba      	ldr	r2, [r7, #24]
 8007b46:	0151      	lsls	r1, r2, #5
 8007b48:	69fa      	ldr	r2, [r7, #28]
 8007b4a:	440a      	add	r2, r1
 8007b4c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007b50:	0cdb      	lsrs	r3, r3, #19
 8007b52:	04db      	lsls	r3, r3, #19
 8007b54:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8007b56:	69bb      	ldr	r3, [r7, #24]
 8007b58:	015a      	lsls	r2, r3, #5
 8007b5a:	69fb      	ldr	r3, [r7, #28]
 8007b5c:	4413      	add	r3, r2
 8007b5e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007b62:	691b      	ldr	r3, [r3, #16]
 8007b64:	69ba      	ldr	r2, [r7, #24]
 8007b66:	0151      	lsls	r1, r2, #5
 8007b68:	69fa      	ldr	r2, [r7, #28]
 8007b6a:	440a      	add	r2, r1
 8007b6c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007b70:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8007b74:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8007b78:	6113      	str	r3, [r2, #16]

    if (epnum == 0U)
 8007b7a:	69bb      	ldr	r3, [r7, #24]
 8007b7c:	2b00      	cmp	r3, #0
 8007b7e:	d131      	bne.n	8007be4 <USB_EPStartXfer+0x3c4>
    {
      if (ep->xfer_len > 0U)
 8007b80:	68bb      	ldr	r3, [r7, #8]
 8007b82:	691b      	ldr	r3, [r3, #16]
 8007b84:	2b00      	cmp	r3, #0
 8007b86:	d003      	beq.n	8007b90 <USB_EPStartXfer+0x370>
      {
        ep->xfer_len = ep->maxpacket;
 8007b88:	68bb      	ldr	r3, [r7, #8]
 8007b8a:	689a      	ldr	r2, [r3, #8]
 8007b8c:	68bb      	ldr	r3, [r7, #8]
 8007b8e:	611a      	str	r2, [r3, #16]
      }

      /* Store transfer size, for EP0 this is equal to endpoint max packet size */
      ep->xfer_size = ep->maxpacket;
 8007b90:	68bb      	ldr	r3, [r7, #8]
 8007b92:	689a      	ldr	r2, [r3, #8]
 8007b94:	68bb      	ldr	r3, [r7, #8]
 8007b96:	621a      	str	r2, [r3, #32]

      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size);
 8007b98:	69bb      	ldr	r3, [r7, #24]
 8007b9a:	015a      	lsls	r2, r3, #5
 8007b9c:	69fb      	ldr	r3, [r7, #28]
 8007b9e:	4413      	add	r3, r2
 8007ba0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007ba4:	691a      	ldr	r2, [r3, #16]
 8007ba6:	68bb      	ldr	r3, [r7, #8]
 8007ba8:	6a1b      	ldr	r3, [r3, #32]
 8007baa:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8007bae:	69b9      	ldr	r1, [r7, #24]
 8007bb0:	0148      	lsls	r0, r1, #5
 8007bb2:	69f9      	ldr	r1, [r7, #28]
 8007bb4:	4401      	add	r1, r0
 8007bb6:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8007bba:	4313      	orrs	r3, r2
 8007bbc:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8007bbe:	69bb      	ldr	r3, [r7, #24]
 8007bc0:	015a      	lsls	r2, r3, #5
 8007bc2:	69fb      	ldr	r3, [r7, #28]
 8007bc4:	4413      	add	r3, r2
 8007bc6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007bca:	691b      	ldr	r3, [r3, #16]
 8007bcc:	69ba      	ldr	r2, [r7, #24]
 8007bce:	0151      	lsls	r1, r2, #5
 8007bd0:	69fa      	ldr	r2, [r7, #28]
 8007bd2:	440a      	add	r2, r1
 8007bd4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007bd8:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8007bdc:	6113      	str	r3, [r2, #16]
 8007bde:	e061      	b.n	8007ca4 <USB_EPStartXfer+0x484>
 8007be0:	1ff80000 	.word	0x1ff80000
    }
    else
    {
      if (ep->xfer_len == 0U)
 8007be4:	68bb      	ldr	r3, [r7, #8]
 8007be6:	691b      	ldr	r3, [r3, #16]
 8007be8:	2b00      	cmp	r3, #0
 8007bea:	d123      	bne.n	8007c34 <USB_EPStartXfer+0x414>
      {
        USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 8007bec:	69bb      	ldr	r3, [r7, #24]
 8007bee:	015a      	lsls	r2, r3, #5
 8007bf0:	69fb      	ldr	r3, [r7, #28]
 8007bf2:	4413      	add	r3, r2
 8007bf4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007bf8:	691a      	ldr	r2, [r3, #16]
 8007bfa:	68bb      	ldr	r3, [r7, #8]
 8007bfc:	689b      	ldr	r3, [r3, #8]
 8007bfe:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8007c02:	69b9      	ldr	r1, [r7, #24]
 8007c04:	0148      	lsls	r0, r1, #5
 8007c06:	69f9      	ldr	r1, [r7, #28]
 8007c08:	4401      	add	r1, r0
 8007c0a:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8007c0e:	4313      	orrs	r3, r2
 8007c10:	610b      	str	r3, [r1, #16]
        USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8007c12:	69bb      	ldr	r3, [r7, #24]
 8007c14:	015a      	lsls	r2, r3, #5
 8007c16:	69fb      	ldr	r3, [r7, #28]
 8007c18:	4413      	add	r3, r2
 8007c1a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007c1e:	691b      	ldr	r3, [r3, #16]
 8007c20:	69ba      	ldr	r2, [r7, #24]
 8007c22:	0151      	lsls	r1, r2, #5
 8007c24:	69fa      	ldr	r2, [r7, #28]
 8007c26:	440a      	add	r2, r1
 8007c28:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007c2c:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8007c30:	6113      	str	r3, [r2, #16]
 8007c32:	e037      	b.n	8007ca4 <USB_EPStartXfer+0x484>
      }
      else
      {
        pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 8007c34:	68bb      	ldr	r3, [r7, #8]
 8007c36:	691a      	ldr	r2, [r3, #16]
 8007c38:	68bb      	ldr	r3, [r7, #8]
 8007c3a:	689b      	ldr	r3, [r3, #8]
 8007c3c:	4413      	add	r3, r2
 8007c3e:	1e5a      	subs	r2, r3, #1
 8007c40:	68bb      	ldr	r3, [r7, #8]
 8007c42:	689b      	ldr	r3, [r3, #8]
 8007c44:	fbb2 f3f3 	udiv	r3, r2, r3
 8007c48:	82fb      	strh	r3, [r7, #22]
        ep->xfer_size = ep->maxpacket * pktcnt;
 8007c4a:	68bb      	ldr	r3, [r7, #8]
 8007c4c:	689b      	ldr	r3, [r3, #8]
 8007c4e:	8afa      	ldrh	r2, [r7, #22]
 8007c50:	fb03 f202 	mul.w	r2, r3, r2
 8007c54:	68bb      	ldr	r3, [r7, #8]
 8007c56:	621a      	str	r2, [r3, #32]

        USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 8007c58:	69bb      	ldr	r3, [r7, #24]
 8007c5a:	015a      	lsls	r2, r3, #5
 8007c5c:	69fb      	ldr	r3, [r7, #28]
 8007c5e:	4413      	add	r3, r2
 8007c60:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007c64:	691a      	ldr	r2, [r3, #16]
 8007c66:	8afb      	ldrh	r3, [r7, #22]
 8007c68:	04d9      	lsls	r1, r3, #19
 8007c6a:	4b38      	ldr	r3, [pc, #224]	; (8007d4c <USB_EPStartXfer+0x52c>)
 8007c6c:	400b      	ands	r3, r1
 8007c6e:	69b9      	ldr	r1, [r7, #24]
 8007c70:	0148      	lsls	r0, r1, #5
 8007c72:	69f9      	ldr	r1, [r7, #28]
 8007c74:	4401      	add	r1, r0
 8007c76:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8007c7a:	4313      	orrs	r3, r2
 8007c7c:	610b      	str	r3, [r1, #16]
        USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size;
 8007c7e:	69bb      	ldr	r3, [r7, #24]
 8007c80:	015a      	lsls	r2, r3, #5
 8007c82:	69fb      	ldr	r3, [r7, #28]
 8007c84:	4413      	add	r3, r2
 8007c86:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007c8a:	691a      	ldr	r2, [r3, #16]
 8007c8c:	68bb      	ldr	r3, [r7, #8]
 8007c8e:	6a1b      	ldr	r3, [r3, #32]
 8007c90:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8007c94:	69b9      	ldr	r1, [r7, #24]
 8007c96:	0148      	lsls	r0, r1, #5
 8007c98:	69f9      	ldr	r1, [r7, #28]
 8007c9a:	4401      	add	r1, r0
 8007c9c:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8007ca0:	4313      	orrs	r3, r2
 8007ca2:	610b      	str	r3, [r1, #16]
      }
    }

    if (dma == 1U)
 8007ca4:	79fb      	ldrb	r3, [r7, #7]
 8007ca6:	2b01      	cmp	r3, #1
 8007ca8:	d10d      	bne.n	8007cc6 <USB_EPStartXfer+0x4a6>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 8007caa:	68bb      	ldr	r3, [r7, #8]
 8007cac:	68db      	ldr	r3, [r3, #12]
 8007cae:	2b00      	cmp	r3, #0
 8007cb0:	d009      	beq.n	8007cc6 <USB_EPStartXfer+0x4a6>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 8007cb2:	68bb      	ldr	r3, [r7, #8]
 8007cb4:	68d9      	ldr	r1, [r3, #12]
 8007cb6:	69bb      	ldr	r3, [r7, #24]
 8007cb8:	015a      	lsls	r2, r3, #5
 8007cba:	69fb      	ldr	r3, [r7, #28]
 8007cbc:	4413      	add	r3, r2
 8007cbe:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007cc2:	460a      	mov	r2, r1
 8007cc4:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 8007cc6:	68bb      	ldr	r3, [r7, #8]
 8007cc8:	791b      	ldrb	r3, [r3, #4]
 8007cca:	2b01      	cmp	r3, #1
 8007ccc:	d128      	bne.n	8007d20 <USB_EPStartXfer+0x500>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8007cce:	69fb      	ldr	r3, [r7, #28]
 8007cd0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007cd4:	689b      	ldr	r3, [r3, #8]
 8007cd6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007cda:	2b00      	cmp	r3, #0
 8007cdc:	d110      	bne.n	8007d00 <USB_EPStartXfer+0x4e0>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 8007cde:	69bb      	ldr	r3, [r7, #24]
 8007ce0:	015a      	lsls	r2, r3, #5
 8007ce2:	69fb      	ldr	r3, [r7, #28]
 8007ce4:	4413      	add	r3, r2
 8007ce6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007cea:	681b      	ldr	r3, [r3, #0]
 8007cec:	69ba      	ldr	r2, [r7, #24]
 8007cee:	0151      	lsls	r1, r2, #5
 8007cf0:	69fa      	ldr	r2, [r7, #28]
 8007cf2:	440a      	add	r2, r1
 8007cf4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007cf8:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8007cfc:	6013      	str	r3, [r2, #0]
 8007cfe:	e00f      	b.n	8007d20 <USB_EPStartXfer+0x500>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 8007d00:	69bb      	ldr	r3, [r7, #24]
 8007d02:	015a      	lsls	r2, r3, #5
 8007d04:	69fb      	ldr	r3, [r7, #28]
 8007d06:	4413      	add	r3, r2
 8007d08:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007d0c:	681b      	ldr	r3, [r3, #0]
 8007d0e:	69ba      	ldr	r2, [r7, #24]
 8007d10:	0151      	lsls	r1, r2, #5
 8007d12:	69fa      	ldr	r2, [r7, #28]
 8007d14:	440a      	add	r2, r1
 8007d16:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007d1a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8007d1e:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8007d20:	69bb      	ldr	r3, [r7, #24]
 8007d22:	015a      	lsls	r2, r3, #5
 8007d24:	69fb      	ldr	r3, [r7, #28]
 8007d26:	4413      	add	r3, r2
 8007d28:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007d2c:	681b      	ldr	r3, [r3, #0]
 8007d2e:	69ba      	ldr	r2, [r7, #24]
 8007d30:	0151      	lsls	r1, r2, #5
 8007d32:	69fa      	ldr	r2, [r7, #28]
 8007d34:	440a      	add	r2, r1
 8007d36:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007d3a:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8007d3e:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8007d40:	2300      	movs	r3, #0
}
 8007d42:	4618      	mov	r0, r3
 8007d44:	3720      	adds	r7, #32
 8007d46:	46bd      	mov	sp, r7
 8007d48:	bd80      	pop	{r7, pc}
 8007d4a:	bf00      	nop
 8007d4c:	1ff80000 	.word	0x1ff80000

08007d50 <USB_EPStopXfer>:
   * @param  USBx  usb device instance
   * @param  ep pointer to endpoint structure
   * @retval HAL status
   */
HAL_StatusTypeDef USB_EPStopXfer(const USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8007d50:	b480      	push	{r7}
 8007d52:	b087      	sub	sp, #28
 8007d54:	af00      	add	r7, sp, #0
 8007d56:	6078      	str	r0, [r7, #4]
 8007d58:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8007d5a:	2300      	movs	r3, #0
 8007d5c:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef ret = HAL_OK;
 8007d5e:	2300      	movs	r3, #0
 8007d60:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007d62:	687b      	ldr	r3, [r7, #4]
 8007d64:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 8007d66:	683b      	ldr	r3, [r7, #0]
 8007d68:	785b      	ldrb	r3, [r3, #1]
 8007d6a:	2b01      	cmp	r3, #1
 8007d6c:	d14a      	bne.n	8007e04 <USB_EPStopXfer+0xb4>
  {
    /* EP enable, IN data in FIFO */
    if (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8007d6e:	683b      	ldr	r3, [r7, #0]
 8007d70:	781b      	ldrb	r3, [r3, #0]
 8007d72:	015a      	lsls	r2, r3, #5
 8007d74:	693b      	ldr	r3, [r7, #16]
 8007d76:	4413      	add	r3, r2
 8007d78:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007d7c:	681b      	ldr	r3, [r3, #0]
 8007d7e:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8007d82:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8007d86:	f040 8086 	bne.w	8007e96 <USB_EPStopXfer+0x146>
    {
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_SNAK);
 8007d8a:	683b      	ldr	r3, [r7, #0]
 8007d8c:	781b      	ldrb	r3, [r3, #0]
 8007d8e:	015a      	lsls	r2, r3, #5
 8007d90:	693b      	ldr	r3, [r7, #16]
 8007d92:	4413      	add	r3, r2
 8007d94:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007d98:	681b      	ldr	r3, [r3, #0]
 8007d9a:	683a      	ldr	r2, [r7, #0]
 8007d9c:	7812      	ldrb	r2, [r2, #0]
 8007d9e:	0151      	lsls	r1, r2, #5
 8007da0:	693a      	ldr	r2, [r7, #16]
 8007da2:	440a      	add	r2, r1
 8007da4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007da8:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8007dac:	6013      	str	r3, [r2, #0]
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_EPDIS);
 8007dae:	683b      	ldr	r3, [r7, #0]
 8007db0:	781b      	ldrb	r3, [r3, #0]
 8007db2:	015a      	lsls	r2, r3, #5
 8007db4:	693b      	ldr	r3, [r7, #16]
 8007db6:	4413      	add	r3, r2
 8007db8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007dbc:	681b      	ldr	r3, [r3, #0]
 8007dbe:	683a      	ldr	r2, [r7, #0]
 8007dc0:	7812      	ldrb	r2, [r2, #0]
 8007dc2:	0151      	lsls	r1, r2, #5
 8007dc4:	693a      	ldr	r2, [r7, #16]
 8007dc6:	440a      	add	r2, r1
 8007dc8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007dcc:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8007dd0:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 8007dd2:	68fb      	ldr	r3, [r7, #12]
 8007dd4:	3301      	adds	r3, #1
 8007dd6:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 8007dd8:	68fb      	ldr	r3, [r7, #12]
 8007dda:	f242 7210 	movw	r2, #10000	; 0x2710
 8007dde:	4293      	cmp	r3, r2
 8007de0:	d902      	bls.n	8007de8 <USB_EPStopXfer+0x98>
        {
          ret = HAL_ERROR;
 8007de2:	2301      	movs	r3, #1
 8007de4:	75fb      	strb	r3, [r7, #23]
          break;
 8007de6:	e056      	b.n	8007e96 <USB_EPStopXfer+0x146>
        }
      } while (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) ==  USB_OTG_DIEPCTL_EPENA);
 8007de8:	683b      	ldr	r3, [r7, #0]
 8007dea:	781b      	ldrb	r3, [r3, #0]
 8007dec:	015a      	lsls	r2, r3, #5
 8007dee:	693b      	ldr	r3, [r7, #16]
 8007df0:	4413      	add	r3, r2
 8007df2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007df6:	681b      	ldr	r3, [r3, #0]
 8007df8:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8007dfc:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8007e00:	d0e7      	beq.n	8007dd2 <USB_EPStopXfer+0x82>
 8007e02:	e048      	b.n	8007e96 <USB_EPStopXfer+0x146>
    }
  }
  else /* OUT endpoint */
  {
    if (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8007e04:	683b      	ldr	r3, [r7, #0]
 8007e06:	781b      	ldrb	r3, [r3, #0]
 8007e08:	015a      	lsls	r2, r3, #5
 8007e0a:	693b      	ldr	r3, [r7, #16]
 8007e0c:	4413      	add	r3, r2
 8007e0e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007e12:	681b      	ldr	r3, [r3, #0]
 8007e14:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8007e18:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8007e1c:	d13b      	bne.n	8007e96 <USB_EPStopXfer+0x146>
    {
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_SNAK);
 8007e1e:	683b      	ldr	r3, [r7, #0]
 8007e20:	781b      	ldrb	r3, [r3, #0]
 8007e22:	015a      	lsls	r2, r3, #5
 8007e24:	693b      	ldr	r3, [r7, #16]
 8007e26:	4413      	add	r3, r2
 8007e28:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007e2c:	681b      	ldr	r3, [r3, #0]
 8007e2e:	683a      	ldr	r2, [r7, #0]
 8007e30:	7812      	ldrb	r2, [r2, #0]
 8007e32:	0151      	lsls	r1, r2, #5
 8007e34:	693a      	ldr	r2, [r7, #16]
 8007e36:	440a      	add	r2, r1
 8007e38:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007e3c:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8007e40:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_EPDIS);
 8007e42:	683b      	ldr	r3, [r7, #0]
 8007e44:	781b      	ldrb	r3, [r3, #0]
 8007e46:	015a      	lsls	r2, r3, #5
 8007e48:	693b      	ldr	r3, [r7, #16]
 8007e4a:	4413      	add	r3, r2
 8007e4c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007e50:	681b      	ldr	r3, [r3, #0]
 8007e52:	683a      	ldr	r2, [r7, #0]
 8007e54:	7812      	ldrb	r2, [r2, #0]
 8007e56:	0151      	lsls	r1, r2, #5
 8007e58:	693a      	ldr	r2, [r7, #16]
 8007e5a:	440a      	add	r2, r1
 8007e5c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007e60:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8007e64:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 8007e66:	68fb      	ldr	r3, [r7, #12]
 8007e68:	3301      	adds	r3, #1
 8007e6a:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 8007e6c:	68fb      	ldr	r3, [r7, #12]
 8007e6e:	f242 7210 	movw	r2, #10000	; 0x2710
 8007e72:	4293      	cmp	r3, r2
 8007e74:	d902      	bls.n	8007e7c <USB_EPStopXfer+0x12c>
        {
          ret = HAL_ERROR;
 8007e76:	2301      	movs	r3, #1
 8007e78:	75fb      	strb	r3, [r7, #23]
          break;
 8007e7a:	e00c      	b.n	8007e96 <USB_EPStopXfer+0x146>
        }
      } while (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) ==  USB_OTG_DOEPCTL_EPENA);
 8007e7c:	683b      	ldr	r3, [r7, #0]
 8007e7e:	781b      	ldrb	r3, [r3, #0]
 8007e80:	015a      	lsls	r2, r3, #5
 8007e82:	693b      	ldr	r3, [r7, #16]
 8007e84:	4413      	add	r3, r2
 8007e86:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007e8a:	681b      	ldr	r3, [r3, #0]
 8007e8c:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8007e90:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8007e94:	d0e7      	beq.n	8007e66 <USB_EPStopXfer+0x116>
    }
  }

  return ret;
 8007e96:	7dfb      	ldrb	r3, [r7, #23]
}
 8007e98:	4618      	mov	r0, r3
 8007e9a:	371c      	adds	r7, #28
 8007e9c:	46bd      	mov	sp, r7
 8007e9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ea2:	4770      	bx	lr

08007ea4 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 8007ea4:	b480      	push	{r7}
 8007ea6:	b089      	sub	sp, #36	; 0x24
 8007ea8:	af00      	add	r7, sp, #0
 8007eaa:	60f8      	str	r0, [r7, #12]
 8007eac:	60b9      	str	r1, [r7, #8]
 8007eae:	4611      	mov	r1, r2
 8007eb0:	461a      	mov	r2, r3
 8007eb2:	460b      	mov	r3, r1
 8007eb4:	71fb      	strb	r3, [r7, #7]
 8007eb6:	4613      	mov	r3, r2
 8007eb8:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007eba:	68fb      	ldr	r3, [r7, #12]
 8007ebc:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 8007ebe:	68bb      	ldr	r3, [r7, #8]
 8007ec0:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 8007ec2:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8007ec6:	2b00      	cmp	r3, #0
 8007ec8:	d123      	bne.n	8007f12 <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 8007eca:	88bb      	ldrh	r3, [r7, #4]
 8007ecc:	3303      	adds	r3, #3
 8007ece:	089b      	lsrs	r3, r3, #2
 8007ed0:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 8007ed2:	2300      	movs	r3, #0
 8007ed4:	61bb      	str	r3, [r7, #24]
 8007ed6:	e018      	b.n	8007f0a <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 8007ed8:	79fb      	ldrb	r3, [r7, #7]
 8007eda:	031a      	lsls	r2, r3, #12
 8007edc:	697b      	ldr	r3, [r7, #20]
 8007ede:	4413      	add	r3, r2
 8007ee0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007ee4:	461a      	mov	r2, r3
 8007ee6:	69fb      	ldr	r3, [r7, #28]
 8007ee8:	681b      	ldr	r3, [r3, #0]
 8007eea:	6013      	str	r3, [r2, #0]
      pSrc++;
 8007eec:	69fb      	ldr	r3, [r7, #28]
 8007eee:	3301      	adds	r3, #1
 8007ef0:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8007ef2:	69fb      	ldr	r3, [r7, #28]
 8007ef4:	3301      	adds	r3, #1
 8007ef6:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8007ef8:	69fb      	ldr	r3, [r7, #28]
 8007efa:	3301      	adds	r3, #1
 8007efc:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8007efe:	69fb      	ldr	r3, [r7, #28]
 8007f00:	3301      	adds	r3, #1
 8007f02:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 8007f04:	69bb      	ldr	r3, [r7, #24]
 8007f06:	3301      	adds	r3, #1
 8007f08:	61bb      	str	r3, [r7, #24]
 8007f0a:	69ba      	ldr	r2, [r7, #24]
 8007f0c:	693b      	ldr	r3, [r7, #16]
 8007f0e:	429a      	cmp	r2, r3
 8007f10:	d3e2      	bcc.n	8007ed8 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 8007f12:	2300      	movs	r3, #0
}
 8007f14:	4618      	mov	r0, r3
 8007f16:	3724      	adds	r7, #36	; 0x24
 8007f18:	46bd      	mov	sp, r7
 8007f1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f1e:	4770      	bx	lr

08007f20 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 8007f20:	b480      	push	{r7}
 8007f22:	b08b      	sub	sp, #44	; 0x2c
 8007f24:	af00      	add	r7, sp, #0
 8007f26:	60f8      	str	r0, [r7, #12]
 8007f28:	60b9      	str	r1, [r7, #8]
 8007f2a:	4613      	mov	r3, r2
 8007f2c:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007f2e:	68fb      	ldr	r3, [r7, #12]
 8007f30:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 8007f32:	68bb      	ldr	r3, [r7, #8]
 8007f34:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 8007f36:	88fb      	ldrh	r3, [r7, #6]
 8007f38:	089b      	lsrs	r3, r3, #2
 8007f3a:	b29b      	uxth	r3, r3
 8007f3c:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 8007f3e:	88fb      	ldrh	r3, [r7, #6]
 8007f40:	f003 0303 	and.w	r3, r3, #3
 8007f44:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 8007f46:	2300      	movs	r3, #0
 8007f48:	623b      	str	r3, [r7, #32]
 8007f4a:	e014      	b.n	8007f76 <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 8007f4c:	69bb      	ldr	r3, [r7, #24]
 8007f4e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007f52:	681a      	ldr	r2, [r3, #0]
 8007f54:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007f56:	601a      	str	r2, [r3, #0]
    pDest++;
 8007f58:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007f5a:	3301      	adds	r3, #1
 8007f5c:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8007f5e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007f60:	3301      	adds	r3, #1
 8007f62:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8007f64:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007f66:	3301      	adds	r3, #1
 8007f68:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8007f6a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007f6c:	3301      	adds	r3, #1
 8007f6e:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = 0U; i < count32b; i++)
 8007f70:	6a3b      	ldr	r3, [r7, #32]
 8007f72:	3301      	adds	r3, #1
 8007f74:	623b      	str	r3, [r7, #32]
 8007f76:	6a3a      	ldr	r2, [r7, #32]
 8007f78:	697b      	ldr	r3, [r7, #20]
 8007f7a:	429a      	cmp	r2, r3
 8007f7c:	d3e6      	bcc.n	8007f4c <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 8007f7e:	8bfb      	ldrh	r3, [r7, #30]
 8007f80:	2b00      	cmp	r3, #0
 8007f82:	d01e      	beq.n	8007fc2 <USB_ReadPacket+0xa2>
  {
    i = 0U;
 8007f84:	2300      	movs	r3, #0
 8007f86:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 8007f88:	69bb      	ldr	r3, [r7, #24]
 8007f8a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007f8e:	461a      	mov	r2, r3
 8007f90:	f107 0310 	add.w	r3, r7, #16
 8007f94:	6812      	ldr	r2, [r2, #0]
 8007f96:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 8007f98:	693a      	ldr	r2, [r7, #16]
 8007f9a:	6a3b      	ldr	r3, [r7, #32]
 8007f9c:	b2db      	uxtb	r3, r3
 8007f9e:	00db      	lsls	r3, r3, #3
 8007fa0:	fa22 f303 	lsr.w	r3, r2, r3
 8007fa4:	b2da      	uxtb	r2, r3
 8007fa6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007fa8:	701a      	strb	r2, [r3, #0]
      i++;
 8007faa:	6a3b      	ldr	r3, [r7, #32]
 8007fac:	3301      	adds	r3, #1
 8007fae:	623b      	str	r3, [r7, #32]
      pDest++;
 8007fb0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007fb2:	3301      	adds	r3, #1
 8007fb4:	627b      	str	r3, [r7, #36]	; 0x24
      remaining_bytes--;
 8007fb6:	8bfb      	ldrh	r3, [r7, #30]
 8007fb8:	3b01      	subs	r3, #1
 8007fba:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 8007fbc:	8bfb      	ldrh	r3, [r7, #30]
 8007fbe:	2b00      	cmp	r3, #0
 8007fc0:	d1ea      	bne.n	8007f98 <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 8007fc2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8007fc4:	4618      	mov	r0, r3
 8007fc6:	372c      	adds	r7, #44	; 0x2c
 8007fc8:	46bd      	mov	sp, r7
 8007fca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007fce:	4770      	bx	lr

08007fd0 <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 8007fd0:	b480      	push	{r7}
 8007fd2:	b085      	sub	sp, #20
 8007fd4:	af00      	add	r7, sp, #0
 8007fd6:	6078      	str	r0, [r7, #4]
 8007fd8:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007fda:	687b      	ldr	r3, [r7, #4]
 8007fdc:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8007fde:	683b      	ldr	r3, [r7, #0]
 8007fe0:	781b      	ldrb	r3, [r3, #0]
 8007fe2:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8007fe4:	683b      	ldr	r3, [r7, #0]
 8007fe6:	785b      	ldrb	r3, [r3, #1]
 8007fe8:	2b01      	cmp	r3, #1
 8007fea:	d12c      	bne.n	8008046 <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 8007fec:	68bb      	ldr	r3, [r7, #8]
 8007fee:	015a      	lsls	r2, r3, #5
 8007ff0:	68fb      	ldr	r3, [r7, #12]
 8007ff2:	4413      	add	r3, r2
 8007ff4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007ff8:	681b      	ldr	r3, [r3, #0]
 8007ffa:	2b00      	cmp	r3, #0
 8007ffc:	db12      	blt.n	8008024 <USB_EPSetStall+0x54>
 8007ffe:	68bb      	ldr	r3, [r7, #8]
 8008000:	2b00      	cmp	r3, #0
 8008002:	d00f      	beq.n	8008024 <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 8008004:	68bb      	ldr	r3, [r7, #8]
 8008006:	015a      	lsls	r2, r3, #5
 8008008:	68fb      	ldr	r3, [r7, #12]
 800800a:	4413      	add	r3, r2
 800800c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008010:	681b      	ldr	r3, [r3, #0]
 8008012:	68ba      	ldr	r2, [r7, #8]
 8008014:	0151      	lsls	r1, r2, #5
 8008016:	68fa      	ldr	r2, [r7, #12]
 8008018:	440a      	add	r2, r1
 800801a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800801e:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8008022:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 8008024:	68bb      	ldr	r3, [r7, #8]
 8008026:	015a      	lsls	r2, r3, #5
 8008028:	68fb      	ldr	r3, [r7, #12]
 800802a:	4413      	add	r3, r2
 800802c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008030:	681b      	ldr	r3, [r3, #0]
 8008032:	68ba      	ldr	r2, [r7, #8]
 8008034:	0151      	lsls	r1, r2, #5
 8008036:	68fa      	ldr	r2, [r7, #12]
 8008038:	440a      	add	r2, r1
 800803a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800803e:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8008042:	6013      	str	r3, [r2, #0]
 8008044:	e02b      	b.n	800809e <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 8008046:	68bb      	ldr	r3, [r7, #8]
 8008048:	015a      	lsls	r2, r3, #5
 800804a:	68fb      	ldr	r3, [r7, #12]
 800804c:	4413      	add	r3, r2
 800804e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008052:	681b      	ldr	r3, [r3, #0]
 8008054:	2b00      	cmp	r3, #0
 8008056:	db12      	blt.n	800807e <USB_EPSetStall+0xae>
 8008058:	68bb      	ldr	r3, [r7, #8]
 800805a:	2b00      	cmp	r3, #0
 800805c:	d00f      	beq.n	800807e <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 800805e:	68bb      	ldr	r3, [r7, #8]
 8008060:	015a      	lsls	r2, r3, #5
 8008062:	68fb      	ldr	r3, [r7, #12]
 8008064:	4413      	add	r3, r2
 8008066:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800806a:	681b      	ldr	r3, [r3, #0]
 800806c:	68ba      	ldr	r2, [r7, #8]
 800806e:	0151      	lsls	r1, r2, #5
 8008070:	68fa      	ldr	r2, [r7, #12]
 8008072:	440a      	add	r2, r1
 8008074:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8008078:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800807c:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 800807e:	68bb      	ldr	r3, [r7, #8]
 8008080:	015a      	lsls	r2, r3, #5
 8008082:	68fb      	ldr	r3, [r7, #12]
 8008084:	4413      	add	r3, r2
 8008086:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800808a:	681b      	ldr	r3, [r3, #0]
 800808c:	68ba      	ldr	r2, [r7, #8]
 800808e:	0151      	lsls	r1, r2, #5
 8008090:	68fa      	ldr	r2, [r7, #12]
 8008092:	440a      	add	r2, r1
 8008094:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8008098:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800809c:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800809e:	2300      	movs	r3, #0
}
 80080a0:	4618      	mov	r0, r3
 80080a2:	3714      	adds	r7, #20
 80080a4:	46bd      	mov	sp, r7
 80080a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080aa:	4770      	bx	lr

080080ac <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 80080ac:	b480      	push	{r7}
 80080ae:	b085      	sub	sp, #20
 80080b0:	af00      	add	r7, sp, #0
 80080b2:	6078      	str	r0, [r7, #4]
 80080b4:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80080b6:	687b      	ldr	r3, [r7, #4]
 80080b8:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 80080ba:	683b      	ldr	r3, [r7, #0]
 80080bc:	781b      	ldrb	r3, [r3, #0]
 80080be:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 80080c0:	683b      	ldr	r3, [r7, #0]
 80080c2:	785b      	ldrb	r3, [r3, #1]
 80080c4:	2b01      	cmp	r3, #1
 80080c6:	d128      	bne.n	800811a <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 80080c8:	68bb      	ldr	r3, [r7, #8]
 80080ca:	015a      	lsls	r2, r3, #5
 80080cc:	68fb      	ldr	r3, [r7, #12]
 80080ce:	4413      	add	r3, r2
 80080d0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80080d4:	681b      	ldr	r3, [r3, #0]
 80080d6:	68ba      	ldr	r2, [r7, #8]
 80080d8:	0151      	lsls	r1, r2, #5
 80080da:	68fa      	ldr	r2, [r7, #12]
 80080dc:	440a      	add	r2, r1
 80080de:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80080e2:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80080e6:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 80080e8:	683b      	ldr	r3, [r7, #0]
 80080ea:	791b      	ldrb	r3, [r3, #4]
 80080ec:	2b03      	cmp	r3, #3
 80080ee:	d003      	beq.n	80080f8 <USB_EPClearStall+0x4c>
 80080f0:	683b      	ldr	r3, [r7, #0]
 80080f2:	791b      	ldrb	r3, [r3, #4]
 80080f4:	2b02      	cmp	r3, #2
 80080f6:	d138      	bne.n	800816a <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 80080f8:	68bb      	ldr	r3, [r7, #8]
 80080fa:	015a      	lsls	r2, r3, #5
 80080fc:	68fb      	ldr	r3, [r7, #12]
 80080fe:	4413      	add	r3, r2
 8008100:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008104:	681b      	ldr	r3, [r3, #0]
 8008106:	68ba      	ldr	r2, [r7, #8]
 8008108:	0151      	lsls	r1, r2, #5
 800810a:	68fa      	ldr	r2, [r7, #12]
 800810c:	440a      	add	r2, r1
 800810e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008112:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8008116:	6013      	str	r3, [r2, #0]
 8008118:	e027      	b.n	800816a <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 800811a:	68bb      	ldr	r3, [r7, #8]
 800811c:	015a      	lsls	r2, r3, #5
 800811e:	68fb      	ldr	r3, [r7, #12]
 8008120:	4413      	add	r3, r2
 8008122:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008126:	681b      	ldr	r3, [r3, #0]
 8008128:	68ba      	ldr	r2, [r7, #8]
 800812a:	0151      	lsls	r1, r2, #5
 800812c:	68fa      	ldr	r2, [r7, #12]
 800812e:	440a      	add	r2, r1
 8008130:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8008134:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8008138:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 800813a:	683b      	ldr	r3, [r7, #0]
 800813c:	791b      	ldrb	r3, [r3, #4]
 800813e:	2b03      	cmp	r3, #3
 8008140:	d003      	beq.n	800814a <USB_EPClearStall+0x9e>
 8008142:	683b      	ldr	r3, [r7, #0]
 8008144:	791b      	ldrb	r3, [r3, #4]
 8008146:	2b02      	cmp	r3, #2
 8008148:	d10f      	bne.n	800816a <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 800814a:	68bb      	ldr	r3, [r7, #8]
 800814c:	015a      	lsls	r2, r3, #5
 800814e:	68fb      	ldr	r3, [r7, #12]
 8008150:	4413      	add	r3, r2
 8008152:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008156:	681b      	ldr	r3, [r3, #0]
 8008158:	68ba      	ldr	r2, [r7, #8]
 800815a:	0151      	lsls	r1, r2, #5
 800815c:	68fa      	ldr	r2, [r7, #12]
 800815e:	440a      	add	r2, r1
 8008160:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8008164:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8008168:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 800816a:	2300      	movs	r3, #0
}
 800816c:	4618      	mov	r0, r3
 800816e:	3714      	adds	r7, #20
 8008170:	46bd      	mov	sp, r7
 8008172:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008176:	4770      	bx	lr

08008178 <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetDevAddress(const USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 8008178:	b480      	push	{r7}
 800817a:	b085      	sub	sp, #20
 800817c:	af00      	add	r7, sp, #0
 800817e:	6078      	str	r0, [r7, #4]
 8008180:	460b      	mov	r3, r1
 8008182:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008184:	687b      	ldr	r3, [r7, #4]
 8008186:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 8008188:	68fb      	ldr	r3, [r7, #12]
 800818a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800818e:	681b      	ldr	r3, [r3, #0]
 8008190:	68fa      	ldr	r2, [r7, #12]
 8008192:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8008196:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 800819a:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 800819c:	68fb      	ldr	r3, [r7, #12]
 800819e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80081a2:	681a      	ldr	r2, [r3, #0]
 80081a4:	78fb      	ldrb	r3, [r7, #3]
 80081a6:	011b      	lsls	r3, r3, #4
 80081a8:	f403 63fe 	and.w	r3, r3, #2032	; 0x7f0
 80081ac:	68f9      	ldr	r1, [r7, #12]
 80081ae:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80081b2:	4313      	orrs	r3, r2
 80081b4:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 80081b6:	2300      	movs	r3, #0
}
 80081b8:	4618      	mov	r0, r3
 80081ba:	3714      	adds	r7, #20
 80081bc:	46bd      	mov	sp, r7
 80081be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081c2:	4770      	bx	lr

080081c4 <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevConnect(const USB_OTG_GlobalTypeDef *USBx)
{
 80081c4:	b480      	push	{r7}
 80081c6:	b085      	sub	sp, #20
 80081c8:	af00      	add	r7, sp, #0
 80081ca:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80081cc:	687b      	ldr	r3, [r7, #4]
 80081ce:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 80081d0:	68fb      	ldr	r3, [r7, #12]
 80081d2:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 80081d6:	681b      	ldr	r3, [r3, #0]
 80081d8:	68fa      	ldr	r2, [r7, #12]
 80081da:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 80081de:	f023 0303 	bic.w	r3, r3, #3
 80081e2:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 80081e4:	68fb      	ldr	r3, [r7, #12]
 80081e6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80081ea:	685b      	ldr	r3, [r3, #4]
 80081ec:	68fa      	ldr	r2, [r7, #12]
 80081ee:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80081f2:	f023 0302 	bic.w	r3, r3, #2
 80081f6:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 80081f8:	2300      	movs	r3, #0
}
 80081fa:	4618      	mov	r0, r3
 80081fc:	3714      	adds	r7, #20
 80081fe:	46bd      	mov	sp, r7
 8008200:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008204:	4770      	bx	lr

08008206 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevDisconnect(const USB_OTG_GlobalTypeDef *USBx)
{
 8008206:	b480      	push	{r7}
 8008208:	b085      	sub	sp, #20
 800820a:	af00      	add	r7, sp, #0
 800820c:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800820e:	687b      	ldr	r3, [r7, #4]
 8008210:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8008212:	68fb      	ldr	r3, [r7, #12]
 8008214:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8008218:	681b      	ldr	r3, [r3, #0]
 800821a:	68fa      	ldr	r2, [r7, #12]
 800821c:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8008220:	f023 0303 	bic.w	r3, r3, #3
 8008224:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8008226:	68fb      	ldr	r3, [r7, #12]
 8008228:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800822c:	685b      	ldr	r3, [r3, #4]
 800822e:	68fa      	ldr	r2, [r7, #12]
 8008230:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8008234:	f043 0302 	orr.w	r3, r3, #2
 8008238:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800823a:	2300      	movs	r3, #0
}
 800823c:	4618      	mov	r0, r3
 800823e:	3714      	adds	r7, #20
 8008240:	46bd      	mov	sp, r7
 8008242:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008246:	4770      	bx	lr

08008248 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_OTG_GlobalTypeDef const *USBx)
{
 8008248:	b480      	push	{r7}
 800824a:	b085      	sub	sp, #20
 800824c:	af00      	add	r7, sp, #0
 800824e:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 8008250:	687b      	ldr	r3, [r7, #4]
 8008252:	695b      	ldr	r3, [r3, #20]
 8008254:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 8008256:	687b      	ldr	r3, [r7, #4]
 8008258:	699b      	ldr	r3, [r3, #24]
 800825a:	68fa      	ldr	r2, [r7, #12]
 800825c:	4013      	ands	r3, r2
 800825e:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 8008260:	68fb      	ldr	r3, [r7, #12]
}
 8008262:	4618      	mov	r0, r3
 8008264:	3714      	adds	r7, #20
 8008266:	46bd      	mov	sp, r7
 8008268:	f85d 7b04 	ldr.w	r7, [sp], #4
 800826c:	4770      	bx	lr

0800826e <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval USB Device OUT EP interrupt status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(const USB_OTG_GlobalTypeDef *USBx)
{
 800826e:	b480      	push	{r7}
 8008270:	b085      	sub	sp, #20
 8008272:	af00      	add	r7, sp, #0
 8008274:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008276:	687b      	ldr	r3, [r7, #4]
 8008278:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 800827a:	68fb      	ldr	r3, [r7, #12]
 800827c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008280:	699b      	ldr	r3, [r3, #24]
 8008282:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8008284:	68fb      	ldr	r3, [r7, #12]
 8008286:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800828a:	69db      	ldr	r3, [r3, #28]
 800828c:	68ba      	ldr	r2, [r7, #8]
 800828e:	4013      	ands	r3, r2
 8008290:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 8008292:	68bb      	ldr	r3, [r7, #8]
 8008294:	0c1b      	lsrs	r3, r3, #16
}
 8008296:	4618      	mov	r0, r3
 8008298:	3714      	adds	r7, #20
 800829a:	46bd      	mov	sp, r7
 800829c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082a0:	4770      	bx	lr

080082a2 <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval USB Device IN EP interrupt status
  */
uint32_t USB_ReadDevAllInEpInterrupt(const USB_OTG_GlobalTypeDef *USBx)
{
 80082a2:	b480      	push	{r7}
 80082a4:	b085      	sub	sp, #20
 80082a6:	af00      	add	r7, sp, #0
 80082a8:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80082aa:	687b      	ldr	r3, [r7, #4]
 80082ac:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 80082ae:	68fb      	ldr	r3, [r7, #12]
 80082b0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80082b4:	699b      	ldr	r3, [r3, #24]
 80082b6:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 80082b8:	68fb      	ldr	r3, [r7, #12]
 80082ba:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80082be:	69db      	ldr	r3, [r3, #28]
 80082c0:	68ba      	ldr	r2, [r7, #8]
 80082c2:	4013      	ands	r3, r2
 80082c4:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 80082c6:	68bb      	ldr	r3, [r7, #8]
 80082c8:	b29b      	uxth	r3, r3
}
 80082ca:	4618      	mov	r0, r3
 80082cc:	3714      	adds	r7, #20
 80082ce:	46bd      	mov	sp, r7
 80082d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082d4:	4770      	bx	lr

080082d6 <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(const USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 80082d6:	b480      	push	{r7}
 80082d8:	b085      	sub	sp, #20
 80082da:	af00      	add	r7, sp, #0
 80082dc:	6078      	str	r0, [r7, #4]
 80082de:	460b      	mov	r3, r1
 80082e0:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80082e2:	687b      	ldr	r3, [r7, #4]
 80082e4:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 80082e6:	78fb      	ldrb	r3, [r7, #3]
 80082e8:	015a      	lsls	r2, r3, #5
 80082ea:	68fb      	ldr	r3, [r7, #12]
 80082ec:	4413      	add	r3, r2
 80082ee:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80082f2:	689b      	ldr	r3, [r3, #8]
 80082f4:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 80082f6:	68fb      	ldr	r3, [r7, #12]
 80082f8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80082fc:	695b      	ldr	r3, [r3, #20]
 80082fe:	68ba      	ldr	r2, [r7, #8]
 8008300:	4013      	ands	r3, r2
 8008302:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8008304:	68bb      	ldr	r3, [r7, #8]
}
 8008306:	4618      	mov	r0, r3
 8008308:	3714      	adds	r7, #20
 800830a:	46bd      	mov	sp, r7
 800830c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008310:	4770      	bx	lr

08008312 <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(const USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8008312:	b480      	push	{r7}
 8008314:	b087      	sub	sp, #28
 8008316:	af00      	add	r7, sp, #0
 8008318:	6078      	str	r0, [r7, #4]
 800831a:	460b      	mov	r3, r1
 800831c:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800831e:	687b      	ldr	r3, [r7, #4]
 8008320:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t msk;
  uint32_t emp;

  msk = USBx_DEVICE->DIEPMSK;
 8008322:	697b      	ldr	r3, [r7, #20]
 8008324:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008328:	691b      	ldr	r3, [r3, #16]
 800832a:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 800832c:	697b      	ldr	r3, [r7, #20]
 800832e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008332:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008334:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 8008336:	78fb      	ldrb	r3, [r7, #3]
 8008338:	f003 030f 	and.w	r3, r3, #15
 800833c:	68fa      	ldr	r2, [r7, #12]
 800833e:	fa22 f303 	lsr.w	r3, r2, r3
 8008342:	01db      	lsls	r3, r3, #7
 8008344:	b2db      	uxtb	r3, r3
 8008346:	693a      	ldr	r2, [r7, #16]
 8008348:	4313      	orrs	r3, r2
 800834a:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 800834c:	78fb      	ldrb	r3, [r7, #3]
 800834e:	015a      	lsls	r2, r3, #5
 8008350:	697b      	ldr	r3, [r7, #20]
 8008352:	4413      	add	r3, r2
 8008354:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008358:	689b      	ldr	r3, [r3, #8]
 800835a:	693a      	ldr	r2, [r7, #16]
 800835c:	4013      	ands	r3, r2
 800835e:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8008360:	68bb      	ldr	r3, [r7, #8]
}
 8008362:	4618      	mov	r0, r3
 8008364:	371c      	adds	r7, #28
 8008366:	46bd      	mov	sp, r7
 8008368:	f85d 7b04 	ldr.w	r7, [sp], #4
 800836c:	4770      	bx	lr

0800836e <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(const USB_OTG_GlobalTypeDef *USBx)
{
 800836e:	b480      	push	{r7}
 8008370:	b083      	sub	sp, #12
 8008372:	af00      	add	r7, sp, #0
 8008374:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8008376:	687b      	ldr	r3, [r7, #4]
 8008378:	695b      	ldr	r3, [r3, #20]
 800837a:	f003 0301 	and.w	r3, r3, #1
}
 800837e:	4618      	mov	r0, r3
 8008380:	370c      	adds	r7, #12
 8008382:	46bd      	mov	sp, r7
 8008384:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008388:	4770      	bx	lr

0800838a <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateSetup(const USB_OTG_GlobalTypeDef *USBx)
{
 800838a:	b480      	push	{r7}
 800838c:	b085      	sub	sp, #20
 800838e:	af00      	add	r7, sp, #0
 8008390:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008392:	687b      	ldr	r3, [r7, #4]
 8008394:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 8008396:	68fb      	ldr	r3, [r7, #12]
 8008398:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800839c:	681b      	ldr	r3, [r3, #0]
 800839e:	68fa      	ldr	r2, [r7, #12]
 80083a0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80083a4:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 80083a8:	f023 0307 	bic.w	r3, r3, #7
 80083ac:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 80083ae:	68fb      	ldr	r3, [r7, #12]
 80083b0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80083b4:	685b      	ldr	r3, [r3, #4]
 80083b6:	68fa      	ldr	r2, [r7, #12]
 80083b8:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80083bc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80083c0:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 80083c2:	2300      	movs	r3, #0
}
 80083c4:	4618      	mov	r0, r3
 80083c6:	3714      	adds	r7, #20
 80083c8:	46bd      	mov	sp, r7
 80083ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083ce:	4770      	bx	lr

080083d0 <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(const USB_OTG_GlobalTypeDef *USBx, uint8_t dma, const uint8_t *psetup)
{
 80083d0:	b480      	push	{r7}
 80083d2:	b087      	sub	sp, #28
 80083d4:	af00      	add	r7, sp, #0
 80083d6:	60f8      	str	r0, [r7, #12]
 80083d8:	460b      	mov	r3, r1
 80083da:	607a      	str	r2, [r7, #4]
 80083dc:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80083de:	68fb      	ldr	r3, [r7, #12]
 80083e0:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 80083e2:	68fb      	ldr	r3, [r7, #12]
 80083e4:	333c      	adds	r3, #60	; 0x3c
 80083e6:	3304      	adds	r3, #4
 80083e8:	681b      	ldr	r3, [r3, #0]
 80083ea:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 80083ec:	693b      	ldr	r3, [r7, #16]
 80083ee:	4a26      	ldr	r2, [pc, #152]	; (8008488 <USB_EP0_OutStart+0xb8>)
 80083f0:	4293      	cmp	r3, r2
 80083f2:	d90a      	bls.n	800840a <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80083f4:	697b      	ldr	r3, [r7, #20]
 80083f6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80083fa:	681b      	ldr	r3, [r3, #0]
 80083fc:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8008400:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8008404:	d101      	bne.n	800840a <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 8008406:	2300      	movs	r3, #0
 8008408:	e037      	b.n	800847a <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 800840a:	697b      	ldr	r3, [r7, #20]
 800840c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008410:	461a      	mov	r2, r3
 8008412:	2300      	movs	r3, #0
 8008414:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8008416:	697b      	ldr	r3, [r7, #20]
 8008418:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800841c:	691b      	ldr	r3, [r3, #16]
 800841e:	697a      	ldr	r2, [r7, #20]
 8008420:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8008424:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8008428:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 800842a:	697b      	ldr	r3, [r7, #20]
 800842c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008430:	691b      	ldr	r3, [r3, #16]
 8008432:	697a      	ldr	r2, [r7, #20]
 8008434:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8008438:	f043 0318 	orr.w	r3, r3, #24
 800843c:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 800843e:	697b      	ldr	r3, [r7, #20]
 8008440:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008444:	691b      	ldr	r3, [r3, #16]
 8008446:	697a      	ldr	r2, [r7, #20]
 8008448:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800844c:	f043 43c0 	orr.w	r3, r3, #1610612736	; 0x60000000
 8008450:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 8008452:	7afb      	ldrb	r3, [r7, #11]
 8008454:	2b01      	cmp	r3, #1
 8008456:	d10f      	bne.n	8008478 <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 8008458:	697b      	ldr	r3, [r7, #20]
 800845a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800845e:	461a      	mov	r2, r3
 8008460:	687b      	ldr	r3, [r7, #4]
 8008462:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 8008464:	697b      	ldr	r3, [r7, #20]
 8008466:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800846a:	681b      	ldr	r3, [r3, #0]
 800846c:	697a      	ldr	r2, [r7, #20]
 800846e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8008472:	f043 2380 	orr.w	r3, r3, #2147516416	; 0x80008000
 8008476:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8008478:	2300      	movs	r3, #0
}
 800847a:	4618      	mov	r0, r3
 800847c:	371c      	adds	r7, #28
 800847e:	46bd      	mov	sp, r7
 8008480:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008484:	4770      	bx	lr
 8008486:	bf00      	nop
 8008488:	4f54300a 	.word	0x4f54300a

0800848c <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 800848c:	b480      	push	{r7}
 800848e:	b085      	sub	sp, #20
 8008490:	af00      	add	r7, sp, #0
 8008492:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8008494:	2300      	movs	r3, #0
 8008496:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8008498:	68fb      	ldr	r3, [r7, #12]
 800849a:	3301      	adds	r3, #1
 800849c:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800849e:	68fb      	ldr	r3, [r7, #12]
 80084a0:	f1b3 6f70 	cmp.w	r3, #251658240	; 0xf000000
 80084a4:	d901      	bls.n	80084aa <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 80084a6:	2303      	movs	r3, #3
 80084a8:	e01b      	b.n	80084e2 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80084aa:	687b      	ldr	r3, [r7, #4]
 80084ac:	691b      	ldr	r3, [r3, #16]
 80084ae:	2b00      	cmp	r3, #0
 80084b0:	daf2      	bge.n	8008498 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 80084b2:	2300      	movs	r3, #0
 80084b4:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 80084b6:	687b      	ldr	r3, [r7, #4]
 80084b8:	691b      	ldr	r3, [r3, #16]
 80084ba:	f043 0201 	orr.w	r2, r3, #1
 80084be:	687b      	ldr	r3, [r7, #4]
 80084c0:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80084c2:	68fb      	ldr	r3, [r7, #12]
 80084c4:	3301      	adds	r3, #1
 80084c6:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 80084c8:	68fb      	ldr	r3, [r7, #12]
 80084ca:	f1b3 6f70 	cmp.w	r3, #251658240	; 0xf000000
 80084ce:	d901      	bls.n	80084d4 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 80084d0:	2303      	movs	r3, #3
 80084d2:	e006      	b.n	80084e2 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 80084d4:	687b      	ldr	r3, [r7, #4]
 80084d6:	691b      	ldr	r3, [r3, #16]
 80084d8:	f003 0301 	and.w	r3, r3, #1
 80084dc:	2b01      	cmp	r3, #1
 80084de:	d0f0      	beq.n	80084c2 <USB_CoreReset+0x36>

  return HAL_OK;
 80084e0:	2300      	movs	r3, #0
}
 80084e2:	4618      	mov	r0, r3
 80084e4:	3714      	adds	r7, #20
 80084e6:	46bd      	mov	sp, r7
 80084e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084ec:	4770      	bx	lr
	...

080084f0 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80084f0:	b580      	push	{r7, lr}
 80084f2:	b084      	sub	sp, #16
 80084f4:	af00      	add	r7, sp, #0
 80084f6:	6078      	str	r0, [r7, #4]
 80084f8:	460b      	mov	r3, r1
 80084fa:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = (USBD_CDC_HandleTypeDef *)USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 80084fc:	f44f 7007 	mov.w	r0, #540	; 0x21c
 8008500:	f005 fd4e 	bl	800dfa0 <USBD_static_malloc>
 8008504:	60f8      	str	r0, [r7, #12]

  if (hcdc == NULL)
 8008506:	68fb      	ldr	r3, [r7, #12]
 8008508:	2b00      	cmp	r3, #0
 800850a:	d109      	bne.n	8008520 <USBD_CDC_Init+0x30>
  {
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 800850c:	687b      	ldr	r3, [r7, #4]
 800850e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8008512:	687b      	ldr	r3, [r7, #4]
 8008514:	32b0      	adds	r2, #176	; 0xb0
 8008516:	2100      	movs	r1, #0
 8008518:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    return (uint8_t)USBD_EMEM;
 800851c:	2302      	movs	r3, #2
 800851e:	e0d4      	b.n	80086ca <USBD_CDC_Init+0x1da>
  }

  (void)USBD_memset(hcdc, 0, sizeof(USBD_CDC_HandleTypeDef));
 8008520:	f44f 7207 	mov.w	r2, #540	; 0x21c
 8008524:	2100      	movs	r1, #0
 8008526:	68f8      	ldr	r0, [r7, #12]
 8008528:	f005 fd7e 	bl	800e028 <memset>

  pdev->pClassDataCmsit[pdev->classId] = (void *)hcdc;
 800852c:	687b      	ldr	r3, [r7, #4]
 800852e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8008532:	687b      	ldr	r3, [r7, #4]
 8008534:	32b0      	adds	r2, #176	; 0xb0
 8008536:	68f9      	ldr	r1, [r7, #12]
 8008538:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  pdev->pClassData = pdev->pClassDataCmsit[pdev->classId];
 800853c:	687b      	ldr	r3, [r7, #4]
 800853e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8008542:	687b      	ldr	r3, [r7, #4]
 8008544:	32b0      	adds	r2, #176	; 0xb0
 8008546:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 800854a:	687b      	ldr	r3, [r7, #4]
 800854c:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8008550:	687b      	ldr	r3, [r7, #4]
 8008552:	7c1b      	ldrb	r3, [r3, #16]
 8008554:	2b00      	cmp	r3, #0
 8008556:	d138      	bne.n	80085ca <USBD_CDC_Init+0xda>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 8008558:	4b5e      	ldr	r3, [pc, #376]	; (80086d4 <USBD_CDC_Init+0x1e4>)
 800855a:	7819      	ldrb	r1, [r3, #0]
 800855c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8008560:	2202      	movs	r2, #2
 8008562:	6878      	ldr	r0, [r7, #4]
 8008564:	f005 fbf9 	bl	800dd5a <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 8008568:	4b5a      	ldr	r3, [pc, #360]	; (80086d4 <USBD_CDC_Init+0x1e4>)
 800856a:	781b      	ldrb	r3, [r3, #0]
 800856c:	f003 020f 	and.w	r2, r3, #15
 8008570:	6879      	ldr	r1, [r7, #4]
 8008572:	4613      	mov	r3, r2
 8008574:	009b      	lsls	r3, r3, #2
 8008576:	4413      	add	r3, r2
 8008578:	009b      	lsls	r3, r3, #2
 800857a:	440b      	add	r3, r1
 800857c:	3324      	adds	r3, #36	; 0x24
 800857e:	2201      	movs	r2, #1
 8008580:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 8008582:	4b55      	ldr	r3, [pc, #340]	; (80086d8 <USBD_CDC_Init+0x1e8>)
 8008584:	7819      	ldrb	r1, [r3, #0]
 8008586:	f44f 7300 	mov.w	r3, #512	; 0x200
 800858a:	2202      	movs	r2, #2
 800858c:	6878      	ldr	r0, [r7, #4]
 800858e:	f005 fbe4 	bl	800dd5a <USBD_LL_OpenEP>
                         CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 8008592:	4b51      	ldr	r3, [pc, #324]	; (80086d8 <USBD_CDC_Init+0x1e8>)
 8008594:	781b      	ldrb	r3, [r3, #0]
 8008596:	f003 020f 	and.w	r2, r3, #15
 800859a:	6879      	ldr	r1, [r7, #4]
 800859c:	4613      	mov	r3, r2
 800859e:	009b      	lsls	r3, r3, #2
 80085a0:	4413      	add	r3, r2
 80085a2:	009b      	lsls	r3, r3, #2
 80085a4:	440b      	add	r3, r1
 80085a6:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 80085aa:	2201      	movs	r2, #1
 80085ac:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CDC CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_HS_BINTERVAL;
 80085ae:	4b4b      	ldr	r3, [pc, #300]	; (80086dc <USBD_CDC_Init+0x1ec>)
 80085b0:	781b      	ldrb	r3, [r3, #0]
 80085b2:	f003 020f 	and.w	r2, r3, #15
 80085b6:	6879      	ldr	r1, [r7, #4]
 80085b8:	4613      	mov	r3, r2
 80085ba:	009b      	lsls	r3, r3, #2
 80085bc:	4413      	add	r3, r2
 80085be:	009b      	lsls	r3, r3, #2
 80085c0:	440b      	add	r3, r1
 80085c2:	3326      	adds	r3, #38	; 0x26
 80085c4:	2210      	movs	r2, #16
 80085c6:	801a      	strh	r2, [r3, #0]
 80085c8:	e035      	b.n	8008636 <USBD_CDC_Init+0x146>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 80085ca:	4b42      	ldr	r3, [pc, #264]	; (80086d4 <USBD_CDC_Init+0x1e4>)
 80085cc:	7819      	ldrb	r1, [r3, #0]
 80085ce:	2340      	movs	r3, #64	; 0x40
 80085d0:	2202      	movs	r2, #2
 80085d2:	6878      	ldr	r0, [r7, #4]
 80085d4:	f005 fbc1 	bl	800dd5a <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 80085d8:	4b3e      	ldr	r3, [pc, #248]	; (80086d4 <USBD_CDC_Init+0x1e4>)
 80085da:	781b      	ldrb	r3, [r3, #0]
 80085dc:	f003 020f 	and.w	r2, r3, #15
 80085e0:	6879      	ldr	r1, [r7, #4]
 80085e2:	4613      	mov	r3, r2
 80085e4:	009b      	lsls	r3, r3, #2
 80085e6:	4413      	add	r3, r2
 80085e8:	009b      	lsls	r3, r3, #2
 80085ea:	440b      	add	r3, r1
 80085ec:	3324      	adds	r3, #36	; 0x24
 80085ee:	2201      	movs	r2, #1
 80085f0:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 80085f2:	4b39      	ldr	r3, [pc, #228]	; (80086d8 <USBD_CDC_Init+0x1e8>)
 80085f4:	7819      	ldrb	r1, [r3, #0]
 80085f6:	2340      	movs	r3, #64	; 0x40
 80085f8:	2202      	movs	r2, #2
 80085fa:	6878      	ldr	r0, [r7, #4]
 80085fc:	f005 fbad 	bl	800dd5a <USBD_LL_OpenEP>
                         CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 8008600:	4b35      	ldr	r3, [pc, #212]	; (80086d8 <USBD_CDC_Init+0x1e8>)
 8008602:	781b      	ldrb	r3, [r3, #0]
 8008604:	f003 020f 	and.w	r2, r3, #15
 8008608:	6879      	ldr	r1, [r7, #4]
 800860a:	4613      	mov	r3, r2
 800860c:	009b      	lsls	r3, r3, #2
 800860e:	4413      	add	r3, r2
 8008610:	009b      	lsls	r3, r3, #2
 8008612:	440b      	add	r3, r1
 8008614:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8008618:	2201      	movs	r2, #1
 800861a:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_FS_BINTERVAL;
 800861c:	4b2f      	ldr	r3, [pc, #188]	; (80086dc <USBD_CDC_Init+0x1ec>)
 800861e:	781b      	ldrb	r3, [r3, #0]
 8008620:	f003 020f 	and.w	r2, r3, #15
 8008624:	6879      	ldr	r1, [r7, #4]
 8008626:	4613      	mov	r3, r2
 8008628:	009b      	lsls	r3, r3, #2
 800862a:	4413      	add	r3, r2
 800862c:	009b      	lsls	r3, r3, #2
 800862e:	440b      	add	r3, r1
 8008630:	3326      	adds	r3, #38	; 0x26
 8008632:	2210      	movs	r2, #16
 8008634:	801a      	strh	r2, [r3, #0]
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDCCmdEpAdd, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 8008636:	4b29      	ldr	r3, [pc, #164]	; (80086dc <USBD_CDC_Init+0x1ec>)
 8008638:	7819      	ldrb	r1, [r3, #0]
 800863a:	2308      	movs	r3, #8
 800863c:	2203      	movs	r2, #3
 800863e:	6878      	ldr	r0, [r7, #4]
 8008640:	f005 fb8b 	bl	800dd5a <USBD_LL_OpenEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 1U;
 8008644:	4b25      	ldr	r3, [pc, #148]	; (80086dc <USBD_CDC_Init+0x1ec>)
 8008646:	781b      	ldrb	r3, [r3, #0]
 8008648:	f003 020f 	and.w	r2, r3, #15
 800864c:	6879      	ldr	r1, [r7, #4]
 800864e:	4613      	mov	r3, r2
 8008650:	009b      	lsls	r3, r3, #2
 8008652:	4413      	add	r3, r2
 8008654:	009b      	lsls	r3, r3, #2
 8008656:	440b      	add	r3, r1
 8008658:	3324      	adds	r3, #36	; 0x24
 800865a:	2201      	movs	r2, #1
 800865c:	801a      	strh	r2, [r3, #0]

  hcdc->RxBuffer = NULL;
 800865e:	68fb      	ldr	r3, [r7, #12]
 8008660:	2200      	movs	r2, #0
 8008662:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Init();
 8008666:	687b      	ldr	r3, [r7, #4]
 8008668:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800866c:	687a      	ldr	r2, [r7, #4]
 800866e:	33b0      	adds	r3, #176	; 0xb0
 8008670:	009b      	lsls	r3, r3, #2
 8008672:	4413      	add	r3, r2
 8008674:	685b      	ldr	r3, [r3, #4]
 8008676:	681b      	ldr	r3, [r3, #0]
 8008678:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 800867a:	68fb      	ldr	r3, [r7, #12]
 800867c:	2200      	movs	r2, #0
 800867e:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
  hcdc->RxState = 0U;
 8008682:	68fb      	ldr	r3, [r7, #12]
 8008684:	2200      	movs	r2, #0
 8008686:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

  if (hcdc->RxBuffer == NULL)
 800868a:	68fb      	ldr	r3, [r7, #12]
 800868c:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 8008690:	2b00      	cmp	r3, #0
 8008692:	d101      	bne.n	8008698 <USBD_CDC_Init+0x1a8>
  {
    return (uint8_t)USBD_EMEM;
 8008694:	2302      	movs	r3, #2
 8008696:	e018      	b.n	80086ca <USBD_CDC_Init+0x1da>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8008698:	687b      	ldr	r3, [r7, #4]
 800869a:	7c1b      	ldrb	r3, [r3, #16]
 800869c:	2b00      	cmp	r3, #0
 800869e:	d10a      	bne.n	80086b6 <USBD_CDC_Init+0x1c6>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 80086a0:	4b0d      	ldr	r3, [pc, #52]	; (80086d8 <USBD_CDC_Init+0x1e8>)
 80086a2:	7819      	ldrb	r1, [r3, #0]
 80086a4:	68fb      	ldr	r3, [r7, #12]
 80086a6:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 80086aa:	f44f 7300 	mov.w	r3, #512	; 0x200
 80086ae:	6878      	ldr	r0, [r7, #4]
 80086b0:	f005 fc42 	bl	800df38 <USBD_LL_PrepareReceive>
 80086b4:	e008      	b.n	80086c8 <USBD_CDC_Init+0x1d8>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 80086b6:	4b08      	ldr	r3, [pc, #32]	; (80086d8 <USBD_CDC_Init+0x1e8>)
 80086b8:	7819      	ldrb	r1, [r3, #0]
 80086ba:	68fb      	ldr	r3, [r7, #12]
 80086bc:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 80086c0:	2340      	movs	r3, #64	; 0x40
 80086c2:	6878      	ldr	r0, [r7, #4]
 80086c4:	f005 fc38 	bl	800df38 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 80086c8:	2300      	movs	r3, #0
}
 80086ca:	4618      	mov	r0, r3
 80086cc:	3710      	adds	r7, #16
 80086ce:	46bd      	mov	sp, r7
 80086d0:	bd80      	pop	{r7, pc}
 80086d2:	bf00      	nop
 80086d4:	20000093 	.word	0x20000093
 80086d8:	20000094 	.word	0x20000094
 80086dc:	20000095 	.word	0x20000095

080086e0 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80086e0:	b580      	push	{r7, lr}
 80086e2:	b082      	sub	sp, #8
 80086e4:	af00      	add	r7, sp, #0
 80086e6:	6078      	str	r0, [r7, #4]
 80086e8:	460b      	mov	r3, r1
 80086ea:	70fb      	strb	r3, [r7, #3]
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDCInEpAdd);
 80086ec:	4b3a      	ldr	r3, [pc, #232]	; (80087d8 <USBD_CDC_DeInit+0xf8>)
 80086ee:	781b      	ldrb	r3, [r3, #0]
 80086f0:	4619      	mov	r1, r3
 80086f2:	6878      	ldr	r0, [r7, #4]
 80086f4:	f005 fb57 	bl	800dda6 <USBD_LL_CloseEP>
  pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 0U;
 80086f8:	4b37      	ldr	r3, [pc, #220]	; (80087d8 <USBD_CDC_DeInit+0xf8>)
 80086fa:	781b      	ldrb	r3, [r3, #0]
 80086fc:	f003 020f 	and.w	r2, r3, #15
 8008700:	6879      	ldr	r1, [r7, #4]
 8008702:	4613      	mov	r3, r2
 8008704:	009b      	lsls	r3, r3, #2
 8008706:	4413      	add	r3, r2
 8008708:	009b      	lsls	r3, r3, #2
 800870a:	440b      	add	r3, r1
 800870c:	3324      	adds	r3, #36	; 0x24
 800870e:	2200      	movs	r2, #0
 8008710:	801a      	strh	r2, [r3, #0]

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDCOutEpAdd);
 8008712:	4b32      	ldr	r3, [pc, #200]	; (80087dc <USBD_CDC_DeInit+0xfc>)
 8008714:	781b      	ldrb	r3, [r3, #0]
 8008716:	4619      	mov	r1, r3
 8008718:	6878      	ldr	r0, [r7, #4]
 800871a:	f005 fb44 	bl	800dda6 <USBD_LL_CloseEP>
  pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 0U;
 800871e:	4b2f      	ldr	r3, [pc, #188]	; (80087dc <USBD_CDC_DeInit+0xfc>)
 8008720:	781b      	ldrb	r3, [r3, #0]
 8008722:	f003 020f 	and.w	r2, r3, #15
 8008726:	6879      	ldr	r1, [r7, #4]
 8008728:	4613      	mov	r3, r2
 800872a:	009b      	lsls	r3, r3, #2
 800872c:	4413      	add	r3, r2
 800872e:	009b      	lsls	r3, r3, #2
 8008730:	440b      	add	r3, r1
 8008732:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8008736:	2200      	movs	r2, #0
 8008738:	801a      	strh	r2, [r3, #0]

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDCCmdEpAdd);
 800873a:	4b29      	ldr	r3, [pc, #164]	; (80087e0 <USBD_CDC_DeInit+0x100>)
 800873c:	781b      	ldrb	r3, [r3, #0]
 800873e:	4619      	mov	r1, r3
 8008740:	6878      	ldr	r0, [r7, #4]
 8008742:	f005 fb30 	bl	800dda6 <USBD_LL_CloseEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 0U;
 8008746:	4b26      	ldr	r3, [pc, #152]	; (80087e0 <USBD_CDC_DeInit+0x100>)
 8008748:	781b      	ldrb	r3, [r3, #0]
 800874a:	f003 020f 	and.w	r2, r3, #15
 800874e:	6879      	ldr	r1, [r7, #4]
 8008750:	4613      	mov	r3, r2
 8008752:	009b      	lsls	r3, r3, #2
 8008754:	4413      	add	r3, r2
 8008756:	009b      	lsls	r3, r3, #2
 8008758:	440b      	add	r3, r1
 800875a:	3324      	adds	r3, #36	; 0x24
 800875c:	2200      	movs	r2, #0
 800875e:	801a      	strh	r2, [r3, #0]
  pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = 0U;
 8008760:	4b1f      	ldr	r3, [pc, #124]	; (80087e0 <USBD_CDC_DeInit+0x100>)
 8008762:	781b      	ldrb	r3, [r3, #0]
 8008764:	f003 020f 	and.w	r2, r3, #15
 8008768:	6879      	ldr	r1, [r7, #4]
 800876a:	4613      	mov	r3, r2
 800876c:	009b      	lsls	r3, r3, #2
 800876e:	4413      	add	r3, r2
 8008770:	009b      	lsls	r3, r3, #2
 8008772:	440b      	add	r3, r1
 8008774:	3326      	adds	r3, #38	; 0x26
 8008776:	2200      	movs	r2, #0
 8008778:	801a      	strh	r2, [r3, #0]

  /* DeInit  physical Interface components */
  if (pdev->pClassDataCmsit[pdev->classId] != NULL)
 800877a:	687b      	ldr	r3, [r7, #4]
 800877c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8008780:	687b      	ldr	r3, [r7, #4]
 8008782:	32b0      	adds	r2, #176	; 0xb0
 8008784:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008788:	2b00      	cmp	r3, #0
 800878a:	d01f      	beq.n	80087cc <USBD_CDC_DeInit+0xec>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->DeInit();
 800878c:	687b      	ldr	r3, [r7, #4]
 800878e:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8008792:	687a      	ldr	r2, [r7, #4]
 8008794:	33b0      	adds	r3, #176	; 0xb0
 8008796:	009b      	lsls	r3, r3, #2
 8008798:	4413      	add	r3, r2
 800879a:	685b      	ldr	r3, [r3, #4]
 800879c:	685b      	ldr	r3, [r3, #4]
 800879e:	4798      	blx	r3
    (void)USBD_free(pdev->pClassDataCmsit[pdev->classId]);
 80087a0:	687b      	ldr	r3, [r7, #4]
 80087a2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80087a6:	687b      	ldr	r3, [r7, #4]
 80087a8:	32b0      	adds	r2, #176	; 0xb0
 80087aa:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80087ae:	4618      	mov	r0, r3
 80087b0:	f005 fc04 	bl	800dfbc <USBD_static_free>
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 80087b4:	687b      	ldr	r3, [r7, #4]
 80087b6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80087ba:	687b      	ldr	r3, [r7, #4]
 80087bc:	32b0      	adds	r2, #176	; 0xb0
 80087be:	2100      	movs	r1, #0
 80087c0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    pdev->pClassData = NULL;
 80087c4:	687b      	ldr	r3, [r7, #4]
 80087c6:	2200      	movs	r2, #0
 80087c8:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  }

  return (uint8_t)USBD_OK;
 80087cc:	2300      	movs	r3, #0
}
 80087ce:	4618      	mov	r0, r3
 80087d0:	3708      	adds	r7, #8
 80087d2:	46bd      	mov	sp, r7
 80087d4:	bd80      	pop	{r7, pc}
 80087d6:	bf00      	nop
 80087d8:	20000093 	.word	0x20000093
 80087dc:	20000094 	.word	0x20000094
 80087e0:	20000095 	.word	0x20000095

080087e4 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 80087e4:	b580      	push	{r7, lr}
 80087e6:	b086      	sub	sp, #24
 80087e8:	af00      	add	r7, sp, #0
 80087ea:	6078      	str	r0, [r7, #4]
 80087ec:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80087ee:	687b      	ldr	r3, [r7, #4]
 80087f0:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80087f4:	687b      	ldr	r3, [r7, #4]
 80087f6:	32b0      	adds	r2, #176	; 0xb0
 80087f8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80087fc:	613b      	str	r3, [r7, #16]
  uint16_t len;
  uint8_t ifalt = 0U;
 80087fe:	2300      	movs	r3, #0
 8008800:	737b      	strb	r3, [r7, #13]
  uint16_t status_info = 0U;
 8008802:	2300      	movs	r3, #0
 8008804:	817b      	strh	r3, [r7, #10]
  USBD_StatusTypeDef ret = USBD_OK;
 8008806:	2300      	movs	r3, #0
 8008808:	75fb      	strb	r3, [r7, #23]

  if (hcdc == NULL)
 800880a:	693b      	ldr	r3, [r7, #16]
 800880c:	2b00      	cmp	r3, #0
 800880e:	d101      	bne.n	8008814 <USBD_CDC_Setup+0x30>
  {
    return (uint8_t)USBD_FAIL;
 8008810:	2303      	movs	r3, #3
 8008812:	e0bf      	b.n	8008994 <USBD_CDC_Setup+0x1b0>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8008814:	683b      	ldr	r3, [r7, #0]
 8008816:	781b      	ldrb	r3, [r3, #0]
 8008818:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800881c:	2b00      	cmp	r3, #0
 800881e:	d050      	beq.n	80088c2 <USBD_CDC_Setup+0xde>
 8008820:	2b20      	cmp	r3, #32
 8008822:	f040 80af 	bne.w	8008984 <USBD_CDC_Setup+0x1a0>
  {
    case USB_REQ_TYPE_CLASS:
      if (req->wLength != 0U)
 8008826:	683b      	ldr	r3, [r7, #0]
 8008828:	88db      	ldrh	r3, [r3, #6]
 800882a:	2b00      	cmp	r3, #0
 800882c:	d03a      	beq.n	80088a4 <USBD_CDC_Setup+0xc0>
      {
        if ((req->bmRequest & 0x80U) != 0U)
 800882e:	683b      	ldr	r3, [r7, #0]
 8008830:	781b      	ldrb	r3, [r3, #0]
 8008832:	b25b      	sxtb	r3, r3
 8008834:	2b00      	cmp	r3, #0
 8008836:	da1b      	bge.n	8008870 <USBD_CDC_Setup+0x8c>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 8008838:	687b      	ldr	r3, [r7, #4]
 800883a:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800883e:	687a      	ldr	r2, [r7, #4]
 8008840:	33b0      	adds	r3, #176	; 0xb0
 8008842:	009b      	lsls	r3, r3, #2
 8008844:	4413      	add	r3, r2
 8008846:	685b      	ldr	r3, [r3, #4]
 8008848:	689b      	ldr	r3, [r3, #8]
 800884a:	683a      	ldr	r2, [r7, #0]
 800884c:	7850      	ldrb	r0, [r2, #1]
                                                                           (uint8_t *)hcdc->data,
 800884e:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 8008850:	683a      	ldr	r2, [r7, #0]
 8008852:	88d2      	ldrh	r2, [r2, #6]
 8008854:	4798      	blx	r3
                                                                           req->wLength);

          len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 8008856:	683b      	ldr	r3, [r7, #0]
 8008858:	88db      	ldrh	r3, [r3, #6]
 800885a:	2b07      	cmp	r3, #7
 800885c:	bf28      	it	cs
 800885e:	2307      	movcs	r3, #7
 8008860:	81fb      	strh	r3, [r7, #14]
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, len);
 8008862:	693b      	ldr	r3, [r7, #16]
 8008864:	89fa      	ldrh	r2, [r7, #14]
 8008866:	4619      	mov	r1, r3
 8008868:	6878      	ldr	r0, [r7, #4]
 800886a:	f001 fd49 	bl	800a300 <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
                                                                         (uint8_t *)req, 0U);
      }
      break;
 800886e:	e090      	b.n	8008992 <USBD_CDC_Setup+0x1ae>
          hcdc->CmdOpCode = req->bRequest;
 8008870:	683b      	ldr	r3, [r7, #0]
 8008872:	785a      	ldrb	r2, [r3, #1]
 8008874:	693b      	ldr	r3, [r7, #16]
 8008876:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
          hcdc->CmdLength = (uint8_t)MIN(req->wLength, USB_MAX_EP0_SIZE);
 800887a:	683b      	ldr	r3, [r7, #0]
 800887c:	88db      	ldrh	r3, [r3, #6]
 800887e:	2b3f      	cmp	r3, #63	; 0x3f
 8008880:	d803      	bhi.n	800888a <USBD_CDC_Setup+0xa6>
 8008882:	683b      	ldr	r3, [r7, #0]
 8008884:	88db      	ldrh	r3, [r3, #6]
 8008886:	b2da      	uxtb	r2, r3
 8008888:	e000      	b.n	800888c <USBD_CDC_Setup+0xa8>
 800888a:	2240      	movs	r2, #64	; 0x40
 800888c:	693b      	ldr	r3, [r7, #16]
 800888e:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, hcdc->CmdLength);
 8008892:	6939      	ldr	r1, [r7, #16]
 8008894:	693b      	ldr	r3, [r7, #16]
 8008896:	f893 3201 	ldrb.w	r3, [r3, #513]	; 0x201
 800889a:	461a      	mov	r2, r3
 800889c:	6878      	ldr	r0, [r7, #4]
 800889e:	f001 fd5b 	bl	800a358 <USBD_CtlPrepareRx>
      break;
 80088a2:	e076      	b.n	8008992 <USBD_CDC_Setup+0x1ae>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 80088a4:	687b      	ldr	r3, [r7, #4]
 80088a6:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 80088aa:	687a      	ldr	r2, [r7, #4]
 80088ac:	33b0      	adds	r3, #176	; 0xb0
 80088ae:	009b      	lsls	r3, r3, #2
 80088b0:	4413      	add	r3, r2
 80088b2:	685b      	ldr	r3, [r3, #4]
 80088b4:	689b      	ldr	r3, [r3, #8]
 80088b6:	683a      	ldr	r2, [r7, #0]
 80088b8:	7850      	ldrb	r0, [r2, #1]
 80088ba:	2200      	movs	r2, #0
 80088bc:	6839      	ldr	r1, [r7, #0]
 80088be:	4798      	blx	r3
      break;
 80088c0:	e067      	b.n	8008992 <USBD_CDC_Setup+0x1ae>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 80088c2:	683b      	ldr	r3, [r7, #0]
 80088c4:	785b      	ldrb	r3, [r3, #1]
 80088c6:	2b0b      	cmp	r3, #11
 80088c8:	d851      	bhi.n	800896e <USBD_CDC_Setup+0x18a>
 80088ca:	a201      	add	r2, pc, #4	; (adr r2, 80088d0 <USBD_CDC_Setup+0xec>)
 80088cc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80088d0:	08008901 	.word	0x08008901
 80088d4:	0800897d 	.word	0x0800897d
 80088d8:	0800896f 	.word	0x0800896f
 80088dc:	0800896f 	.word	0x0800896f
 80088e0:	0800896f 	.word	0x0800896f
 80088e4:	0800896f 	.word	0x0800896f
 80088e8:	0800896f 	.word	0x0800896f
 80088ec:	0800896f 	.word	0x0800896f
 80088f0:	0800896f 	.word	0x0800896f
 80088f4:	0800896f 	.word	0x0800896f
 80088f8:	0800892b 	.word	0x0800892b
 80088fc:	08008955 	.word	0x08008955
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008900:	687b      	ldr	r3, [r7, #4]
 8008902:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008906:	b2db      	uxtb	r3, r3
 8008908:	2b03      	cmp	r3, #3
 800890a:	d107      	bne.n	800891c <USBD_CDC_Setup+0x138>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 800890c:	f107 030a 	add.w	r3, r7, #10
 8008910:	2202      	movs	r2, #2
 8008912:	4619      	mov	r1, r3
 8008914:	6878      	ldr	r0, [r7, #4]
 8008916:	f001 fcf3 	bl	800a300 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800891a:	e032      	b.n	8008982 <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 800891c:	6839      	ldr	r1, [r7, #0]
 800891e:	6878      	ldr	r0, [r7, #4]
 8008920:	f001 fc7d 	bl	800a21e <USBD_CtlError>
            ret = USBD_FAIL;
 8008924:	2303      	movs	r3, #3
 8008926:	75fb      	strb	r3, [r7, #23]
          break;
 8008928:	e02b      	b.n	8008982 <USBD_CDC_Setup+0x19e>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800892a:	687b      	ldr	r3, [r7, #4]
 800892c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008930:	b2db      	uxtb	r3, r3
 8008932:	2b03      	cmp	r3, #3
 8008934:	d107      	bne.n	8008946 <USBD_CDC_Setup+0x162>
          {
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 8008936:	f107 030d 	add.w	r3, r7, #13
 800893a:	2201      	movs	r2, #1
 800893c:	4619      	mov	r1, r3
 800893e:	6878      	ldr	r0, [r7, #4]
 8008940:	f001 fcde 	bl	800a300 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8008944:	e01d      	b.n	8008982 <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 8008946:	6839      	ldr	r1, [r7, #0]
 8008948:	6878      	ldr	r0, [r7, #4]
 800894a:	f001 fc68 	bl	800a21e <USBD_CtlError>
            ret = USBD_FAIL;
 800894e:	2303      	movs	r3, #3
 8008950:	75fb      	strb	r3, [r7, #23]
          break;
 8008952:	e016      	b.n	8008982 <USBD_CDC_Setup+0x19e>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 8008954:	687b      	ldr	r3, [r7, #4]
 8008956:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800895a:	b2db      	uxtb	r3, r3
 800895c:	2b03      	cmp	r3, #3
 800895e:	d00f      	beq.n	8008980 <USBD_CDC_Setup+0x19c>
          {
            USBD_CtlError(pdev, req);
 8008960:	6839      	ldr	r1, [r7, #0]
 8008962:	6878      	ldr	r0, [r7, #4]
 8008964:	f001 fc5b 	bl	800a21e <USBD_CtlError>
            ret = USBD_FAIL;
 8008968:	2303      	movs	r3, #3
 800896a:	75fb      	strb	r3, [r7, #23]
          }
          break;
 800896c:	e008      	b.n	8008980 <USBD_CDC_Setup+0x19c>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 800896e:	6839      	ldr	r1, [r7, #0]
 8008970:	6878      	ldr	r0, [r7, #4]
 8008972:	f001 fc54 	bl	800a21e <USBD_CtlError>
          ret = USBD_FAIL;
 8008976:	2303      	movs	r3, #3
 8008978:	75fb      	strb	r3, [r7, #23]
          break;
 800897a:	e002      	b.n	8008982 <USBD_CDC_Setup+0x19e>
          break;
 800897c:	bf00      	nop
 800897e:	e008      	b.n	8008992 <USBD_CDC_Setup+0x1ae>
          break;
 8008980:	bf00      	nop
      }
      break;
 8008982:	e006      	b.n	8008992 <USBD_CDC_Setup+0x1ae>

    default:
      USBD_CtlError(pdev, req);
 8008984:	6839      	ldr	r1, [r7, #0]
 8008986:	6878      	ldr	r0, [r7, #4]
 8008988:	f001 fc49 	bl	800a21e <USBD_CtlError>
      ret = USBD_FAIL;
 800898c:	2303      	movs	r3, #3
 800898e:	75fb      	strb	r3, [r7, #23]
      break;
 8008990:	bf00      	nop
  }

  return (uint8_t)ret;
 8008992:	7dfb      	ldrb	r3, [r7, #23]
}
 8008994:	4618      	mov	r0, r3
 8008996:	3718      	adds	r7, #24
 8008998:	46bd      	mov	sp, r7
 800899a:	bd80      	pop	{r7, pc}

0800899c <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800899c:	b580      	push	{r7, lr}
 800899e:	b084      	sub	sp, #16
 80089a0:	af00      	add	r7, sp, #0
 80089a2:	6078      	str	r0, [r7, #4]
 80089a4:	460b      	mov	r3, r1
 80089a6:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef *)pdev->pData;
 80089a8:	687b      	ldr	r3, [r7, #4]
 80089aa:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 80089ae:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 80089b0:	687b      	ldr	r3, [r7, #4]
 80089b2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80089b6:	687b      	ldr	r3, [r7, #4]
 80089b8:	32b0      	adds	r2, #176	; 0xb0
 80089ba:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80089be:	2b00      	cmp	r3, #0
 80089c0:	d101      	bne.n	80089c6 <USBD_CDC_DataIn+0x2a>
  {
    return (uint8_t)USBD_FAIL;
 80089c2:	2303      	movs	r3, #3
 80089c4:	e065      	b.n	8008a92 <USBD_CDC_DataIn+0xf6>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80089c6:	687b      	ldr	r3, [r7, #4]
 80089c8:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80089cc:	687b      	ldr	r3, [r7, #4]
 80089ce:	32b0      	adds	r2, #176	; 0xb0
 80089d0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80089d4:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 80089d6:	78fb      	ldrb	r3, [r7, #3]
 80089d8:	f003 020f 	and.w	r2, r3, #15
 80089dc:	6879      	ldr	r1, [r7, #4]
 80089de:	4613      	mov	r3, r2
 80089e0:	009b      	lsls	r3, r3, #2
 80089e2:	4413      	add	r3, r2
 80089e4:	009b      	lsls	r3, r3, #2
 80089e6:	440b      	add	r3, r1
 80089e8:	3318      	adds	r3, #24
 80089ea:	681b      	ldr	r3, [r3, #0]
 80089ec:	2b00      	cmp	r3, #0
 80089ee:	d02f      	beq.n	8008a50 <USBD_CDC_DataIn+0xb4>
      ((pdev->ep_in[epnum & 0xFU].total_length % hpcd->IN_ep[epnum & 0xFU].maxpacket) == 0U))
 80089f0:	78fb      	ldrb	r3, [r7, #3]
 80089f2:	f003 020f 	and.w	r2, r3, #15
 80089f6:	6879      	ldr	r1, [r7, #4]
 80089f8:	4613      	mov	r3, r2
 80089fa:	009b      	lsls	r3, r3, #2
 80089fc:	4413      	add	r3, r2
 80089fe:	009b      	lsls	r3, r3, #2
 8008a00:	440b      	add	r3, r1
 8008a02:	3318      	adds	r3, #24
 8008a04:	681a      	ldr	r2, [r3, #0]
 8008a06:	78fb      	ldrb	r3, [r7, #3]
 8008a08:	f003 010f 	and.w	r1, r3, #15
 8008a0c:	68f8      	ldr	r0, [r7, #12]
 8008a0e:	460b      	mov	r3, r1
 8008a10:	00db      	lsls	r3, r3, #3
 8008a12:	440b      	add	r3, r1
 8008a14:	009b      	lsls	r3, r3, #2
 8008a16:	4403      	add	r3, r0
 8008a18:	331c      	adds	r3, #28
 8008a1a:	681b      	ldr	r3, [r3, #0]
 8008a1c:	fbb2 f1f3 	udiv	r1, r2, r3
 8008a20:	fb01 f303 	mul.w	r3, r1, r3
 8008a24:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 8008a26:	2b00      	cmp	r3, #0
 8008a28:	d112      	bne.n	8008a50 <USBD_CDC_DataIn+0xb4>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum & 0xFU].total_length = 0U;
 8008a2a:	78fb      	ldrb	r3, [r7, #3]
 8008a2c:	f003 020f 	and.w	r2, r3, #15
 8008a30:	6879      	ldr	r1, [r7, #4]
 8008a32:	4613      	mov	r3, r2
 8008a34:	009b      	lsls	r3, r3, #2
 8008a36:	4413      	add	r3, r2
 8008a38:	009b      	lsls	r3, r3, #2
 8008a3a:	440b      	add	r3, r1
 8008a3c:	3318      	adds	r3, #24
 8008a3e:	2200      	movs	r2, #0
 8008a40:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 8008a42:	78f9      	ldrb	r1, [r7, #3]
 8008a44:	2300      	movs	r3, #0
 8008a46:	2200      	movs	r2, #0
 8008a48:	6878      	ldr	r0, [r7, #4]
 8008a4a:	f005 fa54 	bl	800def6 <USBD_LL_Transmit>
 8008a4e:	e01f      	b.n	8008a90 <USBD_CDC_DataIn+0xf4>
  }
  else
  {
    hcdc->TxState = 0U;
 8008a50:	68bb      	ldr	r3, [r7, #8]
 8008a52:	2200      	movs	r2, #0
 8008a54:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt != NULL)
 8008a58:	687b      	ldr	r3, [r7, #4]
 8008a5a:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8008a5e:	687a      	ldr	r2, [r7, #4]
 8008a60:	33b0      	adds	r3, #176	; 0xb0
 8008a62:	009b      	lsls	r3, r3, #2
 8008a64:	4413      	add	r3, r2
 8008a66:	685b      	ldr	r3, [r3, #4]
 8008a68:	691b      	ldr	r3, [r3, #16]
 8008a6a:	2b00      	cmp	r3, #0
 8008a6c:	d010      	beq.n	8008a90 <USBD_CDC_DataIn+0xf4>
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 8008a6e:	687b      	ldr	r3, [r7, #4]
 8008a70:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8008a74:	687a      	ldr	r2, [r7, #4]
 8008a76:	33b0      	adds	r3, #176	; 0xb0
 8008a78:	009b      	lsls	r3, r3, #2
 8008a7a:	4413      	add	r3, r2
 8008a7c:	685b      	ldr	r3, [r3, #4]
 8008a7e:	691b      	ldr	r3, [r3, #16]
 8008a80:	68ba      	ldr	r2, [r7, #8]
 8008a82:	f8d2 0208 	ldr.w	r0, [r2, #520]	; 0x208
 8008a86:	68ba      	ldr	r2, [r7, #8]
 8008a88:	f502 7104 	add.w	r1, r2, #528	; 0x210
 8008a8c:	78fa      	ldrb	r2, [r7, #3]
 8008a8e:	4798      	blx	r3
    }
  }

  return (uint8_t)USBD_OK;
 8008a90:	2300      	movs	r3, #0
}
 8008a92:	4618      	mov	r0, r3
 8008a94:	3710      	adds	r7, #16
 8008a96:	46bd      	mov	sp, r7
 8008a98:	bd80      	pop	{r7, pc}

08008a9a <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8008a9a:	b580      	push	{r7, lr}
 8008a9c:	b084      	sub	sp, #16
 8008a9e:	af00      	add	r7, sp, #0
 8008aa0:	6078      	str	r0, [r7, #4]
 8008aa2:	460b      	mov	r3, r1
 8008aa4:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8008aa6:	687b      	ldr	r3, [r7, #4]
 8008aa8:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8008aac:	687b      	ldr	r3, [r7, #4]
 8008aae:	32b0      	adds	r2, #176	; 0xb0
 8008ab0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008ab4:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8008ab6:	687b      	ldr	r3, [r7, #4]
 8008ab8:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8008abc:	687b      	ldr	r3, [r7, #4]
 8008abe:	32b0      	adds	r2, #176	; 0xb0
 8008ac0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008ac4:	2b00      	cmp	r3, #0
 8008ac6:	d101      	bne.n	8008acc <USBD_CDC_DataOut+0x32>
  {
    return (uint8_t)USBD_FAIL;
 8008ac8:	2303      	movs	r3, #3
 8008aca:	e01a      	b.n	8008b02 <USBD_CDC_DataOut+0x68>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 8008acc:	78fb      	ldrb	r3, [r7, #3]
 8008ace:	4619      	mov	r1, r3
 8008ad0:	6878      	ldr	r0, [r7, #4]
 8008ad2:	f005 fa52 	bl	800df7a <USBD_LL_GetRxDataSize>
 8008ad6:	4602      	mov	r2, r0
 8008ad8:	68fb      	ldr	r3, [r7, #12]
 8008ada:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 8008ade:	687b      	ldr	r3, [r7, #4]
 8008ae0:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8008ae4:	687a      	ldr	r2, [r7, #4]
 8008ae6:	33b0      	adds	r3, #176	; 0xb0
 8008ae8:	009b      	lsls	r3, r3, #2
 8008aea:	4413      	add	r3, r2
 8008aec:	685b      	ldr	r3, [r3, #4]
 8008aee:	68db      	ldr	r3, [r3, #12]
 8008af0:	68fa      	ldr	r2, [r7, #12]
 8008af2:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 8008af6:	68fa      	ldr	r2, [r7, #12]
 8008af8:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 8008afc:	4611      	mov	r1, r2
 8008afe:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 8008b00:	2300      	movs	r3, #0
}
 8008b02:	4618      	mov	r0, r3
 8008b04:	3710      	adds	r7, #16
 8008b06:	46bd      	mov	sp, r7
 8008b08:	bd80      	pop	{r7, pc}

08008b0a <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 8008b0a:	b580      	push	{r7, lr}
 8008b0c:	b084      	sub	sp, #16
 8008b0e:	af00      	add	r7, sp, #0
 8008b10:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8008b12:	687b      	ldr	r3, [r7, #4]
 8008b14:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8008b18:	687b      	ldr	r3, [r7, #4]
 8008b1a:	32b0      	adds	r2, #176	; 0xb0
 8008b1c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008b20:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 8008b22:	68fb      	ldr	r3, [r7, #12]
 8008b24:	2b00      	cmp	r3, #0
 8008b26:	d101      	bne.n	8008b2c <USBD_CDC_EP0_RxReady+0x22>
  {
    return (uint8_t)USBD_FAIL;
 8008b28:	2303      	movs	r3, #3
 8008b2a:	e025      	b.n	8008b78 <USBD_CDC_EP0_RxReady+0x6e>
  }

  if ((pdev->pUserData[pdev->classId] != NULL) && (hcdc->CmdOpCode != 0xFFU))
 8008b2c:	687b      	ldr	r3, [r7, #4]
 8008b2e:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8008b32:	687a      	ldr	r2, [r7, #4]
 8008b34:	33b0      	adds	r3, #176	; 0xb0
 8008b36:	009b      	lsls	r3, r3, #2
 8008b38:	4413      	add	r3, r2
 8008b3a:	685b      	ldr	r3, [r3, #4]
 8008b3c:	2b00      	cmp	r3, #0
 8008b3e:	d01a      	beq.n	8008b76 <USBD_CDC_EP0_RxReady+0x6c>
 8008b40:	68fb      	ldr	r3, [r7, #12]
 8008b42:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 8008b46:	2bff      	cmp	r3, #255	; 0xff
 8008b48:	d015      	beq.n	8008b76 <USBD_CDC_EP0_RxReady+0x6c>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 8008b4a:	687b      	ldr	r3, [r7, #4]
 8008b4c:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8008b50:	687a      	ldr	r2, [r7, #4]
 8008b52:	33b0      	adds	r3, #176	; 0xb0
 8008b54:	009b      	lsls	r3, r3, #2
 8008b56:	4413      	add	r3, r2
 8008b58:	685b      	ldr	r3, [r3, #4]
 8008b5a:	689b      	ldr	r3, [r3, #8]
 8008b5c:	68fa      	ldr	r2, [r7, #12]
 8008b5e:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                                     (uint8_t *)hcdc->data,
 8008b62:	68f9      	ldr	r1, [r7, #12]
                                                                     (uint16_t)hcdc->CmdLength);
 8008b64:	68fa      	ldr	r2, [r7, #12]
 8008b66:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 8008b6a:	b292      	uxth	r2, r2
 8008b6c:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 8008b6e:	68fb      	ldr	r3, [r7, #12]
 8008b70:	22ff      	movs	r2, #255	; 0xff
 8008b72:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
  }

  return (uint8_t)USBD_OK;
 8008b76:	2300      	movs	r3, #0
}
 8008b78:	4618      	mov	r0, r3
 8008b7a:	3710      	adds	r7, #16
 8008b7c:	46bd      	mov	sp, r7
 8008b7e:	bd80      	pop	{r7, pc}

08008b80 <USBD_CDC_GetFSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 8008b80:	b580      	push	{r7, lr}
 8008b82:	b086      	sub	sp, #24
 8008b84:	af00      	add	r7, sp, #0
 8008b86:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 8008b88:	2182      	movs	r1, #130	; 0x82
 8008b8a:	4818      	ldr	r0, [pc, #96]	; (8008bec <USBD_CDC_GetFSCfgDesc+0x6c>)
 8008b8c:	f000 fd0f 	bl	80095ae <USBD_GetEpDesc>
 8008b90:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 8008b92:	2101      	movs	r1, #1
 8008b94:	4815      	ldr	r0, [pc, #84]	; (8008bec <USBD_CDC_GetFSCfgDesc+0x6c>)
 8008b96:	f000 fd0a 	bl	80095ae <USBD_GetEpDesc>
 8008b9a:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 8008b9c:	2181      	movs	r1, #129	; 0x81
 8008b9e:	4813      	ldr	r0, [pc, #76]	; (8008bec <USBD_CDC_GetFSCfgDesc+0x6c>)
 8008ba0:	f000 fd05 	bl	80095ae <USBD_GetEpDesc>
 8008ba4:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 8008ba6:	697b      	ldr	r3, [r7, #20]
 8008ba8:	2b00      	cmp	r3, #0
 8008baa:	d002      	beq.n	8008bb2 <USBD_CDC_GetFSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 8008bac:	697b      	ldr	r3, [r7, #20]
 8008bae:	2210      	movs	r2, #16
 8008bb0:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 8008bb2:	693b      	ldr	r3, [r7, #16]
 8008bb4:	2b00      	cmp	r3, #0
 8008bb6:	d006      	beq.n	8008bc6 <USBD_CDC_GetFSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8008bb8:	693b      	ldr	r3, [r7, #16]
 8008bba:	2200      	movs	r2, #0
 8008bbc:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8008bc0:	711a      	strb	r2, [r3, #4]
 8008bc2:	2200      	movs	r2, #0
 8008bc4:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 8008bc6:	68fb      	ldr	r3, [r7, #12]
 8008bc8:	2b00      	cmp	r3, #0
 8008bca:	d006      	beq.n	8008bda <USBD_CDC_GetFSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8008bcc:	68fb      	ldr	r3, [r7, #12]
 8008bce:	2200      	movs	r2, #0
 8008bd0:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8008bd4:	711a      	strb	r2, [r3, #4]
 8008bd6:	2200      	movs	r2, #0
 8008bd8:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 8008bda:	687b      	ldr	r3, [r7, #4]
 8008bdc:	2243      	movs	r2, #67	; 0x43
 8008bde:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 8008be0:	4b02      	ldr	r3, [pc, #8]	; (8008bec <USBD_CDC_GetFSCfgDesc+0x6c>)
}
 8008be2:	4618      	mov	r0, r3
 8008be4:	3718      	adds	r7, #24
 8008be6:	46bd      	mov	sp, r7
 8008be8:	bd80      	pop	{r7, pc}
 8008bea:	bf00      	nop
 8008bec:	20000050 	.word	0x20000050

08008bf0 <USBD_CDC_GetHSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 8008bf0:	b580      	push	{r7, lr}
 8008bf2:	b086      	sub	sp, #24
 8008bf4:	af00      	add	r7, sp, #0
 8008bf6:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 8008bf8:	2182      	movs	r1, #130	; 0x82
 8008bfa:	4818      	ldr	r0, [pc, #96]	; (8008c5c <USBD_CDC_GetHSCfgDesc+0x6c>)
 8008bfc:	f000 fcd7 	bl	80095ae <USBD_GetEpDesc>
 8008c00:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 8008c02:	2101      	movs	r1, #1
 8008c04:	4815      	ldr	r0, [pc, #84]	; (8008c5c <USBD_CDC_GetHSCfgDesc+0x6c>)
 8008c06:	f000 fcd2 	bl	80095ae <USBD_GetEpDesc>
 8008c0a:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 8008c0c:	2181      	movs	r1, #129	; 0x81
 8008c0e:	4813      	ldr	r0, [pc, #76]	; (8008c5c <USBD_CDC_GetHSCfgDesc+0x6c>)
 8008c10:	f000 fccd 	bl	80095ae <USBD_GetEpDesc>
 8008c14:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 8008c16:	697b      	ldr	r3, [r7, #20]
 8008c18:	2b00      	cmp	r3, #0
 8008c1a:	d002      	beq.n	8008c22 <USBD_CDC_GetHSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_HS_BINTERVAL;
 8008c1c:	697b      	ldr	r3, [r7, #20]
 8008c1e:	2210      	movs	r2, #16
 8008c20:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 8008c22:	693b      	ldr	r3, [r7, #16]
 8008c24:	2b00      	cmp	r3, #0
 8008c26:	d006      	beq.n	8008c36 <USBD_CDC_GetHSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 8008c28:	693b      	ldr	r3, [r7, #16]
 8008c2a:	2200      	movs	r2, #0
 8008c2c:	711a      	strb	r2, [r3, #4]
 8008c2e:	2200      	movs	r2, #0
 8008c30:	f042 0202 	orr.w	r2, r2, #2
 8008c34:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 8008c36:	68fb      	ldr	r3, [r7, #12]
 8008c38:	2b00      	cmp	r3, #0
 8008c3a:	d006      	beq.n	8008c4a <USBD_CDC_GetHSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 8008c3c:	68fb      	ldr	r3, [r7, #12]
 8008c3e:	2200      	movs	r2, #0
 8008c40:	711a      	strb	r2, [r3, #4]
 8008c42:	2200      	movs	r2, #0
 8008c44:	f042 0202 	orr.w	r2, r2, #2
 8008c48:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 8008c4a:	687b      	ldr	r3, [r7, #4]
 8008c4c:	2243      	movs	r2, #67	; 0x43
 8008c4e:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 8008c50:	4b02      	ldr	r3, [pc, #8]	; (8008c5c <USBD_CDC_GetHSCfgDesc+0x6c>)
}
 8008c52:	4618      	mov	r0, r3
 8008c54:	3718      	adds	r7, #24
 8008c56:	46bd      	mov	sp, r7
 8008c58:	bd80      	pop	{r7, pc}
 8008c5a:	bf00      	nop
 8008c5c:	20000050 	.word	0x20000050

08008c60 <USBD_CDC_GetOtherSpeedCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 8008c60:	b580      	push	{r7, lr}
 8008c62:	b086      	sub	sp, #24
 8008c64:	af00      	add	r7, sp, #0
 8008c66:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 8008c68:	2182      	movs	r1, #130	; 0x82
 8008c6a:	4818      	ldr	r0, [pc, #96]	; (8008ccc <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 8008c6c:	f000 fc9f 	bl	80095ae <USBD_GetEpDesc>
 8008c70:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 8008c72:	2101      	movs	r1, #1
 8008c74:	4815      	ldr	r0, [pc, #84]	; (8008ccc <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 8008c76:	f000 fc9a 	bl	80095ae <USBD_GetEpDesc>
 8008c7a:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 8008c7c:	2181      	movs	r1, #129	; 0x81
 8008c7e:	4813      	ldr	r0, [pc, #76]	; (8008ccc <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 8008c80:	f000 fc95 	bl	80095ae <USBD_GetEpDesc>
 8008c84:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 8008c86:	697b      	ldr	r3, [r7, #20]
 8008c88:	2b00      	cmp	r3, #0
 8008c8a:	d002      	beq.n	8008c92 <USBD_CDC_GetOtherSpeedCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 8008c8c:	697b      	ldr	r3, [r7, #20]
 8008c8e:	2210      	movs	r2, #16
 8008c90:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 8008c92:	693b      	ldr	r3, [r7, #16]
 8008c94:	2b00      	cmp	r3, #0
 8008c96:	d006      	beq.n	8008ca6 <USBD_CDC_GetOtherSpeedCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8008c98:	693b      	ldr	r3, [r7, #16]
 8008c9a:	2200      	movs	r2, #0
 8008c9c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8008ca0:	711a      	strb	r2, [r3, #4]
 8008ca2:	2200      	movs	r2, #0
 8008ca4:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 8008ca6:	68fb      	ldr	r3, [r7, #12]
 8008ca8:	2b00      	cmp	r3, #0
 8008caa:	d006      	beq.n	8008cba <USBD_CDC_GetOtherSpeedCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8008cac:	68fb      	ldr	r3, [r7, #12]
 8008cae:	2200      	movs	r2, #0
 8008cb0:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8008cb4:	711a      	strb	r2, [r3, #4]
 8008cb6:	2200      	movs	r2, #0
 8008cb8:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 8008cba:	687b      	ldr	r3, [r7, #4]
 8008cbc:	2243      	movs	r2, #67	; 0x43
 8008cbe:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 8008cc0:	4b02      	ldr	r3, [pc, #8]	; (8008ccc <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
}
 8008cc2:	4618      	mov	r0, r3
 8008cc4:	3718      	adds	r7, #24
 8008cc6:	46bd      	mov	sp, r7
 8008cc8:	bd80      	pop	{r7, pc}
 8008cca:	bf00      	nop
 8008ccc:	20000050 	.word	0x20000050

08008cd0 <USBD_CDC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 8008cd0:	b480      	push	{r7}
 8008cd2:	b083      	sub	sp, #12
 8008cd4:	af00      	add	r7, sp, #0
 8008cd6:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 8008cd8:	687b      	ldr	r3, [r7, #4]
 8008cda:	220a      	movs	r2, #10
 8008cdc:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 8008cde:	4b03      	ldr	r3, [pc, #12]	; (8008cec <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 8008ce0:	4618      	mov	r0, r3
 8008ce2:	370c      	adds	r7, #12
 8008ce4:	46bd      	mov	sp, r7
 8008ce6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008cea:	4770      	bx	lr
 8008cec:	2000000c 	.word	0x2000000c

08008cf0 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 8008cf0:	b480      	push	{r7}
 8008cf2:	b083      	sub	sp, #12
 8008cf4:	af00      	add	r7, sp, #0
 8008cf6:	6078      	str	r0, [r7, #4]
 8008cf8:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 8008cfa:	683b      	ldr	r3, [r7, #0]
 8008cfc:	2b00      	cmp	r3, #0
 8008cfe:	d101      	bne.n	8008d04 <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 8008d00:	2303      	movs	r3, #3
 8008d02:	e009      	b.n	8008d18 <USBD_CDC_RegisterInterface+0x28>
  }

  pdev->pUserData[pdev->classId] = fops;
 8008d04:	687b      	ldr	r3, [r7, #4]
 8008d06:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8008d0a:	687a      	ldr	r2, [r7, #4]
 8008d0c:	33b0      	adds	r3, #176	; 0xb0
 8008d0e:	009b      	lsls	r3, r3, #2
 8008d10:	4413      	add	r3, r2
 8008d12:	683a      	ldr	r2, [r7, #0]
 8008d14:	605a      	str	r2, [r3, #4]

  return (uint8_t)USBD_OK;
 8008d16:	2300      	movs	r3, #0
}
 8008d18:	4618      	mov	r0, r3
 8008d1a:	370c      	adds	r7, #12
 8008d1c:	46bd      	mov	sp, r7
 8008d1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d22:	4770      	bx	lr

08008d24 <USBD_CDC_SetTxBuffer>:
{
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[ClassId];
#else
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 8008d24:	b480      	push	{r7}
 8008d26:	b087      	sub	sp, #28
 8008d28:	af00      	add	r7, sp, #0
 8008d2a:	60f8      	str	r0, [r7, #12]
 8008d2c:	60b9      	str	r1, [r7, #8]
 8008d2e:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8008d30:	68fb      	ldr	r3, [r7, #12]
 8008d32:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8008d36:	68fb      	ldr	r3, [r7, #12]
 8008d38:	32b0      	adds	r2, #176	; 0xb0
 8008d3a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008d3e:	617b      	str	r3, [r7, #20]
#endif /* USE_USBD_COMPOSITE */

  if (hcdc == NULL)
 8008d40:	697b      	ldr	r3, [r7, #20]
 8008d42:	2b00      	cmp	r3, #0
 8008d44:	d101      	bne.n	8008d4a <USBD_CDC_SetTxBuffer+0x26>
  {
    return (uint8_t)USBD_FAIL;
 8008d46:	2303      	movs	r3, #3
 8008d48:	e008      	b.n	8008d5c <USBD_CDC_SetTxBuffer+0x38>
  }

  hcdc->TxBuffer = pbuff;
 8008d4a:	697b      	ldr	r3, [r7, #20]
 8008d4c:	68ba      	ldr	r2, [r7, #8]
 8008d4e:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 8008d52:	697b      	ldr	r3, [r7, #20]
 8008d54:	687a      	ldr	r2, [r7, #4]
 8008d56:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return (uint8_t)USBD_OK;
 8008d5a:	2300      	movs	r3, #0
}
 8008d5c:	4618      	mov	r0, r3
 8008d5e:	371c      	adds	r7, #28
 8008d60:	46bd      	mov	sp, r7
 8008d62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d66:	4770      	bx	lr

08008d68 <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 8008d68:	b480      	push	{r7}
 8008d6a:	b085      	sub	sp, #20
 8008d6c:	af00      	add	r7, sp, #0
 8008d6e:	6078      	str	r0, [r7, #4]
 8008d70:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8008d72:	687b      	ldr	r3, [r7, #4]
 8008d74:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8008d78:	687b      	ldr	r3, [r7, #4]
 8008d7a:	32b0      	adds	r2, #176	; 0xb0
 8008d7c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008d80:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 8008d82:	68fb      	ldr	r3, [r7, #12]
 8008d84:	2b00      	cmp	r3, #0
 8008d86:	d101      	bne.n	8008d8c <USBD_CDC_SetRxBuffer+0x24>
  {
    return (uint8_t)USBD_FAIL;
 8008d88:	2303      	movs	r3, #3
 8008d8a:	e004      	b.n	8008d96 <USBD_CDC_SetRxBuffer+0x2e>
  }

  hcdc->RxBuffer = pbuff;
 8008d8c:	68fb      	ldr	r3, [r7, #12]
 8008d8e:	683a      	ldr	r2, [r7, #0]
 8008d90:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return (uint8_t)USBD_OK;
 8008d94:	2300      	movs	r3, #0
}
 8008d96:	4618      	mov	r0, r3
 8008d98:	3714      	adds	r7, #20
 8008d9a:	46bd      	mov	sp, r7
 8008d9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008da0:	4770      	bx	lr
	...

08008da4 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 8008da4:	b580      	push	{r7, lr}
 8008da6:	b084      	sub	sp, #16
 8008da8:	af00      	add	r7, sp, #0
 8008daa:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8008dac:	687b      	ldr	r3, [r7, #4]
 8008dae:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8008db2:	687b      	ldr	r3, [r7, #4]
 8008db4:	32b0      	adds	r2, #176	; 0xb0
 8008db6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008dba:	60fb      	str	r3, [r7, #12]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8008dbc:	687b      	ldr	r3, [r7, #4]
 8008dbe:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8008dc2:	687b      	ldr	r3, [r7, #4]
 8008dc4:	32b0      	adds	r2, #176	; 0xb0
 8008dc6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008dca:	2b00      	cmp	r3, #0
 8008dcc:	d101      	bne.n	8008dd2 <USBD_CDC_ReceivePacket+0x2e>
  {
    return (uint8_t)USBD_FAIL;
 8008dce:	2303      	movs	r3, #3
 8008dd0:	e018      	b.n	8008e04 <USBD_CDC_ReceivePacket+0x60>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8008dd2:	687b      	ldr	r3, [r7, #4]
 8008dd4:	7c1b      	ldrb	r3, [r3, #16]
 8008dd6:	2b00      	cmp	r3, #0
 8008dd8:	d10a      	bne.n	8008df0 <USBD_CDC_ReceivePacket+0x4c>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8008dda:	4b0c      	ldr	r3, [pc, #48]	; (8008e0c <USBD_CDC_ReceivePacket+0x68>)
 8008ddc:	7819      	ldrb	r1, [r3, #0]
 8008dde:	68fb      	ldr	r3, [r7, #12]
 8008de0:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8008de4:	f44f 7300 	mov.w	r3, #512	; 0x200
 8008de8:	6878      	ldr	r0, [r7, #4]
 8008dea:	f005 f8a5 	bl	800df38 <USBD_LL_PrepareReceive>
 8008dee:	e008      	b.n	8008e02 <USBD_CDC_ReceivePacket+0x5e>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8008df0:	4b06      	ldr	r3, [pc, #24]	; (8008e0c <USBD_CDC_ReceivePacket+0x68>)
 8008df2:	7819      	ldrb	r1, [r3, #0]
 8008df4:	68fb      	ldr	r3, [r7, #12]
 8008df6:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8008dfa:	2340      	movs	r3, #64	; 0x40
 8008dfc:	6878      	ldr	r0, [r7, #4]
 8008dfe:	f005 f89b 	bl	800df38 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 8008e02:	2300      	movs	r3, #0
}
 8008e04:	4618      	mov	r0, r3
 8008e06:	3710      	adds	r7, #16
 8008e08:	46bd      	mov	sp, r7
 8008e0a:	bd80      	pop	{r7, pc}
 8008e0c:	20000094 	.word	0x20000094

08008e10 <USBD_Init>:
  * @param  id: Low level core index
  * @retval None
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 8008e10:	b580      	push	{r7, lr}
 8008e12:	b086      	sub	sp, #24
 8008e14:	af00      	add	r7, sp, #0
 8008e16:	60f8      	str	r0, [r7, #12]
 8008e18:	60b9      	str	r1, [r7, #8]
 8008e1a:	4613      	mov	r3, r2
 8008e1c:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 8008e1e:	68fb      	ldr	r3, [r7, #12]
 8008e20:	2b00      	cmp	r3, #0
 8008e22:	d101      	bne.n	8008e28 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 8008e24:	2303      	movs	r3, #3
 8008e26:	e01f      	b.n	8008e68 <USBD_Init+0x58>
    pdev->NumClasses = 0;
    pdev->classId = 0;
  }
#else
  /* Unlink previous class*/
  pdev->pClass[0] = NULL;
 8008e28:	68fb      	ldr	r3, [r7, #12]
 8008e2a:	2200      	movs	r2, #0
 8008e2c:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  pdev->pUserData[0] = NULL;
 8008e30:	68fb      	ldr	r3, [r7, #12]
 8008e32:	2200      	movs	r2, #0
 8008e34:	f8c3 22c4 	str.w	r2, [r3, #708]	; 0x2c4
#endif /* USE_USBD_COMPOSITE */

  pdev->pConfDesc = NULL;
 8008e38:	68fb      	ldr	r3, [r7, #12]
 8008e3a:	2200      	movs	r2, #0
 8008e3c:	f8c3 22d0 	str.w	r2, [r3, #720]	; 0x2d0

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 8008e40:	68bb      	ldr	r3, [r7, #8]
 8008e42:	2b00      	cmp	r3, #0
 8008e44:	d003      	beq.n	8008e4e <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 8008e46:	68fb      	ldr	r3, [r7, #12]
 8008e48:	68ba      	ldr	r2, [r7, #8]
 8008e4a:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8008e4e:	68fb      	ldr	r3, [r7, #12]
 8008e50:	2201      	movs	r2, #1
 8008e52:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 8008e56:	68fb      	ldr	r3, [r7, #12]
 8008e58:	79fa      	ldrb	r2, [r7, #7]
 8008e5a:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 8008e5c:	68f8      	ldr	r0, [r7, #12]
 8008e5e:	f004 ff15 	bl	800dc8c <USBD_LL_Init>
 8008e62:	4603      	mov	r3, r0
 8008e64:	75fb      	strb	r3, [r7, #23]

  return ret;
 8008e66:	7dfb      	ldrb	r3, [r7, #23]
}
 8008e68:	4618      	mov	r0, r3
 8008e6a:	3718      	adds	r7, #24
 8008e6c:	46bd      	mov	sp, r7
 8008e6e:	bd80      	pop	{r7, pc}

08008e70 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 8008e70:	b580      	push	{r7, lr}
 8008e72:	b084      	sub	sp, #16
 8008e74:	af00      	add	r7, sp, #0
 8008e76:	6078      	str	r0, [r7, #4]
 8008e78:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8008e7a:	2300      	movs	r3, #0
 8008e7c:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 8008e7e:	683b      	ldr	r3, [r7, #0]
 8008e80:	2b00      	cmp	r3, #0
 8008e82:	d101      	bne.n	8008e88 <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 8008e84:	2303      	movs	r3, #3
 8008e86:	e025      	b.n	8008ed4 <USBD_RegisterClass+0x64>
  }

  /* link the class to the USB Device handle */
  pdev->pClass[0] = pclass;
 8008e88:	687b      	ldr	r3, [r7, #4]
 8008e8a:	683a      	ldr	r2, [r7, #0]
 8008e8c:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  if (pdev->pClass[pdev->classId]->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass[pdev->classId]->GetFSConfigDescriptor != NULL)
 8008e90:	687b      	ldr	r3, [r7, #4]
 8008e92:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8008e96:	687b      	ldr	r3, [r7, #4]
 8008e98:	32ae      	adds	r2, #174	; 0xae
 8008e9a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008e9e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008ea0:	2b00      	cmp	r3, #0
 8008ea2:	d00f      	beq.n	8008ec4 <USBD_RegisterClass+0x54>
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetFSConfigDescriptor(&len);
 8008ea4:	687b      	ldr	r3, [r7, #4]
 8008ea6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8008eaa:	687b      	ldr	r3, [r7, #4]
 8008eac:	32ae      	adds	r2, #174	; 0xae
 8008eae:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008eb2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008eb4:	f107 020e 	add.w	r2, r7, #14
 8008eb8:	4610      	mov	r0, r2
 8008eba:	4798      	blx	r3
 8008ebc:	4602      	mov	r2, r0
 8008ebe:	687b      	ldr	r3, [r7, #4]
 8008ec0:	f8c3 22d0 	str.w	r2, [r3, #720]	; 0x2d0
  }
#endif /* USE_USB_FS */

  /* Increment the NumClasses */
  pdev->NumClasses ++;
 8008ec4:	687b      	ldr	r3, [r7, #4]
 8008ec6:	f8d3 32d8 	ldr.w	r3, [r3, #728]	; 0x2d8
 8008eca:	1c5a      	adds	r2, r3, #1
 8008ecc:	687b      	ldr	r3, [r7, #4]
 8008ece:	f8c3 22d8 	str.w	r2, [r3, #728]	; 0x2d8

  return USBD_OK;
 8008ed2:	2300      	movs	r3, #0
}
 8008ed4:	4618      	mov	r0, r3
 8008ed6:	3710      	adds	r7, #16
 8008ed8:	46bd      	mov	sp, r7
 8008eda:	bd80      	pop	{r7, pc}

08008edc <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 8008edc:	b580      	push	{r7, lr}
 8008ede:	b082      	sub	sp, #8
 8008ee0:	af00      	add	r7, sp, #0
 8008ee2:	6078      	str	r0, [r7, #4]
#ifdef USE_USBD_COMPOSITE
  pdev->classId = 0U;
#endif /* USE_USBD_COMPOSITE */

  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 8008ee4:	6878      	ldr	r0, [r7, #4]
 8008ee6:	f004 ff1d 	bl	800dd24 <USBD_LL_Start>
 8008eea:	4603      	mov	r3, r0
}
 8008eec:	4618      	mov	r0, r3
 8008eee:	3708      	adds	r7, #8
 8008ef0:	46bd      	mov	sp, r7
 8008ef2:	bd80      	pop	{r7, pc}

08008ef4 <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef *pdev)
{
 8008ef4:	b480      	push	{r7}
 8008ef6:	b083      	sub	sp, #12
 8008ef8:	af00      	add	r7, sp, #0
 8008efa:	6078      	str	r0, [r7, #4]
  return ret;
#else
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8008efc:	2300      	movs	r3, #0
#endif /* USBD_HS_TESTMODE_ENABLE */
}
 8008efe:	4618      	mov	r0, r3
 8008f00:	370c      	adds	r7, #12
 8008f02:	46bd      	mov	sp, r7
 8008f04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f08:	4770      	bx	lr

08008f0a <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8008f0a:	b580      	push	{r7, lr}
 8008f0c:	b084      	sub	sp, #16
 8008f0e:	af00      	add	r7, sp, #0
 8008f10:	6078      	str	r0, [r7, #4]
 8008f12:	460b      	mov	r3, r1
 8008f14:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 8008f16:	2300      	movs	r3, #0
 8008f18:	73fb      	strb	r3, [r7, #15]
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 8008f1a:	687b      	ldr	r3, [r7, #4]
 8008f1c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008f20:	2b00      	cmp	r3, #0
 8008f22:	d009      	beq.n	8008f38 <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass[0]->Init(pdev, cfgidx);
 8008f24:	687b      	ldr	r3, [r7, #4]
 8008f26:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008f2a:	681b      	ldr	r3, [r3, #0]
 8008f2c:	78fa      	ldrb	r2, [r7, #3]
 8008f2e:	4611      	mov	r1, r2
 8008f30:	6878      	ldr	r0, [r7, #4]
 8008f32:	4798      	blx	r3
 8008f34:	4603      	mov	r3, r0
 8008f36:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8008f38:	7bfb      	ldrb	r3, [r7, #15]
}
 8008f3a:	4618      	mov	r0, r3
 8008f3c:	3710      	adds	r7, #16
 8008f3e:	46bd      	mov	sp, r7
 8008f40:	bd80      	pop	{r7, pc}

08008f42 <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status: USBD_StatusTypeDef
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8008f42:	b580      	push	{r7, lr}
 8008f44:	b084      	sub	sp, #16
 8008f46:	af00      	add	r7, sp, #0
 8008f48:	6078      	str	r0, [r7, #4]
 8008f4a:	460b      	mov	r3, r1
 8008f4c:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 8008f4e:	2300      	movs	r3, #0
 8008f50:	73fb      	strb	r3, [r7, #15]
      }
    }
  }
#else
  /* Clear configuration  and De-initialize the Class process */
  if (pdev->pClass[0]->DeInit(pdev, cfgidx) != 0U)
 8008f52:	687b      	ldr	r3, [r7, #4]
 8008f54:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008f58:	685b      	ldr	r3, [r3, #4]
 8008f5a:	78fa      	ldrb	r2, [r7, #3]
 8008f5c:	4611      	mov	r1, r2
 8008f5e:	6878      	ldr	r0, [r7, #4]
 8008f60:	4798      	blx	r3
 8008f62:	4603      	mov	r3, r0
 8008f64:	2b00      	cmp	r3, #0
 8008f66:	d001      	beq.n	8008f6c <USBD_ClrClassConfig+0x2a>
  {
    ret = USBD_FAIL;
 8008f68:	2303      	movs	r3, #3
 8008f6a:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8008f6c:	7bfb      	ldrb	r3, [r7, #15]
}
 8008f6e:	4618      	mov	r0, r3
 8008f70:	3710      	adds	r7, #16
 8008f72:	46bd      	mov	sp, r7
 8008f74:	bd80      	pop	{r7, pc}

08008f76 <USBD_LL_SetupStage>:
  *         Handle the setup stage
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 8008f76:	b580      	push	{r7, lr}
 8008f78:	b084      	sub	sp, #16
 8008f7a:	af00      	add	r7, sp, #0
 8008f7c:	6078      	str	r0, [r7, #4]
 8008f7e:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 8008f80:	687b      	ldr	r3, [r7, #4]
 8008f82:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8008f86:	6839      	ldr	r1, [r7, #0]
 8008f88:	4618      	mov	r0, r3
 8008f8a:	f001 f90e 	bl	800a1aa <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 8008f8e:	687b      	ldr	r3, [r7, #4]
 8008f90:	2201      	movs	r2, #1
 8008f92:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 8008f96:	687b      	ldr	r3, [r7, #4]
 8008f98:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	; 0x2b0
 8008f9c:	461a      	mov	r2, r3
 8008f9e:	687b      	ldr	r3, [r7, #4]
 8008fa0:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 8008fa4:	687b      	ldr	r3, [r7, #4]
 8008fa6:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8008faa:	f003 031f 	and.w	r3, r3, #31
 8008fae:	2b02      	cmp	r3, #2
 8008fb0:	d01a      	beq.n	8008fe8 <USBD_LL_SetupStage+0x72>
 8008fb2:	2b02      	cmp	r3, #2
 8008fb4:	d822      	bhi.n	8008ffc <USBD_LL_SetupStage+0x86>
 8008fb6:	2b00      	cmp	r3, #0
 8008fb8:	d002      	beq.n	8008fc0 <USBD_LL_SetupStage+0x4a>
 8008fba:	2b01      	cmp	r3, #1
 8008fbc:	d00a      	beq.n	8008fd4 <USBD_LL_SetupStage+0x5e>
 8008fbe:	e01d      	b.n	8008ffc <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 8008fc0:	687b      	ldr	r3, [r7, #4]
 8008fc2:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8008fc6:	4619      	mov	r1, r3
 8008fc8:	6878      	ldr	r0, [r7, #4]
 8008fca:	f000 fb65 	bl	8009698 <USBD_StdDevReq>
 8008fce:	4603      	mov	r3, r0
 8008fd0:	73fb      	strb	r3, [r7, #15]
      break;
 8008fd2:	e020      	b.n	8009016 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 8008fd4:	687b      	ldr	r3, [r7, #4]
 8008fd6:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8008fda:	4619      	mov	r1, r3
 8008fdc:	6878      	ldr	r0, [r7, #4]
 8008fde:	f000 fbcd 	bl	800977c <USBD_StdItfReq>
 8008fe2:	4603      	mov	r3, r0
 8008fe4:	73fb      	strb	r3, [r7, #15]
      break;
 8008fe6:	e016      	b.n	8009016 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 8008fe8:	687b      	ldr	r3, [r7, #4]
 8008fea:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8008fee:	4619      	mov	r1, r3
 8008ff0:	6878      	ldr	r0, [r7, #4]
 8008ff2:	f000 fc2f 	bl	8009854 <USBD_StdEPReq>
 8008ff6:	4603      	mov	r3, r0
 8008ff8:	73fb      	strb	r3, [r7, #15]
      break;
 8008ffa:	e00c      	b.n	8009016 <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 8008ffc:	687b      	ldr	r3, [r7, #4]
 8008ffe:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8009002:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8009006:	b2db      	uxtb	r3, r3
 8009008:	4619      	mov	r1, r3
 800900a:	6878      	ldr	r0, [r7, #4]
 800900c:	f004 feea 	bl	800dde4 <USBD_LL_StallEP>
 8009010:	4603      	mov	r3, r0
 8009012:	73fb      	strb	r3, [r7, #15]
      break;
 8009014:	bf00      	nop
  }

  return ret;
 8009016:	7bfb      	ldrb	r3, [r7, #15]
}
 8009018:	4618      	mov	r0, r3
 800901a:	3710      	adds	r7, #16
 800901c:	46bd      	mov	sp, r7
 800901e:	bd80      	pop	{r7, pc}

08009020 <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 8009020:	b580      	push	{r7, lr}
 8009022:	b086      	sub	sp, #24
 8009024:	af00      	add	r7, sp, #0
 8009026:	60f8      	str	r0, [r7, #12]
 8009028:	460b      	mov	r3, r1
 800902a:	607a      	str	r2, [r7, #4]
 800902c:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret = USBD_OK;
 800902e:	2300      	movs	r3, #0
 8009030:	75fb      	strb	r3, [r7, #23]
  uint8_t idx;

  if (epnum == 0U)
 8009032:	7afb      	ldrb	r3, [r7, #11]
 8009034:	2b00      	cmp	r3, #0
 8009036:	d16e      	bne.n	8009116 <USBD_LL_DataOutStage+0xf6>
  {
    pep = &pdev->ep_out[0];
 8009038:	68fb      	ldr	r3, [r7, #12]
 800903a:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 800903e:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 8009040:	68fb      	ldr	r3, [r7, #12]
 8009042:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8009046:	2b03      	cmp	r3, #3
 8009048:	f040 8098 	bne.w	800917c <USBD_LL_DataOutStage+0x15c>
    {
      if (pep->rem_length > pep->maxpacket)
 800904c:	693b      	ldr	r3, [r7, #16]
 800904e:	689a      	ldr	r2, [r3, #8]
 8009050:	693b      	ldr	r3, [r7, #16]
 8009052:	68db      	ldr	r3, [r3, #12]
 8009054:	429a      	cmp	r2, r3
 8009056:	d913      	bls.n	8009080 <USBD_LL_DataOutStage+0x60>
      {
        pep->rem_length -= pep->maxpacket;
 8009058:	693b      	ldr	r3, [r7, #16]
 800905a:	689a      	ldr	r2, [r3, #8]
 800905c:	693b      	ldr	r3, [r7, #16]
 800905e:	68db      	ldr	r3, [r3, #12]
 8009060:	1ad2      	subs	r2, r2, r3
 8009062:	693b      	ldr	r3, [r7, #16]
 8009064:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 8009066:	693b      	ldr	r3, [r7, #16]
 8009068:	68da      	ldr	r2, [r3, #12]
 800906a:	693b      	ldr	r3, [r7, #16]
 800906c:	689b      	ldr	r3, [r3, #8]
 800906e:	4293      	cmp	r3, r2
 8009070:	bf28      	it	cs
 8009072:	4613      	movcs	r3, r2
 8009074:	461a      	mov	r2, r3
 8009076:	6879      	ldr	r1, [r7, #4]
 8009078:	68f8      	ldr	r0, [r7, #12]
 800907a:	f001 f98a 	bl	800a392 <USBD_CtlContinueRx>
 800907e:	e07d      	b.n	800917c <USBD_LL_DataOutStage+0x15c>
      }
      else
      {
        /* Find the class ID relative to the current request */
        switch (pdev->request.bmRequest & 0x1FU)
 8009080:	68fb      	ldr	r3, [r7, #12]
 8009082:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8009086:	f003 031f 	and.w	r3, r3, #31
 800908a:	2b02      	cmp	r3, #2
 800908c:	d014      	beq.n	80090b8 <USBD_LL_DataOutStage+0x98>
 800908e:	2b02      	cmp	r3, #2
 8009090:	d81d      	bhi.n	80090ce <USBD_LL_DataOutStage+0xae>
 8009092:	2b00      	cmp	r3, #0
 8009094:	d002      	beq.n	800909c <USBD_LL_DataOutStage+0x7c>
 8009096:	2b01      	cmp	r3, #1
 8009098:	d003      	beq.n	80090a2 <USBD_LL_DataOutStage+0x82>
 800909a:	e018      	b.n	80090ce <USBD_LL_DataOutStage+0xae>
        {
          case USB_REQ_RECIPIENT_DEVICE:
            /* Device requests must be managed by the first instantiated class
               (or duplicated by all classes for simplicity) */
            idx = 0U;
 800909c:	2300      	movs	r3, #0
 800909e:	75bb      	strb	r3, [r7, #22]
            break;
 80090a0:	e018      	b.n	80090d4 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_INTERFACE:
            idx = USBD_CoreFindIF(pdev, LOBYTE(pdev->request.wIndex));
 80090a2:	68fb      	ldr	r3, [r7, #12]
 80090a4:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 80090a8:	b2db      	uxtb	r3, r3
 80090aa:	4619      	mov	r1, r3
 80090ac:	68f8      	ldr	r0, [r7, #12]
 80090ae:	f000 fa64 	bl	800957a <USBD_CoreFindIF>
 80090b2:	4603      	mov	r3, r0
 80090b4:	75bb      	strb	r3, [r7, #22]
            break;
 80090b6:	e00d      	b.n	80090d4 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_ENDPOINT:
            idx = USBD_CoreFindEP(pdev, LOBYTE(pdev->request.wIndex));
 80090b8:	68fb      	ldr	r3, [r7, #12]
 80090ba:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 80090be:	b2db      	uxtb	r3, r3
 80090c0:	4619      	mov	r1, r3
 80090c2:	68f8      	ldr	r0, [r7, #12]
 80090c4:	f000 fa66 	bl	8009594 <USBD_CoreFindEP>
 80090c8:	4603      	mov	r3, r0
 80090ca:	75bb      	strb	r3, [r7, #22]
            break;
 80090cc:	e002      	b.n	80090d4 <USBD_LL_DataOutStage+0xb4>

          default:
            /* Back to the first class in case of doubt */
            idx = 0U;
 80090ce:	2300      	movs	r3, #0
 80090d0:	75bb      	strb	r3, [r7, #22]
            break;
 80090d2:	bf00      	nop
        }

        if (idx < USBD_MAX_SUPPORTED_CLASS)
 80090d4:	7dbb      	ldrb	r3, [r7, #22]
 80090d6:	2b00      	cmp	r3, #0
 80090d8:	d119      	bne.n	800910e <USBD_LL_DataOutStage+0xee>
        {
          /* Setup the class ID and route the request to the relative class function */
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80090da:	68fb      	ldr	r3, [r7, #12]
 80090dc:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80090e0:	b2db      	uxtb	r3, r3
 80090e2:	2b03      	cmp	r3, #3
 80090e4:	d113      	bne.n	800910e <USBD_LL_DataOutStage+0xee>
          {
            if (pdev->pClass[idx]->EP0_RxReady != NULL)
 80090e6:	7dba      	ldrb	r2, [r7, #22]
 80090e8:	68fb      	ldr	r3, [r7, #12]
 80090ea:	32ae      	adds	r2, #174	; 0xae
 80090ec:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80090f0:	691b      	ldr	r3, [r3, #16]
 80090f2:	2b00      	cmp	r3, #0
 80090f4:	d00b      	beq.n	800910e <USBD_LL_DataOutStage+0xee>
            {
              pdev->classId = idx;
 80090f6:	7dba      	ldrb	r2, [r7, #22]
 80090f8:	68fb      	ldr	r3, [r7, #12]
 80090fa:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
              pdev->pClass[idx]->EP0_RxReady(pdev);
 80090fe:	7dba      	ldrb	r2, [r7, #22]
 8009100:	68fb      	ldr	r3, [r7, #12]
 8009102:	32ae      	adds	r2, #174	; 0xae
 8009104:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009108:	691b      	ldr	r3, [r3, #16]
 800910a:	68f8      	ldr	r0, [r7, #12]
 800910c:	4798      	blx	r3
            }
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 800910e:	68f8      	ldr	r0, [r7, #12]
 8009110:	f001 f950 	bl	800a3b4 <USBD_CtlSendStatus>
 8009114:	e032      	b.n	800917c <USBD_LL_DataOutStage+0x15c>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, (epnum & 0x7FU));
 8009116:	7afb      	ldrb	r3, [r7, #11]
 8009118:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800911c:	b2db      	uxtb	r3, r3
 800911e:	4619      	mov	r1, r3
 8009120:	68f8      	ldr	r0, [r7, #12]
 8009122:	f000 fa37 	bl	8009594 <USBD_CoreFindEP>
 8009126:	4603      	mov	r3, r0
 8009128:	75bb      	strb	r3, [r7, #22]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800912a:	7dbb      	ldrb	r3, [r7, #22]
 800912c:	2bff      	cmp	r3, #255	; 0xff
 800912e:	d025      	beq.n	800917c <USBD_LL_DataOutStage+0x15c>
 8009130:	7dbb      	ldrb	r3, [r7, #22]
 8009132:	2b00      	cmp	r3, #0
 8009134:	d122      	bne.n	800917c <USBD_LL_DataOutStage+0x15c>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009136:	68fb      	ldr	r3, [r7, #12]
 8009138:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800913c:	b2db      	uxtb	r3, r3
 800913e:	2b03      	cmp	r3, #3
 8009140:	d117      	bne.n	8009172 <USBD_LL_DataOutStage+0x152>
      {
        if (pdev->pClass[idx]->DataOut != NULL)
 8009142:	7dba      	ldrb	r2, [r7, #22]
 8009144:	68fb      	ldr	r3, [r7, #12]
 8009146:	32ae      	adds	r2, #174	; 0xae
 8009148:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800914c:	699b      	ldr	r3, [r3, #24]
 800914e:	2b00      	cmp	r3, #0
 8009150:	d00f      	beq.n	8009172 <USBD_LL_DataOutStage+0x152>
        {
          pdev->classId = idx;
 8009152:	7dba      	ldrb	r2, [r7, #22]
 8009154:	68fb      	ldr	r3, [r7, #12]
 8009156:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataOut(pdev, epnum);
 800915a:	7dba      	ldrb	r2, [r7, #22]
 800915c:	68fb      	ldr	r3, [r7, #12]
 800915e:	32ae      	adds	r2, #174	; 0xae
 8009160:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009164:	699b      	ldr	r3, [r3, #24]
 8009166:	7afa      	ldrb	r2, [r7, #11]
 8009168:	4611      	mov	r1, r2
 800916a:	68f8      	ldr	r0, [r7, #12]
 800916c:	4798      	blx	r3
 800916e:	4603      	mov	r3, r0
 8009170:	75fb      	strb	r3, [r7, #23]
        }
      }
      if (ret != USBD_OK)
 8009172:	7dfb      	ldrb	r3, [r7, #23]
 8009174:	2b00      	cmp	r3, #0
 8009176:	d001      	beq.n	800917c <USBD_LL_DataOutStage+0x15c>
      {
        return ret;
 8009178:	7dfb      	ldrb	r3, [r7, #23]
 800917a:	e000      	b.n	800917e <USBD_LL_DataOutStage+0x15e>
      }
    }
  }

  return USBD_OK;
 800917c:	2300      	movs	r3, #0
}
 800917e:	4618      	mov	r0, r3
 8009180:	3718      	adds	r7, #24
 8009182:	46bd      	mov	sp, r7
 8009184:	bd80      	pop	{r7, pc}

08009186 <USBD_LL_DataInStage>:
  * @param  epnum: endpoint index
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 8009186:	b580      	push	{r7, lr}
 8009188:	b086      	sub	sp, #24
 800918a:	af00      	add	r7, sp, #0
 800918c:	60f8      	str	r0, [r7, #12]
 800918e:	460b      	mov	r3, r1
 8009190:	607a      	str	r2, [r7, #4]
 8009192:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;
  uint8_t idx;

  if (epnum == 0U)
 8009194:	7afb      	ldrb	r3, [r7, #11]
 8009196:	2b00      	cmp	r3, #0
 8009198:	d16f      	bne.n	800927a <USBD_LL_DataInStage+0xf4>
  {
    pep = &pdev->ep_in[0];
 800919a:	68fb      	ldr	r3, [r7, #12]
 800919c:	3314      	adds	r3, #20
 800919e:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 80091a0:	68fb      	ldr	r3, [r7, #12]
 80091a2:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 80091a6:	2b02      	cmp	r3, #2
 80091a8:	d15a      	bne.n	8009260 <USBD_LL_DataInStage+0xda>
    {
      if (pep->rem_length > pep->maxpacket)
 80091aa:	693b      	ldr	r3, [r7, #16]
 80091ac:	689a      	ldr	r2, [r3, #8]
 80091ae:	693b      	ldr	r3, [r7, #16]
 80091b0:	68db      	ldr	r3, [r3, #12]
 80091b2:	429a      	cmp	r2, r3
 80091b4:	d914      	bls.n	80091e0 <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 80091b6:	693b      	ldr	r3, [r7, #16]
 80091b8:	689a      	ldr	r2, [r3, #8]
 80091ba:	693b      	ldr	r3, [r7, #16]
 80091bc:	68db      	ldr	r3, [r3, #12]
 80091be:	1ad2      	subs	r2, r2, r3
 80091c0:	693b      	ldr	r3, [r7, #16]
 80091c2:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 80091c4:	693b      	ldr	r3, [r7, #16]
 80091c6:	689b      	ldr	r3, [r3, #8]
 80091c8:	461a      	mov	r2, r3
 80091ca:	6879      	ldr	r1, [r7, #4]
 80091cc:	68f8      	ldr	r0, [r7, #12]
 80091ce:	f001 f8b2 	bl	800a336 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 80091d2:	2300      	movs	r3, #0
 80091d4:	2200      	movs	r2, #0
 80091d6:	2100      	movs	r1, #0
 80091d8:	68f8      	ldr	r0, [r7, #12]
 80091da:	f004 fead 	bl	800df38 <USBD_LL_PrepareReceive>
 80091de:	e03f      	b.n	8009260 <USBD_LL_DataInStage+0xda>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 80091e0:	693b      	ldr	r3, [r7, #16]
 80091e2:	68da      	ldr	r2, [r3, #12]
 80091e4:	693b      	ldr	r3, [r7, #16]
 80091e6:	689b      	ldr	r3, [r3, #8]
 80091e8:	429a      	cmp	r2, r3
 80091ea:	d11c      	bne.n	8009226 <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 80091ec:	693b      	ldr	r3, [r7, #16]
 80091ee:	685a      	ldr	r2, [r3, #4]
 80091f0:	693b      	ldr	r3, [r7, #16]
 80091f2:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 80091f4:	429a      	cmp	r2, r3
 80091f6:	d316      	bcc.n	8009226 <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 80091f8:	693b      	ldr	r3, [r7, #16]
 80091fa:	685a      	ldr	r2, [r3, #4]
 80091fc:	68fb      	ldr	r3, [r7, #12]
 80091fe:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 8009202:	429a      	cmp	r2, r3
 8009204:	d20f      	bcs.n	8009226 <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 8009206:	2200      	movs	r2, #0
 8009208:	2100      	movs	r1, #0
 800920a:	68f8      	ldr	r0, [r7, #12]
 800920c:	f001 f893 	bl	800a336 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 8009210:	68fb      	ldr	r3, [r7, #12]
 8009212:	2200      	movs	r2, #0
 8009214:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8009218:	2300      	movs	r3, #0
 800921a:	2200      	movs	r2, #0
 800921c:	2100      	movs	r1, #0
 800921e:	68f8      	ldr	r0, [r7, #12]
 8009220:	f004 fe8a 	bl	800df38 <USBD_LL_PrepareReceive>
 8009224:	e01c      	b.n	8009260 <USBD_LL_DataInStage+0xda>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009226:	68fb      	ldr	r3, [r7, #12]
 8009228:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800922c:	b2db      	uxtb	r3, r3
 800922e:	2b03      	cmp	r3, #3
 8009230:	d10f      	bne.n	8009252 <USBD_LL_DataInStage+0xcc>
          {
            if (pdev->pClass[0]->EP0_TxSent != NULL)
 8009232:	68fb      	ldr	r3, [r7, #12]
 8009234:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009238:	68db      	ldr	r3, [r3, #12]
 800923a:	2b00      	cmp	r3, #0
 800923c:	d009      	beq.n	8009252 <USBD_LL_DataInStage+0xcc>
            {
              pdev->classId = 0U;
 800923e:	68fb      	ldr	r3, [r7, #12]
 8009240:	2200      	movs	r2, #0
 8009242:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
              pdev->pClass[0]->EP0_TxSent(pdev);
 8009246:	68fb      	ldr	r3, [r7, #12]
 8009248:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800924c:	68db      	ldr	r3, [r3, #12]
 800924e:	68f8      	ldr	r0, [r7, #12]
 8009250:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 8009252:	2180      	movs	r1, #128	; 0x80
 8009254:	68f8      	ldr	r0, [r7, #12]
 8009256:	f004 fdc5 	bl	800dde4 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 800925a:	68f8      	ldr	r0, [r7, #12]
 800925c:	f001 f8bd 	bl	800a3da <USBD_CtlReceiveStatus>
        }
      }
    }

    if (pdev->dev_test_mode != 0U)
 8009260:	68fb      	ldr	r3, [r7, #12]
 8009262:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 8009266:	2b00      	cmp	r3, #0
 8009268:	d03a      	beq.n	80092e0 <USBD_LL_DataInStage+0x15a>
    {
      (void)USBD_RunTestMode(pdev);
 800926a:	68f8      	ldr	r0, [r7, #12]
 800926c:	f7ff fe42 	bl	8008ef4 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 8009270:	68fb      	ldr	r3, [r7, #12]
 8009272:	2200      	movs	r2, #0
 8009274:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 8009278:	e032      	b.n	80092e0 <USBD_LL_DataInStage+0x15a>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, ((uint8_t)epnum | 0x80U));
 800927a:	7afb      	ldrb	r3, [r7, #11]
 800927c:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8009280:	b2db      	uxtb	r3, r3
 8009282:	4619      	mov	r1, r3
 8009284:	68f8      	ldr	r0, [r7, #12]
 8009286:	f000 f985 	bl	8009594 <USBD_CoreFindEP>
 800928a:	4603      	mov	r3, r0
 800928c:	75fb      	strb	r3, [r7, #23]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800928e:	7dfb      	ldrb	r3, [r7, #23]
 8009290:	2bff      	cmp	r3, #255	; 0xff
 8009292:	d025      	beq.n	80092e0 <USBD_LL_DataInStage+0x15a>
 8009294:	7dfb      	ldrb	r3, [r7, #23]
 8009296:	2b00      	cmp	r3, #0
 8009298:	d122      	bne.n	80092e0 <USBD_LL_DataInStage+0x15a>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800929a:	68fb      	ldr	r3, [r7, #12]
 800929c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80092a0:	b2db      	uxtb	r3, r3
 80092a2:	2b03      	cmp	r3, #3
 80092a4:	d11c      	bne.n	80092e0 <USBD_LL_DataInStage+0x15a>
      {
        if (pdev->pClass[idx]->DataIn != NULL)
 80092a6:	7dfa      	ldrb	r2, [r7, #23]
 80092a8:	68fb      	ldr	r3, [r7, #12]
 80092aa:	32ae      	adds	r2, #174	; 0xae
 80092ac:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80092b0:	695b      	ldr	r3, [r3, #20]
 80092b2:	2b00      	cmp	r3, #0
 80092b4:	d014      	beq.n	80092e0 <USBD_LL_DataInStage+0x15a>
        {
          pdev->classId = idx;
 80092b6:	7dfa      	ldrb	r2, [r7, #23]
 80092b8:	68fb      	ldr	r3, [r7, #12]
 80092ba:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataIn(pdev, epnum);
 80092be:	7dfa      	ldrb	r2, [r7, #23]
 80092c0:	68fb      	ldr	r3, [r7, #12]
 80092c2:	32ae      	adds	r2, #174	; 0xae
 80092c4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80092c8:	695b      	ldr	r3, [r3, #20]
 80092ca:	7afa      	ldrb	r2, [r7, #11]
 80092cc:	4611      	mov	r1, r2
 80092ce:	68f8      	ldr	r0, [r7, #12]
 80092d0:	4798      	blx	r3
 80092d2:	4603      	mov	r3, r0
 80092d4:	75bb      	strb	r3, [r7, #22]

          if (ret != USBD_OK)
 80092d6:	7dbb      	ldrb	r3, [r7, #22]
 80092d8:	2b00      	cmp	r3, #0
 80092da:	d001      	beq.n	80092e0 <USBD_LL_DataInStage+0x15a>
          {
            return ret;
 80092dc:	7dbb      	ldrb	r3, [r7, #22]
 80092de:	e000      	b.n	80092e2 <USBD_LL_DataInStage+0x15c>
        }
      }
    }
  }

  return USBD_OK;
 80092e0:	2300      	movs	r3, #0
}
 80092e2:	4618      	mov	r0, r3
 80092e4:	3718      	adds	r7, #24
 80092e6:	46bd      	mov	sp, r7
 80092e8:	bd80      	pop	{r7, pc}

080092ea <USBD_LL_Reset>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 80092ea:	b580      	push	{r7, lr}
 80092ec:	b084      	sub	sp, #16
 80092ee:	af00      	add	r7, sp, #0
 80092f0:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef ret = USBD_OK;
 80092f2:	2300      	movs	r3, #0
 80092f4:	73fb      	strb	r3, [r7, #15]

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 80092f6:	687b      	ldr	r3, [r7, #4]
 80092f8:	2201      	movs	r2, #1
 80092fa:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 80092fe:	687b      	ldr	r3, [r7, #4]
 8009300:	2200      	movs	r2, #0
 8009302:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 8009306:	687b      	ldr	r3, [r7, #4]
 8009308:	2200      	movs	r2, #0
 800930a:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 800930c:	687b      	ldr	r3, [r7, #4]
 800930e:	2200      	movs	r2, #0
 8009310:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
  pdev->dev_test_mode = 0U;
 8009314:	687b      	ldr	r3, [r7, #4]
 8009316:	2200      	movs	r2, #0
 8009318:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
      }
    }
  }
#else

  if (pdev->pClass[0] != NULL)
 800931c:	687b      	ldr	r3, [r7, #4]
 800931e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009322:	2b00      	cmp	r3, #0
 8009324:	d014      	beq.n	8009350 <USBD_LL_Reset+0x66>
  {
    if (pdev->pClass[0]->DeInit != NULL)
 8009326:	687b      	ldr	r3, [r7, #4]
 8009328:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800932c:	685b      	ldr	r3, [r3, #4]
 800932e:	2b00      	cmp	r3, #0
 8009330:	d00e      	beq.n	8009350 <USBD_LL_Reset+0x66>
    {
      if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != USBD_OK)
 8009332:	687b      	ldr	r3, [r7, #4]
 8009334:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009338:	685b      	ldr	r3, [r3, #4]
 800933a:	687a      	ldr	r2, [r7, #4]
 800933c:	6852      	ldr	r2, [r2, #4]
 800933e:	b2d2      	uxtb	r2, r2
 8009340:	4611      	mov	r1, r2
 8009342:	6878      	ldr	r0, [r7, #4]
 8009344:	4798      	blx	r3
 8009346:	4603      	mov	r3, r0
 8009348:	2b00      	cmp	r3, #0
 800934a:	d001      	beq.n	8009350 <USBD_LL_Reset+0x66>
      {
        ret = USBD_FAIL;
 800934c:	2303      	movs	r3, #3
 800934e:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8009350:	2340      	movs	r3, #64	; 0x40
 8009352:	2200      	movs	r2, #0
 8009354:	2100      	movs	r1, #0
 8009356:	6878      	ldr	r0, [r7, #4]
 8009358:	f004 fcff 	bl	800dd5a <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 800935c:	687b      	ldr	r3, [r7, #4]
 800935e:	2201      	movs	r2, #1
 8009360:	f8a3 2164 	strh.w	r2, [r3, #356]	; 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 8009364:	687b      	ldr	r3, [r7, #4]
 8009366:	2240      	movs	r2, #64	; 0x40
 8009368:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800936c:	2340      	movs	r3, #64	; 0x40
 800936e:	2200      	movs	r2, #0
 8009370:	2180      	movs	r1, #128	; 0x80
 8009372:	6878      	ldr	r0, [r7, #4]
 8009374:	f004 fcf1 	bl	800dd5a <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 8009378:	687b      	ldr	r3, [r7, #4]
 800937a:	2201      	movs	r2, #1
 800937c:	849a      	strh	r2, [r3, #36]	; 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 800937e:	687b      	ldr	r3, [r7, #4]
 8009380:	2240      	movs	r2, #64	; 0x40
 8009382:	621a      	str	r2, [r3, #32]

  return ret;
 8009384:	7bfb      	ldrb	r3, [r7, #15]
}
 8009386:	4618      	mov	r0, r3
 8009388:	3710      	adds	r7, #16
 800938a:	46bd      	mov	sp, r7
 800938c:	bd80      	pop	{r7, pc}

0800938e <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 800938e:	b480      	push	{r7}
 8009390:	b083      	sub	sp, #12
 8009392:	af00      	add	r7, sp, #0
 8009394:	6078      	str	r0, [r7, #4]
 8009396:	460b      	mov	r3, r1
 8009398:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 800939a:	687b      	ldr	r3, [r7, #4]
 800939c:	78fa      	ldrb	r2, [r7, #3]
 800939e:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 80093a0:	2300      	movs	r3, #0
}
 80093a2:	4618      	mov	r0, r3
 80093a4:	370c      	adds	r7, #12
 80093a6:	46bd      	mov	sp, r7
 80093a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80093ac:	4770      	bx	lr

080093ae <USBD_LL_Suspend>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 80093ae:	b480      	push	{r7}
 80093b0:	b083      	sub	sp, #12
 80093b2:	af00      	add	r7, sp, #0
 80093b4:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state != USBD_STATE_SUSPENDED)
 80093b6:	687b      	ldr	r3, [r7, #4]
 80093b8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80093bc:	b2db      	uxtb	r3, r3
 80093be:	2b04      	cmp	r3, #4
 80093c0:	d006      	beq.n	80093d0 <USBD_LL_Suspend+0x22>
  {
    pdev->dev_old_state = pdev->dev_state;
 80093c2:	687b      	ldr	r3, [r7, #4]
 80093c4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80093c8:	b2da      	uxtb	r2, r3
 80093ca:	687b      	ldr	r3, [r7, #4]
 80093cc:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  }

  pdev->dev_state = USBD_STATE_SUSPENDED;
 80093d0:	687b      	ldr	r3, [r7, #4]
 80093d2:	2204      	movs	r2, #4
 80093d4:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 80093d8:	2300      	movs	r3, #0
}
 80093da:	4618      	mov	r0, r3
 80093dc:	370c      	adds	r7, #12
 80093de:	46bd      	mov	sp, r7
 80093e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80093e4:	4770      	bx	lr

080093e6 <USBD_LL_Resume>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 80093e6:	b480      	push	{r7}
 80093e8:	b083      	sub	sp, #12
 80093ea:	af00      	add	r7, sp, #0
 80093ec:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 80093ee:	687b      	ldr	r3, [r7, #4]
 80093f0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80093f4:	b2db      	uxtb	r3, r3
 80093f6:	2b04      	cmp	r3, #4
 80093f8:	d106      	bne.n	8009408 <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 80093fa:	687b      	ldr	r3, [r7, #4]
 80093fc:	f893 329d 	ldrb.w	r3, [r3, #669]	; 0x29d
 8009400:	b2da      	uxtb	r2, r3
 8009402:	687b      	ldr	r3, [r7, #4]
 8009404:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 8009408:	2300      	movs	r3, #0
}
 800940a:	4618      	mov	r0, r3
 800940c:	370c      	adds	r7, #12
 800940e:	46bd      	mov	sp, r7
 8009410:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009414:	4770      	bx	lr

08009416 <USBD_LL_SOF>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 8009416:	b580      	push	{r7, lr}
 8009418:	b082      	sub	sp, #8
 800941a:	af00      	add	r7, sp, #0
 800941c:	6078      	str	r0, [r7, #4]
  /* The SOF event can be distributed for all classes that support it */
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800941e:	687b      	ldr	r3, [r7, #4]
 8009420:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009424:	b2db      	uxtb	r3, r3
 8009426:	2b03      	cmp	r3, #3
 8009428:	d110      	bne.n	800944c <USBD_LL_SOF+0x36>
          }
        }
      }
    }
#else
    if (pdev->pClass[0] != NULL)
 800942a:	687b      	ldr	r3, [r7, #4]
 800942c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009430:	2b00      	cmp	r3, #0
 8009432:	d00b      	beq.n	800944c <USBD_LL_SOF+0x36>
    {
      if (pdev->pClass[0]->SOF != NULL)
 8009434:	687b      	ldr	r3, [r7, #4]
 8009436:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800943a:	69db      	ldr	r3, [r3, #28]
 800943c:	2b00      	cmp	r3, #0
 800943e:	d005      	beq.n	800944c <USBD_LL_SOF+0x36>
      {
        (void)pdev->pClass[0]->SOF(pdev);
 8009440:	687b      	ldr	r3, [r7, #4]
 8009442:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009446:	69db      	ldr	r3, [r3, #28]
 8009448:	6878      	ldr	r0, [r7, #4]
 800944a:	4798      	blx	r3
      }
    }
#endif /* USE_USBD_COMPOSITE */
  }

  return USBD_OK;
 800944c:	2300      	movs	r3, #0
}
 800944e:	4618      	mov	r0, r3
 8009450:	3708      	adds	r7, #8
 8009452:	46bd      	mov	sp, r7
 8009454:	bd80      	pop	{r7, pc}

08009456 <USBD_LL_IsoINIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 8009456:	b580      	push	{r7, lr}
 8009458:	b082      	sub	sp, #8
 800945a:	af00      	add	r7, sp, #0
 800945c:	6078      	str	r0, [r7, #4]
 800945e:	460b      	mov	r3, r1
 8009460:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 8009462:	687b      	ldr	r3, [r7, #4]
 8009464:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8009468:	687b      	ldr	r3, [r7, #4]
 800946a:	32ae      	adds	r2, #174	; 0xae
 800946c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009470:	2b00      	cmp	r3, #0
 8009472:	d101      	bne.n	8009478 <USBD_LL_IsoINIncomplete+0x22>
  {
    return USBD_FAIL;
 8009474:	2303      	movs	r3, #3
 8009476:	e01c      	b.n	80094b2 <USBD_LL_IsoINIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009478:	687b      	ldr	r3, [r7, #4]
 800947a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800947e:	b2db      	uxtb	r3, r3
 8009480:	2b03      	cmp	r3, #3
 8009482:	d115      	bne.n	80094b0 <USBD_LL_IsoINIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoINIncomplete != NULL)
 8009484:	687b      	ldr	r3, [r7, #4]
 8009486:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800948a:	687b      	ldr	r3, [r7, #4]
 800948c:	32ae      	adds	r2, #174	; 0xae
 800948e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009492:	6a1b      	ldr	r3, [r3, #32]
 8009494:	2b00      	cmp	r3, #0
 8009496:	d00b      	beq.n	80094b0 <USBD_LL_IsoINIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoINIncomplete(pdev, epnum);
 8009498:	687b      	ldr	r3, [r7, #4]
 800949a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800949e:	687b      	ldr	r3, [r7, #4]
 80094a0:	32ae      	adds	r2, #174	; 0xae
 80094a2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80094a6:	6a1b      	ldr	r3, [r3, #32]
 80094a8:	78fa      	ldrb	r2, [r7, #3]
 80094aa:	4611      	mov	r1, r2
 80094ac:	6878      	ldr	r0, [r7, #4]
 80094ae:	4798      	blx	r3
    }
  }

  return USBD_OK;
 80094b0:	2300      	movs	r3, #0
}
 80094b2:	4618      	mov	r0, r3
 80094b4:	3708      	adds	r7, #8
 80094b6:	46bd      	mov	sp, r7
 80094b8:	bd80      	pop	{r7, pc}

080094ba <USBD_LL_IsoOUTIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 80094ba:	b580      	push	{r7, lr}
 80094bc:	b082      	sub	sp, #8
 80094be:	af00      	add	r7, sp, #0
 80094c0:	6078      	str	r0, [r7, #4]
 80094c2:	460b      	mov	r3, r1
 80094c4:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 80094c6:	687b      	ldr	r3, [r7, #4]
 80094c8:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80094cc:	687b      	ldr	r3, [r7, #4]
 80094ce:	32ae      	adds	r2, #174	; 0xae
 80094d0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80094d4:	2b00      	cmp	r3, #0
 80094d6:	d101      	bne.n	80094dc <USBD_LL_IsoOUTIncomplete+0x22>
  {
    return USBD_FAIL;
 80094d8:	2303      	movs	r3, #3
 80094da:	e01c      	b.n	8009516 <USBD_LL_IsoOUTIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80094dc:	687b      	ldr	r3, [r7, #4]
 80094de:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80094e2:	b2db      	uxtb	r3, r3
 80094e4:	2b03      	cmp	r3, #3
 80094e6:	d115      	bne.n	8009514 <USBD_LL_IsoOUTIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoOUTIncomplete != NULL)
 80094e8:	687b      	ldr	r3, [r7, #4]
 80094ea:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80094ee:	687b      	ldr	r3, [r7, #4]
 80094f0:	32ae      	adds	r2, #174	; 0xae
 80094f2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80094f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80094f8:	2b00      	cmp	r3, #0
 80094fa:	d00b      	beq.n	8009514 <USBD_LL_IsoOUTIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoOUTIncomplete(pdev, epnum);
 80094fc:	687b      	ldr	r3, [r7, #4]
 80094fe:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8009502:	687b      	ldr	r3, [r7, #4]
 8009504:	32ae      	adds	r2, #174	; 0xae
 8009506:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800950a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800950c:	78fa      	ldrb	r2, [r7, #3]
 800950e:	4611      	mov	r1, r2
 8009510:	6878      	ldr	r0, [r7, #4]
 8009512:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8009514:	2300      	movs	r3, #0
}
 8009516:	4618      	mov	r0, r3
 8009518:	3708      	adds	r7, #8
 800951a:	46bd      	mov	sp, r7
 800951c:	bd80      	pop	{r7, pc}

0800951e <USBD_LL_DevConnected>:
  *         Handle device connection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 800951e:	b480      	push	{r7}
 8009520:	b083      	sub	sp, #12
 8009522:	af00      	add	r7, sp, #0
 8009524:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8009526:	2300      	movs	r3, #0
}
 8009528:	4618      	mov	r0, r3
 800952a:	370c      	adds	r7, #12
 800952c:	46bd      	mov	sp, r7
 800952e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009532:	4770      	bx	lr

08009534 <USBD_LL_DevDisconnected>:
  *         Handle device disconnection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 8009534:	b580      	push	{r7, lr}
 8009536:	b084      	sub	sp, #16
 8009538:	af00      	add	r7, sp, #0
 800953a:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef   ret = USBD_OK;
 800953c:	2300      	movs	r3, #0
 800953e:	73fb      	strb	r3, [r7, #15]

  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8009540:	687b      	ldr	r3, [r7, #4]
 8009542:	2201      	movs	r2, #1
 8009544:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 8009548:	687b      	ldr	r3, [r7, #4]
 800954a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800954e:	2b00      	cmp	r3, #0
 8009550:	d00e      	beq.n	8009570 <USBD_LL_DevDisconnected+0x3c>
  {
    if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != 0U)
 8009552:	687b      	ldr	r3, [r7, #4]
 8009554:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009558:	685b      	ldr	r3, [r3, #4]
 800955a:	687a      	ldr	r2, [r7, #4]
 800955c:	6852      	ldr	r2, [r2, #4]
 800955e:	b2d2      	uxtb	r2, r2
 8009560:	4611      	mov	r1, r2
 8009562:	6878      	ldr	r0, [r7, #4]
 8009564:	4798      	blx	r3
 8009566:	4603      	mov	r3, r0
 8009568:	2b00      	cmp	r3, #0
 800956a:	d001      	beq.n	8009570 <USBD_LL_DevDisconnected+0x3c>
    {
      ret = USBD_FAIL;
 800956c:	2303      	movs	r3, #3
 800956e:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8009570:	7bfb      	ldrb	r3, [r7, #15]
}
 8009572:	4618      	mov	r0, r3
 8009574:	3710      	adds	r7, #16
 8009576:	46bd      	mov	sp, r7
 8009578:	bd80      	pop	{r7, pc}

0800957a <USBD_CoreFindIF>:
  * @param  pdev: device instance
  * @param  index : selected interface number
  * @retval index of the class using the selected interface number. OxFF if no class found.
  */
uint8_t USBD_CoreFindIF(USBD_HandleTypeDef *pdev, uint8_t index)
{
 800957a:	b480      	push	{r7}
 800957c:	b083      	sub	sp, #12
 800957e:	af00      	add	r7, sp, #0
 8009580:	6078      	str	r0, [r7, #4]
 8009582:	460b      	mov	r3, r1
 8009584:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 8009586:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 8009588:	4618      	mov	r0, r3
 800958a:	370c      	adds	r7, #12
 800958c:	46bd      	mov	sp, r7
 800958e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009592:	4770      	bx	lr

08009594 <USBD_CoreFindEP>:
  * @param  pdev: device instance
  * @param  index : selected endpoint number
  * @retval index of the class using the selected endpoint number. 0xFF if no class found.
  */
uint8_t USBD_CoreFindEP(USBD_HandleTypeDef *pdev, uint8_t index)
{
 8009594:	b480      	push	{r7}
 8009596:	b083      	sub	sp, #12
 8009598:	af00      	add	r7, sp, #0
 800959a:	6078      	str	r0, [r7, #4]
 800959c:	460b      	mov	r3, r1
 800959e:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 80095a0:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 80095a2:	4618      	mov	r0, r3
 80095a4:	370c      	adds	r7, #12
 80095a6:	46bd      	mov	sp, r7
 80095a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80095ac:	4770      	bx	lr

080095ae <USBD_GetEpDesc>:
  * @param  pConfDesc:  pointer to Bos descriptor
  * @param  EpAddr:  endpoint address
  * @retval pointer to video endpoint descriptor
  */
void *USBD_GetEpDesc(uint8_t *pConfDesc, uint8_t EpAddr)
{
 80095ae:	b580      	push	{r7, lr}
 80095b0:	b086      	sub	sp, #24
 80095b2:	af00      	add	r7, sp, #0
 80095b4:	6078      	str	r0, [r7, #4]
 80095b6:	460b      	mov	r3, r1
 80095b8:	70fb      	strb	r3, [r7, #3]
  USBD_DescHeaderTypeDef *pdesc = (USBD_DescHeaderTypeDef *)(void *)pConfDesc;
 80095ba:	687b      	ldr	r3, [r7, #4]
 80095bc:	617b      	str	r3, [r7, #20]
  USBD_ConfigDescTypeDef *desc = (USBD_ConfigDescTypeDef *)(void *)pConfDesc;
 80095be:	687b      	ldr	r3, [r7, #4]
 80095c0:	60fb      	str	r3, [r7, #12]
  USBD_EpDescTypeDef *pEpDesc = NULL;
 80095c2:	2300      	movs	r3, #0
 80095c4:	613b      	str	r3, [r7, #16]
  uint16_t ptr;

  if (desc->wTotalLength > desc->bLength)
 80095c6:	68fb      	ldr	r3, [r7, #12]
 80095c8:	885b      	ldrh	r3, [r3, #2]
 80095ca:	b29a      	uxth	r2, r3
 80095cc:	68fb      	ldr	r3, [r7, #12]
 80095ce:	781b      	ldrb	r3, [r3, #0]
 80095d0:	b29b      	uxth	r3, r3
 80095d2:	429a      	cmp	r2, r3
 80095d4:	d920      	bls.n	8009618 <USBD_GetEpDesc+0x6a>
  {
    ptr = desc->bLength;
 80095d6:	68fb      	ldr	r3, [r7, #12]
 80095d8:	781b      	ldrb	r3, [r3, #0]
 80095da:	b29b      	uxth	r3, r3
 80095dc:	817b      	strh	r3, [r7, #10]

    while (ptr < desc->wTotalLength)
 80095de:	e013      	b.n	8009608 <USBD_GetEpDesc+0x5a>
    {
      pdesc = USBD_GetNextDesc((uint8_t *)pdesc, &ptr);
 80095e0:	f107 030a 	add.w	r3, r7, #10
 80095e4:	4619      	mov	r1, r3
 80095e6:	6978      	ldr	r0, [r7, #20]
 80095e8:	f000 f81b 	bl	8009622 <USBD_GetNextDesc>
 80095ec:	6178      	str	r0, [r7, #20]

      if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 80095ee:	697b      	ldr	r3, [r7, #20]
 80095f0:	785b      	ldrb	r3, [r3, #1]
 80095f2:	2b05      	cmp	r3, #5
 80095f4:	d108      	bne.n	8009608 <USBD_GetEpDesc+0x5a>
      {
        pEpDesc = (USBD_EpDescTypeDef *)(void *)pdesc;
 80095f6:	697b      	ldr	r3, [r7, #20]
 80095f8:	613b      	str	r3, [r7, #16]

        if (pEpDesc->bEndpointAddress == EpAddr)
 80095fa:	693b      	ldr	r3, [r7, #16]
 80095fc:	789b      	ldrb	r3, [r3, #2]
 80095fe:	78fa      	ldrb	r2, [r7, #3]
 8009600:	429a      	cmp	r2, r3
 8009602:	d008      	beq.n	8009616 <USBD_GetEpDesc+0x68>
        {
          break;
        }
        else
        {
          pEpDesc = NULL;
 8009604:	2300      	movs	r3, #0
 8009606:	613b      	str	r3, [r7, #16]
    while (ptr < desc->wTotalLength)
 8009608:	68fb      	ldr	r3, [r7, #12]
 800960a:	885b      	ldrh	r3, [r3, #2]
 800960c:	b29a      	uxth	r2, r3
 800960e:	897b      	ldrh	r3, [r7, #10]
 8009610:	429a      	cmp	r2, r3
 8009612:	d8e5      	bhi.n	80095e0 <USBD_GetEpDesc+0x32>
 8009614:	e000      	b.n	8009618 <USBD_GetEpDesc+0x6a>
          break;
 8009616:	bf00      	nop
        }
      }
    }
  }

  return (void *)pEpDesc;
 8009618:	693b      	ldr	r3, [r7, #16]
}
 800961a:	4618      	mov	r0, r3
 800961c:	3718      	adds	r7, #24
 800961e:	46bd      	mov	sp, r7
 8009620:	bd80      	pop	{r7, pc}

08009622 <USBD_GetNextDesc>:
  * @param  buf: Buffer where the descriptor is available
  * @param  ptr: data pointer inside the descriptor
  * @retval next header
  */
USBD_DescHeaderTypeDef *USBD_GetNextDesc(uint8_t *pbuf, uint16_t *ptr)
{
 8009622:	b480      	push	{r7}
 8009624:	b085      	sub	sp, #20
 8009626:	af00      	add	r7, sp, #0
 8009628:	6078      	str	r0, [r7, #4]
 800962a:	6039      	str	r1, [r7, #0]
  USBD_DescHeaderTypeDef *pnext = (USBD_DescHeaderTypeDef *)(void *)pbuf;
 800962c:	687b      	ldr	r3, [r7, #4]
 800962e:	60fb      	str	r3, [r7, #12]

  *ptr += pnext->bLength;
 8009630:	683b      	ldr	r3, [r7, #0]
 8009632:	881a      	ldrh	r2, [r3, #0]
 8009634:	68fb      	ldr	r3, [r7, #12]
 8009636:	781b      	ldrb	r3, [r3, #0]
 8009638:	b29b      	uxth	r3, r3
 800963a:	4413      	add	r3, r2
 800963c:	b29a      	uxth	r2, r3
 800963e:	683b      	ldr	r3, [r7, #0]
 8009640:	801a      	strh	r2, [r3, #0]
  pnext = (USBD_DescHeaderTypeDef *)(void *)(pbuf + pnext->bLength);
 8009642:	68fb      	ldr	r3, [r7, #12]
 8009644:	781b      	ldrb	r3, [r3, #0]
 8009646:	461a      	mov	r2, r3
 8009648:	687b      	ldr	r3, [r7, #4]
 800964a:	4413      	add	r3, r2
 800964c:	60fb      	str	r3, [r7, #12]

  return (pnext);
 800964e:	68fb      	ldr	r3, [r7, #12]
}
 8009650:	4618      	mov	r0, r3
 8009652:	3714      	adds	r7, #20
 8009654:	46bd      	mov	sp, r7
 8009656:	f85d 7b04 	ldr.w	r7, [sp], #4
 800965a:	4770      	bx	lr

0800965c <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 800965c:	b480      	push	{r7}
 800965e:	b087      	sub	sp, #28
 8009660:	af00      	add	r7, sp, #0
 8009662:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal;
  uint16_t _Byte1;
  uint16_t _Byte2;
  uint8_t *_pbuff = addr;
 8009664:	687b      	ldr	r3, [r7, #4]
 8009666:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 8009668:	697b      	ldr	r3, [r7, #20]
 800966a:	781b      	ldrb	r3, [r3, #0]
 800966c:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 800966e:	697b      	ldr	r3, [r7, #20]
 8009670:	3301      	adds	r3, #1
 8009672:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 8009674:	697b      	ldr	r3, [r7, #20]
 8009676:	781b      	ldrb	r3, [r3, #0]
 8009678:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 800967a:	8a3b      	ldrh	r3, [r7, #16]
 800967c:	021b      	lsls	r3, r3, #8
 800967e:	b21a      	sxth	r2, r3
 8009680:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8009684:	4313      	orrs	r3, r2
 8009686:	b21b      	sxth	r3, r3
 8009688:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 800968a:	89fb      	ldrh	r3, [r7, #14]
}
 800968c:	4618      	mov	r0, r3
 800968e:	371c      	adds	r7, #28
 8009690:	46bd      	mov	sp, r7
 8009692:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009696:	4770      	bx	lr

08009698 <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009698:	b580      	push	{r7, lr}
 800969a:	b084      	sub	sp, #16
 800969c:	af00      	add	r7, sp, #0
 800969e:	6078      	str	r0, [r7, #4]
 80096a0:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 80096a2:	2300      	movs	r3, #0
 80096a4:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80096a6:	683b      	ldr	r3, [r7, #0]
 80096a8:	781b      	ldrb	r3, [r3, #0]
 80096aa:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80096ae:	2b40      	cmp	r3, #64	; 0x40
 80096b0:	d005      	beq.n	80096be <USBD_StdDevReq+0x26>
 80096b2:	2b40      	cmp	r3, #64	; 0x40
 80096b4:	d857      	bhi.n	8009766 <USBD_StdDevReq+0xce>
 80096b6:	2b00      	cmp	r3, #0
 80096b8:	d00f      	beq.n	80096da <USBD_StdDevReq+0x42>
 80096ba:	2b20      	cmp	r3, #32
 80096bc:	d153      	bne.n	8009766 <USBD_StdDevReq+0xce>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass[pdev->classId]->Setup(pdev, req);
 80096be:	687b      	ldr	r3, [r7, #4]
 80096c0:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80096c4:	687b      	ldr	r3, [r7, #4]
 80096c6:	32ae      	adds	r2, #174	; 0xae
 80096c8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80096cc:	689b      	ldr	r3, [r3, #8]
 80096ce:	6839      	ldr	r1, [r7, #0]
 80096d0:	6878      	ldr	r0, [r7, #4]
 80096d2:	4798      	blx	r3
 80096d4:	4603      	mov	r3, r0
 80096d6:	73fb      	strb	r3, [r7, #15]
      break;
 80096d8:	e04a      	b.n	8009770 <USBD_StdDevReq+0xd8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 80096da:	683b      	ldr	r3, [r7, #0]
 80096dc:	785b      	ldrb	r3, [r3, #1]
 80096de:	2b09      	cmp	r3, #9
 80096e0:	d83b      	bhi.n	800975a <USBD_StdDevReq+0xc2>
 80096e2:	a201      	add	r2, pc, #4	; (adr r2, 80096e8 <USBD_StdDevReq+0x50>)
 80096e4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80096e8:	0800973d 	.word	0x0800973d
 80096ec:	08009751 	.word	0x08009751
 80096f0:	0800975b 	.word	0x0800975b
 80096f4:	08009747 	.word	0x08009747
 80096f8:	0800975b 	.word	0x0800975b
 80096fc:	0800971b 	.word	0x0800971b
 8009700:	08009711 	.word	0x08009711
 8009704:	0800975b 	.word	0x0800975b
 8009708:	08009733 	.word	0x08009733
 800970c:	08009725 	.word	0x08009725
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 8009710:	6839      	ldr	r1, [r7, #0]
 8009712:	6878      	ldr	r0, [r7, #4]
 8009714:	f000 fa3c 	bl	8009b90 <USBD_GetDescriptor>
          break;
 8009718:	e024      	b.n	8009764 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 800971a:	6839      	ldr	r1, [r7, #0]
 800971c:	6878      	ldr	r0, [r7, #4]
 800971e:	f000 fba1 	bl	8009e64 <USBD_SetAddress>
          break;
 8009722:	e01f      	b.n	8009764 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 8009724:	6839      	ldr	r1, [r7, #0]
 8009726:	6878      	ldr	r0, [r7, #4]
 8009728:	f000 fbe0 	bl	8009eec <USBD_SetConfig>
 800972c:	4603      	mov	r3, r0
 800972e:	73fb      	strb	r3, [r7, #15]
          break;
 8009730:	e018      	b.n	8009764 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 8009732:	6839      	ldr	r1, [r7, #0]
 8009734:	6878      	ldr	r0, [r7, #4]
 8009736:	f000 fc83 	bl	800a040 <USBD_GetConfig>
          break;
 800973a:	e013      	b.n	8009764 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 800973c:	6839      	ldr	r1, [r7, #0]
 800973e:	6878      	ldr	r0, [r7, #4]
 8009740:	f000 fcb4 	bl	800a0ac <USBD_GetStatus>
          break;
 8009744:	e00e      	b.n	8009764 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 8009746:	6839      	ldr	r1, [r7, #0]
 8009748:	6878      	ldr	r0, [r7, #4]
 800974a:	f000 fce3 	bl	800a114 <USBD_SetFeature>
          break;
 800974e:	e009      	b.n	8009764 <USBD_StdDevReq+0xcc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 8009750:	6839      	ldr	r1, [r7, #0]
 8009752:	6878      	ldr	r0, [r7, #4]
 8009754:	f000 fd07 	bl	800a166 <USBD_ClrFeature>
          break;
 8009758:	e004      	b.n	8009764 <USBD_StdDevReq+0xcc>

        default:
          USBD_CtlError(pdev, req);
 800975a:	6839      	ldr	r1, [r7, #0]
 800975c:	6878      	ldr	r0, [r7, #4]
 800975e:	f000 fd5e 	bl	800a21e <USBD_CtlError>
          break;
 8009762:	bf00      	nop
      }
      break;
 8009764:	e004      	b.n	8009770 <USBD_StdDevReq+0xd8>

    default:
      USBD_CtlError(pdev, req);
 8009766:	6839      	ldr	r1, [r7, #0]
 8009768:	6878      	ldr	r0, [r7, #4]
 800976a:	f000 fd58 	bl	800a21e <USBD_CtlError>
      break;
 800976e:	bf00      	nop
  }

  return ret;
 8009770:	7bfb      	ldrb	r3, [r7, #15]
}
 8009772:	4618      	mov	r0, r3
 8009774:	3710      	adds	r7, #16
 8009776:	46bd      	mov	sp, r7
 8009778:	bd80      	pop	{r7, pc}
 800977a:	bf00      	nop

0800977c <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800977c:	b580      	push	{r7, lr}
 800977e:	b084      	sub	sp, #16
 8009780:	af00      	add	r7, sp, #0
 8009782:	6078      	str	r0, [r7, #4]
 8009784:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8009786:	2300      	movs	r3, #0
 8009788:	73fb      	strb	r3, [r7, #15]
  uint8_t idx;

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800978a:	683b      	ldr	r3, [r7, #0]
 800978c:	781b      	ldrb	r3, [r3, #0]
 800978e:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8009792:	2b40      	cmp	r3, #64	; 0x40
 8009794:	d005      	beq.n	80097a2 <USBD_StdItfReq+0x26>
 8009796:	2b40      	cmp	r3, #64	; 0x40
 8009798:	d852      	bhi.n	8009840 <USBD_StdItfReq+0xc4>
 800979a:	2b00      	cmp	r3, #0
 800979c:	d001      	beq.n	80097a2 <USBD_StdItfReq+0x26>
 800979e:	2b20      	cmp	r3, #32
 80097a0:	d14e      	bne.n	8009840 <USBD_StdItfReq+0xc4>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 80097a2:	687b      	ldr	r3, [r7, #4]
 80097a4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80097a8:	b2db      	uxtb	r3, r3
 80097aa:	3b01      	subs	r3, #1
 80097ac:	2b02      	cmp	r3, #2
 80097ae:	d840      	bhi.n	8009832 <USBD_StdItfReq+0xb6>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 80097b0:	683b      	ldr	r3, [r7, #0]
 80097b2:	889b      	ldrh	r3, [r3, #4]
 80097b4:	b2db      	uxtb	r3, r3
 80097b6:	2b01      	cmp	r3, #1
 80097b8:	d836      	bhi.n	8009828 <USBD_StdItfReq+0xac>
          {
            /* Get the class index relative to this interface */
            idx = USBD_CoreFindIF(pdev, LOBYTE(req->wIndex));
 80097ba:	683b      	ldr	r3, [r7, #0]
 80097bc:	889b      	ldrh	r3, [r3, #4]
 80097be:	b2db      	uxtb	r3, r3
 80097c0:	4619      	mov	r1, r3
 80097c2:	6878      	ldr	r0, [r7, #4]
 80097c4:	f7ff fed9 	bl	800957a <USBD_CoreFindIF>
 80097c8:	4603      	mov	r3, r0
 80097ca:	73bb      	strb	r3, [r7, #14]
            if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 80097cc:	7bbb      	ldrb	r3, [r7, #14]
 80097ce:	2bff      	cmp	r3, #255	; 0xff
 80097d0:	d01d      	beq.n	800980e <USBD_StdItfReq+0x92>
 80097d2:	7bbb      	ldrb	r3, [r7, #14]
 80097d4:	2b00      	cmp	r3, #0
 80097d6:	d11a      	bne.n	800980e <USBD_StdItfReq+0x92>
            {
              /* Call the class data out function to manage the request */
              if (pdev->pClass[idx]->Setup != NULL)
 80097d8:	7bba      	ldrb	r2, [r7, #14]
 80097da:	687b      	ldr	r3, [r7, #4]
 80097dc:	32ae      	adds	r2, #174	; 0xae
 80097de:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80097e2:	689b      	ldr	r3, [r3, #8]
 80097e4:	2b00      	cmp	r3, #0
 80097e6:	d00f      	beq.n	8009808 <USBD_StdItfReq+0x8c>
              {
                pdev->classId = idx;
 80097e8:	7bba      	ldrb	r2, [r7, #14]
 80097ea:	687b      	ldr	r3, [r7, #4]
 80097ec:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
                ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 80097f0:	7bba      	ldrb	r2, [r7, #14]
 80097f2:	687b      	ldr	r3, [r7, #4]
 80097f4:	32ae      	adds	r2, #174	; 0xae
 80097f6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80097fa:	689b      	ldr	r3, [r3, #8]
 80097fc:	6839      	ldr	r1, [r7, #0]
 80097fe:	6878      	ldr	r0, [r7, #4]
 8009800:	4798      	blx	r3
 8009802:	4603      	mov	r3, r0
 8009804:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 8009806:	e004      	b.n	8009812 <USBD_StdItfReq+0x96>
              }
              else
              {
                /* should never reach this condition */
                ret = USBD_FAIL;
 8009808:	2303      	movs	r3, #3
 800980a:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 800980c:	e001      	b.n	8009812 <USBD_StdItfReq+0x96>
              }
            }
            else
            {
              /* No relative interface found */
              ret = USBD_FAIL;
 800980e:	2303      	movs	r3, #3
 8009810:	73fb      	strb	r3, [r7, #15]
            }

            if ((req->wLength == 0U) && (ret == USBD_OK))
 8009812:	683b      	ldr	r3, [r7, #0]
 8009814:	88db      	ldrh	r3, [r3, #6]
 8009816:	2b00      	cmp	r3, #0
 8009818:	d110      	bne.n	800983c <USBD_StdItfReq+0xc0>
 800981a:	7bfb      	ldrb	r3, [r7, #15]
 800981c:	2b00      	cmp	r3, #0
 800981e:	d10d      	bne.n	800983c <USBD_StdItfReq+0xc0>
            {
              (void)USBD_CtlSendStatus(pdev);
 8009820:	6878      	ldr	r0, [r7, #4]
 8009822:	f000 fdc7 	bl	800a3b4 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 8009826:	e009      	b.n	800983c <USBD_StdItfReq+0xc0>
            USBD_CtlError(pdev, req);
 8009828:	6839      	ldr	r1, [r7, #0]
 800982a:	6878      	ldr	r0, [r7, #4]
 800982c:	f000 fcf7 	bl	800a21e <USBD_CtlError>
          break;
 8009830:	e004      	b.n	800983c <USBD_StdItfReq+0xc0>

        default:
          USBD_CtlError(pdev, req);
 8009832:	6839      	ldr	r1, [r7, #0]
 8009834:	6878      	ldr	r0, [r7, #4]
 8009836:	f000 fcf2 	bl	800a21e <USBD_CtlError>
          break;
 800983a:	e000      	b.n	800983e <USBD_StdItfReq+0xc2>
          break;
 800983c:	bf00      	nop
      }
      break;
 800983e:	e004      	b.n	800984a <USBD_StdItfReq+0xce>

    default:
      USBD_CtlError(pdev, req);
 8009840:	6839      	ldr	r1, [r7, #0]
 8009842:	6878      	ldr	r0, [r7, #4]
 8009844:	f000 fceb 	bl	800a21e <USBD_CtlError>
      break;
 8009848:	bf00      	nop
  }

  return ret;
 800984a:	7bfb      	ldrb	r3, [r7, #15]
}
 800984c:	4618      	mov	r0, r3
 800984e:	3710      	adds	r7, #16
 8009850:	46bd      	mov	sp, r7
 8009852:	bd80      	pop	{r7, pc}

08009854 <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009854:	b580      	push	{r7, lr}
 8009856:	b084      	sub	sp, #16
 8009858:	af00      	add	r7, sp, #0
 800985a:	6078      	str	r0, [r7, #4]
 800985c:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  uint8_t idx;
  USBD_StatusTypeDef ret = USBD_OK;
 800985e:	2300      	movs	r3, #0
 8009860:	73fb      	strb	r3, [r7, #15]

  ep_addr = LOBYTE(req->wIndex);
 8009862:	683b      	ldr	r3, [r7, #0]
 8009864:	889b      	ldrh	r3, [r3, #4]
 8009866:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8009868:	683b      	ldr	r3, [r7, #0]
 800986a:	781b      	ldrb	r3, [r3, #0]
 800986c:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8009870:	2b40      	cmp	r3, #64	; 0x40
 8009872:	d007      	beq.n	8009884 <USBD_StdEPReq+0x30>
 8009874:	2b40      	cmp	r3, #64	; 0x40
 8009876:	f200 817f 	bhi.w	8009b78 <USBD_StdEPReq+0x324>
 800987a:	2b00      	cmp	r3, #0
 800987c:	d02a      	beq.n	80098d4 <USBD_StdEPReq+0x80>
 800987e:	2b20      	cmp	r3, #32
 8009880:	f040 817a 	bne.w	8009b78 <USBD_StdEPReq+0x324>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      /* Get the class index relative to this endpoint */
      idx = USBD_CoreFindEP(pdev, ep_addr);
 8009884:	7bbb      	ldrb	r3, [r7, #14]
 8009886:	4619      	mov	r1, r3
 8009888:	6878      	ldr	r0, [r7, #4]
 800988a:	f7ff fe83 	bl	8009594 <USBD_CoreFindEP>
 800988e:	4603      	mov	r3, r0
 8009890:	737b      	strb	r3, [r7, #13]
      if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8009892:	7b7b      	ldrb	r3, [r7, #13]
 8009894:	2bff      	cmp	r3, #255	; 0xff
 8009896:	f000 8174 	beq.w	8009b82 <USBD_StdEPReq+0x32e>
 800989a:	7b7b      	ldrb	r3, [r7, #13]
 800989c:	2b00      	cmp	r3, #0
 800989e:	f040 8170 	bne.w	8009b82 <USBD_StdEPReq+0x32e>
      {
        pdev->classId = idx;
 80098a2:	7b7a      	ldrb	r2, [r7, #13]
 80098a4:	687b      	ldr	r3, [r7, #4]
 80098a6:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
        /* Call the class data out function to manage the request */
        if (pdev->pClass[idx]->Setup != NULL)
 80098aa:	7b7a      	ldrb	r2, [r7, #13]
 80098ac:	687b      	ldr	r3, [r7, #4]
 80098ae:	32ae      	adds	r2, #174	; 0xae
 80098b0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80098b4:	689b      	ldr	r3, [r3, #8]
 80098b6:	2b00      	cmp	r3, #0
 80098b8:	f000 8163 	beq.w	8009b82 <USBD_StdEPReq+0x32e>
        {
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->Setup(pdev, req);
 80098bc:	7b7a      	ldrb	r2, [r7, #13]
 80098be:	687b      	ldr	r3, [r7, #4]
 80098c0:	32ae      	adds	r2, #174	; 0xae
 80098c2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80098c6:	689b      	ldr	r3, [r3, #8]
 80098c8:	6839      	ldr	r1, [r7, #0]
 80098ca:	6878      	ldr	r0, [r7, #4]
 80098cc:	4798      	blx	r3
 80098ce:	4603      	mov	r3, r0
 80098d0:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 80098d2:	e156      	b.n	8009b82 <USBD_StdEPReq+0x32e>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 80098d4:	683b      	ldr	r3, [r7, #0]
 80098d6:	785b      	ldrb	r3, [r3, #1]
 80098d8:	2b03      	cmp	r3, #3
 80098da:	d008      	beq.n	80098ee <USBD_StdEPReq+0x9a>
 80098dc:	2b03      	cmp	r3, #3
 80098de:	f300 8145 	bgt.w	8009b6c <USBD_StdEPReq+0x318>
 80098e2:	2b00      	cmp	r3, #0
 80098e4:	f000 809b 	beq.w	8009a1e <USBD_StdEPReq+0x1ca>
 80098e8:	2b01      	cmp	r3, #1
 80098ea:	d03c      	beq.n	8009966 <USBD_StdEPReq+0x112>
 80098ec:	e13e      	b.n	8009b6c <USBD_StdEPReq+0x318>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 80098ee:	687b      	ldr	r3, [r7, #4]
 80098f0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80098f4:	b2db      	uxtb	r3, r3
 80098f6:	2b02      	cmp	r3, #2
 80098f8:	d002      	beq.n	8009900 <USBD_StdEPReq+0xac>
 80098fa:	2b03      	cmp	r3, #3
 80098fc:	d016      	beq.n	800992c <USBD_StdEPReq+0xd8>
 80098fe:	e02c      	b.n	800995a <USBD_StdEPReq+0x106>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8009900:	7bbb      	ldrb	r3, [r7, #14]
 8009902:	2b00      	cmp	r3, #0
 8009904:	d00d      	beq.n	8009922 <USBD_StdEPReq+0xce>
 8009906:	7bbb      	ldrb	r3, [r7, #14]
 8009908:	2b80      	cmp	r3, #128	; 0x80
 800990a:	d00a      	beq.n	8009922 <USBD_StdEPReq+0xce>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 800990c:	7bbb      	ldrb	r3, [r7, #14]
 800990e:	4619      	mov	r1, r3
 8009910:	6878      	ldr	r0, [r7, #4]
 8009912:	f004 fa67 	bl	800dde4 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 8009916:	2180      	movs	r1, #128	; 0x80
 8009918:	6878      	ldr	r0, [r7, #4]
 800991a:	f004 fa63 	bl	800dde4 <USBD_LL_StallEP>
 800991e:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8009920:	e020      	b.n	8009964 <USBD_StdEPReq+0x110>
                USBD_CtlError(pdev, req);
 8009922:	6839      	ldr	r1, [r7, #0]
 8009924:	6878      	ldr	r0, [r7, #4]
 8009926:	f000 fc7a 	bl	800a21e <USBD_CtlError>
              break;
 800992a:	e01b      	b.n	8009964 <USBD_StdEPReq+0x110>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800992c:	683b      	ldr	r3, [r7, #0]
 800992e:	885b      	ldrh	r3, [r3, #2]
 8009930:	2b00      	cmp	r3, #0
 8009932:	d10e      	bne.n	8009952 <USBD_StdEPReq+0xfe>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 8009934:	7bbb      	ldrb	r3, [r7, #14]
 8009936:	2b00      	cmp	r3, #0
 8009938:	d00b      	beq.n	8009952 <USBD_StdEPReq+0xfe>
 800993a:	7bbb      	ldrb	r3, [r7, #14]
 800993c:	2b80      	cmp	r3, #128	; 0x80
 800993e:	d008      	beq.n	8009952 <USBD_StdEPReq+0xfe>
 8009940:	683b      	ldr	r3, [r7, #0]
 8009942:	88db      	ldrh	r3, [r3, #6]
 8009944:	2b00      	cmp	r3, #0
 8009946:	d104      	bne.n	8009952 <USBD_StdEPReq+0xfe>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 8009948:	7bbb      	ldrb	r3, [r7, #14]
 800994a:	4619      	mov	r1, r3
 800994c:	6878      	ldr	r0, [r7, #4]
 800994e:	f004 fa49 	bl	800dde4 <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 8009952:	6878      	ldr	r0, [r7, #4]
 8009954:	f000 fd2e 	bl	800a3b4 <USBD_CtlSendStatus>

              break;
 8009958:	e004      	b.n	8009964 <USBD_StdEPReq+0x110>

            default:
              USBD_CtlError(pdev, req);
 800995a:	6839      	ldr	r1, [r7, #0]
 800995c:	6878      	ldr	r0, [r7, #4]
 800995e:	f000 fc5e 	bl	800a21e <USBD_CtlError>
              break;
 8009962:	bf00      	nop
          }
          break;
 8009964:	e107      	b.n	8009b76 <USBD_StdEPReq+0x322>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 8009966:	687b      	ldr	r3, [r7, #4]
 8009968:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800996c:	b2db      	uxtb	r3, r3
 800996e:	2b02      	cmp	r3, #2
 8009970:	d002      	beq.n	8009978 <USBD_StdEPReq+0x124>
 8009972:	2b03      	cmp	r3, #3
 8009974:	d016      	beq.n	80099a4 <USBD_StdEPReq+0x150>
 8009976:	e04b      	b.n	8009a10 <USBD_StdEPReq+0x1bc>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8009978:	7bbb      	ldrb	r3, [r7, #14]
 800997a:	2b00      	cmp	r3, #0
 800997c:	d00d      	beq.n	800999a <USBD_StdEPReq+0x146>
 800997e:	7bbb      	ldrb	r3, [r7, #14]
 8009980:	2b80      	cmp	r3, #128	; 0x80
 8009982:	d00a      	beq.n	800999a <USBD_StdEPReq+0x146>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8009984:	7bbb      	ldrb	r3, [r7, #14]
 8009986:	4619      	mov	r1, r3
 8009988:	6878      	ldr	r0, [r7, #4]
 800998a:	f004 fa2b 	bl	800dde4 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800998e:	2180      	movs	r1, #128	; 0x80
 8009990:	6878      	ldr	r0, [r7, #4]
 8009992:	f004 fa27 	bl	800dde4 <USBD_LL_StallEP>
 8009996:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8009998:	e040      	b.n	8009a1c <USBD_StdEPReq+0x1c8>
                USBD_CtlError(pdev, req);
 800999a:	6839      	ldr	r1, [r7, #0]
 800999c:	6878      	ldr	r0, [r7, #4]
 800999e:	f000 fc3e 	bl	800a21e <USBD_CtlError>
              break;
 80099a2:	e03b      	b.n	8009a1c <USBD_StdEPReq+0x1c8>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 80099a4:	683b      	ldr	r3, [r7, #0]
 80099a6:	885b      	ldrh	r3, [r3, #2]
 80099a8:	2b00      	cmp	r3, #0
 80099aa:	d136      	bne.n	8009a1a <USBD_StdEPReq+0x1c6>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 80099ac:	7bbb      	ldrb	r3, [r7, #14]
 80099ae:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80099b2:	2b00      	cmp	r3, #0
 80099b4:	d004      	beq.n	80099c0 <USBD_StdEPReq+0x16c>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 80099b6:	7bbb      	ldrb	r3, [r7, #14]
 80099b8:	4619      	mov	r1, r3
 80099ba:	6878      	ldr	r0, [r7, #4]
 80099bc:	f004 fa31 	bl	800de22 <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 80099c0:	6878      	ldr	r0, [r7, #4]
 80099c2:	f000 fcf7 	bl	800a3b4 <USBD_CtlSendStatus>

                /* Get the class index relative to this interface */
                idx = USBD_CoreFindEP(pdev, ep_addr);
 80099c6:	7bbb      	ldrb	r3, [r7, #14]
 80099c8:	4619      	mov	r1, r3
 80099ca:	6878      	ldr	r0, [r7, #4]
 80099cc:	f7ff fde2 	bl	8009594 <USBD_CoreFindEP>
 80099d0:	4603      	mov	r3, r0
 80099d2:	737b      	strb	r3, [r7, #13]
                if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 80099d4:	7b7b      	ldrb	r3, [r7, #13]
 80099d6:	2bff      	cmp	r3, #255	; 0xff
 80099d8:	d01f      	beq.n	8009a1a <USBD_StdEPReq+0x1c6>
 80099da:	7b7b      	ldrb	r3, [r7, #13]
 80099dc:	2b00      	cmp	r3, #0
 80099de:	d11c      	bne.n	8009a1a <USBD_StdEPReq+0x1c6>
                {
                  pdev->classId = idx;
 80099e0:	7b7a      	ldrb	r2, [r7, #13]
 80099e2:	687b      	ldr	r3, [r7, #4]
 80099e4:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
                  /* Call the class data out function to manage the request */
                  if (pdev->pClass[idx]->Setup != NULL)
 80099e8:	7b7a      	ldrb	r2, [r7, #13]
 80099ea:	687b      	ldr	r3, [r7, #4]
 80099ec:	32ae      	adds	r2, #174	; 0xae
 80099ee:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80099f2:	689b      	ldr	r3, [r3, #8]
 80099f4:	2b00      	cmp	r3, #0
 80099f6:	d010      	beq.n	8009a1a <USBD_StdEPReq+0x1c6>
                  {
                    ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 80099f8:	7b7a      	ldrb	r2, [r7, #13]
 80099fa:	687b      	ldr	r3, [r7, #4]
 80099fc:	32ae      	adds	r2, #174	; 0xae
 80099fe:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009a02:	689b      	ldr	r3, [r3, #8]
 8009a04:	6839      	ldr	r1, [r7, #0]
 8009a06:	6878      	ldr	r0, [r7, #4]
 8009a08:	4798      	blx	r3
 8009a0a:	4603      	mov	r3, r0
 8009a0c:	73fb      	strb	r3, [r7, #15]
                  }
                }
              }
              break;
 8009a0e:	e004      	b.n	8009a1a <USBD_StdEPReq+0x1c6>

            default:
              USBD_CtlError(pdev, req);
 8009a10:	6839      	ldr	r1, [r7, #0]
 8009a12:	6878      	ldr	r0, [r7, #4]
 8009a14:	f000 fc03 	bl	800a21e <USBD_CtlError>
              break;
 8009a18:	e000      	b.n	8009a1c <USBD_StdEPReq+0x1c8>
              break;
 8009a1a:	bf00      	nop
          }
          break;
 8009a1c:	e0ab      	b.n	8009b76 <USBD_StdEPReq+0x322>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 8009a1e:	687b      	ldr	r3, [r7, #4]
 8009a20:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009a24:	b2db      	uxtb	r3, r3
 8009a26:	2b02      	cmp	r3, #2
 8009a28:	d002      	beq.n	8009a30 <USBD_StdEPReq+0x1dc>
 8009a2a:	2b03      	cmp	r3, #3
 8009a2c:	d032      	beq.n	8009a94 <USBD_StdEPReq+0x240>
 8009a2e:	e097      	b.n	8009b60 <USBD_StdEPReq+0x30c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8009a30:	7bbb      	ldrb	r3, [r7, #14]
 8009a32:	2b00      	cmp	r3, #0
 8009a34:	d007      	beq.n	8009a46 <USBD_StdEPReq+0x1f2>
 8009a36:	7bbb      	ldrb	r3, [r7, #14]
 8009a38:	2b80      	cmp	r3, #128	; 0x80
 8009a3a:	d004      	beq.n	8009a46 <USBD_StdEPReq+0x1f2>
              {
                USBD_CtlError(pdev, req);
 8009a3c:	6839      	ldr	r1, [r7, #0]
 8009a3e:	6878      	ldr	r0, [r7, #4]
 8009a40:	f000 fbed 	bl	800a21e <USBD_CtlError>
                break;
 8009a44:	e091      	b.n	8009b6a <USBD_StdEPReq+0x316>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8009a46:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8009a4a:	2b00      	cmp	r3, #0
 8009a4c:	da0b      	bge.n	8009a66 <USBD_StdEPReq+0x212>
 8009a4e:	7bbb      	ldrb	r3, [r7, #14]
 8009a50:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8009a54:	4613      	mov	r3, r2
 8009a56:	009b      	lsls	r3, r3, #2
 8009a58:	4413      	add	r3, r2
 8009a5a:	009b      	lsls	r3, r3, #2
 8009a5c:	3310      	adds	r3, #16
 8009a5e:	687a      	ldr	r2, [r7, #4]
 8009a60:	4413      	add	r3, r2
 8009a62:	3304      	adds	r3, #4
 8009a64:	e00b      	b.n	8009a7e <USBD_StdEPReq+0x22a>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8009a66:	7bbb      	ldrb	r3, [r7, #14]
 8009a68:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8009a6c:	4613      	mov	r3, r2
 8009a6e:	009b      	lsls	r3, r3, #2
 8009a70:	4413      	add	r3, r2
 8009a72:	009b      	lsls	r3, r3, #2
 8009a74:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8009a78:	687a      	ldr	r2, [r7, #4]
 8009a7a:	4413      	add	r3, r2
 8009a7c:	3304      	adds	r3, #4
 8009a7e:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 8009a80:	68bb      	ldr	r3, [r7, #8]
 8009a82:	2200      	movs	r2, #0
 8009a84:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8009a86:	68bb      	ldr	r3, [r7, #8]
 8009a88:	2202      	movs	r2, #2
 8009a8a:	4619      	mov	r1, r3
 8009a8c:	6878      	ldr	r0, [r7, #4]
 8009a8e:	f000 fc37 	bl	800a300 <USBD_CtlSendData>
              break;
 8009a92:	e06a      	b.n	8009b6a <USBD_StdEPReq+0x316>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 8009a94:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8009a98:	2b00      	cmp	r3, #0
 8009a9a:	da11      	bge.n	8009ac0 <USBD_StdEPReq+0x26c>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 8009a9c:	7bbb      	ldrb	r3, [r7, #14]
 8009a9e:	f003 020f 	and.w	r2, r3, #15
 8009aa2:	6879      	ldr	r1, [r7, #4]
 8009aa4:	4613      	mov	r3, r2
 8009aa6:	009b      	lsls	r3, r3, #2
 8009aa8:	4413      	add	r3, r2
 8009aaa:	009b      	lsls	r3, r3, #2
 8009aac:	440b      	add	r3, r1
 8009aae:	3324      	adds	r3, #36	; 0x24
 8009ab0:	881b      	ldrh	r3, [r3, #0]
 8009ab2:	2b00      	cmp	r3, #0
 8009ab4:	d117      	bne.n	8009ae6 <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 8009ab6:	6839      	ldr	r1, [r7, #0]
 8009ab8:	6878      	ldr	r0, [r7, #4]
 8009aba:	f000 fbb0 	bl	800a21e <USBD_CtlError>
                  break;
 8009abe:	e054      	b.n	8009b6a <USBD_StdEPReq+0x316>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 8009ac0:	7bbb      	ldrb	r3, [r7, #14]
 8009ac2:	f003 020f 	and.w	r2, r3, #15
 8009ac6:	6879      	ldr	r1, [r7, #4]
 8009ac8:	4613      	mov	r3, r2
 8009aca:	009b      	lsls	r3, r3, #2
 8009acc:	4413      	add	r3, r2
 8009ace:	009b      	lsls	r3, r3, #2
 8009ad0:	440b      	add	r3, r1
 8009ad2:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8009ad6:	881b      	ldrh	r3, [r3, #0]
 8009ad8:	2b00      	cmp	r3, #0
 8009ada:	d104      	bne.n	8009ae6 <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 8009adc:	6839      	ldr	r1, [r7, #0]
 8009ade:	6878      	ldr	r0, [r7, #4]
 8009ae0:	f000 fb9d 	bl	800a21e <USBD_CtlError>
                  break;
 8009ae4:	e041      	b.n	8009b6a <USBD_StdEPReq+0x316>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8009ae6:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8009aea:	2b00      	cmp	r3, #0
 8009aec:	da0b      	bge.n	8009b06 <USBD_StdEPReq+0x2b2>
 8009aee:	7bbb      	ldrb	r3, [r7, #14]
 8009af0:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8009af4:	4613      	mov	r3, r2
 8009af6:	009b      	lsls	r3, r3, #2
 8009af8:	4413      	add	r3, r2
 8009afa:	009b      	lsls	r3, r3, #2
 8009afc:	3310      	adds	r3, #16
 8009afe:	687a      	ldr	r2, [r7, #4]
 8009b00:	4413      	add	r3, r2
 8009b02:	3304      	adds	r3, #4
 8009b04:	e00b      	b.n	8009b1e <USBD_StdEPReq+0x2ca>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8009b06:	7bbb      	ldrb	r3, [r7, #14]
 8009b08:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8009b0c:	4613      	mov	r3, r2
 8009b0e:	009b      	lsls	r3, r3, #2
 8009b10:	4413      	add	r3, r2
 8009b12:	009b      	lsls	r3, r3, #2
 8009b14:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8009b18:	687a      	ldr	r2, [r7, #4]
 8009b1a:	4413      	add	r3, r2
 8009b1c:	3304      	adds	r3, #4
 8009b1e:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 8009b20:	7bbb      	ldrb	r3, [r7, #14]
 8009b22:	2b00      	cmp	r3, #0
 8009b24:	d002      	beq.n	8009b2c <USBD_StdEPReq+0x2d8>
 8009b26:	7bbb      	ldrb	r3, [r7, #14]
 8009b28:	2b80      	cmp	r3, #128	; 0x80
 8009b2a:	d103      	bne.n	8009b34 <USBD_StdEPReq+0x2e0>
              {
                pep->status = 0x0000U;
 8009b2c:	68bb      	ldr	r3, [r7, #8]
 8009b2e:	2200      	movs	r2, #0
 8009b30:	601a      	str	r2, [r3, #0]
 8009b32:	e00e      	b.n	8009b52 <USBD_StdEPReq+0x2fe>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 8009b34:	7bbb      	ldrb	r3, [r7, #14]
 8009b36:	4619      	mov	r1, r3
 8009b38:	6878      	ldr	r0, [r7, #4]
 8009b3a:	f004 f991 	bl	800de60 <USBD_LL_IsStallEP>
 8009b3e:	4603      	mov	r3, r0
 8009b40:	2b00      	cmp	r3, #0
 8009b42:	d003      	beq.n	8009b4c <USBD_StdEPReq+0x2f8>
              {
                pep->status = 0x0001U;
 8009b44:	68bb      	ldr	r3, [r7, #8]
 8009b46:	2201      	movs	r2, #1
 8009b48:	601a      	str	r2, [r3, #0]
 8009b4a:	e002      	b.n	8009b52 <USBD_StdEPReq+0x2fe>
              }
              else
              {
                pep->status = 0x0000U;
 8009b4c:	68bb      	ldr	r3, [r7, #8]
 8009b4e:	2200      	movs	r2, #0
 8009b50:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8009b52:	68bb      	ldr	r3, [r7, #8]
 8009b54:	2202      	movs	r2, #2
 8009b56:	4619      	mov	r1, r3
 8009b58:	6878      	ldr	r0, [r7, #4]
 8009b5a:	f000 fbd1 	bl	800a300 <USBD_CtlSendData>
              break;
 8009b5e:	e004      	b.n	8009b6a <USBD_StdEPReq+0x316>

            default:
              USBD_CtlError(pdev, req);
 8009b60:	6839      	ldr	r1, [r7, #0]
 8009b62:	6878      	ldr	r0, [r7, #4]
 8009b64:	f000 fb5b 	bl	800a21e <USBD_CtlError>
              break;
 8009b68:	bf00      	nop
          }
          break;
 8009b6a:	e004      	b.n	8009b76 <USBD_StdEPReq+0x322>

        default:
          USBD_CtlError(pdev, req);
 8009b6c:	6839      	ldr	r1, [r7, #0]
 8009b6e:	6878      	ldr	r0, [r7, #4]
 8009b70:	f000 fb55 	bl	800a21e <USBD_CtlError>
          break;
 8009b74:	bf00      	nop
      }
      break;
 8009b76:	e005      	b.n	8009b84 <USBD_StdEPReq+0x330>

    default:
      USBD_CtlError(pdev, req);
 8009b78:	6839      	ldr	r1, [r7, #0]
 8009b7a:	6878      	ldr	r0, [r7, #4]
 8009b7c:	f000 fb4f 	bl	800a21e <USBD_CtlError>
      break;
 8009b80:	e000      	b.n	8009b84 <USBD_StdEPReq+0x330>
      break;
 8009b82:	bf00      	nop
  }

  return ret;
 8009b84:	7bfb      	ldrb	r3, [r7, #15]
}
 8009b86:	4618      	mov	r0, r3
 8009b88:	3710      	adds	r7, #16
 8009b8a:	46bd      	mov	sp, r7
 8009b8c:	bd80      	pop	{r7, pc}
	...

08009b90 <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009b90:	b580      	push	{r7, lr}
 8009b92:	b084      	sub	sp, #16
 8009b94:	af00      	add	r7, sp, #0
 8009b96:	6078      	str	r0, [r7, #4]
 8009b98:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8009b9a:	2300      	movs	r3, #0
 8009b9c:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 8009b9e:	2300      	movs	r3, #0
 8009ba0:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 8009ba2:	2300      	movs	r3, #0
 8009ba4:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 8009ba6:	683b      	ldr	r3, [r7, #0]
 8009ba8:	885b      	ldrh	r3, [r3, #2]
 8009baa:	0a1b      	lsrs	r3, r3, #8
 8009bac:	b29b      	uxth	r3, r3
 8009bae:	3b01      	subs	r3, #1
 8009bb0:	2b06      	cmp	r3, #6
 8009bb2:	f200 8128 	bhi.w	8009e06 <USBD_GetDescriptor+0x276>
 8009bb6:	a201      	add	r2, pc, #4	; (adr r2, 8009bbc <USBD_GetDescriptor+0x2c>)
 8009bb8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009bbc:	08009bd9 	.word	0x08009bd9
 8009bc0:	08009bf1 	.word	0x08009bf1
 8009bc4:	08009c31 	.word	0x08009c31
 8009bc8:	08009e07 	.word	0x08009e07
 8009bcc:	08009e07 	.word	0x08009e07
 8009bd0:	08009da7 	.word	0x08009da7
 8009bd4:	08009dd3 	.word	0x08009dd3
        err++;
      }
      break;
#endif /* (USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U) */
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 8009bd8:	687b      	ldr	r3, [r7, #4]
 8009bda:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009bde:	681b      	ldr	r3, [r3, #0]
 8009be0:	687a      	ldr	r2, [r7, #4]
 8009be2:	7c12      	ldrb	r2, [r2, #16]
 8009be4:	f107 0108 	add.w	r1, r7, #8
 8009be8:	4610      	mov	r0, r2
 8009bea:	4798      	blx	r3
 8009bec:	60f8      	str	r0, [r7, #12]
      break;
 8009bee:	e112      	b.n	8009e16 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8009bf0:	687b      	ldr	r3, [r7, #4]
 8009bf2:	7c1b      	ldrb	r3, [r3, #16]
 8009bf4:	2b00      	cmp	r3, #0
 8009bf6:	d10d      	bne.n	8009c14 <USBD_GetDescriptor+0x84>
          pbuf = (uint8_t *)USBD_CMPSIT.GetHSConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetHSConfigDescriptor(&len);
 8009bf8:	687b      	ldr	r3, [r7, #4]
 8009bfa:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009bfe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009c00:	f107 0208 	add.w	r2, r7, #8
 8009c04:	4610      	mov	r0, r2
 8009c06:	4798      	blx	r3
 8009c08:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8009c0a:	68fb      	ldr	r3, [r7, #12]
 8009c0c:	3301      	adds	r3, #1
 8009c0e:	2202      	movs	r2, #2
 8009c10:	701a      	strb	r2, [r3, #0]
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 8009c12:	e100      	b.n	8009e16 <USBD_GetDescriptor+0x286>
          pbuf = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
 8009c14:	687b      	ldr	r3, [r7, #4]
 8009c16:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009c1a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009c1c:	f107 0208 	add.w	r2, r7, #8
 8009c20:	4610      	mov	r0, r2
 8009c22:	4798      	blx	r3
 8009c24:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8009c26:	68fb      	ldr	r3, [r7, #12]
 8009c28:	3301      	adds	r3, #1
 8009c2a:	2202      	movs	r2, #2
 8009c2c:	701a      	strb	r2, [r3, #0]
      break;
 8009c2e:	e0f2      	b.n	8009e16 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 8009c30:	683b      	ldr	r3, [r7, #0]
 8009c32:	885b      	ldrh	r3, [r3, #2]
 8009c34:	b2db      	uxtb	r3, r3
 8009c36:	2b05      	cmp	r3, #5
 8009c38:	f200 80ac 	bhi.w	8009d94 <USBD_GetDescriptor+0x204>
 8009c3c:	a201      	add	r2, pc, #4	; (adr r2, 8009c44 <USBD_GetDescriptor+0xb4>)
 8009c3e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009c42:	bf00      	nop
 8009c44:	08009c5d 	.word	0x08009c5d
 8009c48:	08009c91 	.word	0x08009c91
 8009c4c:	08009cc5 	.word	0x08009cc5
 8009c50:	08009cf9 	.word	0x08009cf9
 8009c54:	08009d2d 	.word	0x08009d2d
 8009c58:	08009d61 	.word	0x08009d61
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 8009c5c:	687b      	ldr	r3, [r7, #4]
 8009c5e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009c62:	685b      	ldr	r3, [r3, #4]
 8009c64:	2b00      	cmp	r3, #0
 8009c66:	d00b      	beq.n	8009c80 <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 8009c68:	687b      	ldr	r3, [r7, #4]
 8009c6a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009c6e:	685b      	ldr	r3, [r3, #4]
 8009c70:	687a      	ldr	r2, [r7, #4]
 8009c72:	7c12      	ldrb	r2, [r2, #16]
 8009c74:	f107 0108 	add.w	r1, r7, #8
 8009c78:	4610      	mov	r0, r2
 8009c7a:	4798      	blx	r3
 8009c7c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8009c7e:	e091      	b.n	8009da4 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8009c80:	6839      	ldr	r1, [r7, #0]
 8009c82:	6878      	ldr	r0, [r7, #4]
 8009c84:	f000 facb 	bl	800a21e <USBD_CtlError>
            err++;
 8009c88:	7afb      	ldrb	r3, [r7, #11]
 8009c8a:	3301      	adds	r3, #1
 8009c8c:	72fb      	strb	r3, [r7, #11]
          break;
 8009c8e:	e089      	b.n	8009da4 <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 8009c90:	687b      	ldr	r3, [r7, #4]
 8009c92:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009c96:	689b      	ldr	r3, [r3, #8]
 8009c98:	2b00      	cmp	r3, #0
 8009c9a:	d00b      	beq.n	8009cb4 <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 8009c9c:	687b      	ldr	r3, [r7, #4]
 8009c9e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009ca2:	689b      	ldr	r3, [r3, #8]
 8009ca4:	687a      	ldr	r2, [r7, #4]
 8009ca6:	7c12      	ldrb	r2, [r2, #16]
 8009ca8:	f107 0108 	add.w	r1, r7, #8
 8009cac:	4610      	mov	r0, r2
 8009cae:	4798      	blx	r3
 8009cb0:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8009cb2:	e077      	b.n	8009da4 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8009cb4:	6839      	ldr	r1, [r7, #0]
 8009cb6:	6878      	ldr	r0, [r7, #4]
 8009cb8:	f000 fab1 	bl	800a21e <USBD_CtlError>
            err++;
 8009cbc:	7afb      	ldrb	r3, [r7, #11]
 8009cbe:	3301      	adds	r3, #1
 8009cc0:	72fb      	strb	r3, [r7, #11]
          break;
 8009cc2:	e06f      	b.n	8009da4 <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 8009cc4:	687b      	ldr	r3, [r7, #4]
 8009cc6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009cca:	68db      	ldr	r3, [r3, #12]
 8009ccc:	2b00      	cmp	r3, #0
 8009cce:	d00b      	beq.n	8009ce8 <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 8009cd0:	687b      	ldr	r3, [r7, #4]
 8009cd2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009cd6:	68db      	ldr	r3, [r3, #12]
 8009cd8:	687a      	ldr	r2, [r7, #4]
 8009cda:	7c12      	ldrb	r2, [r2, #16]
 8009cdc:	f107 0108 	add.w	r1, r7, #8
 8009ce0:	4610      	mov	r0, r2
 8009ce2:	4798      	blx	r3
 8009ce4:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8009ce6:	e05d      	b.n	8009da4 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8009ce8:	6839      	ldr	r1, [r7, #0]
 8009cea:	6878      	ldr	r0, [r7, #4]
 8009cec:	f000 fa97 	bl	800a21e <USBD_CtlError>
            err++;
 8009cf0:	7afb      	ldrb	r3, [r7, #11]
 8009cf2:	3301      	adds	r3, #1
 8009cf4:	72fb      	strb	r3, [r7, #11]
          break;
 8009cf6:	e055      	b.n	8009da4 <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 8009cf8:	687b      	ldr	r3, [r7, #4]
 8009cfa:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009cfe:	691b      	ldr	r3, [r3, #16]
 8009d00:	2b00      	cmp	r3, #0
 8009d02:	d00b      	beq.n	8009d1c <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 8009d04:	687b      	ldr	r3, [r7, #4]
 8009d06:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009d0a:	691b      	ldr	r3, [r3, #16]
 8009d0c:	687a      	ldr	r2, [r7, #4]
 8009d0e:	7c12      	ldrb	r2, [r2, #16]
 8009d10:	f107 0108 	add.w	r1, r7, #8
 8009d14:	4610      	mov	r0, r2
 8009d16:	4798      	blx	r3
 8009d18:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8009d1a:	e043      	b.n	8009da4 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8009d1c:	6839      	ldr	r1, [r7, #0]
 8009d1e:	6878      	ldr	r0, [r7, #4]
 8009d20:	f000 fa7d 	bl	800a21e <USBD_CtlError>
            err++;
 8009d24:	7afb      	ldrb	r3, [r7, #11]
 8009d26:	3301      	adds	r3, #1
 8009d28:	72fb      	strb	r3, [r7, #11]
          break;
 8009d2a:	e03b      	b.n	8009da4 <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 8009d2c:	687b      	ldr	r3, [r7, #4]
 8009d2e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009d32:	695b      	ldr	r3, [r3, #20]
 8009d34:	2b00      	cmp	r3, #0
 8009d36:	d00b      	beq.n	8009d50 <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 8009d38:	687b      	ldr	r3, [r7, #4]
 8009d3a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009d3e:	695b      	ldr	r3, [r3, #20]
 8009d40:	687a      	ldr	r2, [r7, #4]
 8009d42:	7c12      	ldrb	r2, [r2, #16]
 8009d44:	f107 0108 	add.w	r1, r7, #8
 8009d48:	4610      	mov	r0, r2
 8009d4a:	4798      	blx	r3
 8009d4c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8009d4e:	e029      	b.n	8009da4 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8009d50:	6839      	ldr	r1, [r7, #0]
 8009d52:	6878      	ldr	r0, [r7, #4]
 8009d54:	f000 fa63 	bl	800a21e <USBD_CtlError>
            err++;
 8009d58:	7afb      	ldrb	r3, [r7, #11]
 8009d5a:	3301      	adds	r3, #1
 8009d5c:	72fb      	strb	r3, [r7, #11]
          break;
 8009d5e:	e021      	b.n	8009da4 <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 8009d60:	687b      	ldr	r3, [r7, #4]
 8009d62:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009d66:	699b      	ldr	r3, [r3, #24]
 8009d68:	2b00      	cmp	r3, #0
 8009d6a:	d00b      	beq.n	8009d84 <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 8009d6c:	687b      	ldr	r3, [r7, #4]
 8009d6e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009d72:	699b      	ldr	r3, [r3, #24]
 8009d74:	687a      	ldr	r2, [r7, #4]
 8009d76:	7c12      	ldrb	r2, [r2, #16]
 8009d78:	f107 0108 	add.w	r1, r7, #8
 8009d7c:	4610      	mov	r0, r2
 8009d7e:	4798      	blx	r3
 8009d80:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8009d82:	e00f      	b.n	8009da4 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8009d84:	6839      	ldr	r1, [r7, #0]
 8009d86:	6878      	ldr	r0, [r7, #4]
 8009d88:	f000 fa49 	bl	800a21e <USBD_CtlError>
            err++;
 8009d8c:	7afb      	ldrb	r3, [r7, #11]
 8009d8e:	3301      	adds	r3, #1
 8009d90:	72fb      	strb	r3, [r7, #11]
          break;
 8009d92:	e007      	b.n	8009da4 <USBD_GetDescriptor+0x214>
            err++;
          }
#endif /* USBD_SUPPORT_USER_STRING_DESC  */

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 8009d94:	6839      	ldr	r1, [r7, #0]
 8009d96:	6878      	ldr	r0, [r7, #4]
 8009d98:	f000 fa41 	bl	800a21e <USBD_CtlError>
          err++;
 8009d9c:	7afb      	ldrb	r3, [r7, #11]
 8009d9e:	3301      	adds	r3, #1
 8009da0:	72fb      	strb	r3, [r7, #11]
#endif /* (USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U) */
          break;
 8009da2:	bf00      	nop
      }
      break;
 8009da4:	e037      	b.n	8009e16 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8009da6:	687b      	ldr	r3, [r7, #4]
 8009da8:	7c1b      	ldrb	r3, [r3, #16]
 8009daa:	2b00      	cmp	r3, #0
 8009dac:	d109      	bne.n	8009dc2 <USBD_GetDescriptor+0x232>
          pbuf = (uint8_t *)USBD_CMPSIT.GetDeviceQualifierDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetDeviceQualifierDescriptor(&len);
 8009dae:	687b      	ldr	r3, [r7, #4]
 8009db0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009db4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009db6:	f107 0208 	add.w	r2, r7, #8
 8009dba:	4610      	mov	r0, r2
 8009dbc:	4798      	blx	r3
 8009dbe:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8009dc0:	e029      	b.n	8009e16 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 8009dc2:	6839      	ldr	r1, [r7, #0]
 8009dc4:	6878      	ldr	r0, [r7, #4]
 8009dc6:	f000 fa2a 	bl	800a21e <USBD_CtlError>
        err++;
 8009dca:	7afb      	ldrb	r3, [r7, #11]
 8009dcc:	3301      	adds	r3, #1
 8009dce:	72fb      	strb	r3, [r7, #11]
      break;
 8009dd0:	e021      	b.n	8009e16 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8009dd2:	687b      	ldr	r3, [r7, #4]
 8009dd4:	7c1b      	ldrb	r3, [r3, #16]
 8009dd6:	2b00      	cmp	r3, #0
 8009dd8:	d10d      	bne.n	8009df6 <USBD_GetDescriptor+0x266>
          pbuf = (uint8_t *)USBD_CMPSIT.GetOtherSpeedConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetOtherSpeedConfigDescriptor(&len);
 8009dda:	687b      	ldr	r3, [r7, #4]
 8009ddc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009de0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009de2:	f107 0208 	add.w	r2, r7, #8
 8009de6:	4610      	mov	r0, r2
 8009de8:	4798      	blx	r3
 8009dea:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8009dec:	68fb      	ldr	r3, [r7, #12]
 8009dee:	3301      	adds	r3, #1
 8009df0:	2207      	movs	r2, #7
 8009df2:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8009df4:	e00f      	b.n	8009e16 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 8009df6:	6839      	ldr	r1, [r7, #0]
 8009df8:	6878      	ldr	r0, [r7, #4]
 8009dfa:	f000 fa10 	bl	800a21e <USBD_CtlError>
        err++;
 8009dfe:	7afb      	ldrb	r3, [r7, #11]
 8009e00:	3301      	adds	r3, #1
 8009e02:	72fb      	strb	r3, [r7, #11]
      break;
 8009e04:	e007      	b.n	8009e16 <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 8009e06:	6839      	ldr	r1, [r7, #0]
 8009e08:	6878      	ldr	r0, [r7, #4]
 8009e0a:	f000 fa08 	bl	800a21e <USBD_CtlError>
      err++;
 8009e0e:	7afb      	ldrb	r3, [r7, #11]
 8009e10:	3301      	adds	r3, #1
 8009e12:	72fb      	strb	r3, [r7, #11]
      break;
 8009e14:	bf00      	nop
  }

  if (err != 0U)
 8009e16:	7afb      	ldrb	r3, [r7, #11]
 8009e18:	2b00      	cmp	r3, #0
 8009e1a:	d11e      	bne.n	8009e5a <USBD_GetDescriptor+0x2ca>
  {
    return;
  }

  if (req->wLength != 0U)
 8009e1c:	683b      	ldr	r3, [r7, #0]
 8009e1e:	88db      	ldrh	r3, [r3, #6]
 8009e20:	2b00      	cmp	r3, #0
 8009e22:	d016      	beq.n	8009e52 <USBD_GetDescriptor+0x2c2>
  {
    if (len != 0U)
 8009e24:	893b      	ldrh	r3, [r7, #8]
 8009e26:	2b00      	cmp	r3, #0
 8009e28:	d00e      	beq.n	8009e48 <USBD_GetDescriptor+0x2b8>
    {
      len = MIN(len, req->wLength);
 8009e2a:	683b      	ldr	r3, [r7, #0]
 8009e2c:	88da      	ldrh	r2, [r3, #6]
 8009e2e:	893b      	ldrh	r3, [r7, #8]
 8009e30:	4293      	cmp	r3, r2
 8009e32:	bf28      	it	cs
 8009e34:	4613      	movcs	r3, r2
 8009e36:	b29b      	uxth	r3, r3
 8009e38:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 8009e3a:	893b      	ldrh	r3, [r7, #8]
 8009e3c:	461a      	mov	r2, r3
 8009e3e:	68f9      	ldr	r1, [r7, #12]
 8009e40:	6878      	ldr	r0, [r7, #4]
 8009e42:	f000 fa5d 	bl	800a300 <USBD_CtlSendData>
 8009e46:	e009      	b.n	8009e5c <USBD_GetDescriptor+0x2cc>
    }
    else
    {
      USBD_CtlError(pdev, req);
 8009e48:	6839      	ldr	r1, [r7, #0]
 8009e4a:	6878      	ldr	r0, [r7, #4]
 8009e4c:	f000 f9e7 	bl	800a21e <USBD_CtlError>
 8009e50:	e004      	b.n	8009e5c <USBD_GetDescriptor+0x2cc>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 8009e52:	6878      	ldr	r0, [r7, #4]
 8009e54:	f000 faae 	bl	800a3b4 <USBD_CtlSendStatus>
 8009e58:	e000      	b.n	8009e5c <USBD_GetDescriptor+0x2cc>
    return;
 8009e5a:	bf00      	nop
  }
}
 8009e5c:	3710      	adds	r7, #16
 8009e5e:	46bd      	mov	sp, r7
 8009e60:	bd80      	pop	{r7, pc}
 8009e62:	bf00      	nop

08009e64 <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009e64:	b580      	push	{r7, lr}
 8009e66:	b084      	sub	sp, #16
 8009e68:	af00      	add	r7, sp, #0
 8009e6a:	6078      	str	r0, [r7, #4]
 8009e6c:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 8009e6e:	683b      	ldr	r3, [r7, #0]
 8009e70:	889b      	ldrh	r3, [r3, #4]
 8009e72:	2b00      	cmp	r3, #0
 8009e74:	d131      	bne.n	8009eda <USBD_SetAddress+0x76>
 8009e76:	683b      	ldr	r3, [r7, #0]
 8009e78:	88db      	ldrh	r3, [r3, #6]
 8009e7a:	2b00      	cmp	r3, #0
 8009e7c:	d12d      	bne.n	8009eda <USBD_SetAddress+0x76>
 8009e7e:	683b      	ldr	r3, [r7, #0]
 8009e80:	885b      	ldrh	r3, [r3, #2]
 8009e82:	2b7f      	cmp	r3, #127	; 0x7f
 8009e84:	d829      	bhi.n	8009eda <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 8009e86:	683b      	ldr	r3, [r7, #0]
 8009e88:	885b      	ldrh	r3, [r3, #2]
 8009e8a:	b2db      	uxtb	r3, r3
 8009e8c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009e90:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009e92:	687b      	ldr	r3, [r7, #4]
 8009e94:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009e98:	b2db      	uxtb	r3, r3
 8009e9a:	2b03      	cmp	r3, #3
 8009e9c:	d104      	bne.n	8009ea8 <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 8009e9e:	6839      	ldr	r1, [r7, #0]
 8009ea0:	6878      	ldr	r0, [r7, #4]
 8009ea2:	f000 f9bc 	bl	800a21e <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009ea6:	e01d      	b.n	8009ee4 <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 8009ea8:	687b      	ldr	r3, [r7, #4]
 8009eaa:	7bfa      	ldrb	r2, [r7, #15]
 8009eac:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 8009eb0:	7bfb      	ldrb	r3, [r7, #15]
 8009eb2:	4619      	mov	r1, r3
 8009eb4:	6878      	ldr	r0, [r7, #4]
 8009eb6:	f003 ffff 	bl	800deb8 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 8009eba:	6878      	ldr	r0, [r7, #4]
 8009ebc:	f000 fa7a 	bl	800a3b4 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 8009ec0:	7bfb      	ldrb	r3, [r7, #15]
 8009ec2:	2b00      	cmp	r3, #0
 8009ec4:	d004      	beq.n	8009ed0 <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8009ec6:	687b      	ldr	r3, [r7, #4]
 8009ec8:	2202      	movs	r2, #2
 8009eca:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009ece:	e009      	b.n	8009ee4 <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 8009ed0:	687b      	ldr	r3, [r7, #4]
 8009ed2:	2201      	movs	r2, #1
 8009ed4:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009ed8:	e004      	b.n	8009ee4 <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 8009eda:	6839      	ldr	r1, [r7, #0]
 8009edc:	6878      	ldr	r0, [r7, #4]
 8009ede:	f000 f99e 	bl	800a21e <USBD_CtlError>
  }
}
 8009ee2:	bf00      	nop
 8009ee4:	bf00      	nop
 8009ee6:	3710      	adds	r7, #16
 8009ee8:	46bd      	mov	sp, r7
 8009eea:	bd80      	pop	{r7, pc}

08009eec <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009eec:	b580      	push	{r7, lr}
 8009eee:	b084      	sub	sp, #16
 8009ef0:	af00      	add	r7, sp, #0
 8009ef2:	6078      	str	r0, [r7, #4]
 8009ef4:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8009ef6:	2300      	movs	r3, #0
 8009ef8:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 8009efa:	683b      	ldr	r3, [r7, #0]
 8009efc:	885b      	ldrh	r3, [r3, #2]
 8009efe:	b2da      	uxtb	r2, r3
 8009f00:	4b4e      	ldr	r3, [pc, #312]	; (800a03c <USBD_SetConfig+0x150>)
 8009f02:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 8009f04:	4b4d      	ldr	r3, [pc, #308]	; (800a03c <USBD_SetConfig+0x150>)
 8009f06:	781b      	ldrb	r3, [r3, #0]
 8009f08:	2b01      	cmp	r3, #1
 8009f0a:	d905      	bls.n	8009f18 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 8009f0c:	6839      	ldr	r1, [r7, #0]
 8009f0e:	6878      	ldr	r0, [r7, #4]
 8009f10:	f000 f985 	bl	800a21e <USBD_CtlError>
    return USBD_FAIL;
 8009f14:	2303      	movs	r3, #3
 8009f16:	e08c      	b.n	800a032 <USBD_SetConfig+0x146>
  }

  switch (pdev->dev_state)
 8009f18:	687b      	ldr	r3, [r7, #4]
 8009f1a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009f1e:	b2db      	uxtb	r3, r3
 8009f20:	2b02      	cmp	r3, #2
 8009f22:	d002      	beq.n	8009f2a <USBD_SetConfig+0x3e>
 8009f24:	2b03      	cmp	r3, #3
 8009f26:	d029      	beq.n	8009f7c <USBD_SetConfig+0x90>
 8009f28:	e075      	b.n	800a016 <USBD_SetConfig+0x12a>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 8009f2a:	4b44      	ldr	r3, [pc, #272]	; (800a03c <USBD_SetConfig+0x150>)
 8009f2c:	781b      	ldrb	r3, [r3, #0]
 8009f2e:	2b00      	cmp	r3, #0
 8009f30:	d020      	beq.n	8009f74 <USBD_SetConfig+0x88>
      {
        pdev->dev_config = cfgidx;
 8009f32:	4b42      	ldr	r3, [pc, #264]	; (800a03c <USBD_SetConfig+0x150>)
 8009f34:	781b      	ldrb	r3, [r3, #0]
 8009f36:	461a      	mov	r2, r3
 8009f38:	687b      	ldr	r3, [r7, #4]
 8009f3a:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 8009f3c:	4b3f      	ldr	r3, [pc, #252]	; (800a03c <USBD_SetConfig+0x150>)
 8009f3e:	781b      	ldrb	r3, [r3, #0]
 8009f40:	4619      	mov	r1, r3
 8009f42:	6878      	ldr	r0, [r7, #4]
 8009f44:	f7fe ffe1 	bl	8008f0a <USBD_SetClassConfig>
 8009f48:	4603      	mov	r3, r0
 8009f4a:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 8009f4c:	7bfb      	ldrb	r3, [r7, #15]
 8009f4e:	2b00      	cmp	r3, #0
 8009f50:	d008      	beq.n	8009f64 <USBD_SetConfig+0x78>
        {
          USBD_CtlError(pdev, req);
 8009f52:	6839      	ldr	r1, [r7, #0]
 8009f54:	6878      	ldr	r0, [r7, #4]
 8009f56:	f000 f962 	bl	800a21e <USBD_CtlError>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8009f5a:	687b      	ldr	r3, [r7, #4]
 8009f5c:	2202      	movs	r2, #2
 8009f5e:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 8009f62:	e065      	b.n	800a030 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 8009f64:	6878      	ldr	r0, [r7, #4]
 8009f66:	f000 fa25 	bl	800a3b4 <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 8009f6a:	687b      	ldr	r3, [r7, #4]
 8009f6c:	2203      	movs	r2, #3
 8009f6e:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 8009f72:	e05d      	b.n	800a030 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 8009f74:	6878      	ldr	r0, [r7, #4]
 8009f76:	f000 fa1d 	bl	800a3b4 <USBD_CtlSendStatus>
      break;
 8009f7a:	e059      	b.n	800a030 <USBD_SetConfig+0x144>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 8009f7c:	4b2f      	ldr	r3, [pc, #188]	; (800a03c <USBD_SetConfig+0x150>)
 8009f7e:	781b      	ldrb	r3, [r3, #0]
 8009f80:	2b00      	cmp	r3, #0
 8009f82:	d112      	bne.n	8009faa <USBD_SetConfig+0xbe>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8009f84:	687b      	ldr	r3, [r7, #4]
 8009f86:	2202      	movs	r2, #2
 8009f88:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        pdev->dev_config = cfgidx;
 8009f8c:	4b2b      	ldr	r3, [pc, #172]	; (800a03c <USBD_SetConfig+0x150>)
 8009f8e:	781b      	ldrb	r3, [r3, #0]
 8009f90:	461a      	mov	r2, r3
 8009f92:	687b      	ldr	r3, [r7, #4]
 8009f94:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 8009f96:	4b29      	ldr	r3, [pc, #164]	; (800a03c <USBD_SetConfig+0x150>)
 8009f98:	781b      	ldrb	r3, [r3, #0]
 8009f9a:	4619      	mov	r1, r3
 8009f9c:	6878      	ldr	r0, [r7, #4]
 8009f9e:	f7fe ffd0 	bl	8008f42 <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 8009fa2:	6878      	ldr	r0, [r7, #4]
 8009fa4:	f000 fa06 	bl	800a3b4 <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 8009fa8:	e042      	b.n	800a030 <USBD_SetConfig+0x144>
      else if (cfgidx != pdev->dev_config)
 8009faa:	4b24      	ldr	r3, [pc, #144]	; (800a03c <USBD_SetConfig+0x150>)
 8009fac:	781b      	ldrb	r3, [r3, #0]
 8009fae:	461a      	mov	r2, r3
 8009fb0:	687b      	ldr	r3, [r7, #4]
 8009fb2:	685b      	ldr	r3, [r3, #4]
 8009fb4:	429a      	cmp	r2, r3
 8009fb6:	d02a      	beq.n	800a00e <USBD_SetConfig+0x122>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8009fb8:	687b      	ldr	r3, [r7, #4]
 8009fba:	685b      	ldr	r3, [r3, #4]
 8009fbc:	b2db      	uxtb	r3, r3
 8009fbe:	4619      	mov	r1, r3
 8009fc0:	6878      	ldr	r0, [r7, #4]
 8009fc2:	f7fe ffbe 	bl	8008f42 <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 8009fc6:	4b1d      	ldr	r3, [pc, #116]	; (800a03c <USBD_SetConfig+0x150>)
 8009fc8:	781b      	ldrb	r3, [r3, #0]
 8009fca:	461a      	mov	r2, r3
 8009fcc:	687b      	ldr	r3, [r7, #4]
 8009fce:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 8009fd0:	4b1a      	ldr	r3, [pc, #104]	; (800a03c <USBD_SetConfig+0x150>)
 8009fd2:	781b      	ldrb	r3, [r3, #0]
 8009fd4:	4619      	mov	r1, r3
 8009fd6:	6878      	ldr	r0, [r7, #4]
 8009fd8:	f7fe ff97 	bl	8008f0a <USBD_SetClassConfig>
 8009fdc:	4603      	mov	r3, r0
 8009fde:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 8009fe0:	7bfb      	ldrb	r3, [r7, #15]
 8009fe2:	2b00      	cmp	r3, #0
 8009fe4:	d00f      	beq.n	800a006 <USBD_SetConfig+0x11a>
          USBD_CtlError(pdev, req);
 8009fe6:	6839      	ldr	r1, [r7, #0]
 8009fe8:	6878      	ldr	r0, [r7, #4]
 8009fea:	f000 f918 	bl	800a21e <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8009fee:	687b      	ldr	r3, [r7, #4]
 8009ff0:	685b      	ldr	r3, [r3, #4]
 8009ff2:	b2db      	uxtb	r3, r3
 8009ff4:	4619      	mov	r1, r3
 8009ff6:	6878      	ldr	r0, [r7, #4]
 8009ff8:	f7fe ffa3 	bl	8008f42 <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8009ffc:	687b      	ldr	r3, [r7, #4]
 8009ffe:	2202      	movs	r2, #2
 800a000:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 800a004:	e014      	b.n	800a030 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 800a006:	6878      	ldr	r0, [r7, #4]
 800a008:	f000 f9d4 	bl	800a3b4 <USBD_CtlSendStatus>
      break;
 800a00c:	e010      	b.n	800a030 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 800a00e:	6878      	ldr	r0, [r7, #4]
 800a010:	f000 f9d0 	bl	800a3b4 <USBD_CtlSendStatus>
      break;
 800a014:	e00c      	b.n	800a030 <USBD_SetConfig+0x144>

    default:
      USBD_CtlError(pdev, req);
 800a016:	6839      	ldr	r1, [r7, #0]
 800a018:	6878      	ldr	r0, [r7, #4]
 800a01a:	f000 f900 	bl	800a21e <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 800a01e:	4b07      	ldr	r3, [pc, #28]	; (800a03c <USBD_SetConfig+0x150>)
 800a020:	781b      	ldrb	r3, [r3, #0]
 800a022:	4619      	mov	r1, r3
 800a024:	6878      	ldr	r0, [r7, #4]
 800a026:	f7fe ff8c 	bl	8008f42 <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 800a02a:	2303      	movs	r3, #3
 800a02c:	73fb      	strb	r3, [r7, #15]
      break;
 800a02e:	bf00      	nop
  }

  return ret;
 800a030:	7bfb      	ldrb	r3, [r7, #15]
}
 800a032:	4618      	mov	r0, r3
 800a034:	3710      	adds	r7, #16
 800a036:	46bd      	mov	sp, r7
 800a038:	bd80      	pop	{r7, pc}
 800a03a:	bf00      	nop
 800a03c:	2000068c 	.word	0x2000068c

0800a040 <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800a040:	b580      	push	{r7, lr}
 800a042:	b082      	sub	sp, #8
 800a044:	af00      	add	r7, sp, #0
 800a046:	6078      	str	r0, [r7, #4]
 800a048:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 800a04a:	683b      	ldr	r3, [r7, #0]
 800a04c:	88db      	ldrh	r3, [r3, #6]
 800a04e:	2b01      	cmp	r3, #1
 800a050:	d004      	beq.n	800a05c <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 800a052:	6839      	ldr	r1, [r7, #0]
 800a054:	6878      	ldr	r0, [r7, #4]
 800a056:	f000 f8e2 	bl	800a21e <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 800a05a:	e023      	b.n	800a0a4 <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 800a05c:	687b      	ldr	r3, [r7, #4]
 800a05e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a062:	b2db      	uxtb	r3, r3
 800a064:	2b02      	cmp	r3, #2
 800a066:	dc02      	bgt.n	800a06e <USBD_GetConfig+0x2e>
 800a068:	2b00      	cmp	r3, #0
 800a06a:	dc03      	bgt.n	800a074 <USBD_GetConfig+0x34>
 800a06c:	e015      	b.n	800a09a <USBD_GetConfig+0x5a>
 800a06e:	2b03      	cmp	r3, #3
 800a070:	d00b      	beq.n	800a08a <USBD_GetConfig+0x4a>
 800a072:	e012      	b.n	800a09a <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 800a074:	687b      	ldr	r3, [r7, #4]
 800a076:	2200      	movs	r2, #0
 800a078:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 800a07a:	687b      	ldr	r3, [r7, #4]
 800a07c:	3308      	adds	r3, #8
 800a07e:	2201      	movs	r2, #1
 800a080:	4619      	mov	r1, r3
 800a082:	6878      	ldr	r0, [r7, #4]
 800a084:	f000 f93c 	bl	800a300 <USBD_CtlSendData>
        break;
 800a088:	e00c      	b.n	800a0a4 <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 800a08a:	687b      	ldr	r3, [r7, #4]
 800a08c:	3304      	adds	r3, #4
 800a08e:	2201      	movs	r2, #1
 800a090:	4619      	mov	r1, r3
 800a092:	6878      	ldr	r0, [r7, #4]
 800a094:	f000 f934 	bl	800a300 <USBD_CtlSendData>
        break;
 800a098:	e004      	b.n	800a0a4 <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 800a09a:	6839      	ldr	r1, [r7, #0]
 800a09c:	6878      	ldr	r0, [r7, #4]
 800a09e:	f000 f8be 	bl	800a21e <USBD_CtlError>
        break;
 800a0a2:	bf00      	nop
}
 800a0a4:	bf00      	nop
 800a0a6:	3708      	adds	r7, #8
 800a0a8:	46bd      	mov	sp, r7
 800a0aa:	bd80      	pop	{r7, pc}

0800a0ac <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800a0ac:	b580      	push	{r7, lr}
 800a0ae:	b082      	sub	sp, #8
 800a0b0:	af00      	add	r7, sp, #0
 800a0b2:	6078      	str	r0, [r7, #4]
 800a0b4:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800a0b6:	687b      	ldr	r3, [r7, #4]
 800a0b8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a0bc:	b2db      	uxtb	r3, r3
 800a0be:	3b01      	subs	r3, #1
 800a0c0:	2b02      	cmp	r3, #2
 800a0c2:	d81e      	bhi.n	800a102 <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 800a0c4:	683b      	ldr	r3, [r7, #0]
 800a0c6:	88db      	ldrh	r3, [r3, #6]
 800a0c8:	2b02      	cmp	r3, #2
 800a0ca:	d004      	beq.n	800a0d6 <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 800a0cc:	6839      	ldr	r1, [r7, #0]
 800a0ce:	6878      	ldr	r0, [r7, #4]
 800a0d0:	f000 f8a5 	bl	800a21e <USBD_CtlError>
        break;
 800a0d4:	e01a      	b.n	800a10c <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 800a0d6:	687b      	ldr	r3, [r7, #4]
 800a0d8:	2201      	movs	r2, #1
 800a0da:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif /* USBD_SELF_POWERED */

      if (pdev->dev_remote_wakeup != 0U)
 800a0dc:	687b      	ldr	r3, [r7, #4]
 800a0de:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 800a0e2:	2b00      	cmp	r3, #0
 800a0e4:	d005      	beq.n	800a0f2 <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 800a0e6:	687b      	ldr	r3, [r7, #4]
 800a0e8:	68db      	ldr	r3, [r3, #12]
 800a0ea:	f043 0202 	orr.w	r2, r3, #2
 800a0ee:	687b      	ldr	r3, [r7, #4]
 800a0f0:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 800a0f2:	687b      	ldr	r3, [r7, #4]
 800a0f4:	330c      	adds	r3, #12
 800a0f6:	2202      	movs	r2, #2
 800a0f8:	4619      	mov	r1, r3
 800a0fa:	6878      	ldr	r0, [r7, #4]
 800a0fc:	f000 f900 	bl	800a300 <USBD_CtlSendData>
      break;
 800a100:	e004      	b.n	800a10c <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 800a102:	6839      	ldr	r1, [r7, #0]
 800a104:	6878      	ldr	r0, [r7, #4]
 800a106:	f000 f88a 	bl	800a21e <USBD_CtlError>
      break;
 800a10a:	bf00      	nop
  }
}
 800a10c:	bf00      	nop
 800a10e:	3708      	adds	r7, #8
 800a110:	46bd      	mov	sp, r7
 800a112:	bd80      	pop	{r7, pc}

0800a114 <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800a114:	b580      	push	{r7, lr}
 800a116:	b082      	sub	sp, #8
 800a118:	af00      	add	r7, sp, #0
 800a11a:	6078      	str	r0, [r7, #4]
 800a11c:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800a11e:	683b      	ldr	r3, [r7, #0]
 800a120:	885b      	ldrh	r3, [r3, #2]
 800a122:	2b01      	cmp	r3, #1
 800a124:	d107      	bne.n	800a136 <USBD_SetFeature+0x22>
  {
    pdev->dev_remote_wakeup = 1U;
 800a126:	687b      	ldr	r3, [r7, #4]
 800a128:	2201      	movs	r2, #1
 800a12a:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 800a12e:	6878      	ldr	r0, [r7, #4]
 800a130:	f000 f940 	bl	800a3b4 <USBD_CtlSendStatus>
  }
  else
  {
    USBD_CtlError(pdev, req);
  }
}
 800a134:	e013      	b.n	800a15e <USBD_SetFeature+0x4a>
  else if (req->wValue == USB_FEATURE_TEST_MODE)
 800a136:	683b      	ldr	r3, [r7, #0]
 800a138:	885b      	ldrh	r3, [r3, #2]
 800a13a:	2b02      	cmp	r3, #2
 800a13c:	d10b      	bne.n	800a156 <USBD_SetFeature+0x42>
    pdev->dev_test_mode = (uint8_t)(req->wIndex >> 8);
 800a13e:	683b      	ldr	r3, [r7, #0]
 800a140:	889b      	ldrh	r3, [r3, #4]
 800a142:	0a1b      	lsrs	r3, r3, #8
 800a144:	b29b      	uxth	r3, r3
 800a146:	b2da      	uxtb	r2, r3
 800a148:	687b      	ldr	r3, [r7, #4]
 800a14a:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
    (void)USBD_CtlSendStatus(pdev);
 800a14e:	6878      	ldr	r0, [r7, #4]
 800a150:	f000 f930 	bl	800a3b4 <USBD_CtlSendStatus>
}
 800a154:	e003      	b.n	800a15e <USBD_SetFeature+0x4a>
    USBD_CtlError(pdev, req);
 800a156:	6839      	ldr	r1, [r7, #0]
 800a158:	6878      	ldr	r0, [r7, #4]
 800a15a:	f000 f860 	bl	800a21e <USBD_CtlError>
}
 800a15e:	bf00      	nop
 800a160:	3708      	adds	r7, #8
 800a162:	46bd      	mov	sp, r7
 800a164:	bd80      	pop	{r7, pc}

0800a166 <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800a166:	b580      	push	{r7, lr}
 800a168:	b082      	sub	sp, #8
 800a16a:	af00      	add	r7, sp, #0
 800a16c:	6078      	str	r0, [r7, #4]
 800a16e:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800a170:	687b      	ldr	r3, [r7, #4]
 800a172:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a176:	b2db      	uxtb	r3, r3
 800a178:	3b01      	subs	r3, #1
 800a17a:	2b02      	cmp	r3, #2
 800a17c:	d80b      	bhi.n	800a196 <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800a17e:	683b      	ldr	r3, [r7, #0]
 800a180:	885b      	ldrh	r3, [r3, #2]
 800a182:	2b01      	cmp	r3, #1
 800a184:	d10c      	bne.n	800a1a0 <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 800a186:	687b      	ldr	r3, [r7, #4]
 800a188:	2200      	movs	r2, #0
 800a18a:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 800a18e:	6878      	ldr	r0, [r7, #4]
 800a190:	f000 f910 	bl	800a3b4 <USBD_CtlSendStatus>
      }
      break;
 800a194:	e004      	b.n	800a1a0 <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 800a196:	6839      	ldr	r1, [r7, #0]
 800a198:	6878      	ldr	r0, [r7, #4]
 800a19a:	f000 f840 	bl	800a21e <USBD_CtlError>
      break;
 800a19e:	e000      	b.n	800a1a2 <USBD_ClrFeature+0x3c>
      break;
 800a1a0:	bf00      	nop
  }
}
 800a1a2:	bf00      	nop
 800a1a4:	3708      	adds	r7, #8
 800a1a6:	46bd      	mov	sp, r7
 800a1a8:	bd80      	pop	{r7, pc}

0800a1aa <USBD_ParseSetupRequest>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 800a1aa:	b580      	push	{r7, lr}
 800a1ac:	b084      	sub	sp, #16
 800a1ae:	af00      	add	r7, sp, #0
 800a1b0:	6078      	str	r0, [r7, #4]
 800a1b2:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 800a1b4:	683b      	ldr	r3, [r7, #0]
 800a1b6:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 800a1b8:	68fb      	ldr	r3, [r7, #12]
 800a1ba:	781a      	ldrb	r2, [r3, #0]
 800a1bc:	687b      	ldr	r3, [r7, #4]
 800a1be:	701a      	strb	r2, [r3, #0]

  pbuff++;
 800a1c0:	68fb      	ldr	r3, [r7, #12]
 800a1c2:	3301      	adds	r3, #1
 800a1c4:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 800a1c6:	68fb      	ldr	r3, [r7, #12]
 800a1c8:	781a      	ldrb	r2, [r3, #0]
 800a1ca:	687b      	ldr	r3, [r7, #4]
 800a1cc:	705a      	strb	r2, [r3, #1]

  pbuff++;
 800a1ce:	68fb      	ldr	r3, [r7, #12]
 800a1d0:	3301      	adds	r3, #1
 800a1d2:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 800a1d4:	68f8      	ldr	r0, [r7, #12]
 800a1d6:	f7ff fa41 	bl	800965c <SWAPBYTE>
 800a1da:	4603      	mov	r3, r0
 800a1dc:	461a      	mov	r2, r3
 800a1de:	687b      	ldr	r3, [r7, #4]
 800a1e0:	805a      	strh	r2, [r3, #2]

  pbuff++;
 800a1e2:	68fb      	ldr	r3, [r7, #12]
 800a1e4:	3301      	adds	r3, #1
 800a1e6:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800a1e8:	68fb      	ldr	r3, [r7, #12]
 800a1ea:	3301      	adds	r3, #1
 800a1ec:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 800a1ee:	68f8      	ldr	r0, [r7, #12]
 800a1f0:	f7ff fa34 	bl	800965c <SWAPBYTE>
 800a1f4:	4603      	mov	r3, r0
 800a1f6:	461a      	mov	r2, r3
 800a1f8:	687b      	ldr	r3, [r7, #4]
 800a1fa:	809a      	strh	r2, [r3, #4]

  pbuff++;
 800a1fc:	68fb      	ldr	r3, [r7, #12]
 800a1fe:	3301      	adds	r3, #1
 800a200:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800a202:	68fb      	ldr	r3, [r7, #12]
 800a204:	3301      	adds	r3, #1
 800a206:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 800a208:	68f8      	ldr	r0, [r7, #12]
 800a20a:	f7ff fa27 	bl	800965c <SWAPBYTE>
 800a20e:	4603      	mov	r3, r0
 800a210:	461a      	mov	r2, r3
 800a212:	687b      	ldr	r3, [r7, #4]
 800a214:	80da      	strh	r2, [r3, #6]
}
 800a216:	bf00      	nop
 800a218:	3710      	adds	r7, #16
 800a21a:	46bd      	mov	sp, r7
 800a21c:	bd80      	pop	{r7, pc}

0800a21e <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800a21e:	b580      	push	{r7, lr}
 800a220:	b082      	sub	sp, #8
 800a222:	af00      	add	r7, sp, #0
 800a224:	6078      	str	r0, [r7, #4]
 800a226:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 800a228:	2180      	movs	r1, #128	; 0x80
 800a22a:	6878      	ldr	r0, [r7, #4]
 800a22c:	f003 fdda 	bl	800dde4 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 800a230:	2100      	movs	r1, #0
 800a232:	6878      	ldr	r0, [r7, #4]
 800a234:	f003 fdd6 	bl	800dde4 <USBD_LL_StallEP>
}
 800a238:	bf00      	nop
 800a23a:	3708      	adds	r7, #8
 800a23c:	46bd      	mov	sp, r7
 800a23e:	bd80      	pop	{r7, pc}

0800a240 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 800a240:	b580      	push	{r7, lr}
 800a242:	b086      	sub	sp, #24
 800a244:	af00      	add	r7, sp, #0
 800a246:	60f8      	str	r0, [r7, #12]
 800a248:	60b9      	str	r1, [r7, #8]
 800a24a:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 800a24c:	2300      	movs	r3, #0
 800a24e:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 800a250:	68fb      	ldr	r3, [r7, #12]
 800a252:	2b00      	cmp	r3, #0
 800a254:	d036      	beq.n	800a2c4 <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 800a256:	68fb      	ldr	r3, [r7, #12]
 800a258:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 800a25a:	6938      	ldr	r0, [r7, #16]
 800a25c:	f000 f836 	bl	800a2cc <USBD_GetLen>
 800a260:	4603      	mov	r3, r0
 800a262:	3301      	adds	r3, #1
 800a264:	b29b      	uxth	r3, r3
 800a266:	005b      	lsls	r3, r3, #1
 800a268:	b29a      	uxth	r2, r3
 800a26a:	687b      	ldr	r3, [r7, #4]
 800a26c:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 800a26e:	7dfb      	ldrb	r3, [r7, #23]
 800a270:	68ba      	ldr	r2, [r7, #8]
 800a272:	4413      	add	r3, r2
 800a274:	687a      	ldr	r2, [r7, #4]
 800a276:	7812      	ldrb	r2, [r2, #0]
 800a278:	701a      	strb	r2, [r3, #0]
  idx++;
 800a27a:	7dfb      	ldrb	r3, [r7, #23]
 800a27c:	3301      	adds	r3, #1
 800a27e:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 800a280:	7dfb      	ldrb	r3, [r7, #23]
 800a282:	68ba      	ldr	r2, [r7, #8]
 800a284:	4413      	add	r3, r2
 800a286:	2203      	movs	r2, #3
 800a288:	701a      	strb	r2, [r3, #0]
  idx++;
 800a28a:	7dfb      	ldrb	r3, [r7, #23]
 800a28c:	3301      	adds	r3, #1
 800a28e:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 800a290:	e013      	b.n	800a2ba <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 800a292:	7dfb      	ldrb	r3, [r7, #23]
 800a294:	68ba      	ldr	r2, [r7, #8]
 800a296:	4413      	add	r3, r2
 800a298:	693a      	ldr	r2, [r7, #16]
 800a29a:	7812      	ldrb	r2, [r2, #0]
 800a29c:	701a      	strb	r2, [r3, #0]
    pdesc++;
 800a29e:	693b      	ldr	r3, [r7, #16]
 800a2a0:	3301      	adds	r3, #1
 800a2a2:	613b      	str	r3, [r7, #16]
    idx++;
 800a2a4:	7dfb      	ldrb	r3, [r7, #23]
 800a2a6:	3301      	adds	r3, #1
 800a2a8:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 800a2aa:	7dfb      	ldrb	r3, [r7, #23]
 800a2ac:	68ba      	ldr	r2, [r7, #8]
 800a2ae:	4413      	add	r3, r2
 800a2b0:	2200      	movs	r2, #0
 800a2b2:	701a      	strb	r2, [r3, #0]
    idx++;
 800a2b4:	7dfb      	ldrb	r3, [r7, #23]
 800a2b6:	3301      	adds	r3, #1
 800a2b8:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 800a2ba:	693b      	ldr	r3, [r7, #16]
 800a2bc:	781b      	ldrb	r3, [r3, #0]
 800a2be:	2b00      	cmp	r3, #0
 800a2c0:	d1e7      	bne.n	800a292 <USBD_GetString+0x52>
 800a2c2:	e000      	b.n	800a2c6 <USBD_GetString+0x86>
    return;
 800a2c4:	bf00      	nop
  }
}
 800a2c6:	3718      	adds	r7, #24
 800a2c8:	46bd      	mov	sp, r7
 800a2ca:	bd80      	pop	{r7, pc}

0800a2cc <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 800a2cc:	b480      	push	{r7}
 800a2ce:	b085      	sub	sp, #20
 800a2d0:	af00      	add	r7, sp, #0
 800a2d2:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 800a2d4:	2300      	movs	r3, #0
 800a2d6:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 800a2d8:	687b      	ldr	r3, [r7, #4]
 800a2da:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 800a2dc:	e005      	b.n	800a2ea <USBD_GetLen+0x1e>
  {
    len++;
 800a2de:	7bfb      	ldrb	r3, [r7, #15]
 800a2e0:	3301      	adds	r3, #1
 800a2e2:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 800a2e4:	68bb      	ldr	r3, [r7, #8]
 800a2e6:	3301      	adds	r3, #1
 800a2e8:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 800a2ea:	68bb      	ldr	r3, [r7, #8]
 800a2ec:	781b      	ldrb	r3, [r3, #0]
 800a2ee:	2b00      	cmp	r3, #0
 800a2f0:	d1f5      	bne.n	800a2de <USBD_GetLen+0x12>
  }

  return len;
 800a2f2:	7bfb      	ldrb	r3, [r7, #15]
}
 800a2f4:	4618      	mov	r0, r3
 800a2f6:	3714      	adds	r7, #20
 800a2f8:	46bd      	mov	sp, r7
 800a2fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a2fe:	4770      	bx	lr

0800a300 <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 800a300:	b580      	push	{r7, lr}
 800a302:	b084      	sub	sp, #16
 800a304:	af00      	add	r7, sp, #0
 800a306:	60f8      	str	r0, [r7, #12]
 800a308:	60b9      	str	r1, [r7, #8]
 800a30a:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 800a30c:	68fb      	ldr	r3, [r7, #12]
 800a30e:	2202      	movs	r2, #2
 800a310:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 800a314:	68fb      	ldr	r3, [r7, #12]
 800a316:	687a      	ldr	r2, [r7, #4]
 800a318:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 800a31a:	68fb      	ldr	r3, [r7, #12]
 800a31c:	687a      	ldr	r2, [r7, #4]
 800a31e:	61da      	str	r2, [r3, #28]
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800a320:	687b      	ldr	r3, [r7, #4]
 800a322:	68ba      	ldr	r2, [r7, #8]
 800a324:	2100      	movs	r1, #0
 800a326:	68f8      	ldr	r0, [r7, #12]
 800a328:	f003 fde5 	bl	800def6 <USBD_LL_Transmit>

  return USBD_OK;
 800a32c:	2300      	movs	r3, #0
}
 800a32e:	4618      	mov	r0, r3
 800a330:	3710      	adds	r7, #16
 800a332:	46bd      	mov	sp, r7
 800a334:	bd80      	pop	{r7, pc}

0800a336 <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 800a336:	b580      	push	{r7, lr}
 800a338:	b084      	sub	sp, #16
 800a33a:	af00      	add	r7, sp, #0
 800a33c:	60f8      	str	r0, [r7, #12]
 800a33e:	60b9      	str	r1, [r7, #8]
 800a340:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800a342:	687b      	ldr	r3, [r7, #4]
 800a344:	68ba      	ldr	r2, [r7, #8]
 800a346:	2100      	movs	r1, #0
 800a348:	68f8      	ldr	r0, [r7, #12]
 800a34a:	f003 fdd4 	bl	800def6 <USBD_LL_Transmit>

  return USBD_OK;
 800a34e:	2300      	movs	r3, #0
}
 800a350:	4618      	mov	r0, r3
 800a352:	3710      	adds	r7, #16
 800a354:	46bd      	mov	sp, r7
 800a356:	bd80      	pop	{r7, pc}

0800a358 <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 800a358:	b580      	push	{r7, lr}
 800a35a:	b084      	sub	sp, #16
 800a35c:	af00      	add	r7, sp, #0
 800a35e:	60f8      	str	r0, [r7, #12]
 800a360:	60b9      	str	r1, [r7, #8]
 800a362:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 800a364:	68fb      	ldr	r3, [r7, #12]
 800a366:	2203      	movs	r2, #3
 800a368:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 800a36c:	68fb      	ldr	r3, [r7, #12]
 800a36e:	687a      	ldr	r2, [r7, #4]
 800a370:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 800a374:	68fb      	ldr	r3, [r7, #12]
 800a376:	687a      	ldr	r2, [r7, #4]
 800a378:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800a37c:	687b      	ldr	r3, [r7, #4]
 800a37e:	68ba      	ldr	r2, [r7, #8]
 800a380:	2100      	movs	r1, #0
 800a382:	68f8      	ldr	r0, [r7, #12]
 800a384:	f003 fdd8 	bl	800df38 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800a388:	2300      	movs	r3, #0
}
 800a38a:	4618      	mov	r0, r3
 800a38c:	3710      	adds	r7, #16
 800a38e:	46bd      	mov	sp, r7
 800a390:	bd80      	pop	{r7, pc}

0800a392 <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 800a392:	b580      	push	{r7, lr}
 800a394:	b084      	sub	sp, #16
 800a396:	af00      	add	r7, sp, #0
 800a398:	60f8      	str	r0, [r7, #12]
 800a39a:	60b9      	str	r1, [r7, #8]
 800a39c:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800a39e:	687b      	ldr	r3, [r7, #4]
 800a3a0:	68ba      	ldr	r2, [r7, #8]
 800a3a2:	2100      	movs	r1, #0
 800a3a4:	68f8      	ldr	r0, [r7, #12]
 800a3a6:	f003 fdc7 	bl	800df38 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800a3aa:	2300      	movs	r3, #0
}
 800a3ac:	4618      	mov	r0, r3
 800a3ae:	3710      	adds	r7, #16
 800a3b0:	46bd      	mov	sp, r7
 800a3b2:	bd80      	pop	{r7, pc}

0800a3b4 <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 800a3b4:	b580      	push	{r7, lr}
 800a3b6:	b082      	sub	sp, #8
 800a3b8:	af00      	add	r7, sp, #0
 800a3ba:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 800a3bc:	687b      	ldr	r3, [r7, #4]
 800a3be:	2204      	movs	r2, #4
 800a3c0:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 800a3c4:	2300      	movs	r3, #0
 800a3c6:	2200      	movs	r2, #0
 800a3c8:	2100      	movs	r1, #0
 800a3ca:	6878      	ldr	r0, [r7, #4]
 800a3cc:	f003 fd93 	bl	800def6 <USBD_LL_Transmit>

  return USBD_OK;
 800a3d0:	2300      	movs	r3, #0
}
 800a3d2:	4618      	mov	r0, r3
 800a3d4:	3708      	adds	r7, #8
 800a3d6:	46bd      	mov	sp, r7
 800a3d8:	bd80      	pop	{r7, pc}

0800a3da <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 800a3da:	b580      	push	{r7, lr}
 800a3dc:	b082      	sub	sp, #8
 800a3de:	af00      	add	r7, sp, #0
 800a3e0:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 800a3e2:	687b      	ldr	r3, [r7, #4]
 800a3e4:	2205      	movs	r2, #5
 800a3e6:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800a3ea:	2300      	movs	r3, #0
 800a3ec:	2200      	movs	r2, #0
 800a3ee:	2100      	movs	r1, #0
 800a3f0:	6878      	ldr	r0, [r7, #4]
 800a3f2:	f003 fda1 	bl	800df38 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800a3f6:	2300      	movs	r3, #0
}
 800a3f8:	4618      	mov	r0, r3
 800a3fa:	3708      	adds	r7, #8
 800a3fc:	46bd      	mov	sp, r7
 800a3fe:	bd80      	pop	{r7, pc}

0800a400 <__NVIC_SetPriority>:
{
 800a400:	b480      	push	{r7}
 800a402:	b083      	sub	sp, #12
 800a404:	af00      	add	r7, sp, #0
 800a406:	4603      	mov	r3, r0
 800a408:	6039      	str	r1, [r7, #0]
 800a40a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800a40c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800a410:	2b00      	cmp	r3, #0
 800a412:	db0a      	blt.n	800a42a <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800a414:	683b      	ldr	r3, [r7, #0]
 800a416:	b2da      	uxtb	r2, r3
 800a418:	490c      	ldr	r1, [pc, #48]	; (800a44c <__NVIC_SetPriority+0x4c>)
 800a41a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800a41e:	0112      	lsls	r2, r2, #4
 800a420:	b2d2      	uxtb	r2, r2
 800a422:	440b      	add	r3, r1
 800a424:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 800a428:	e00a      	b.n	800a440 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800a42a:	683b      	ldr	r3, [r7, #0]
 800a42c:	b2da      	uxtb	r2, r3
 800a42e:	4908      	ldr	r1, [pc, #32]	; (800a450 <__NVIC_SetPriority+0x50>)
 800a430:	79fb      	ldrb	r3, [r7, #7]
 800a432:	f003 030f 	and.w	r3, r3, #15
 800a436:	3b04      	subs	r3, #4
 800a438:	0112      	lsls	r2, r2, #4
 800a43a:	b2d2      	uxtb	r2, r2
 800a43c:	440b      	add	r3, r1
 800a43e:	761a      	strb	r2, [r3, #24]
}
 800a440:	bf00      	nop
 800a442:	370c      	adds	r7, #12
 800a444:	46bd      	mov	sp, r7
 800a446:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a44a:	4770      	bx	lr
 800a44c:	e000e100 	.word	0xe000e100
 800a450:	e000ed00 	.word	0xe000ed00

0800a454 <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 800a454:	b580      	push	{r7, lr}
 800a456:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 800a458:	4b05      	ldr	r3, [pc, #20]	; (800a470 <SysTick_Handler+0x1c>)
 800a45a:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 800a45c:	f002 f818 	bl	800c490 <xTaskGetSchedulerState>
 800a460:	4603      	mov	r3, r0
 800a462:	2b01      	cmp	r3, #1
 800a464:	d001      	beq.n	800a46a <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 800a466:	f002 fdff 	bl	800d068 <xPortSysTickHandler>
  }
}
 800a46a:	bf00      	nop
 800a46c:	bd80      	pop	{r7, pc}
 800a46e:	bf00      	nop
 800a470:	e000e010 	.word	0xe000e010

0800a474 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 800a474:	b580      	push	{r7, lr}
 800a476:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 800a478:	2100      	movs	r1, #0
 800a47a:	f06f 0004 	mvn.w	r0, #4
 800a47e:	f7ff ffbf 	bl	800a400 <__NVIC_SetPriority>
#endif
}
 800a482:	bf00      	nop
 800a484:	bd80      	pop	{r7, pc}
	...

0800a488 <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 800a488:	b480      	push	{r7}
 800a48a:	b083      	sub	sp, #12
 800a48c:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800a48e:	f3ef 8305 	mrs	r3, IPSR
 800a492:	603b      	str	r3, [r7, #0]
  return(result);
 800a494:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 800a496:	2b00      	cmp	r3, #0
 800a498:	d003      	beq.n	800a4a2 <osKernelInitialize+0x1a>
    stat = osErrorISR;
 800a49a:	f06f 0305 	mvn.w	r3, #5
 800a49e:	607b      	str	r3, [r7, #4]
 800a4a0:	e00c      	b.n	800a4bc <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 800a4a2:	4b0a      	ldr	r3, [pc, #40]	; (800a4cc <osKernelInitialize+0x44>)
 800a4a4:	681b      	ldr	r3, [r3, #0]
 800a4a6:	2b00      	cmp	r3, #0
 800a4a8:	d105      	bne.n	800a4b6 <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 800a4aa:	4b08      	ldr	r3, [pc, #32]	; (800a4cc <osKernelInitialize+0x44>)
 800a4ac:	2201      	movs	r2, #1
 800a4ae:	601a      	str	r2, [r3, #0]
      stat = osOK;
 800a4b0:	2300      	movs	r3, #0
 800a4b2:	607b      	str	r3, [r7, #4]
 800a4b4:	e002      	b.n	800a4bc <osKernelInitialize+0x34>
    } else {
      stat = osError;
 800a4b6:	f04f 33ff 	mov.w	r3, #4294967295
 800a4ba:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 800a4bc:	687b      	ldr	r3, [r7, #4]
}
 800a4be:	4618      	mov	r0, r3
 800a4c0:	370c      	adds	r7, #12
 800a4c2:	46bd      	mov	sp, r7
 800a4c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a4c8:	4770      	bx	lr
 800a4ca:	bf00      	nop
 800a4cc:	20000690 	.word	0x20000690

0800a4d0 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 800a4d0:	b580      	push	{r7, lr}
 800a4d2:	b082      	sub	sp, #8
 800a4d4:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800a4d6:	f3ef 8305 	mrs	r3, IPSR
 800a4da:	603b      	str	r3, [r7, #0]
  return(result);
 800a4dc:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 800a4de:	2b00      	cmp	r3, #0
 800a4e0:	d003      	beq.n	800a4ea <osKernelStart+0x1a>
    stat = osErrorISR;
 800a4e2:	f06f 0305 	mvn.w	r3, #5
 800a4e6:	607b      	str	r3, [r7, #4]
 800a4e8:	e010      	b.n	800a50c <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 800a4ea:	4b0b      	ldr	r3, [pc, #44]	; (800a518 <osKernelStart+0x48>)
 800a4ec:	681b      	ldr	r3, [r3, #0]
 800a4ee:	2b01      	cmp	r3, #1
 800a4f0:	d109      	bne.n	800a506 <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 800a4f2:	f7ff ffbf 	bl	800a474 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 800a4f6:	4b08      	ldr	r3, [pc, #32]	; (800a518 <osKernelStart+0x48>)
 800a4f8:	2202      	movs	r2, #2
 800a4fa:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 800a4fc:	f001 fb6c 	bl	800bbd8 <vTaskStartScheduler>
      stat = osOK;
 800a500:	2300      	movs	r3, #0
 800a502:	607b      	str	r3, [r7, #4]
 800a504:	e002      	b.n	800a50c <osKernelStart+0x3c>
    } else {
      stat = osError;
 800a506:	f04f 33ff 	mov.w	r3, #4294967295
 800a50a:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 800a50c:	687b      	ldr	r3, [r7, #4]
}
 800a50e:	4618      	mov	r0, r3
 800a510:	3708      	adds	r7, #8
 800a512:	46bd      	mov	sp, r7
 800a514:	bd80      	pop	{r7, pc}
 800a516:	bf00      	nop
 800a518:	20000690 	.word	0x20000690

0800a51c <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 800a51c:	b580      	push	{r7, lr}
 800a51e:	b08e      	sub	sp, #56	; 0x38
 800a520:	af04      	add	r7, sp, #16
 800a522:	60f8      	str	r0, [r7, #12]
 800a524:	60b9      	str	r1, [r7, #8]
 800a526:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 800a528:	2300      	movs	r3, #0
 800a52a:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800a52c:	f3ef 8305 	mrs	r3, IPSR
 800a530:	617b      	str	r3, [r7, #20]
  return(result);
 800a532:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 800a534:	2b00      	cmp	r3, #0
 800a536:	d17e      	bne.n	800a636 <osThreadNew+0x11a>
 800a538:	68fb      	ldr	r3, [r7, #12]
 800a53a:	2b00      	cmp	r3, #0
 800a53c:	d07b      	beq.n	800a636 <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 800a53e:	2380      	movs	r3, #128	; 0x80
 800a540:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 800a542:	2318      	movs	r3, #24
 800a544:	61fb      	str	r3, [r7, #28]

    name = NULL;
 800a546:	2300      	movs	r3, #0
 800a548:	627b      	str	r3, [r7, #36]	; 0x24
    mem  = -1;
 800a54a:	f04f 33ff 	mov.w	r3, #4294967295
 800a54e:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 800a550:	687b      	ldr	r3, [r7, #4]
 800a552:	2b00      	cmp	r3, #0
 800a554:	d045      	beq.n	800a5e2 <osThreadNew+0xc6>
      if (attr->name != NULL) {
 800a556:	687b      	ldr	r3, [r7, #4]
 800a558:	681b      	ldr	r3, [r3, #0]
 800a55a:	2b00      	cmp	r3, #0
 800a55c:	d002      	beq.n	800a564 <osThreadNew+0x48>
        name = attr->name;
 800a55e:	687b      	ldr	r3, [r7, #4]
 800a560:	681b      	ldr	r3, [r3, #0]
 800a562:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (attr->priority != osPriorityNone) {
 800a564:	687b      	ldr	r3, [r7, #4]
 800a566:	699b      	ldr	r3, [r3, #24]
 800a568:	2b00      	cmp	r3, #0
 800a56a:	d002      	beq.n	800a572 <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 800a56c:	687b      	ldr	r3, [r7, #4]
 800a56e:	699b      	ldr	r3, [r3, #24]
 800a570:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 800a572:	69fb      	ldr	r3, [r7, #28]
 800a574:	2b00      	cmp	r3, #0
 800a576:	d008      	beq.n	800a58a <osThreadNew+0x6e>
 800a578:	69fb      	ldr	r3, [r7, #28]
 800a57a:	2b38      	cmp	r3, #56	; 0x38
 800a57c:	d805      	bhi.n	800a58a <osThreadNew+0x6e>
 800a57e:	687b      	ldr	r3, [r7, #4]
 800a580:	685b      	ldr	r3, [r3, #4]
 800a582:	f003 0301 	and.w	r3, r3, #1
 800a586:	2b00      	cmp	r3, #0
 800a588:	d001      	beq.n	800a58e <osThreadNew+0x72>
        return (NULL);
 800a58a:	2300      	movs	r3, #0
 800a58c:	e054      	b.n	800a638 <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 800a58e:	687b      	ldr	r3, [r7, #4]
 800a590:	695b      	ldr	r3, [r3, #20]
 800a592:	2b00      	cmp	r3, #0
 800a594:	d003      	beq.n	800a59e <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 800a596:	687b      	ldr	r3, [r7, #4]
 800a598:	695b      	ldr	r3, [r3, #20]
 800a59a:	089b      	lsrs	r3, r3, #2
 800a59c:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800a59e:	687b      	ldr	r3, [r7, #4]
 800a5a0:	689b      	ldr	r3, [r3, #8]
 800a5a2:	2b00      	cmp	r3, #0
 800a5a4:	d00e      	beq.n	800a5c4 <osThreadNew+0xa8>
 800a5a6:	687b      	ldr	r3, [r7, #4]
 800a5a8:	68db      	ldr	r3, [r3, #12]
 800a5aa:	2ba7      	cmp	r3, #167	; 0xa7
 800a5ac:	d90a      	bls.n	800a5c4 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800a5ae:	687b      	ldr	r3, [r7, #4]
 800a5b0:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800a5b2:	2b00      	cmp	r3, #0
 800a5b4:	d006      	beq.n	800a5c4 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800a5b6:	687b      	ldr	r3, [r7, #4]
 800a5b8:	695b      	ldr	r3, [r3, #20]
 800a5ba:	2b00      	cmp	r3, #0
 800a5bc:	d002      	beq.n	800a5c4 <osThreadNew+0xa8>
        mem = 1;
 800a5be:	2301      	movs	r3, #1
 800a5c0:	61bb      	str	r3, [r7, #24]
 800a5c2:	e010      	b.n	800a5e6 <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 800a5c4:	687b      	ldr	r3, [r7, #4]
 800a5c6:	689b      	ldr	r3, [r3, #8]
 800a5c8:	2b00      	cmp	r3, #0
 800a5ca:	d10c      	bne.n	800a5e6 <osThreadNew+0xca>
 800a5cc:	687b      	ldr	r3, [r7, #4]
 800a5ce:	68db      	ldr	r3, [r3, #12]
 800a5d0:	2b00      	cmp	r3, #0
 800a5d2:	d108      	bne.n	800a5e6 <osThreadNew+0xca>
 800a5d4:	687b      	ldr	r3, [r7, #4]
 800a5d6:	691b      	ldr	r3, [r3, #16]
 800a5d8:	2b00      	cmp	r3, #0
 800a5da:	d104      	bne.n	800a5e6 <osThreadNew+0xca>
          mem = 0;
 800a5dc:	2300      	movs	r3, #0
 800a5de:	61bb      	str	r3, [r7, #24]
 800a5e0:	e001      	b.n	800a5e6 <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 800a5e2:	2300      	movs	r3, #0
 800a5e4:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 800a5e6:	69bb      	ldr	r3, [r7, #24]
 800a5e8:	2b01      	cmp	r3, #1
 800a5ea:	d110      	bne.n	800a60e <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800a5ec:	687b      	ldr	r3, [r7, #4]
 800a5ee:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 800a5f0:	687a      	ldr	r2, [r7, #4]
 800a5f2:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800a5f4:	9202      	str	r2, [sp, #8]
 800a5f6:	9301      	str	r3, [sp, #4]
 800a5f8:	69fb      	ldr	r3, [r7, #28]
 800a5fa:	9300      	str	r3, [sp, #0]
 800a5fc:	68bb      	ldr	r3, [r7, #8]
 800a5fe:	6a3a      	ldr	r2, [r7, #32]
 800a600:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800a602:	68f8      	ldr	r0, [r7, #12]
 800a604:	f001 f930 	bl	800b868 <xTaskCreateStatic>
 800a608:	4603      	mov	r3, r0
 800a60a:	613b      	str	r3, [r7, #16]
 800a60c:	e013      	b.n	800a636 <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 800a60e:	69bb      	ldr	r3, [r7, #24]
 800a610:	2b00      	cmp	r3, #0
 800a612:	d110      	bne.n	800a636 <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 800a614:	6a3b      	ldr	r3, [r7, #32]
 800a616:	b29a      	uxth	r2, r3
 800a618:	f107 0310 	add.w	r3, r7, #16
 800a61c:	9301      	str	r3, [sp, #4]
 800a61e:	69fb      	ldr	r3, [r7, #28]
 800a620:	9300      	str	r3, [sp, #0]
 800a622:	68bb      	ldr	r3, [r7, #8]
 800a624:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800a626:	68f8      	ldr	r0, [r7, #12]
 800a628:	f001 f97b 	bl	800b922 <xTaskCreate>
 800a62c:	4603      	mov	r3, r0
 800a62e:	2b01      	cmp	r3, #1
 800a630:	d001      	beq.n	800a636 <osThreadNew+0x11a>
            hTask = NULL;
 800a632:	2300      	movs	r3, #0
 800a634:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 800a636:	693b      	ldr	r3, [r7, #16]
}
 800a638:	4618      	mov	r0, r3
 800a63a:	3728      	adds	r7, #40	; 0x28
 800a63c:	46bd      	mov	sp, r7
 800a63e:	bd80      	pop	{r7, pc}

0800a640 <osThreadYield>:
  }

  return (prio);
}

osStatus_t osThreadYield (void) {
 800a640:	b480      	push	{r7}
 800a642:	b083      	sub	sp, #12
 800a644:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800a646:	f3ef 8305 	mrs	r3, IPSR
 800a64a:	603b      	str	r3, [r7, #0]
  return(result);
 800a64c:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 800a64e:	2b00      	cmp	r3, #0
 800a650:	d003      	beq.n	800a65a <osThreadYield+0x1a>
    stat = osErrorISR;
 800a652:	f06f 0305 	mvn.w	r3, #5
 800a656:	607b      	str	r3, [r7, #4]
 800a658:	e009      	b.n	800a66e <osThreadYield+0x2e>
  } else {
    stat = osOK;
 800a65a:	2300      	movs	r3, #0
 800a65c:	607b      	str	r3, [r7, #4]
    taskYIELD();
 800a65e:	4b07      	ldr	r3, [pc, #28]	; (800a67c <osThreadYield+0x3c>)
 800a660:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a664:	601a      	str	r2, [r3, #0]
 800a666:	f3bf 8f4f 	dsb	sy
 800a66a:	f3bf 8f6f 	isb	sy
  }

  return (stat);
 800a66e:	687b      	ldr	r3, [r7, #4]
}
 800a670:	4618      	mov	r0, r3
 800a672:	370c      	adds	r7, #12
 800a674:	46bd      	mov	sp, r7
 800a676:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a67a:	4770      	bx	lr
 800a67c:	e000ed04 	.word	0xe000ed04

0800a680 <osSemaphoreNew>:
}
#endif /* (configUSE_OS2_MUTEX == 1) */

/*---------------------------------------------------------------------------*/

osSemaphoreId_t osSemaphoreNew (uint32_t max_count, uint32_t initial_count, const osSemaphoreAttr_t *attr) {
 800a680:	b580      	push	{r7, lr}
 800a682:	b08a      	sub	sp, #40	; 0x28
 800a684:	af02      	add	r7, sp, #8
 800a686:	60f8      	str	r0, [r7, #12]
 800a688:	60b9      	str	r1, [r7, #8]
 800a68a:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hSemaphore = NULL;
 800a68c:	2300      	movs	r3, #0
 800a68e:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800a690:	f3ef 8305 	mrs	r3, IPSR
 800a694:	613b      	str	r3, [r7, #16]
  return(result);
 800a696:	693b      	ldr	r3, [r7, #16]

  if (!IS_IRQ() && (max_count > 0U) && (initial_count <= max_count)) {
 800a698:	2b00      	cmp	r3, #0
 800a69a:	d175      	bne.n	800a788 <osSemaphoreNew+0x108>
 800a69c:	68fb      	ldr	r3, [r7, #12]
 800a69e:	2b00      	cmp	r3, #0
 800a6a0:	d072      	beq.n	800a788 <osSemaphoreNew+0x108>
 800a6a2:	68ba      	ldr	r2, [r7, #8]
 800a6a4:	68fb      	ldr	r3, [r7, #12]
 800a6a6:	429a      	cmp	r2, r3
 800a6a8:	d86e      	bhi.n	800a788 <osSemaphoreNew+0x108>
    mem = -1;
 800a6aa:	f04f 33ff 	mov.w	r3, #4294967295
 800a6ae:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 800a6b0:	687b      	ldr	r3, [r7, #4]
 800a6b2:	2b00      	cmp	r3, #0
 800a6b4:	d015      	beq.n	800a6e2 <osSemaphoreNew+0x62>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticSemaphore_t))) {
 800a6b6:	687b      	ldr	r3, [r7, #4]
 800a6b8:	689b      	ldr	r3, [r3, #8]
 800a6ba:	2b00      	cmp	r3, #0
 800a6bc:	d006      	beq.n	800a6cc <osSemaphoreNew+0x4c>
 800a6be:	687b      	ldr	r3, [r7, #4]
 800a6c0:	68db      	ldr	r3, [r3, #12]
 800a6c2:	2b4f      	cmp	r3, #79	; 0x4f
 800a6c4:	d902      	bls.n	800a6cc <osSemaphoreNew+0x4c>
        mem = 1;
 800a6c6:	2301      	movs	r3, #1
 800a6c8:	61bb      	str	r3, [r7, #24]
 800a6ca:	e00c      	b.n	800a6e6 <osSemaphoreNew+0x66>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 800a6cc:	687b      	ldr	r3, [r7, #4]
 800a6ce:	689b      	ldr	r3, [r3, #8]
 800a6d0:	2b00      	cmp	r3, #0
 800a6d2:	d108      	bne.n	800a6e6 <osSemaphoreNew+0x66>
 800a6d4:	687b      	ldr	r3, [r7, #4]
 800a6d6:	68db      	ldr	r3, [r3, #12]
 800a6d8:	2b00      	cmp	r3, #0
 800a6da:	d104      	bne.n	800a6e6 <osSemaphoreNew+0x66>
          mem = 0;
 800a6dc:	2300      	movs	r3, #0
 800a6de:	61bb      	str	r3, [r7, #24]
 800a6e0:	e001      	b.n	800a6e6 <osSemaphoreNew+0x66>
        }
      }
    }
    else {
      mem = 0;
 800a6e2:	2300      	movs	r3, #0
 800a6e4:	61bb      	str	r3, [r7, #24]
    }

    if (mem != -1) {
 800a6e6:	69bb      	ldr	r3, [r7, #24]
 800a6e8:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a6ec:	d04c      	beq.n	800a788 <osSemaphoreNew+0x108>
      if (max_count == 1U) {
 800a6ee:	68fb      	ldr	r3, [r7, #12]
 800a6f0:	2b01      	cmp	r3, #1
 800a6f2:	d128      	bne.n	800a746 <osSemaphoreNew+0xc6>
        if (mem == 1) {
 800a6f4:	69bb      	ldr	r3, [r7, #24]
 800a6f6:	2b01      	cmp	r3, #1
 800a6f8:	d10a      	bne.n	800a710 <osSemaphoreNew+0x90>
          #if (configSUPPORT_STATIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateBinaryStatic ((StaticSemaphore_t *)attr->cb_mem);
 800a6fa:	687b      	ldr	r3, [r7, #4]
 800a6fc:	689b      	ldr	r3, [r3, #8]
 800a6fe:	2203      	movs	r2, #3
 800a700:	9200      	str	r2, [sp, #0]
 800a702:	2200      	movs	r2, #0
 800a704:	2100      	movs	r1, #0
 800a706:	2001      	movs	r0, #1
 800a708:	f000 faac 	bl	800ac64 <xQueueGenericCreateStatic>
 800a70c:	61f8      	str	r0, [r7, #28]
 800a70e:	e005      	b.n	800a71c <osSemaphoreNew+0x9c>
          #endif
        }
        else {
          #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateBinary();
 800a710:	2203      	movs	r2, #3
 800a712:	2100      	movs	r1, #0
 800a714:	2001      	movs	r0, #1
 800a716:	f000 fb1d 	bl	800ad54 <xQueueGenericCreate>
 800a71a:	61f8      	str	r0, [r7, #28]
          #endif
        }

        if ((hSemaphore != NULL) && (initial_count != 0U)) {
 800a71c:	69fb      	ldr	r3, [r7, #28]
 800a71e:	2b00      	cmp	r3, #0
 800a720:	d022      	beq.n	800a768 <osSemaphoreNew+0xe8>
 800a722:	68bb      	ldr	r3, [r7, #8]
 800a724:	2b00      	cmp	r3, #0
 800a726:	d01f      	beq.n	800a768 <osSemaphoreNew+0xe8>
          if (xSemaphoreGive (hSemaphore) != pdPASS) {
 800a728:	2300      	movs	r3, #0
 800a72a:	2200      	movs	r2, #0
 800a72c:	2100      	movs	r1, #0
 800a72e:	69f8      	ldr	r0, [r7, #28]
 800a730:	f000 fbd8 	bl	800aee4 <xQueueGenericSend>
 800a734:	4603      	mov	r3, r0
 800a736:	2b01      	cmp	r3, #1
 800a738:	d016      	beq.n	800a768 <osSemaphoreNew+0xe8>
            vSemaphoreDelete (hSemaphore);
 800a73a:	69f8      	ldr	r0, [r7, #28]
 800a73c:	f000 fed8 	bl	800b4f0 <vQueueDelete>
            hSemaphore = NULL;
 800a740:	2300      	movs	r3, #0
 800a742:	61fb      	str	r3, [r7, #28]
 800a744:	e010      	b.n	800a768 <osSemaphoreNew+0xe8>
          }
        }
      }
      else {
        if (mem == 1) {
 800a746:	69bb      	ldr	r3, [r7, #24]
 800a748:	2b01      	cmp	r3, #1
 800a74a:	d108      	bne.n	800a75e <osSemaphoreNew+0xde>
          #if (configSUPPORT_STATIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateCountingStatic (max_count, initial_count, (StaticSemaphore_t *)attr->cb_mem);
 800a74c:	687b      	ldr	r3, [r7, #4]
 800a74e:	689b      	ldr	r3, [r3, #8]
 800a750:	461a      	mov	r2, r3
 800a752:	68b9      	ldr	r1, [r7, #8]
 800a754:	68f8      	ldr	r0, [r7, #12]
 800a756:	f000 fb5a 	bl	800ae0e <xQueueCreateCountingSemaphoreStatic>
 800a75a:	61f8      	str	r0, [r7, #28]
 800a75c:	e004      	b.n	800a768 <osSemaphoreNew+0xe8>
          #endif
        }
        else {
          #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateCounting (max_count, initial_count);
 800a75e:	68b9      	ldr	r1, [r7, #8]
 800a760:	68f8      	ldr	r0, [r7, #12]
 800a762:	f000 fb8b 	bl	800ae7c <xQueueCreateCountingSemaphore>
 800a766:	61f8      	str	r0, [r7, #28]
          #endif
        }
      }
      
      #if (configQUEUE_REGISTRY_SIZE > 0)
      if (hSemaphore != NULL) {
 800a768:	69fb      	ldr	r3, [r7, #28]
 800a76a:	2b00      	cmp	r3, #0
 800a76c:	d00c      	beq.n	800a788 <osSemaphoreNew+0x108>
        if (attr != NULL) {
 800a76e:	687b      	ldr	r3, [r7, #4]
 800a770:	2b00      	cmp	r3, #0
 800a772:	d003      	beq.n	800a77c <osSemaphoreNew+0xfc>
          name = attr->name;
 800a774:	687b      	ldr	r3, [r7, #4]
 800a776:	681b      	ldr	r3, [r3, #0]
 800a778:	617b      	str	r3, [r7, #20]
 800a77a:	e001      	b.n	800a780 <osSemaphoreNew+0x100>
        } else {
          name = NULL;
 800a77c:	2300      	movs	r3, #0
 800a77e:	617b      	str	r3, [r7, #20]
        }
        vQueueAddToRegistry (hSemaphore, name);
 800a780:	6979      	ldr	r1, [r7, #20]
 800a782:	69f8      	ldr	r0, [r7, #28]
 800a784:	f000 ffe8 	bl	800b758 <vQueueAddToRegistry>
      }
      #endif
    }
  }

  return ((osSemaphoreId_t)hSemaphore);
 800a788:	69fb      	ldr	r3, [r7, #28]
}
 800a78a:	4618      	mov	r0, r3
 800a78c:	3720      	adds	r7, #32
 800a78e:	46bd      	mov	sp, r7
 800a790:	bd80      	pop	{r7, pc}
	...

0800a794 <osSemaphoreRelease>:
  }

  return (stat);
}

osStatus_t osSemaphoreRelease (osSemaphoreId_t semaphore_id) {
 800a794:	b580      	push	{r7, lr}
 800a796:	b086      	sub	sp, #24
 800a798:	af00      	add	r7, sp, #0
 800a79a:	6078      	str	r0, [r7, #4]
  SemaphoreHandle_t hSemaphore = (SemaphoreHandle_t)semaphore_id;
 800a79c:	687b      	ldr	r3, [r7, #4]
 800a79e:	613b      	str	r3, [r7, #16]
  osStatus_t stat;
  BaseType_t yield;

  stat = osOK;
 800a7a0:	2300      	movs	r3, #0
 800a7a2:	617b      	str	r3, [r7, #20]

  if (hSemaphore == NULL) {
 800a7a4:	693b      	ldr	r3, [r7, #16]
 800a7a6:	2b00      	cmp	r3, #0
 800a7a8:	d103      	bne.n	800a7b2 <osSemaphoreRelease+0x1e>
    stat = osErrorParameter;
 800a7aa:	f06f 0303 	mvn.w	r3, #3
 800a7ae:	617b      	str	r3, [r7, #20]
 800a7b0:	e02c      	b.n	800a80c <osSemaphoreRelease+0x78>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800a7b2:	f3ef 8305 	mrs	r3, IPSR
 800a7b6:	60fb      	str	r3, [r7, #12]
  return(result);
 800a7b8:	68fb      	ldr	r3, [r7, #12]
  }
  else if (IS_IRQ()) {
 800a7ba:	2b00      	cmp	r3, #0
 800a7bc:	d01a      	beq.n	800a7f4 <osSemaphoreRelease+0x60>
    yield = pdFALSE;
 800a7be:	2300      	movs	r3, #0
 800a7c0:	60bb      	str	r3, [r7, #8]

    if (xSemaphoreGiveFromISR (hSemaphore, &yield) != pdTRUE) {
 800a7c2:	f107 0308 	add.w	r3, r7, #8
 800a7c6:	4619      	mov	r1, r3
 800a7c8:	6938      	ldr	r0, [r7, #16]
 800a7ca:	f000 fd24 	bl	800b216 <xQueueGiveFromISR>
 800a7ce:	4603      	mov	r3, r0
 800a7d0:	2b01      	cmp	r3, #1
 800a7d2:	d003      	beq.n	800a7dc <osSemaphoreRelease+0x48>
      stat = osErrorResource;
 800a7d4:	f06f 0302 	mvn.w	r3, #2
 800a7d8:	617b      	str	r3, [r7, #20]
 800a7da:	e017      	b.n	800a80c <osSemaphoreRelease+0x78>
    } else {
      portYIELD_FROM_ISR (yield);
 800a7dc:	68bb      	ldr	r3, [r7, #8]
 800a7de:	2b00      	cmp	r3, #0
 800a7e0:	d014      	beq.n	800a80c <osSemaphoreRelease+0x78>
 800a7e2:	4b0d      	ldr	r3, [pc, #52]	; (800a818 <osSemaphoreRelease+0x84>)
 800a7e4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a7e8:	601a      	str	r2, [r3, #0]
 800a7ea:	f3bf 8f4f 	dsb	sy
 800a7ee:	f3bf 8f6f 	isb	sy
 800a7f2:	e00b      	b.n	800a80c <osSemaphoreRelease+0x78>
    }
  }
  else {
    if (xSemaphoreGive (hSemaphore) != pdPASS) {
 800a7f4:	2300      	movs	r3, #0
 800a7f6:	2200      	movs	r2, #0
 800a7f8:	2100      	movs	r1, #0
 800a7fa:	6938      	ldr	r0, [r7, #16]
 800a7fc:	f000 fb72 	bl	800aee4 <xQueueGenericSend>
 800a800:	4603      	mov	r3, r0
 800a802:	2b01      	cmp	r3, #1
 800a804:	d002      	beq.n	800a80c <osSemaphoreRelease+0x78>
      stat = osErrorResource;
 800a806:	f06f 0302 	mvn.w	r3, #2
 800a80a:	617b      	str	r3, [r7, #20]
    }
  }

  return (stat);
 800a80c:	697b      	ldr	r3, [r7, #20]
}
 800a80e:	4618      	mov	r0, r3
 800a810:	3718      	adds	r7, #24
 800a812:	46bd      	mov	sp, r7
 800a814:	bd80      	pop	{r7, pc}
 800a816:	bf00      	nop
 800a818:	e000ed04 	.word	0xe000ed04

0800a81c <osMessageQueueNew>:
  return (stat);
}

/*---------------------------------------------------------------------------*/

osMessageQueueId_t osMessageQueueNew (uint32_t msg_count, uint32_t msg_size, const osMessageQueueAttr_t *attr) {
 800a81c:	b580      	push	{r7, lr}
 800a81e:	b08a      	sub	sp, #40	; 0x28
 800a820:	af02      	add	r7, sp, #8
 800a822:	60f8      	str	r0, [r7, #12]
 800a824:	60b9      	str	r1, [r7, #8]
 800a826:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hQueue = NULL;
 800a828:	2300      	movs	r3, #0
 800a82a:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800a82c:	f3ef 8305 	mrs	r3, IPSR
 800a830:	613b      	str	r3, [r7, #16]
  return(result);
 800a832:	693b      	ldr	r3, [r7, #16]

  if (!IS_IRQ() && (msg_count > 0U) && (msg_size > 0U)) {
 800a834:	2b00      	cmp	r3, #0
 800a836:	d15f      	bne.n	800a8f8 <osMessageQueueNew+0xdc>
 800a838:	68fb      	ldr	r3, [r7, #12]
 800a83a:	2b00      	cmp	r3, #0
 800a83c:	d05c      	beq.n	800a8f8 <osMessageQueueNew+0xdc>
 800a83e:	68bb      	ldr	r3, [r7, #8]
 800a840:	2b00      	cmp	r3, #0
 800a842:	d059      	beq.n	800a8f8 <osMessageQueueNew+0xdc>
    mem = -1;
 800a844:	f04f 33ff 	mov.w	r3, #4294967295
 800a848:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 800a84a:	687b      	ldr	r3, [r7, #4]
 800a84c:	2b00      	cmp	r3, #0
 800a84e:	d029      	beq.n	800a8a4 <osMessageQueueNew+0x88>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 800a850:	687b      	ldr	r3, [r7, #4]
 800a852:	689b      	ldr	r3, [r3, #8]
 800a854:	2b00      	cmp	r3, #0
 800a856:	d012      	beq.n	800a87e <osMessageQueueNew+0x62>
 800a858:	687b      	ldr	r3, [r7, #4]
 800a85a:	68db      	ldr	r3, [r3, #12]
 800a85c:	2b4f      	cmp	r3, #79	; 0x4f
 800a85e:	d90e      	bls.n	800a87e <osMessageQueueNew+0x62>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 800a860:	687b      	ldr	r3, [r7, #4]
 800a862:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 800a864:	2b00      	cmp	r3, #0
 800a866:	d00a      	beq.n	800a87e <osMessageQueueNew+0x62>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 800a868:	687b      	ldr	r3, [r7, #4]
 800a86a:	695a      	ldr	r2, [r3, #20]
 800a86c:	68fb      	ldr	r3, [r7, #12]
 800a86e:	68b9      	ldr	r1, [r7, #8]
 800a870:	fb01 f303 	mul.w	r3, r1, r3
 800a874:	429a      	cmp	r2, r3
 800a876:	d302      	bcc.n	800a87e <osMessageQueueNew+0x62>
        mem = 1;
 800a878:	2301      	movs	r3, #1
 800a87a:	61bb      	str	r3, [r7, #24]
 800a87c:	e014      	b.n	800a8a8 <osMessageQueueNew+0x8c>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 800a87e:	687b      	ldr	r3, [r7, #4]
 800a880:	689b      	ldr	r3, [r3, #8]
 800a882:	2b00      	cmp	r3, #0
 800a884:	d110      	bne.n	800a8a8 <osMessageQueueNew+0x8c>
 800a886:	687b      	ldr	r3, [r7, #4]
 800a888:	68db      	ldr	r3, [r3, #12]
 800a88a:	2b00      	cmp	r3, #0
 800a88c:	d10c      	bne.n	800a8a8 <osMessageQueueNew+0x8c>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 800a88e:	687b      	ldr	r3, [r7, #4]
 800a890:	691b      	ldr	r3, [r3, #16]
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 800a892:	2b00      	cmp	r3, #0
 800a894:	d108      	bne.n	800a8a8 <osMessageQueueNew+0x8c>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 800a896:	687b      	ldr	r3, [r7, #4]
 800a898:	695b      	ldr	r3, [r3, #20]
 800a89a:	2b00      	cmp	r3, #0
 800a89c:	d104      	bne.n	800a8a8 <osMessageQueueNew+0x8c>
          mem = 0;
 800a89e:	2300      	movs	r3, #0
 800a8a0:	61bb      	str	r3, [r7, #24]
 800a8a2:	e001      	b.n	800a8a8 <osMessageQueueNew+0x8c>
        }
      }
    }
    else {
      mem = 0;
 800a8a4:	2300      	movs	r3, #0
 800a8a6:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 800a8a8:	69bb      	ldr	r3, [r7, #24]
 800a8aa:	2b01      	cmp	r3, #1
 800a8ac:	d10b      	bne.n	800a8c6 <osMessageQueueNew+0xaa>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hQueue = xQueueCreateStatic (msg_count, msg_size, attr->mq_mem, attr->cb_mem);
 800a8ae:	687b      	ldr	r3, [r7, #4]
 800a8b0:	691a      	ldr	r2, [r3, #16]
 800a8b2:	687b      	ldr	r3, [r7, #4]
 800a8b4:	689b      	ldr	r3, [r3, #8]
 800a8b6:	2100      	movs	r1, #0
 800a8b8:	9100      	str	r1, [sp, #0]
 800a8ba:	68b9      	ldr	r1, [r7, #8]
 800a8bc:	68f8      	ldr	r0, [r7, #12]
 800a8be:	f000 f9d1 	bl	800ac64 <xQueueGenericCreateStatic>
 800a8c2:	61f8      	str	r0, [r7, #28]
 800a8c4:	e008      	b.n	800a8d8 <osMessageQueueNew+0xbc>
      #endif
    }
    else {
      if (mem == 0) {
 800a8c6:	69bb      	ldr	r3, [r7, #24]
 800a8c8:	2b00      	cmp	r3, #0
 800a8ca:	d105      	bne.n	800a8d8 <osMessageQueueNew+0xbc>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          hQueue = xQueueCreate (msg_count, msg_size);
 800a8cc:	2200      	movs	r2, #0
 800a8ce:	68b9      	ldr	r1, [r7, #8]
 800a8d0:	68f8      	ldr	r0, [r7, #12]
 800a8d2:	f000 fa3f 	bl	800ad54 <xQueueGenericCreate>
 800a8d6:	61f8      	str	r0, [r7, #28]
        #endif
      }
    }

    #if (configQUEUE_REGISTRY_SIZE > 0)
    if (hQueue != NULL) {
 800a8d8:	69fb      	ldr	r3, [r7, #28]
 800a8da:	2b00      	cmp	r3, #0
 800a8dc:	d00c      	beq.n	800a8f8 <osMessageQueueNew+0xdc>
      if (attr != NULL) {
 800a8de:	687b      	ldr	r3, [r7, #4]
 800a8e0:	2b00      	cmp	r3, #0
 800a8e2:	d003      	beq.n	800a8ec <osMessageQueueNew+0xd0>
        name = attr->name;
 800a8e4:	687b      	ldr	r3, [r7, #4]
 800a8e6:	681b      	ldr	r3, [r3, #0]
 800a8e8:	617b      	str	r3, [r7, #20]
 800a8ea:	e001      	b.n	800a8f0 <osMessageQueueNew+0xd4>
      } else {
        name = NULL;
 800a8ec:	2300      	movs	r3, #0
 800a8ee:	617b      	str	r3, [r7, #20]
      }
      vQueueAddToRegistry (hQueue, name);
 800a8f0:	6979      	ldr	r1, [r7, #20]
 800a8f2:	69f8      	ldr	r0, [r7, #28]
 800a8f4:	f000 ff30 	bl	800b758 <vQueueAddToRegistry>
    }
    #endif

  }

  return ((osMessageQueueId_t)hQueue);
 800a8f8:	69fb      	ldr	r3, [r7, #28]
}
 800a8fa:	4618      	mov	r0, r3
 800a8fc:	3720      	adds	r7, #32
 800a8fe:	46bd      	mov	sp, r7
 800a900:	bd80      	pop	{r7, pc}
	...

0800a904 <osMessageQueuePut>:

osStatus_t osMessageQueuePut (osMessageQueueId_t mq_id, const void *msg_ptr, uint8_t msg_prio, uint32_t timeout) {
 800a904:	b580      	push	{r7, lr}
 800a906:	b088      	sub	sp, #32
 800a908:	af00      	add	r7, sp, #0
 800a90a:	60f8      	str	r0, [r7, #12]
 800a90c:	60b9      	str	r1, [r7, #8]
 800a90e:	603b      	str	r3, [r7, #0]
 800a910:	4613      	mov	r3, r2
 800a912:	71fb      	strb	r3, [r7, #7]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 800a914:	68fb      	ldr	r3, [r7, #12]
 800a916:	61bb      	str	r3, [r7, #24]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 800a918:	2300      	movs	r3, #0
 800a91a:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800a91c:	f3ef 8305 	mrs	r3, IPSR
 800a920:	617b      	str	r3, [r7, #20]
  return(result);
 800a922:	697b      	ldr	r3, [r7, #20]

  if (IS_IRQ()) {
 800a924:	2b00      	cmp	r3, #0
 800a926:	d028      	beq.n	800a97a <osMessageQueuePut+0x76>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 800a928:	69bb      	ldr	r3, [r7, #24]
 800a92a:	2b00      	cmp	r3, #0
 800a92c:	d005      	beq.n	800a93a <osMessageQueuePut+0x36>
 800a92e:	68bb      	ldr	r3, [r7, #8]
 800a930:	2b00      	cmp	r3, #0
 800a932:	d002      	beq.n	800a93a <osMessageQueuePut+0x36>
 800a934:	683b      	ldr	r3, [r7, #0]
 800a936:	2b00      	cmp	r3, #0
 800a938:	d003      	beq.n	800a942 <osMessageQueuePut+0x3e>
      stat = osErrorParameter;
 800a93a:	f06f 0303 	mvn.w	r3, #3
 800a93e:	61fb      	str	r3, [r7, #28]
 800a940:	e038      	b.n	800a9b4 <osMessageQueuePut+0xb0>
    }
    else {
      yield = pdFALSE;
 800a942:	2300      	movs	r3, #0
 800a944:	613b      	str	r3, [r7, #16]

      if (xQueueSendToBackFromISR (hQueue, msg_ptr, &yield) != pdTRUE) {
 800a946:	f107 0210 	add.w	r2, r7, #16
 800a94a:	2300      	movs	r3, #0
 800a94c:	68b9      	ldr	r1, [r7, #8]
 800a94e:	69b8      	ldr	r0, [r7, #24]
 800a950:	f000 fbc6 	bl	800b0e0 <xQueueGenericSendFromISR>
 800a954:	4603      	mov	r3, r0
 800a956:	2b01      	cmp	r3, #1
 800a958:	d003      	beq.n	800a962 <osMessageQueuePut+0x5e>
        stat = osErrorResource;
 800a95a:	f06f 0302 	mvn.w	r3, #2
 800a95e:	61fb      	str	r3, [r7, #28]
 800a960:	e028      	b.n	800a9b4 <osMessageQueuePut+0xb0>
      } else {
        portYIELD_FROM_ISR (yield);
 800a962:	693b      	ldr	r3, [r7, #16]
 800a964:	2b00      	cmp	r3, #0
 800a966:	d025      	beq.n	800a9b4 <osMessageQueuePut+0xb0>
 800a968:	4b15      	ldr	r3, [pc, #84]	; (800a9c0 <osMessageQueuePut+0xbc>)
 800a96a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a96e:	601a      	str	r2, [r3, #0]
 800a970:	f3bf 8f4f 	dsb	sy
 800a974:	f3bf 8f6f 	isb	sy
 800a978:	e01c      	b.n	800a9b4 <osMessageQueuePut+0xb0>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 800a97a:	69bb      	ldr	r3, [r7, #24]
 800a97c:	2b00      	cmp	r3, #0
 800a97e:	d002      	beq.n	800a986 <osMessageQueuePut+0x82>
 800a980:	68bb      	ldr	r3, [r7, #8]
 800a982:	2b00      	cmp	r3, #0
 800a984:	d103      	bne.n	800a98e <osMessageQueuePut+0x8a>
      stat = osErrorParameter;
 800a986:	f06f 0303 	mvn.w	r3, #3
 800a98a:	61fb      	str	r3, [r7, #28]
 800a98c:	e012      	b.n	800a9b4 <osMessageQueuePut+0xb0>
    }
    else {
      if (xQueueSendToBack (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 800a98e:	2300      	movs	r3, #0
 800a990:	683a      	ldr	r2, [r7, #0]
 800a992:	68b9      	ldr	r1, [r7, #8]
 800a994:	69b8      	ldr	r0, [r7, #24]
 800a996:	f000 faa5 	bl	800aee4 <xQueueGenericSend>
 800a99a:	4603      	mov	r3, r0
 800a99c:	2b01      	cmp	r3, #1
 800a99e:	d009      	beq.n	800a9b4 <osMessageQueuePut+0xb0>
        if (timeout != 0U) {
 800a9a0:	683b      	ldr	r3, [r7, #0]
 800a9a2:	2b00      	cmp	r3, #0
 800a9a4:	d003      	beq.n	800a9ae <osMessageQueuePut+0xaa>
          stat = osErrorTimeout;
 800a9a6:	f06f 0301 	mvn.w	r3, #1
 800a9aa:	61fb      	str	r3, [r7, #28]
 800a9ac:	e002      	b.n	800a9b4 <osMessageQueuePut+0xb0>
        } else {
          stat = osErrorResource;
 800a9ae:	f06f 0302 	mvn.w	r3, #2
 800a9b2:	61fb      	str	r3, [r7, #28]
        }
      }
    }
  }

  return (stat);
 800a9b4:	69fb      	ldr	r3, [r7, #28]
}
 800a9b6:	4618      	mov	r0, r3
 800a9b8:	3720      	adds	r7, #32
 800a9ba:	46bd      	mov	sp, r7
 800a9bc:	bd80      	pop	{r7, pc}
 800a9be:	bf00      	nop
 800a9c0:	e000ed04 	.word	0xe000ed04

0800a9c4 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 800a9c4:	b480      	push	{r7}
 800a9c6:	b085      	sub	sp, #20
 800a9c8:	af00      	add	r7, sp, #0
 800a9ca:	60f8      	str	r0, [r7, #12]
 800a9cc:	60b9      	str	r1, [r7, #8]
 800a9ce:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 800a9d0:	68fb      	ldr	r3, [r7, #12]
 800a9d2:	4a07      	ldr	r2, [pc, #28]	; (800a9f0 <vApplicationGetIdleTaskMemory+0x2c>)
 800a9d4:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 800a9d6:	68bb      	ldr	r3, [r7, #8]
 800a9d8:	4a06      	ldr	r2, [pc, #24]	; (800a9f4 <vApplicationGetIdleTaskMemory+0x30>)
 800a9da:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 800a9dc:	687b      	ldr	r3, [r7, #4]
 800a9de:	2280      	movs	r2, #128	; 0x80
 800a9e0:	601a      	str	r2, [r3, #0]
}
 800a9e2:	bf00      	nop
 800a9e4:	3714      	adds	r7, #20
 800a9e6:	46bd      	mov	sp, r7
 800a9e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a9ec:	4770      	bx	lr
 800a9ee:	bf00      	nop
 800a9f0:	20000694 	.word	0x20000694
 800a9f4:	2000073c 	.word	0x2000073c

0800a9f8 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 800a9f8:	b480      	push	{r7}
 800a9fa:	b085      	sub	sp, #20
 800a9fc:	af00      	add	r7, sp, #0
 800a9fe:	60f8      	str	r0, [r7, #12]
 800aa00:	60b9      	str	r1, [r7, #8]
 800aa02:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 800aa04:	68fb      	ldr	r3, [r7, #12]
 800aa06:	4a07      	ldr	r2, [pc, #28]	; (800aa24 <vApplicationGetTimerTaskMemory+0x2c>)
 800aa08:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 800aa0a:	68bb      	ldr	r3, [r7, #8]
 800aa0c:	4a06      	ldr	r2, [pc, #24]	; (800aa28 <vApplicationGetTimerTaskMemory+0x30>)
 800aa0e:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 800aa10:	687b      	ldr	r3, [r7, #4]
 800aa12:	f44f 7280 	mov.w	r2, #256	; 0x100
 800aa16:	601a      	str	r2, [r3, #0]
}
 800aa18:	bf00      	nop
 800aa1a:	3714      	adds	r7, #20
 800aa1c:	46bd      	mov	sp, r7
 800aa1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa22:	4770      	bx	lr
 800aa24:	2000093c 	.word	0x2000093c
 800aa28:	200009e4 	.word	0x200009e4

0800aa2c <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 800aa2c:	b480      	push	{r7}
 800aa2e:	b083      	sub	sp, #12
 800aa30:	af00      	add	r7, sp, #0
 800aa32:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800aa34:	687b      	ldr	r3, [r7, #4]
 800aa36:	f103 0208 	add.w	r2, r3, #8
 800aa3a:	687b      	ldr	r3, [r7, #4]
 800aa3c:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800aa3e:	687b      	ldr	r3, [r7, #4]
 800aa40:	f04f 32ff 	mov.w	r2, #4294967295
 800aa44:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800aa46:	687b      	ldr	r3, [r7, #4]
 800aa48:	f103 0208 	add.w	r2, r3, #8
 800aa4c:	687b      	ldr	r3, [r7, #4]
 800aa4e:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800aa50:	687b      	ldr	r3, [r7, #4]
 800aa52:	f103 0208 	add.w	r2, r3, #8
 800aa56:	687b      	ldr	r3, [r7, #4]
 800aa58:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800aa5a:	687b      	ldr	r3, [r7, #4]
 800aa5c:	2200      	movs	r2, #0
 800aa5e:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 800aa60:	bf00      	nop
 800aa62:	370c      	adds	r7, #12
 800aa64:	46bd      	mov	sp, r7
 800aa66:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa6a:	4770      	bx	lr

0800aa6c <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 800aa6c:	b480      	push	{r7}
 800aa6e:	b083      	sub	sp, #12
 800aa70:	af00      	add	r7, sp, #0
 800aa72:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 800aa74:	687b      	ldr	r3, [r7, #4]
 800aa76:	2200      	movs	r2, #0
 800aa78:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800aa7a:	bf00      	nop
 800aa7c:	370c      	adds	r7, #12
 800aa7e:	46bd      	mov	sp, r7
 800aa80:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa84:	4770      	bx	lr

0800aa86 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800aa86:	b480      	push	{r7}
 800aa88:	b085      	sub	sp, #20
 800aa8a:	af00      	add	r7, sp, #0
 800aa8c:	6078      	str	r0, [r7, #4]
 800aa8e:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 800aa90:	687b      	ldr	r3, [r7, #4]
 800aa92:	685b      	ldr	r3, [r3, #4]
 800aa94:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800aa96:	683b      	ldr	r3, [r7, #0]
 800aa98:	68fa      	ldr	r2, [r7, #12]
 800aa9a:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800aa9c:	68fb      	ldr	r3, [r7, #12]
 800aa9e:	689a      	ldr	r2, [r3, #8]
 800aaa0:	683b      	ldr	r3, [r7, #0]
 800aaa2:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 800aaa4:	68fb      	ldr	r3, [r7, #12]
 800aaa6:	689b      	ldr	r3, [r3, #8]
 800aaa8:	683a      	ldr	r2, [r7, #0]
 800aaaa:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 800aaac:	68fb      	ldr	r3, [r7, #12]
 800aaae:	683a      	ldr	r2, [r7, #0]
 800aab0:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 800aab2:	683b      	ldr	r3, [r7, #0]
 800aab4:	687a      	ldr	r2, [r7, #4]
 800aab6:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800aab8:	687b      	ldr	r3, [r7, #4]
 800aaba:	681b      	ldr	r3, [r3, #0]
 800aabc:	1c5a      	adds	r2, r3, #1
 800aabe:	687b      	ldr	r3, [r7, #4]
 800aac0:	601a      	str	r2, [r3, #0]
}
 800aac2:	bf00      	nop
 800aac4:	3714      	adds	r7, #20
 800aac6:	46bd      	mov	sp, r7
 800aac8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aacc:	4770      	bx	lr

0800aace <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800aace:	b480      	push	{r7}
 800aad0:	b085      	sub	sp, #20
 800aad2:	af00      	add	r7, sp, #0
 800aad4:	6078      	str	r0, [r7, #4]
 800aad6:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800aad8:	683b      	ldr	r3, [r7, #0]
 800aada:	681b      	ldr	r3, [r3, #0]
 800aadc:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800aade:	68bb      	ldr	r3, [r7, #8]
 800aae0:	f1b3 3fff 	cmp.w	r3, #4294967295
 800aae4:	d103      	bne.n	800aaee <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800aae6:	687b      	ldr	r3, [r7, #4]
 800aae8:	691b      	ldr	r3, [r3, #16]
 800aaea:	60fb      	str	r3, [r7, #12]
 800aaec:	e00c      	b.n	800ab08 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 800aaee:	687b      	ldr	r3, [r7, #4]
 800aaf0:	3308      	adds	r3, #8
 800aaf2:	60fb      	str	r3, [r7, #12]
 800aaf4:	e002      	b.n	800aafc <vListInsert+0x2e>
 800aaf6:	68fb      	ldr	r3, [r7, #12]
 800aaf8:	685b      	ldr	r3, [r3, #4]
 800aafa:	60fb      	str	r3, [r7, #12]
 800aafc:	68fb      	ldr	r3, [r7, #12]
 800aafe:	685b      	ldr	r3, [r3, #4]
 800ab00:	681b      	ldr	r3, [r3, #0]
 800ab02:	68ba      	ldr	r2, [r7, #8]
 800ab04:	429a      	cmp	r2, r3
 800ab06:	d2f6      	bcs.n	800aaf6 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 800ab08:	68fb      	ldr	r3, [r7, #12]
 800ab0a:	685a      	ldr	r2, [r3, #4]
 800ab0c:	683b      	ldr	r3, [r7, #0]
 800ab0e:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800ab10:	683b      	ldr	r3, [r7, #0]
 800ab12:	685b      	ldr	r3, [r3, #4]
 800ab14:	683a      	ldr	r2, [r7, #0]
 800ab16:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 800ab18:	683b      	ldr	r3, [r7, #0]
 800ab1a:	68fa      	ldr	r2, [r7, #12]
 800ab1c:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 800ab1e:	68fb      	ldr	r3, [r7, #12]
 800ab20:	683a      	ldr	r2, [r7, #0]
 800ab22:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 800ab24:	683b      	ldr	r3, [r7, #0]
 800ab26:	687a      	ldr	r2, [r7, #4]
 800ab28:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800ab2a:	687b      	ldr	r3, [r7, #4]
 800ab2c:	681b      	ldr	r3, [r3, #0]
 800ab2e:	1c5a      	adds	r2, r3, #1
 800ab30:	687b      	ldr	r3, [r7, #4]
 800ab32:	601a      	str	r2, [r3, #0]
}
 800ab34:	bf00      	nop
 800ab36:	3714      	adds	r7, #20
 800ab38:	46bd      	mov	sp, r7
 800ab3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab3e:	4770      	bx	lr

0800ab40 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 800ab40:	b480      	push	{r7}
 800ab42:	b085      	sub	sp, #20
 800ab44:	af00      	add	r7, sp, #0
 800ab46:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 800ab48:	687b      	ldr	r3, [r7, #4]
 800ab4a:	691b      	ldr	r3, [r3, #16]
 800ab4c:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800ab4e:	687b      	ldr	r3, [r7, #4]
 800ab50:	685b      	ldr	r3, [r3, #4]
 800ab52:	687a      	ldr	r2, [r7, #4]
 800ab54:	6892      	ldr	r2, [r2, #8]
 800ab56:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800ab58:	687b      	ldr	r3, [r7, #4]
 800ab5a:	689b      	ldr	r3, [r3, #8]
 800ab5c:	687a      	ldr	r2, [r7, #4]
 800ab5e:	6852      	ldr	r2, [r2, #4]
 800ab60:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800ab62:	68fb      	ldr	r3, [r7, #12]
 800ab64:	685b      	ldr	r3, [r3, #4]
 800ab66:	687a      	ldr	r2, [r7, #4]
 800ab68:	429a      	cmp	r2, r3
 800ab6a:	d103      	bne.n	800ab74 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 800ab6c:	687b      	ldr	r3, [r7, #4]
 800ab6e:	689a      	ldr	r2, [r3, #8]
 800ab70:	68fb      	ldr	r3, [r7, #12]
 800ab72:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 800ab74:	687b      	ldr	r3, [r7, #4]
 800ab76:	2200      	movs	r2, #0
 800ab78:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800ab7a:	68fb      	ldr	r3, [r7, #12]
 800ab7c:	681b      	ldr	r3, [r3, #0]
 800ab7e:	1e5a      	subs	r2, r3, #1
 800ab80:	68fb      	ldr	r3, [r7, #12]
 800ab82:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 800ab84:	68fb      	ldr	r3, [r7, #12]
 800ab86:	681b      	ldr	r3, [r3, #0]
}
 800ab88:	4618      	mov	r0, r3
 800ab8a:	3714      	adds	r7, #20
 800ab8c:	46bd      	mov	sp, r7
 800ab8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab92:	4770      	bx	lr

0800ab94 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 800ab94:	b580      	push	{r7, lr}
 800ab96:	b084      	sub	sp, #16
 800ab98:	af00      	add	r7, sp, #0
 800ab9a:	6078      	str	r0, [r7, #4]
 800ab9c:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 800ab9e:	687b      	ldr	r3, [r7, #4]
 800aba0:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800aba2:	68fb      	ldr	r3, [r7, #12]
 800aba4:	2b00      	cmp	r3, #0
 800aba6:	d10a      	bne.n	800abbe <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 800aba8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800abac:	f383 8811 	msr	BASEPRI, r3
 800abb0:	f3bf 8f6f 	isb	sy
 800abb4:	f3bf 8f4f 	dsb	sy
 800abb8:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 800abba:	bf00      	nop
 800abbc:	e7fe      	b.n	800abbc <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 800abbe:	f002 f9c1 	bl	800cf44 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800abc2:	68fb      	ldr	r3, [r7, #12]
 800abc4:	681a      	ldr	r2, [r3, #0]
 800abc6:	68fb      	ldr	r3, [r7, #12]
 800abc8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800abca:	68f9      	ldr	r1, [r7, #12]
 800abcc:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800abce:	fb01 f303 	mul.w	r3, r1, r3
 800abd2:	441a      	add	r2, r3
 800abd4:	68fb      	ldr	r3, [r7, #12]
 800abd6:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800abd8:	68fb      	ldr	r3, [r7, #12]
 800abda:	2200      	movs	r2, #0
 800abdc:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 800abde:	68fb      	ldr	r3, [r7, #12]
 800abe0:	681a      	ldr	r2, [r3, #0]
 800abe2:	68fb      	ldr	r3, [r7, #12]
 800abe4:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800abe6:	68fb      	ldr	r3, [r7, #12]
 800abe8:	681a      	ldr	r2, [r3, #0]
 800abea:	68fb      	ldr	r3, [r7, #12]
 800abec:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800abee:	3b01      	subs	r3, #1
 800abf0:	68f9      	ldr	r1, [r7, #12]
 800abf2:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800abf4:	fb01 f303 	mul.w	r3, r1, r3
 800abf8:	441a      	add	r2, r3
 800abfa:	68fb      	ldr	r3, [r7, #12]
 800abfc:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 800abfe:	68fb      	ldr	r3, [r7, #12]
 800ac00:	22ff      	movs	r2, #255	; 0xff
 800ac02:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 800ac06:	68fb      	ldr	r3, [r7, #12]
 800ac08:	22ff      	movs	r2, #255	; 0xff
 800ac0a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 800ac0e:	683b      	ldr	r3, [r7, #0]
 800ac10:	2b00      	cmp	r3, #0
 800ac12:	d114      	bne.n	800ac3e <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800ac14:	68fb      	ldr	r3, [r7, #12]
 800ac16:	691b      	ldr	r3, [r3, #16]
 800ac18:	2b00      	cmp	r3, #0
 800ac1a:	d01a      	beq.n	800ac52 <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800ac1c:	68fb      	ldr	r3, [r7, #12]
 800ac1e:	3310      	adds	r3, #16
 800ac20:	4618      	mov	r0, r3
 800ac22:	f001 fa73 	bl	800c10c <xTaskRemoveFromEventList>
 800ac26:	4603      	mov	r3, r0
 800ac28:	2b00      	cmp	r3, #0
 800ac2a:	d012      	beq.n	800ac52 <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 800ac2c:	4b0c      	ldr	r3, [pc, #48]	; (800ac60 <xQueueGenericReset+0xcc>)
 800ac2e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800ac32:	601a      	str	r2, [r3, #0]
 800ac34:	f3bf 8f4f 	dsb	sy
 800ac38:	f3bf 8f6f 	isb	sy
 800ac3c:	e009      	b.n	800ac52 <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 800ac3e:	68fb      	ldr	r3, [r7, #12]
 800ac40:	3310      	adds	r3, #16
 800ac42:	4618      	mov	r0, r3
 800ac44:	f7ff fef2 	bl	800aa2c <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 800ac48:	68fb      	ldr	r3, [r7, #12]
 800ac4a:	3324      	adds	r3, #36	; 0x24
 800ac4c:	4618      	mov	r0, r3
 800ac4e:	f7ff feed 	bl	800aa2c <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 800ac52:	f002 f9a7 	bl	800cfa4 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 800ac56:	2301      	movs	r3, #1
}
 800ac58:	4618      	mov	r0, r3
 800ac5a:	3710      	adds	r7, #16
 800ac5c:	46bd      	mov	sp, r7
 800ac5e:	bd80      	pop	{r7, pc}
 800ac60:	e000ed04 	.word	0xe000ed04

0800ac64 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 800ac64:	b580      	push	{r7, lr}
 800ac66:	b08e      	sub	sp, #56	; 0x38
 800ac68:	af02      	add	r7, sp, #8
 800ac6a:	60f8      	str	r0, [r7, #12]
 800ac6c:	60b9      	str	r1, [r7, #8]
 800ac6e:	607a      	str	r2, [r7, #4]
 800ac70:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800ac72:	68fb      	ldr	r3, [r7, #12]
 800ac74:	2b00      	cmp	r3, #0
 800ac76:	d10a      	bne.n	800ac8e <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 800ac78:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ac7c:	f383 8811 	msr	BASEPRI, r3
 800ac80:	f3bf 8f6f 	isb	sy
 800ac84:	f3bf 8f4f 	dsb	sy
 800ac88:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800ac8a:	bf00      	nop
 800ac8c:	e7fe      	b.n	800ac8c <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 800ac8e:	683b      	ldr	r3, [r7, #0]
 800ac90:	2b00      	cmp	r3, #0
 800ac92:	d10a      	bne.n	800acaa <xQueueGenericCreateStatic+0x46>
	__asm volatile
 800ac94:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ac98:	f383 8811 	msr	BASEPRI, r3
 800ac9c:	f3bf 8f6f 	isb	sy
 800aca0:	f3bf 8f4f 	dsb	sy
 800aca4:	627b      	str	r3, [r7, #36]	; 0x24
}
 800aca6:	bf00      	nop
 800aca8:	e7fe      	b.n	800aca8 <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 800acaa:	687b      	ldr	r3, [r7, #4]
 800acac:	2b00      	cmp	r3, #0
 800acae:	d002      	beq.n	800acb6 <xQueueGenericCreateStatic+0x52>
 800acb0:	68bb      	ldr	r3, [r7, #8]
 800acb2:	2b00      	cmp	r3, #0
 800acb4:	d001      	beq.n	800acba <xQueueGenericCreateStatic+0x56>
 800acb6:	2301      	movs	r3, #1
 800acb8:	e000      	b.n	800acbc <xQueueGenericCreateStatic+0x58>
 800acba:	2300      	movs	r3, #0
 800acbc:	2b00      	cmp	r3, #0
 800acbe:	d10a      	bne.n	800acd6 <xQueueGenericCreateStatic+0x72>
	__asm volatile
 800acc0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800acc4:	f383 8811 	msr	BASEPRI, r3
 800acc8:	f3bf 8f6f 	isb	sy
 800accc:	f3bf 8f4f 	dsb	sy
 800acd0:	623b      	str	r3, [r7, #32]
}
 800acd2:	bf00      	nop
 800acd4:	e7fe      	b.n	800acd4 <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 800acd6:	687b      	ldr	r3, [r7, #4]
 800acd8:	2b00      	cmp	r3, #0
 800acda:	d102      	bne.n	800ace2 <xQueueGenericCreateStatic+0x7e>
 800acdc:	68bb      	ldr	r3, [r7, #8]
 800acde:	2b00      	cmp	r3, #0
 800ace0:	d101      	bne.n	800ace6 <xQueueGenericCreateStatic+0x82>
 800ace2:	2301      	movs	r3, #1
 800ace4:	e000      	b.n	800ace8 <xQueueGenericCreateStatic+0x84>
 800ace6:	2300      	movs	r3, #0
 800ace8:	2b00      	cmp	r3, #0
 800acea:	d10a      	bne.n	800ad02 <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 800acec:	f04f 0350 	mov.w	r3, #80	; 0x50
 800acf0:	f383 8811 	msr	BASEPRI, r3
 800acf4:	f3bf 8f6f 	isb	sy
 800acf8:	f3bf 8f4f 	dsb	sy
 800acfc:	61fb      	str	r3, [r7, #28]
}
 800acfe:	bf00      	nop
 800ad00:	e7fe      	b.n	800ad00 <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 800ad02:	2350      	movs	r3, #80	; 0x50
 800ad04:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 800ad06:	697b      	ldr	r3, [r7, #20]
 800ad08:	2b50      	cmp	r3, #80	; 0x50
 800ad0a:	d00a      	beq.n	800ad22 <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 800ad0c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ad10:	f383 8811 	msr	BASEPRI, r3
 800ad14:	f3bf 8f6f 	isb	sy
 800ad18:	f3bf 8f4f 	dsb	sy
 800ad1c:	61bb      	str	r3, [r7, #24]
}
 800ad1e:	bf00      	nop
 800ad20:	e7fe      	b.n	800ad20 <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 800ad22:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800ad24:	683b      	ldr	r3, [r7, #0]
 800ad26:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 800ad28:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ad2a:	2b00      	cmp	r3, #0
 800ad2c:	d00d      	beq.n	800ad4a <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 800ad2e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ad30:	2201      	movs	r2, #1
 800ad32:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800ad36:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 800ad3a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ad3c:	9300      	str	r3, [sp, #0]
 800ad3e:	4613      	mov	r3, r2
 800ad40:	687a      	ldr	r2, [r7, #4]
 800ad42:	68b9      	ldr	r1, [r7, #8]
 800ad44:	68f8      	ldr	r0, [r7, #12]
 800ad46:	f000 f83f 	bl	800adc8 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800ad4a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 800ad4c:	4618      	mov	r0, r3
 800ad4e:	3730      	adds	r7, #48	; 0x30
 800ad50:	46bd      	mov	sp, r7
 800ad52:	bd80      	pop	{r7, pc}

0800ad54 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 800ad54:	b580      	push	{r7, lr}
 800ad56:	b08a      	sub	sp, #40	; 0x28
 800ad58:	af02      	add	r7, sp, #8
 800ad5a:	60f8      	str	r0, [r7, #12]
 800ad5c:	60b9      	str	r1, [r7, #8]
 800ad5e:	4613      	mov	r3, r2
 800ad60:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800ad62:	68fb      	ldr	r3, [r7, #12]
 800ad64:	2b00      	cmp	r3, #0
 800ad66:	d10a      	bne.n	800ad7e <xQueueGenericCreate+0x2a>
	__asm volatile
 800ad68:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ad6c:	f383 8811 	msr	BASEPRI, r3
 800ad70:	f3bf 8f6f 	isb	sy
 800ad74:	f3bf 8f4f 	dsb	sy
 800ad78:	613b      	str	r3, [r7, #16]
}
 800ad7a:	bf00      	nop
 800ad7c:	e7fe      	b.n	800ad7c <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800ad7e:	68fb      	ldr	r3, [r7, #12]
 800ad80:	68ba      	ldr	r2, [r7, #8]
 800ad82:	fb02 f303 	mul.w	r3, r2, r3
 800ad86:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 800ad88:	69fb      	ldr	r3, [r7, #28]
 800ad8a:	3350      	adds	r3, #80	; 0x50
 800ad8c:	4618      	mov	r0, r3
 800ad8e:	f002 f9fb 	bl	800d188 <pvPortMalloc>
 800ad92:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 800ad94:	69bb      	ldr	r3, [r7, #24]
 800ad96:	2b00      	cmp	r3, #0
 800ad98:	d011      	beq.n	800adbe <xQueueGenericCreate+0x6a>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 800ad9a:	69bb      	ldr	r3, [r7, #24]
 800ad9c:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800ad9e:	697b      	ldr	r3, [r7, #20]
 800ada0:	3350      	adds	r3, #80	; 0x50
 800ada2:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 800ada4:	69bb      	ldr	r3, [r7, #24]
 800ada6:	2200      	movs	r2, #0
 800ada8:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800adac:	79fa      	ldrb	r2, [r7, #7]
 800adae:	69bb      	ldr	r3, [r7, #24]
 800adb0:	9300      	str	r3, [sp, #0]
 800adb2:	4613      	mov	r3, r2
 800adb4:	697a      	ldr	r2, [r7, #20]
 800adb6:	68b9      	ldr	r1, [r7, #8]
 800adb8:	68f8      	ldr	r0, [r7, #12]
 800adba:	f000 f805 	bl	800adc8 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800adbe:	69bb      	ldr	r3, [r7, #24]
	}
 800adc0:	4618      	mov	r0, r3
 800adc2:	3720      	adds	r7, #32
 800adc4:	46bd      	mov	sp, r7
 800adc6:	bd80      	pop	{r7, pc}

0800adc8 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 800adc8:	b580      	push	{r7, lr}
 800adca:	b084      	sub	sp, #16
 800adcc:	af00      	add	r7, sp, #0
 800adce:	60f8      	str	r0, [r7, #12]
 800add0:	60b9      	str	r1, [r7, #8]
 800add2:	607a      	str	r2, [r7, #4]
 800add4:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 800add6:	68bb      	ldr	r3, [r7, #8]
 800add8:	2b00      	cmp	r3, #0
 800adda:	d103      	bne.n	800ade4 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 800addc:	69bb      	ldr	r3, [r7, #24]
 800adde:	69ba      	ldr	r2, [r7, #24]
 800ade0:	601a      	str	r2, [r3, #0]
 800ade2:	e002      	b.n	800adea <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 800ade4:	69bb      	ldr	r3, [r7, #24]
 800ade6:	687a      	ldr	r2, [r7, #4]
 800ade8:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 800adea:	69bb      	ldr	r3, [r7, #24]
 800adec:	68fa      	ldr	r2, [r7, #12]
 800adee:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 800adf0:	69bb      	ldr	r3, [r7, #24]
 800adf2:	68ba      	ldr	r2, [r7, #8]
 800adf4:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800adf6:	2101      	movs	r1, #1
 800adf8:	69b8      	ldr	r0, [r7, #24]
 800adfa:	f7ff fecb 	bl	800ab94 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 800adfe:	69bb      	ldr	r3, [r7, #24]
 800ae00:	78fa      	ldrb	r2, [r7, #3]
 800ae02:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 800ae06:	bf00      	nop
 800ae08:	3710      	adds	r7, #16
 800ae0a:	46bd      	mov	sp, r7
 800ae0c:	bd80      	pop	{r7, pc}

0800ae0e <xQueueCreateCountingSemaphoreStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphoreStatic( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount, StaticQueue_t *pxStaticQueue )
	{
 800ae0e:	b580      	push	{r7, lr}
 800ae10:	b08a      	sub	sp, #40	; 0x28
 800ae12:	af02      	add	r7, sp, #8
 800ae14:	60f8      	str	r0, [r7, #12]
 800ae16:	60b9      	str	r1, [r7, #8]
 800ae18:	607a      	str	r2, [r7, #4]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
 800ae1a:	68fb      	ldr	r3, [r7, #12]
 800ae1c:	2b00      	cmp	r3, #0
 800ae1e:	d10a      	bne.n	800ae36 <xQueueCreateCountingSemaphoreStatic+0x28>
	__asm volatile
 800ae20:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ae24:	f383 8811 	msr	BASEPRI, r3
 800ae28:	f3bf 8f6f 	isb	sy
 800ae2c:	f3bf 8f4f 	dsb	sy
 800ae30:	61bb      	str	r3, [r7, #24]
}
 800ae32:	bf00      	nop
 800ae34:	e7fe      	b.n	800ae34 <xQueueCreateCountingSemaphoreStatic+0x26>
		configASSERT( uxInitialCount <= uxMaxCount );
 800ae36:	68ba      	ldr	r2, [r7, #8]
 800ae38:	68fb      	ldr	r3, [r7, #12]
 800ae3a:	429a      	cmp	r2, r3
 800ae3c:	d90a      	bls.n	800ae54 <xQueueCreateCountingSemaphoreStatic+0x46>
	__asm volatile
 800ae3e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ae42:	f383 8811 	msr	BASEPRI, r3
 800ae46:	f3bf 8f6f 	isb	sy
 800ae4a:	f3bf 8f4f 	dsb	sy
 800ae4e:	617b      	str	r3, [r7, #20]
}
 800ae50:	bf00      	nop
 800ae52:	e7fe      	b.n	800ae52 <xQueueCreateCountingSemaphoreStatic+0x44>

		xHandle = xQueueGenericCreateStatic( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, NULL, pxStaticQueue, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 800ae54:	2302      	movs	r3, #2
 800ae56:	9300      	str	r3, [sp, #0]
 800ae58:	687b      	ldr	r3, [r7, #4]
 800ae5a:	2200      	movs	r2, #0
 800ae5c:	2100      	movs	r1, #0
 800ae5e:	68f8      	ldr	r0, [r7, #12]
 800ae60:	f7ff ff00 	bl	800ac64 <xQueueGenericCreateStatic>
 800ae64:	61f8      	str	r0, [r7, #28]

		if( xHandle != NULL )
 800ae66:	69fb      	ldr	r3, [r7, #28]
 800ae68:	2b00      	cmp	r3, #0
 800ae6a:	d002      	beq.n	800ae72 <xQueueCreateCountingSemaphoreStatic+0x64>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 800ae6c:	69fb      	ldr	r3, [r7, #28]
 800ae6e:	68ba      	ldr	r2, [r7, #8]
 800ae70:	639a      	str	r2, [r3, #56]	; 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 800ae72:	69fb      	ldr	r3, [r7, #28]
	}
 800ae74:	4618      	mov	r0, r3
 800ae76:	3720      	adds	r7, #32
 800ae78:	46bd      	mov	sp, r7
 800ae7a:	bd80      	pop	{r7, pc}

0800ae7c <xQueueCreateCountingSemaphore>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphore( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount )
	{
 800ae7c:	b580      	push	{r7, lr}
 800ae7e:	b086      	sub	sp, #24
 800ae80:	af00      	add	r7, sp, #0
 800ae82:	6078      	str	r0, [r7, #4]
 800ae84:	6039      	str	r1, [r7, #0]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
 800ae86:	687b      	ldr	r3, [r7, #4]
 800ae88:	2b00      	cmp	r3, #0
 800ae8a:	d10a      	bne.n	800aea2 <xQueueCreateCountingSemaphore+0x26>
	__asm volatile
 800ae8c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ae90:	f383 8811 	msr	BASEPRI, r3
 800ae94:	f3bf 8f6f 	isb	sy
 800ae98:	f3bf 8f4f 	dsb	sy
 800ae9c:	613b      	str	r3, [r7, #16]
}
 800ae9e:	bf00      	nop
 800aea0:	e7fe      	b.n	800aea0 <xQueueCreateCountingSemaphore+0x24>
		configASSERT( uxInitialCount <= uxMaxCount );
 800aea2:	683a      	ldr	r2, [r7, #0]
 800aea4:	687b      	ldr	r3, [r7, #4]
 800aea6:	429a      	cmp	r2, r3
 800aea8:	d90a      	bls.n	800aec0 <xQueueCreateCountingSemaphore+0x44>
	__asm volatile
 800aeaa:	f04f 0350 	mov.w	r3, #80	; 0x50
 800aeae:	f383 8811 	msr	BASEPRI, r3
 800aeb2:	f3bf 8f6f 	isb	sy
 800aeb6:	f3bf 8f4f 	dsb	sy
 800aeba:	60fb      	str	r3, [r7, #12]
}
 800aebc:	bf00      	nop
 800aebe:	e7fe      	b.n	800aebe <xQueueCreateCountingSemaphore+0x42>

		xHandle = xQueueGenericCreate( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 800aec0:	2202      	movs	r2, #2
 800aec2:	2100      	movs	r1, #0
 800aec4:	6878      	ldr	r0, [r7, #4]
 800aec6:	f7ff ff45 	bl	800ad54 <xQueueGenericCreate>
 800aeca:	6178      	str	r0, [r7, #20]

		if( xHandle != NULL )
 800aecc:	697b      	ldr	r3, [r7, #20]
 800aece:	2b00      	cmp	r3, #0
 800aed0:	d002      	beq.n	800aed8 <xQueueCreateCountingSemaphore+0x5c>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 800aed2:	697b      	ldr	r3, [r7, #20]
 800aed4:	683a      	ldr	r2, [r7, #0]
 800aed6:	639a      	str	r2, [r3, #56]	; 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 800aed8:	697b      	ldr	r3, [r7, #20]
	}
 800aeda:	4618      	mov	r0, r3
 800aedc:	3718      	adds	r7, #24
 800aede:	46bd      	mov	sp, r7
 800aee0:	bd80      	pop	{r7, pc}
	...

0800aee4 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 800aee4:	b580      	push	{r7, lr}
 800aee6:	b08e      	sub	sp, #56	; 0x38
 800aee8:	af00      	add	r7, sp, #0
 800aeea:	60f8      	str	r0, [r7, #12]
 800aeec:	60b9      	str	r1, [r7, #8]
 800aeee:	607a      	str	r2, [r7, #4]
 800aef0:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 800aef2:	2300      	movs	r3, #0
 800aef4:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800aef6:	68fb      	ldr	r3, [r7, #12]
 800aef8:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800aefa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800aefc:	2b00      	cmp	r3, #0
 800aefe:	d10a      	bne.n	800af16 <xQueueGenericSend+0x32>
	__asm volatile
 800af00:	f04f 0350 	mov.w	r3, #80	; 0x50
 800af04:	f383 8811 	msr	BASEPRI, r3
 800af08:	f3bf 8f6f 	isb	sy
 800af0c:	f3bf 8f4f 	dsb	sy
 800af10:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800af12:	bf00      	nop
 800af14:	e7fe      	b.n	800af14 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800af16:	68bb      	ldr	r3, [r7, #8]
 800af18:	2b00      	cmp	r3, #0
 800af1a:	d103      	bne.n	800af24 <xQueueGenericSend+0x40>
 800af1c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800af1e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800af20:	2b00      	cmp	r3, #0
 800af22:	d101      	bne.n	800af28 <xQueueGenericSend+0x44>
 800af24:	2301      	movs	r3, #1
 800af26:	e000      	b.n	800af2a <xQueueGenericSend+0x46>
 800af28:	2300      	movs	r3, #0
 800af2a:	2b00      	cmp	r3, #0
 800af2c:	d10a      	bne.n	800af44 <xQueueGenericSend+0x60>
	__asm volatile
 800af2e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800af32:	f383 8811 	msr	BASEPRI, r3
 800af36:	f3bf 8f6f 	isb	sy
 800af3a:	f3bf 8f4f 	dsb	sy
 800af3e:	627b      	str	r3, [r7, #36]	; 0x24
}
 800af40:	bf00      	nop
 800af42:	e7fe      	b.n	800af42 <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800af44:	683b      	ldr	r3, [r7, #0]
 800af46:	2b02      	cmp	r3, #2
 800af48:	d103      	bne.n	800af52 <xQueueGenericSend+0x6e>
 800af4a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800af4c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800af4e:	2b01      	cmp	r3, #1
 800af50:	d101      	bne.n	800af56 <xQueueGenericSend+0x72>
 800af52:	2301      	movs	r3, #1
 800af54:	e000      	b.n	800af58 <xQueueGenericSend+0x74>
 800af56:	2300      	movs	r3, #0
 800af58:	2b00      	cmp	r3, #0
 800af5a:	d10a      	bne.n	800af72 <xQueueGenericSend+0x8e>
	__asm volatile
 800af5c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800af60:	f383 8811 	msr	BASEPRI, r3
 800af64:	f3bf 8f6f 	isb	sy
 800af68:	f3bf 8f4f 	dsb	sy
 800af6c:	623b      	str	r3, [r7, #32]
}
 800af6e:	bf00      	nop
 800af70:	e7fe      	b.n	800af70 <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800af72:	f001 fa8d 	bl	800c490 <xTaskGetSchedulerState>
 800af76:	4603      	mov	r3, r0
 800af78:	2b00      	cmp	r3, #0
 800af7a:	d102      	bne.n	800af82 <xQueueGenericSend+0x9e>
 800af7c:	687b      	ldr	r3, [r7, #4]
 800af7e:	2b00      	cmp	r3, #0
 800af80:	d101      	bne.n	800af86 <xQueueGenericSend+0xa2>
 800af82:	2301      	movs	r3, #1
 800af84:	e000      	b.n	800af88 <xQueueGenericSend+0xa4>
 800af86:	2300      	movs	r3, #0
 800af88:	2b00      	cmp	r3, #0
 800af8a:	d10a      	bne.n	800afa2 <xQueueGenericSend+0xbe>
	__asm volatile
 800af8c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800af90:	f383 8811 	msr	BASEPRI, r3
 800af94:	f3bf 8f6f 	isb	sy
 800af98:	f3bf 8f4f 	dsb	sy
 800af9c:	61fb      	str	r3, [r7, #28]
}
 800af9e:	bf00      	nop
 800afa0:	e7fe      	b.n	800afa0 <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800afa2:	f001 ffcf 	bl	800cf44 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800afa6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800afa8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800afaa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800afac:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800afae:	429a      	cmp	r2, r3
 800afb0:	d302      	bcc.n	800afb8 <xQueueGenericSend+0xd4>
 800afb2:	683b      	ldr	r3, [r7, #0]
 800afb4:	2b02      	cmp	r3, #2
 800afb6:	d129      	bne.n	800b00c <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800afb8:	683a      	ldr	r2, [r7, #0]
 800afba:	68b9      	ldr	r1, [r7, #8]
 800afbc:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800afbe:	f000 faba 	bl	800b536 <prvCopyDataToQueue>
 800afc2:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800afc4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800afc6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800afc8:	2b00      	cmp	r3, #0
 800afca:	d010      	beq.n	800afee <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800afcc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800afce:	3324      	adds	r3, #36	; 0x24
 800afd0:	4618      	mov	r0, r3
 800afd2:	f001 f89b 	bl	800c10c <xTaskRemoveFromEventList>
 800afd6:	4603      	mov	r3, r0
 800afd8:	2b00      	cmp	r3, #0
 800afda:	d013      	beq.n	800b004 <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 800afdc:	4b3f      	ldr	r3, [pc, #252]	; (800b0dc <xQueueGenericSend+0x1f8>)
 800afde:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800afe2:	601a      	str	r2, [r3, #0]
 800afe4:	f3bf 8f4f 	dsb	sy
 800afe8:	f3bf 8f6f 	isb	sy
 800afec:	e00a      	b.n	800b004 <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 800afee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800aff0:	2b00      	cmp	r3, #0
 800aff2:	d007      	beq.n	800b004 <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 800aff4:	4b39      	ldr	r3, [pc, #228]	; (800b0dc <xQueueGenericSend+0x1f8>)
 800aff6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800affa:	601a      	str	r2, [r3, #0]
 800affc:	f3bf 8f4f 	dsb	sy
 800b000:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 800b004:	f001 ffce 	bl	800cfa4 <vPortExitCritical>
				return pdPASS;
 800b008:	2301      	movs	r3, #1
 800b00a:	e063      	b.n	800b0d4 <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800b00c:	687b      	ldr	r3, [r7, #4]
 800b00e:	2b00      	cmp	r3, #0
 800b010:	d103      	bne.n	800b01a <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800b012:	f001 ffc7 	bl	800cfa4 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 800b016:	2300      	movs	r3, #0
 800b018:	e05c      	b.n	800b0d4 <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 800b01a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b01c:	2b00      	cmp	r3, #0
 800b01e:	d106      	bne.n	800b02e <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800b020:	f107 0314 	add.w	r3, r7, #20
 800b024:	4618      	mov	r0, r3
 800b026:	f001 f8d5 	bl	800c1d4 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800b02a:	2301      	movs	r3, #1
 800b02c:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800b02e:	f001 ffb9 	bl	800cfa4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800b032:	f000 fe41 	bl	800bcb8 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800b036:	f001 ff85 	bl	800cf44 <vPortEnterCritical>
 800b03a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b03c:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800b040:	b25b      	sxtb	r3, r3
 800b042:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b046:	d103      	bne.n	800b050 <xQueueGenericSend+0x16c>
 800b048:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b04a:	2200      	movs	r2, #0
 800b04c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800b050:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b052:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800b056:	b25b      	sxtb	r3, r3
 800b058:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b05c:	d103      	bne.n	800b066 <xQueueGenericSend+0x182>
 800b05e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b060:	2200      	movs	r2, #0
 800b062:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800b066:	f001 ff9d 	bl	800cfa4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800b06a:	1d3a      	adds	r2, r7, #4
 800b06c:	f107 0314 	add.w	r3, r7, #20
 800b070:	4611      	mov	r1, r2
 800b072:	4618      	mov	r0, r3
 800b074:	f001 f8c4 	bl	800c200 <xTaskCheckForTimeOut>
 800b078:	4603      	mov	r3, r0
 800b07a:	2b00      	cmp	r3, #0
 800b07c:	d124      	bne.n	800b0c8 <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800b07e:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800b080:	f000 fb51 	bl	800b726 <prvIsQueueFull>
 800b084:	4603      	mov	r3, r0
 800b086:	2b00      	cmp	r3, #0
 800b088:	d018      	beq.n	800b0bc <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800b08a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b08c:	3310      	adds	r3, #16
 800b08e:	687a      	ldr	r2, [r7, #4]
 800b090:	4611      	mov	r1, r2
 800b092:	4618      	mov	r0, r3
 800b094:	f000 ffea 	bl	800c06c <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 800b098:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800b09a:	f000 fadc 	bl	800b656 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 800b09e:	f000 fe19 	bl	800bcd4 <xTaskResumeAll>
 800b0a2:	4603      	mov	r3, r0
 800b0a4:	2b00      	cmp	r3, #0
 800b0a6:	f47f af7c 	bne.w	800afa2 <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 800b0aa:	4b0c      	ldr	r3, [pc, #48]	; (800b0dc <xQueueGenericSend+0x1f8>)
 800b0ac:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800b0b0:	601a      	str	r2, [r3, #0]
 800b0b2:	f3bf 8f4f 	dsb	sy
 800b0b6:	f3bf 8f6f 	isb	sy
 800b0ba:	e772      	b.n	800afa2 <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 800b0bc:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800b0be:	f000 faca 	bl	800b656 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800b0c2:	f000 fe07 	bl	800bcd4 <xTaskResumeAll>
 800b0c6:	e76c      	b.n	800afa2 <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 800b0c8:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800b0ca:	f000 fac4 	bl	800b656 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800b0ce:	f000 fe01 	bl	800bcd4 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 800b0d2:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 800b0d4:	4618      	mov	r0, r3
 800b0d6:	3738      	adds	r7, #56	; 0x38
 800b0d8:	46bd      	mov	sp, r7
 800b0da:	bd80      	pop	{r7, pc}
 800b0dc:	e000ed04 	.word	0xe000ed04

0800b0e0 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 800b0e0:	b580      	push	{r7, lr}
 800b0e2:	b090      	sub	sp, #64	; 0x40
 800b0e4:	af00      	add	r7, sp, #0
 800b0e6:	60f8      	str	r0, [r7, #12]
 800b0e8:	60b9      	str	r1, [r7, #8]
 800b0ea:	607a      	str	r2, [r7, #4]
 800b0ec:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800b0ee:	68fb      	ldr	r3, [r7, #12]
 800b0f0:	63bb      	str	r3, [r7, #56]	; 0x38

	configASSERT( pxQueue );
 800b0f2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b0f4:	2b00      	cmp	r3, #0
 800b0f6:	d10a      	bne.n	800b10e <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 800b0f8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b0fc:	f383 8811 	msr	BASEPRI, r3
 800b100:	f3bf 8f6f 	isb	sy
 800b104:	f3bf 8f4f 	dsb	sy
 800b108:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800b10a:	bf00      	nop
 800b10c:	e7fe      	b.n	800b10c <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800b10e:	68bb      	ldr	r3, [r7, #8]
 800b110:	2b00      	cmp	r3, #0
 800b112:	d103      	bne.n	800b11c <xQueueGenericSendFromISR+0x3c>
 800b114:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b116:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b118:	2b00      	cmp	r3, #0
 800b11a:	d101      	bne.n	800b120 <xQueueGenericSendFromISR+0x40>
 800b11c:	2301      	movs	r3, #1
 800b11e:	e000      	b.n	800b122 <xQueueGenericSendFromISR+0x42>
 800b120:	2300      	movs	r3, #0
 800b122:	2b00      	cmp	r3, #0
 800b124:	d10a      	bne.n	800b13c <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 800b126:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b12a:	f383 8811 	msr	BASEPRI, r3
 800b12e:	f3bf 8f6f 	isb	sy
 800b132:	f3bf 8f4f 	dsb	sy
 800b136:	627b      	str	r3, [r7, #36]	; 0x24
}
 800b138:	bf00      	nop
 800b13a:	e7fe      	b.n	800b13a <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800b13c:	683b      	ldr	r3, [r7, #0]
 800b13e:	2b02      	cmp	r3, #2
 800b140:	d103      	bne.n	800b14a <xQueueGenericSendFromISR+0x6a>
 800b142:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b144:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b146:	2b01      	cmp	r3, #1
 800b148:	d101      	bne.n	800b14e <xQueueGenericSendFromISR+0x6e>
 800b14a:	2301      	movs	r3, #1
 800b14c:	e000      	b.n	800b150 <xQueueGenericSendFromISR+0x70>
 800b14e:	2300      	movs	r3, #0
 800b150:	2b00      	cmp	r3, #0
 800b152:	d10a      	bne.n	800b16a <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 800b154:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b158:	f383 8811 	msr	BASEPRI, r3
 800b15c:	f3bf 8f6f 	isb	sy
 800b160:	f3bf 8f4f 	dsb	sy
 800b164:	623b      	str	r3, [r7, #32]
}
 800b166:	bf00      	nop
 800b168:	e7fe      	b.n	800b168 <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800b16a:	f001 ffcd 	bl	800d108 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 800b16e:	f3ef 8211 	mrs	r2, BASEPRI
 800b172:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b176:	f383 8811 	msr	BASEPRI, r3
 800b17a:	f3bf 8f6f 	isb	sy
 800b17e:	f3bf 8f4f 	dsb	sy
 800b182:	61fa      	str	r2, [r7, #28]
 800b184:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 800b186:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800b188:	637b      	str	r3, [r7, #52]	; 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800b18a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b18c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800b18e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b190:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b192:	429a      	cmp	r2, r3
 800b194:	d302      	bcc.n	800b19c <xQueueGenericSendFromISR+0xbc>
 800b196:	683b      	ldr	r3, [r7, #0]
 800b198:	2b02      	cmp	r3, #2
 800b19a:	d12f      	bne.n	800b1fc <xQueueGenericSendFromISR+0x11c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800b19c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b19e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800b1a2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 800b1a6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b1a8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b1aa:	62fb      	str	r3, [r7, #44]	; 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800b1ac:	683a      	ldr	r2, [r7, #0]
 800b1ae:	68b9      	ldr	r1, [r7, #8]
 800b1b0:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800b1b2:	f000 f9c0 	bl	800b536 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800b1b6:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 800b1ba:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b1be:	d112      	bne.n	800b1e6 <xQueueGenericSendFromISR+0x106>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800b1c0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b1c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b1c4:	2b00      	cmp	r3, #0
 800b1c6:	d016      	beq.n	800b1f6 <xQueueGenericSendFromISR+0x116>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800b1c8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b1ca:	3324      	adds	r3, #36	; 0x24
 800b1cc:	4618      	mov	r0, r3
 800b1ce:	f000 ff9d 	bl	800c10c <xTaskRemoveFromEventList>
 800b1d2:	4603      	mov	r3, r0
 800b1d4:	2b00      	cmp	r3, #0
 800b1d6:	d00e      	beq.n	800b1f6 <xQueueGenericSendFromISR+0x116>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800b1d8:	687b      	ldr	r3, [r7, #4]
 800b1da:	2b00      	cmp	r3, #0
 800b1dc:	d00b      	beq.n	800b1f6 <xQueueGenericSendFromISR+0x116>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800b1de:	687b      	ldr	r3, [r7, #4]
 800b1e0:	2201      	movs	r2, #1
 800b1e2:	601a      	str	r2, [r3, #0]
 800b1e4:	e007      	b.n	800b1f6 <xQueueGenericSendFromISR+0x116>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800b1e6:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800b1ea:	3301      	adds	r3, #1
 800b1ec:	b2db      	uxtb	r3, r3
 800b1ee:	b25a      	sxtb	r2, r3
 800b1f0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b1f2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 800b1f6:	2301      	movs	r3, #1
 800b1f8:	63fb      	str	r3, [r7, #60]	; 0x3c
		{
 800b1fa:	e001      	b.n	800b200 <xQueueGenericSendFromISR+0x120>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800b1fc:	2300      	movs	r3, #0
 800b1fe:	63fb      	str	r3, [r7, #60]	; 0x3c
 800b200:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b202:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800b204:	697b      	ldr	r3, [r7, #20]
 800b206:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 800b20a:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800b20c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 800b20e:	4618      	mov	r0, r3
 800b210:	3740      	adds	r7, #64	; 0x40
 800b212:	46bd      	mov	sp, r7
 800b214:	bd80      	pop	{r7, pc}

0800b216 <xQueueGiveFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGiveFromISR( QueueHandle_t xQueue, BaseType_t * const pxHigherPriorityTaskWoken )
{
 800b216:	b580      	push	{r7, lr}
 800b218:	b08e      	sub	sp, #56	; 0x38
 800b21a:	af00      	add	r7, sp, #0
 800b21c:	6078      	str	r0, [r7, #4]
 800b21e:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800b220:	687b      	ldr	r3, [r7, #4]
 800b222:	633b      	str	r3, [r7, #48]	; 0x30
	item size is 0.  Don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */

	configASSERT( pxQueue );
 800b224:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b226:	2b00      	cmp	r3, #0
 800b228:	d10a      	bne.n	800b240 <xQueueGiveFromISR+0x2a>
	__asm volatile
 800b22a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b22e:	f383 8811 	msr	BASEPRI, r3
 800b232:	f3bf 8f6f 	isb	sy
 800b236:	f3bf 8f4f 	dsb	sy
 800b23a:	623b      	str	r3, [r7, #32]
}
 800b23c:	bf00      	nop
 800b23e:	e7fe      	b.n	800b23e <xQueueGiveFromISR+0x28>

	/* xQueueGenericSendFromISR() should be used instead of xQueueGiveFromISR()
	if the item size is not 0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 800b240:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b242:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b244:	2b00      	cmp	r3, #0
 800b246:	d00a      	beq.n	800b25e <xQueueGiveFromISR+0x48>
	__asm volatile
 800b248:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b24c:	f383 8811 	msr	BASEPRI, r3
 800b250:	f3bf 8f6f 	isb	sy
 800b254:	f3bf 8f4f 	dsb	sy
 800b258:	61fb      	str	r3, [r7, #28]
}
 800b25a:	bf00      	nop
 800b25c:	e7fe      	b.n	800b25c <xQueueGiveFromISR+0x46>

	/* Normally a mutex would not be given from an interrupt, especially if
	there is a mutex holder, as priority inheritance makes no sense for an
	interrupts, only tasks. */
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->u.xSemaphore.xMutexHolder != NULL ) ) );
 800b25e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b260:	681b      	ldr	r3, [r3, #0]
 800b262:	2b00      	cmp	r3, #0
 800b264:	d103      	bne.n	800b26e <xQueueGiveFromISR+0x58>
 800b266:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b268:	689b      	ldr	r3, [r3, #8]
 800b26a:	2b00      	cmp	r3, #0
 800b26c:	d101      	bne.n	800b272 <xQueueGiveFromISR+0x5c>
 800b26e:	2301      	movs	r3, #1
 800b270:	e000      	b.n	800b274 <xQueueGiveFromISR+0x5e>
 800b272:	2300      	movs	r3, #0
 800b274:	2b00      	cmp	r3, #0
 800b276:	d10a      	bne.n	800b28e <xQueueGiveFromISR+0x78>
	__asm volatile
 800b278:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b27c:	f383 8811 	msr	BASEPRI, r3
 800b280:	f3bf 8f6f 	isb	sy
 800b284:	f3bf 8f4f 	dsb	sy
 800b288:	61bb      	str	r3, [r7, #24]
}
 800b28a:	bf00      	nop
 800b28c:	e7fe      	b.n	800b28c <xQueueGiveFromISR+0x76>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800b28e:	f001 ff3b 	bl	800d108 <vPortValidateInterruptPriority>
	__asm volatile
 800b292:	f3ef 8211 	mrs	r2, BASEPRI
 800b296:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b29a:	f383 8811 	msr	BASEPRI, r3
 800b29e:	f3bf 8f6f 	isb	sy
 800b2a2:	f3bf 8f4f 	dsb	sy
 800b2a6:	617a      	str	r2, [r7, #20]
 800b2a8:	613b      	str	r3, [r7, #16]
	return ulOriginalBASEPRI;
 800b2aa:	697b      	ldr	r3, [r7, #20]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800b2ac:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800b2ae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b2b0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b2b2:	62bb      	str	r3, [r7, #40]	; 0x28

		/* When the queue is used to implement a semaphore no data is ever
		moved through the queue but it is still valid to see if the queue 'has
		space'. */
		if( uxMessagesWaiting < pxQueue->uxLength )
 800b2b4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b2b6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b2b8:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800b2ba:	429a      	cmp	r2, r3
 800b2bc:	d22b      	bcs.n	800b316 <xQueueGiveFromISR+0x100>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800b2be:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b2c0:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800b2c4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			holder - and if there is a mutex holder then the mutex cannot be
			given from an ISR.  As this is the ISR version of the function it
			can be assumed there is no mutex holder and no need to determine if
			priority disinheritance is needed.  Simply increase the count of
			messages (semaphores) available. */
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800b2c8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b2ca:	1c5a      	adds	r2, r3, #1
 800b2cc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b2ce:	639a      	str	r2, [r3, #56]	; 0x38

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800b2d0:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800b2d4:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b2d8:	d112      	bne.n	800b300 <xQueueGiveFromISR+0xea>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800b2da:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b2dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b2de:	2b00      	cmp	r3, #0
 800b2e0:	d016      	beq.n	800b310 <xQueueGiveFromISR+0xfa>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800b2e2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b2e4:	3324      	adds	r3, #36	; 0x24
 800b2e6:	4618      	mov	r0, r3
 800b2e8:	f000 ff10 	bl	800c10c <xTaskRemoveFromEventList>
 800b2ec:	4603      	mov	r3, r0
 800b2ee:	2b00      	cmp	r3, #0
 800b2f0:	d00e      	beq.n	800b310 <xQueueGiveFromISR+0xfa>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800b2f2:	683b      	ldr	r3, [r7, #0]
 800b2f4:	2b00      	cmp	r3, #0
 800b2f6:	d00b      	beq.n	800b310 <xQueueGiveFromISR+0xfa>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800b2f8:	683b      	ldr	r3, [r7, #0]
 800b2fa:	2201      	movs	r2, #1
 800b2fc:	601a      	str	r2, [r3, #0]
 800b2fe:	e007      	b.n	800b310 <xQueueGiveFromISR+0xfa>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800b300:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800b304:	3301      	adds	r3, #1
 800b306:	b2db      	uxtb	r3, r3
 800b308:	b25a      	sxtb	r2, r3
 800b30a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b30c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 800b310:	2301      	movs	r3, #1
 800b312:	637b      	str	r3, [r7, #52]	; 0x34
 800b314:	e001      	b.n	800b31a <xQueueGiveFromISR+0x104>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800b316:	2300      	movs	r3, #0
 800b318:	637b      	str	r3, [r7, #52]	; 0x34
 800b31a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b31c:	60fb      	str	r3, [r7, #12]
	__asm volatile
 800b31e:	68fb      	ldr	r3, [r7, #12]
 800b320:	f383 8811 	msr	BASEPRI, r3
}
 800b324:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800b326:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 800b328:	4618      	mov	r0, r3
 800b32a:	3738      	adds	r7, #56	; 0x38
 800b32c:	46bd      	mov	sp, r7
 800b32e:	bd80      	pop	{r7, pc}

0800b330 <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 800b330:	b580      	push	{r7, lr}
 800b332:	b08c      	sub	sp, #48	; 0x30
 800b334:	af00      	add	r7, sp, #0
 800b336:	60f8      	str	r0, [r7, #12]
 800b338:	60b9      	str	r1, [r7, #8]
 800b33a:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 800b33c:	2300      	movs	r3, #0
 800b33e:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800b340:	68fb      	ldr	r3, [r7, #12]
 800b342:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800b344:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b346:	2b00      	cmp	r3, #0
 800b348:	d10a      	bne.n	800b360 <xQueueReceive+0x30>
	__asm volatile
 800b34a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b34e:	f383 8811 	msr	BASEPRI, r3
 800b352:	f3bf 8f6f 	isb	sy
 800b356:	f3bf 8f4f 	dsb	sy
 800b35a:	623b      	str	r3, [r7, #32]
}
 800b35c:	bf00      	nop
 800b35e:	e7fe      	b.n	800b35e <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800b360:	68bb      	ldr	r3, [r7, #8]
 800b362:	2b00      	cmp	r3, #0
 800b364:	d103      	bne.n	800b36e <xQueueReceive+0x3e>
 800b366:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b368:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b36a:	2b00      	cmp	r3, #0
 800b36c:	d101      	bne.n	800b372 <xQueueReceive+0x42>
 800b36e:	2301      	movs	r3, #1
 800b370:	e000      	b.n	800b374 <xQueueReceive+0x44>
 800b372:	2300      	movs	r3, #0
 800b374:	2b00      	cmp	r3, #0
 800b376:	d10a      	bne.n	800b38e <xQueueReceive+0x5e>
	__asm volatile
 800b378:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b37c:	f383 8811 	msr	BASEPRI, r3
 800b380:	f3bf 8f6f 	isb	sy
 800b384:	f3bf 8f4f 	dsb	sy
 800b388:	61fb      	str	r3, [r7, #28]
}
 800b38a:	bf00      	nop
 800b38c:	e7fe      	b.n	800b38c <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800b38e:	f001 f87f 	bl	800c490 <xTaskGetSchedulerState>
 800b392:	4603      	mov	r3, r0
 800b394:	2b00      	cmp	r3, #0
 800b396:	d102      	bne.n	800b39e <xQueueReceive+0x6e>
 800b398:	687b      	ldr	r3, [r7, #4]
 800b39a:	2b00      	cmp	r3, #0
 800b39c:	d101      	bne.n	800b3a2 <xQueueReceive+0x72>
 800b39e:	2301      	movs	r3, #1
 800b3a0:	e000      	b.n	800b3a4 <xQueueReceive+0x74>
 800b3a2:	2300      	movs	r3, #0
 800b3a4:	2b00      	cmp	r3, #0
 800b3a6:	d10a      	bne.n	800b3be <xQueueReceive+0x8e>
	__asm volatile
 800b3a8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b3ac:	f383 8811 	msr	BASEPRI, r3
 800b3b0:	f3bf 8f6f 	isb	sy
 800b3b4:	f3bf 8f4f 	dsb	sy
 800b3b8:	61bb      	str	r3, [r7, #24]
}
 800b3ba:	bf00      	nop
 800b3bc:	e7fe      	b.n	800b3bc <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800b3be:	f001 fdc1 	bl	800cf44 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800b3c2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b3c4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b3c6:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800b3c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b3ca:	2b00      	cmp	r3, #0
 800b3cc:	d01f      	beq.n	800b40e <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 800b3ce:	68b9      	ldr	r1, [r7, #8]
 800b3d0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800b3d2:	f000 f91a 	bl	800b60a <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800b3d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b3d8:	1e5a      	subs	r2, r3, #1
 800b3da:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b3dc:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800b3de:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b3e0:	691b      	ldr	r3, [r3, #16]
 800b3e2:	2b00      	cmp	r3, #0
 800b3e4:	d00f      	beq.n	800b406 <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800b3e6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b3e8:	3310      	adds	r3, #16
 800b3ea:	4618      	mov	r0, r3
 800b3ec:	f000 fe8e 	bl	800c10c <xTaskRemoveFromEventList>
 800b3f0:	4603      	mov	r3, r0
 800b3f2:	2b00      	cmp	r3, #0
 800b3f4:	d007      	beq.n	800b406 <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800b3f6:	4b3d      	ldr	r3, [pc, #244]	; (800b4ec <xQueueReceive+0x1bc>)
 800b3f8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800b3fc:	601a      	str	r2, [r3, #0]
 800b3fe:	f3bf 8f4f 	dsb	sy
 800b402:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800b406:	f001 fdcd 	bl	800cfa4 <vPortExitCritical>
				return pdPASS;
 800b40a:	2301      	movs	r3, #1
 800b40c:	e069      	b.n	800b4e2 <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800b40e:	687b      	ldr	r3, [r7, #4]
 800b410:	2b00      	cmp	r3, #0
 800b412:	d103      	bne.n	800b41c <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800b414:	f001 fdc6 	bl	800cfa4 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800b418:	2300      	movs	r3, #0
 800b41a:	e062      	b.n	800b4e2 <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 800b41c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b41e:	2b00      	cmp	r3, #0
 800b420:	d106      	bne.n	800b430 <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800b422:	f107 0310 	add.w	r3, r7, #16
 800b426:	4618      	mov	r0, r3
 800b428:	f000 fed4 	bl	800c1d4 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800b42c:	2301      	movs	r3, #1
 800b42e:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800b430:	f001 fdb8 	bl	800cfa4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800b434:	f000 fc40 	bl	800bcb8 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800b438:	f001 fd84 	bl	800cf44 <vPortEnterCritical>
 800b43c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b43e:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800b442:	b25b      	sxtb	r3, r3
 800b444:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b448:	d103      	bne.n	800b452 <xQueueReceive+0x122>
 800b44a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b44c:	2200      	movs	r2, #0
 800b44e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800b452:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b454:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800b458:	b25b      	sxtb	r3, r3
 800b45a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b45e:	d103      	bne.n	800b468 <xQueueReceive+0x138>
 800b460:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b462:	2200      	movs	r2, #0
 800b464:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800b468:	f001 fd9c 	bl	800cfa4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800b46c:	1d3a      	adds	r2, r7, #4
 800b46e:	f107 0310 	add.w	r3, r7, #16
 800b472:	4611      	mov	r1, r2
 800b474:	4618      	mov	r0, r3
 800b476:	f000 fec3 	bl	800c200 <xTaskCheckForTimeOut>
 800b47a:	4603      	mov	r3, r0
 800b47c:	2b00      	cmp	r3, #0
 800b47e:	d123      	bne.n	800b4c8 <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800b480:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800b482:	f000 f93a 	bl	800b6fa <prvIsQueueEmpty>
 800b486:	4603      	mov	r3, r0
 800b488:	2b00      	cmp	r3, #0
 800b48a:	d017      	beq.n	800b4bc <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800b48c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b48e:	3324      	adds	r3, #36	; 0x24
 800b490:	687a      	ldr	r2, [r7, #4]
 800b492:	4611      	mov	r1, r2
 800b494:	4618      	mov	r0, r3
 800b496:	f000 fde9 	bl	800c06c <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800b49a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800b49c:	f000 f8db 	bl	800b656 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800b4a0:	f000 fc18 	bl	800bcd4 <xTaskResumeAll>
 800b4a4:	4603      	mov	r3, r0
 800b4a6:	2b00      	cmp	r3, #0
 800b4a8:	d189      	bne.n	800b3be <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 800b4aa:	4b10      	ldr	r3, [pc, #64]	; (800b4ec <xQueueReceive+0x1bc>)
 800b4ac:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800b4b0:	601a      	str	r2, [r3, #0]
 800b4b2:	f3bf 8f4f 	dsb	sy
 800b4b6:	f3bf 8f6f 	isb	sy
 800b4ba:	e780      	b.n	800b3be <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 800b4bc:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800b4be:	f000 f8ca 	bl	800b656 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800b4c2:	f000 fc07 	bl	800bcd4 <xTaskResumeAll>
 800b4c6:	e77a      	b.n	800b3be <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 800b4c8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800b4ca:	f000 f8c4 	bl	800b656 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800b4ce:	f000 fc01 	bl	800bcd4 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800b4d2:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800b4d4:	f000 f911 	bl	800b6fa <prvIsQueueEmpty>
 800b4d8:	4603      	mov	r3, r0
 800b4da:	2b00      	cmp	r3, #0
 800b4dc:	f43f af6f 	beq.w	800b3be <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800b4e0:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800b4e2:	4618      	mov	r0, r3
 800b4e4:	3730      	adds	r7, #48	; 0x30
 800b4e6:	46bd      	mov	sp, r7
 800b4e8:	bd80      	pop	{r7, pc}
 800b4ea:	bf00      	nop
 800b4ec:	e000ed04 	.word	0xe000ed04

0800b4f0 <vQueueDelete>:
	return uxReturn;
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
/*-----------------------------------------------------------*/

void vQueueDelete( QueueHandle_t xQueue )
{
 800b4f0:	b580      	push	{r7, lr}
 800b4f2:	b084      	sub	sp, #16
 800b4f4:	af00      	add	r7, sp, #0
 800b4f6:	6078      	str	r0, [r7, #4]
Queue_t * const pxQueue = xQueue;
 800b4f8:	687b      	ldr	r3, [r7, #4]
 800b4fa:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800b4fc:	68fb      	ldr	r3, [r7, #12]
 800b4fe:	2b00      	cmp	r3, #0
 800b500:	d10a      	bne.n	800b518 <vQueueDelete+0x28>
	__asm volatile
 800b502:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b506:	f383 8811 	msr	BASEPRI, r3
 800b50a:	f3bf 8f6f 	isb	sy
 800b50e:	f3bf 8f4f 	dsb	sy
 800b512:	60bb      	str	r3, [r7, #8]
}
 800b514:	bf00      	nop
 800b516:	e7fe      	b.n	800b516 <vQueueDelete+0x26>
	traceQUEUE_DELETE( pxQueue );

	#if ( configQUEUE_REGISTRY_SIZE > 0 )
	{
		vQueueUnregisterQueue( pxQueue );
 800b518:	68f8      	ldr	r0, [r7, #12]
 800b51a:	f000 f947 	bl	800b7ac <vQueueUnregisterQueue>
	}
	#elif( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
	{
		/* The queue could have been allocated statically or dynamically, so
		check before attempting to free the memory. */
		if( pxQueue->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 800b51e:	68fb      	ldr	r3, [r7, #12]
 800b520:	f893 3046 	ldrb.w	r3, [r3, #70]	; 0x46
 800b524:	2b00      	cmp	r3, #0
 800b526:	d102      	bne.n	800b52e <vQueueDelete+0x3e>
		{
			vPortFree( pxQueue );
 800b528:	68f8      	ldr	r0, [r7, #12]
 800b52a:	f001 fef9 	bl	800d320 <vPortFree>
		/* The queue must have been statically allocated, so is not going to be
		deleted.  Avoid compiler warnings about the unused parameter. */
		( void ) pxQueue;
	}
	#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
}
 800b52e:	bf00      	nop
 800b530:	3710      	adds	r7, #16
 800b532:	46bd      	mov	sp, r7
 800b534:	bd80      	pop	{r7, pc}

0800b536 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 800b536:	b580      	push	{r7, lr}
 800b538:	b086      	sub	sp, #24
 800b53a:	af00      	add	r7, sp, #0
 800b53c:	60f8      	str	r0, [r7, #12]
 800b53e:	60b9      	str	r1, [r7, #8]
 800b540:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 800b542:	2300      	movs	r3, #0
 800b544:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800b546:	68fb      	ldr	r3, [r7, #12]
 800b548:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b54a:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800b54c:	68fb      	ldr	r3, [r7, #12]
 800b54e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b550:	2b00      	cmp	r3, #0
 800b552:	d10d      	bne.n	800b570 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800b554:	68fb      	ldr	r3, [r7, #12]
 800b556:	681b      	ldr	r3, [r3, #0]
 800b558:	2b00      	cmp	r3, #0
 800b55a:	d14d      	bne.n	800b5f8 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 800b55c:	68fb      	ldr	r3, [r7, #12]
 800b55e:	689b      	ldr	r3, [r3, #8]
 800b560:	4618      	mov	r0, r3
 800b562:	f000 ffb3 	bl	800c4cc <xTaskPriorityDisinherit>
 800b566:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 800b568:	68fb      	ldr	r3, [r7, #12]
 800b56a:	2200      	movs	r2, #0
 800b56c:	609a      	str	r2, [r3, #8]
 800b56e:	e043      	b.n	800b5f8 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 800b570:	687b      	ldr	r3, [r7, #4]
 800b572:	2b00      	cmp	r3, #0
 800b574:	d119      	bne.n	800b5aa <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800b576:	68fb      	ldr	r3, [r7, #12]
 800b578:	6858      	ldr	r0, [r3, #4]
 800b57a:	68fb      	ldr	r3, [r7, #12]
 800b57c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b57e:	461a      	mov	r2, r3
 800b580:	68b9      	ldr	r1, [r7, #8]
 800b582:	f002 fdd5 	bl	800e130 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800b586:	68fb      	ldr	r3, [r7, #12]
 800b588:	685a      	ldr	r2, [r3, #4]
 800b58a:	68fb      	ldr	r3, [r7, #12]
 800b58c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b58e:	441a      	add	r2, r3
 800b590:	68fb      	ldr	r3, [r7, #12]
 800b592:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800b594:	68fb      	ldr	r3, [r7, #12]
 800b596:	685a      	ldr	r2, [r3, #4]
 800b598:	68fb      	ldr	r3, [r7, #12]
 800b59a:	689b      	ldr	r3, [r3, #8]
 800b59c:	429a      	cmp	r2, r3
 800b59e:	d32b      	bcc.n	800b5f8 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800b5a0:	68fb      	ldr	r3, [r7, #12]
 800b5a2:	681a      	ldr	r2, [r3, #0]
 800b5a4:	68fb      	ldr	r3, [r7, #12]
 800b5a6:	605a      	str	r2, [r3, #4]
 800b5a8:	e026      	b.n	800b5f8 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 800b5aa:	68fb      	ldr	r3, [r7, #12]
 800b5ac:	68d8      	ldr	r0, [r3, #12]
 800b5ae:	68fb      	ldr	r3, [r7, #12]
 800b5b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b5b2:	461a      	mov	r2, r3
 800b5b4:	68b9      	ldr	r1, [r7, #8]
 800b5b6:	f002 fdbb 	bl	800e130 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 800b5ba:	68fb      	ldr	r3, [r7, #12]
 800b5bc:	68da      	ldr	r2, [r3, #12]
 800b5be:	68fb      	ldr	r3, [r7, #12]
 800b5c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b5c2:	425b      	negs	r3, r3
 800b5c4:	441a      	add	r2, r3
 800b5c6:	68fb      	ldr	r3, [r7, #12]
 800b5c8:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800b5ca:	68fb      	ldr	r3, [r7, #12]
 800b5cc:	68da      	ldr	r2, [r3, #12]
 800b5ce:	68fb      	ldr	r3, [r7, #12]
 800b5d0:	681b      	ldr	r3, [r3, #0]
 800b5d2:	429a      	cmp	r2, r3
 800b5d4:	d207      	bcs.n	800b5e6 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 800b5d6:	68fb      	ldr	r3, [r7, #12]
 800b5d8:	689a      	ldr	r2, [r3, #8]
 800b5da:	68fb      	ldr	r3, [r7, #12]
 800b5dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b5de:	425b      	negs	r3, r3
 800b5e0:	441a      	add	r2, r3
 800b5e2:	68fb      	ldr	r3, [r7, #12]
 800b5e4:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 800b5e6:	687b      	ldr	r3, [r7, #4]
 800b5e8:	2b02      	cmp	r3, #2
 800b5ea:	d105      	bne.n	800b5f8 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800b5ec:	693b      	ldr	r3, [r7, #16]
 800b5ee:	2b00      	cmp	r3, #0
 800b5f0:	d002      	beq.n	800b5f8 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 800b5f2:	693b      	ldr	r3, [r7, #16]
 800b5f4:	3b01      	subs	r3, #1
 800b5f6:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800b5f8:	693b      	ldr	r3, [r7, #16]
 800b5fa:	1c5a      	adds	r2, r3, #1
 800b5fc:	68fb      	ldr	r3, [r7, #12]
 800b5fe:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 800b600:	697b      	ldr	r3, [r7, #20]
}
 800b602:	4618      	mov	r0, r3
 800b604:	3718      	adds	r7, #24
 800b606:	46bd      	mov	sp, r7
 800b608:	bd80      	pop	{r7, pc}

0800b60a <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 800b60a:	b580      	push	{r7, lr}
 800b60c:	b082      	sub	sp, #8
 800b60e:	af00      	add	r7, sp, #0
 800b610:	6078      	str	r0, [r7, #4]
 800b612:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800b614:	687b      	ldr	r3, [r7, #4]
 800b616:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b618:	2b00      	cmp	r3, #0
 800b61a:	d018      	beq.n	800b64e <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800b61c:	687b      	ldr	r3, [r7, #4]
 800b61e:	68da      	ldr	r2, [r3, #12]
 800b620:	687b      	ldr	r3, [r7, #4]
 800b622:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b624:	441a      	add	r2, r3
 800b626:	687b      	ldr	r3, [r7, #4]
 800b628:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 800b62a:	687b      	ldr	r3, [r7, #4]
 800b62c:	68da      	ldr	r2, [r3, #12]
 800b62e:	687b      	ldr	r3, [r7, #4]
 800b630:	689b      	ldr	r3, [r3, #8]
 800b632:	429a      	cmp	r2, r3
 800b634:	d303      	bcc.n	800b63e <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 800b636:	687b      	ldr	r3, [r7, #4]
 800b638:	681a      	ldr	r2, [r3, #0]
 800b63a:	687b      	ldr	r3, [r7, #4]
 800b63c:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800b63e:	687b      	ldr	r3, [r7, #4]
 800b640:	68d9      	ldr	r1, [r3, #12]
 800b642:	687b      	ldr	r3, [r7, #4]
 800b644:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b646:	461a      	mov	r2, r3
 800b648:	6838      	ldr	r0, [r7, #0]
 800b64a:	f002 fd71 	bl	800e130 <memcpy>
	}
}
 800b64e:	bf00      	nop
 800b650:	3708      	adds	r7, #8
 800b652:	46bd      	mov	sp, r7
 800b654:	bd80      	pop	{r7, pc}

0800b656 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 800b656:	b580      	push	{r7, lr}
 800b658:	b084      	sub	sp, #16
 800b65a:	af00      	add	r7, sp, #0
 800b65c:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 800b65e:	f001 fc71 	bl	800cf44 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 800b662:	687b      	ldr	r3, [r7, #4]
 800b664:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800b668:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800b66a:	e011      	b.n	800b690 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800b66c:	687b      	ldr	r3, [r7, #4]
 800b66e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b670:	2b00      	cmp	r3, #0
 800b672:	d012      	beq.n	800b69a <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800b674:	687b      	ldr	r3, [r7, #4]
 800b676:	3324      	adds	r3, #36	; 0x24
 800b678:	4618      	mov	r0, r3
 800b67a:	f000 fd47 	bl	800c10c <xTaskRemoveFromEventList>
 800b67e:	4603      	mov	r3, r0
 800b680:	2b00      	cmp	r3, #0
 800b682:	d001      	beq.n	800b688 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 800b684:	f000 fe1e 	bl	800c2c4 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 800b688:	7bfb      	ldrb	r3, [r7, #15]
 800b68a:	3b01      	subs	r3, #1
 800b68c:	b2db      	uxtb	r3, r3
 800b68e:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800b690:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800b694:	2b00      	cmp	r3, #0
 800b696:	dce9      	bgt.n	800b66c <prvUnlockQueue+0x16>
 800b698:	e000      	b.n	800b69c <prvUnlockQueue+0x46>
					break;
 800b69a:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 800b69c:	687b      	ldr	r3, [r7, #4]
 800b69e:	22ff      	movs	r2, #255	; 0xff
 800b6a0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 800b6a4:	f001 fc7e 	bl	800cfa4 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 800b6a8:	f001 fc4c 	bl	800cf44 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 800b6ac:	687b      	ldr	r3, [r7, #4]
 800b6ae:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800b6b2:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 800b6b4:	e011      	b.n	800b6da <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800b6b6:	687b      	ldr	r3, [r7, #4]
 800b6b8:	691b      	ldr	r3, [r3, #16]
 800b6ba:	2b00      	cmp	r3, #0
 800b6bc:	d012      	beq.n	800b6e4 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800b6be:	687b      	ldr	r3, [r7, #4]
 800b6c0:	3310      	adds	r3, #16
 800b6c2:	4618      	mov	r0, r3
 800b6c4:	f000 fd22 	bl	800c10c <xTaskRemoveFromEventList>
 800b6c8:	4603      	mov	r3, r0
 800b6ca:	2b00      	cmp	r3, #0
 800b6cc:	d001      	beq.n	800b6d2 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 800b6ce:	f000 fdf9 	bl	800c2c4 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 800b6d2:	7bbb      	ldrb	r3, [r7, #14]
 800b6d4:	3b01      	subs	r3, #1
 800b6d6:	b2db      	uxtb	r3, r3
 800b6d8:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800b6da:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800b6de:	2b00      	cmp	r3, #0
 800b6e0:	dce9      	bgt.n	800b6b6 <prvUnlockQueue+0x60>
 800b6e2:	e000      	b.n	800b6e6 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 800b6e4:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 800b6e6:	687b      	ldr	r3, [r7, #4]
 800b6e8:	22ff      	movs	r2, #255	; 0xff
 800b6ea:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 800b6ee:	f001 fc59 	bl	800cfa4 <vPortExitCritical>
}
 800b6f2:	bf00      	nop
 800b6f4:	3710      	adds	r7, #16
 800b6f6:	46bd      	mov	sp, r7
 800b6f8:	bd80      	pop	{r7, pc}

0800b6fa <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 800b6fa:	b580      	push	{r7, lr}
 800b6fc:	b084      	sub	sp, #16
 800b6fe:	af00      	add	r7, sp, #0
 800b700:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800b702:	f001 fc1f 	bl	800cf44 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 800b706:	687b      	ldr	r3, [r7, #4]
 800b708:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b70a:	2b00      	cmp	r3, #0
 800b70c:	d102      	bne.n	800b714 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 800b70e:	2301      	movs	r3, #1
 800b710:	60fb      	str	r3, [r7, #12]
 800b712:	e001      	b.n	800b718 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 800b714:	2300      	movs	r3, #0
 800b716:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800b718:	f001 fc44 	bl	800cfa4 <vPortExitCritical>

	return xReturn;
 800b71c:	68fb      	ldr	r3, [r7, #12]
}
 800b71e:	4618      	mov	r0, r3
 800b720:	3710      	adds	r7, #16
 800b722:	46bd      	mov	sp, r7
 800b724:	bd80      	pop	{r7, pc}

0800b726 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 800b726:	b580      	push	{r7, lr}
 800b728:	b084      	sub	sp, #16
 800b72a:	af00      	add	r7, sp, #0
 800b72c:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800b72e:	f001 fc09 	bl	800cf44 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 800b732:	687b      	ldr	r3, [r7, #4]
 800b734:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800b736:	687b      	ldr	r3, [r7, #4]
 800b738:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b73a:	429a      	cmp	r2, r3
 800b73c:	d102      	bne.n	800b744 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 800b73e:	2301      	movs	r3, #1
 800b740:	60fb      	str	r3, [r7, #12]
 800b742:	e001      	b.n	800b748 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 800b744:	2300      	movs	r3, #0
 800b746:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800b748:	f001 fc2c 	bl	800cfa4 <vPortExitCritical>

	return xReturn;
 800b74c:	68fb      	ldr	r3, [r7, #12]
}
 800b74e:	4618      	mov	r0, r3
 800b750:	3710      	adds	r7, #16
 800b752:	46bd      	mov	sp, r7
 800b754:	bd80      	pop	{r7, pc}
	...

0800b758 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 800b758:	b480      	push	{r7}
 800b75a:	b085      	sub	sp, #20
 800b75c:	af00      	add	r7, sp, #0
 800b75e:	6078      	str	r0, [r7, #4]
 800b760:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800b762:	2300      	movs	r3, #0
 800b764:	60fb      	str	r3, [r7, #12]
 800b766:	e014      	b.n	800b792 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 800b768:	4a0f      	ldr	r2, [pc, #60]	; (800b7a8 <vQueueAddToRegistry+0x50>)
 800b76a:	68fb      	ldr	r3, [r7, #12]
 800b76c:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 800b770:	2b00      	cmp	r3, #0
 800b772:	d10b      	bne.n	800b78c <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 800b774:	490c      	ldr	r1, [pc, #48]	; (800b7a8 <vQueueAddToRegistry+0x50>)
 800b776:	68fb      	ldr	r3, [r7, #12]
 800b778:	683a      	ldr	r2, [r7, #0]
 800b77a:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 800b77e:	4a0a      	ldr	r2, [pc, #40]	; (800b7a8 <vQueueAddToRegistry+0x50>)
 800b780:	68fb      	ldr	r3, [r7, #12]
 800b782:	00db      	lsls	r3, r3, #3
 800b784:	4413      	add	r3, r2
 800b786:	687a      	ldr	r2, [r7, #4]
 800b788:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 800b78a:	e006      	b.n	800b79a <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800b78c:	68fb      	ldr	r3, [r7, #12]
 800b78e:	3301      	adds	r3, #1
 800b790:	60fb      	str	r3, [r7, #12]
 800b792:	68fb      	ldr	r3, [r7, #12]
 800b794:	2b07      	cmp	r3, #7
 800b796:	d9e7      	bls.n	800b768 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 800b798:	bf00      	nop
 800b79a:	bf00      	nop
 800b79c:	3714      	adds	r7, #20
 800b79e:	46bd      	mov	sp, r7
 800b7a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b7a4:	4770      	bx	lr
 800b7a6:	bf00      	nop
 800b7a8:	20000de4 	.word	0x20000de4

0800b7ac <vQueueUnregisterQueue>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueUnregisterQueue( QueueHandle_t xQueue )
	{
 800b7ac:	b480      	push	{r7}
 800b7ae:	b085      	sub	sp, #20
 800b7b0:	af00      	add	r7, sp, #0
 800b7b2:	6078      	str	r0, [r7, #4]
	UBaseType_t ux;

		/* See if the handle of the queue being unregistered in actually in the
		registry. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800b7b4:	2300      	movs	r3, #0
 800b7b6:	60fb      	str	r3, [r7, #12]
 800b7b8:	e016      	b.n	800b7e8 <vQueueUnregisterQueue+0x3c>
		{
			if( xQueueRegistry[ ux ].xHandle == xQueue )
 800b7ba:	4a10      	ldr	r2, [pc, #64]	; (800b7fc <vQueueUnregisterQueue+0x50>)
 800b7bc:	68fb      	ldr	r3, [r7, #12]
 800b7be:	00db      	lsls	r3, r3, #3
 800b7c0:	4413      	add	r3, r2
 800b7c2:	685b      	ldr	r3, [r3, #4]
 800b7c4:	687a      	ldr	r2, [r7, #4]
 800b7c6:	429a      	cmp	r2, r3
 800b7c8:	d10b      	bne.n	800b7e2 <vQueueUnregisterQueue+0x36>
			{
				/* Set the name to NULL to show that this slot if free again. */
				xQueueRegistry[ ux ].pcQueueName = NULL;
 800b7ca:	4a0c      	ldr	r2, [pc, #48]	; (800b7fc <vQueueUnregisterQueue+0x50>)
 800b7cc:	68fb      	ldr	r3, [r7, #12]
 800b7ce:	2100      	movs	r1, #0
 800b7d0:	f842 1033 	str.w	r1, [r2, r3, lsl #3]

				/* Set the handle to NULL to ensure the same queue handle cannot
				appear in the registry twice if it is added, removed, then
				added again. */
				xQueueRegistry[ ux ].xHandle = ( QueueHandle_t ) 0;
 800b7d4:	4a09      	ldr	r2, [pc, #36]	; (800b7fc <vQueueUnregisterQueue+0x50>)
 800b7d6:	68fb      	ldr	r3, [r7, #12]
 800b7d8:	00db      	lsls	r3, r3, #3
 800b7da:	4413      	add	r3, r2
 800b7dc:	2200      	movs	r2, #0
 800b7de:	605a      	str	r2, [r3, #4]
				break;
 800b7e0:	e006      	b.n	800b7f0 <vQueueUnregisterQueue+0x44>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800b7e2:	68fb      	ldr	r3, [r7, #12]
 800b7e4:	3301      	adds	r3, #1
 800b7e6:	60fb      	str	r3, [r7, #12]
 800b7e8:	68fb      	ldr	r3, [r7, #12]
 800b7ea:	2b07      	cmp	r3, #7
 800b7ec:	d9e5      	bls.n	800b7ba <vQueueUnregisterQueue+0xe>
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

	} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
 800b7ee:	bf00      	nop
 800b7f0:	bf00      	nop
 800b7f2:	3714      	adds	r7, #20
 800b7f4:	46bd      	mov	sp, r7
 800b7f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b7fa:	4770      	bx	lr
 800b7fc:	20000de4 	.word	0x20000de4

0800b800 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800b800:	b580      	push	{r7, lr}
 800b802:	b086      	sub	sp, #24
 800b804:	af00      	add	r7, sp, #0
 800b806:	60f8      	str	r0, [r7, #12]
 800b808:	60b9      	str	r1, [r7, #8]
 800b80a:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 800b80c:	68fb      	ldr	r3, [r7, #12]
 800b80e:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 800b810:	f001 fb98 	bl	800cf44 <vPortEnterCritical>
 800b814:	697b      	ldr	r3, [r7, #20]
 800b816:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800b81a:	b25b      	sxtb	r3, r3
 800b81c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b820:	d103      	bne.n	800b82a <vQueueWaitForMessageRestricted+0x2a>
 800b822:	697b      	ldr	r3, [r7, #20]
 800b824:	2200      	movs	r2, #0
 800b826:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800b82a:	697b      	ldr	r3, [r7, #20]
 800b82c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800b830:	b25b      	sxtb	r3, r3
 800b832:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b836:	d103      	bne.n	800b840 <vQueueWaitForMessageRestricted+0x40>
 800b838:	697b      	ldr	r3, [r7, #20]
 800b83a:	2200      	movs	r2, #0
 800b83c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800b840:	f001 fbb0 	bl	800cfa4 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 800b844:	697b      	ldr	r3, [r7, #20]
 800b846:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b848:	2b00      	cmp	r3, #0
 800b84a:	d106      	bne.n	800b85a <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 800b84c:	697b      	ldr	r3, [r7, #20]
 800b84e:	3324      	adds	r3, #36	; 0x24
 800b850:	687a      	ldr	r2, [r7, #4]
 800b852:	68b9      	ldr	r1, [r7, #8]
 800b854:	4618      	mov	r0, r3
 800b856:	f000 fc2d 	bl	800c0b4 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 800b85a:	6978      	ldr	r0, [r7, #20]
 800b85c:	f7ff fefb 	bl	800b656 <prvUnlockQueue>
	}
 800b860:	bf00      	nop
 800b862:	3718      	adds	r7, #24
 800b864:	46bd      	mov	sp, r7
 800b866:	bd80      	pop	{r7, pc}

0800b868 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 800b868:	b580      	push	{r7, lr}
 800b86a:	b08e      	sub	sp, #56	; 0x38
 800b86c:	af04      	add	r7, sp, #16
 800b86e:	60f8      	str	r0, [r7, #12]
 800b870:	60b9      	str	r1, [r7, #8]
 800b872:	607a      	str	r2, [r7, #4]
 800b874:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800b876:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b878:	2b00      	cmp	r3, #0
 800b87a:	d10a      	bne.n	800b892 <xTaskCreateStatic+0x2a>
	__asm volatile
 800b87c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b880:	f383 8811 	msr	BASEPRI, r3
 800b884:	f3bf 8f6f 	isb	sy
 800b888:	f3bf 8f4f 	dsb	sy
 800b88c:	623b      	str	r3, [r7, #32]
}
 800b88e:	bf00      	nop
 800b890:	e7fe      	b.n	800b890 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 800b892:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b894:	2b00      	cmp	r3, #0
 800b896:	d10a      	bne.n	800b8ae <xTaskCreateStatic+0x46>
	__asm volatile
 800b898:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b89c:	f383 8811 	msr	BASEPRI, r3
 800b8a0:	f3bf 8f6f 	isb	sy
 800b8a4:	f3bf 8f4f 	dsb	sy
 800b8a8:	61fb      	str	r3, [r7, #28]
}
 800b8aa:	bf00      	nop
 800b8ac:	e7fe      	b.n	800b8ac <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800b8ae:	23a8      	movs	r3, #168	; 0xa8
 800b8b0:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800b8b2:	693b      	ldr	r3, [r7, #16]
 800b8b4:	2ba8      	cmp	r3, #168	; 0xa8
 800b8b6:	d00a      	beq.n	800b8ce <xTaskCreateStatic+0x66>
	__asm volatile
 800b8b8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b8bc:	f383 8811 	msr	BASEPRI, r3
 800b8c0:	f3bf 8f6f 	isb	sy
 800b8c4:	f3bf 8f4f 	dsb	sy
 800b8c8:	61bb      	str	r3, [r7, #24]
}
 800b8ca:	bf00      	nop
 800b8cc:	e7fe      	b.n	800b8cc <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 800b8ce:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 800b8d0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b8d2:	2b00      	cmp	r3, #0
 800b8d4:	d01e      	beq.n	800b914 <xTaskCreateStatic+0xac>
 800b8d6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b8d8:	2b00      	cmp	r3, #0
 800b8da:	d01b      	beq.n	800b914 <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800b8dc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b8de:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800b8e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b8e2:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800b8e4:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800b8e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b8e8:	2202      	movs	r2, #2
 800b8ea:	f883 20a5 	strb.w	r2, [r3, #165]	; 0xa5
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800b8ee:	2300      	movs	r3, #0
 800b8f0:	9303      	str	r3, [sp, #12]
 800b8f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b8f4:	9302      	str	r3, [sp, #8]
 800b8f6:	f107 0314 	add.w	r3, r7, #20
 800b8fa:	9301      	str	r3, [sp, #4]
 800b8fc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b8fe:	9300      	str	r3, [sp, #0]
 800b900:	683b      	ldr	r3, [r7, #0]
 800b902:	687a      	ldr	r2, [r7, #4]
 800b904:	68b9      	ldr	r1, [r7, #8]
 800b906:	68f8      	ldr	r0, [r7, #12]
 800b908:	f000 f850 	bl	800b9ac <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800b90c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800b90e:	f000 f8f3 	bl	800baf8 <prvAddNewTaskToReadyList>
 800b912:	e001      	b.n	800b918 <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 800b914:	2300      	movs	r3, #0
 800b916:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 800b918:	697b      	ldr	r3, [r7, #20]
	}
 800b91a:	4618      	mov	r0, r3
 800b91c:	3728      	adds	r7, #40	; 0x28
 800b91e:	46bd      	mov	sp, r7
 800b920:	bd80      	pop	{r7, pc}

0800b922 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 800b922:	b580      	push	{r7, lr}
 800b924:	b08c      	sub	sp, #48	; 0x30
 800b926:	af04      	add	r7, sp, #16
 800b928:	60f8      	str	r0, [r7, #12]
 800b92a:	60b9      	str	r1, [r7, #8]
 800b92c:	603b      	str	r3, [r7, #0]
 800b92e:	4613      	mov	r3, r2
 800b930:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800b932:	88fb      	ldrh	r3, [r7, #6]
 800b934:	009b      	lsls	r3, r3, #2
 800b936:	4618      	mov	r0, r3
 800b938:	f001 fc26 	bl	800d188 <pvPortMalloc>
 800b93c:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 800b93e:	697b      	ldr	r3, [r7, #20]
 800b940:	2b00      	cmp	r3, #0
 800b942:	d00e      	beq.n	800b962 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 800b944:	20a8      	movs	r0, #168	; 0xa8
 800b946:	f001 fc1f 	bl	800d188 <pvPortMalloc>
 800b94a:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 800b94c:	69fb      	ldr	r3, [r7, #28]
 800b94e:	2b00      	cmp	r3, #0
 800b950:	d003      	beq.n	800b95a <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800b952:	69fb      	ldr	r3, [r7, #28]
 800b954:	697a      	ldr	r2, [r7, #20]
 800b956:	631a      	str	r2, [r3, #48]	; 0x30
 800b958:	e005      	b.n	800b966 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 800b95a:	6978      	ldr	r0, [r7, #20]
 800b95c:	f001 fce0 	bl	800d320 <vPortFree>
 800b960:	e001      	b.n	800b966 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800b962:	2300      	movs	r3, #0
 800b964:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800b966:	69fb      	ldr	r3, [r7, #28]
 800b968:	2b00      	cmp	r3, #0
 800b96a:	d017      	beq.n	800b99c <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800b96c:	69fb      	ldr	r3, [r7, #28]
 800b96e:	2200      	movs	r2, #0
 800b970:	f883 20a5 	strb.w	r2, [r3, #165]	; 0xa5
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800b974:	88fa      	ldrh	r2, [r7, #6]
 800b976:	2300      	movs	r3, #0
 800b978:	9303      	str	r3, [sp, #12]
 800b97a:	69fb      	ldr	r3, [r7, #28]
 800b97c:	9302      	str	r3, [sp, #8]
 800b97e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b980:	9301      	str	r3, [sp, #4]
 800b982:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b984:	9300      	str	r3, [sp, #0]
 800b986:	683b      	ldr	r3, [r7, #0]
 800b988:	68b9      	ldr	r1, [r7, #8]
 800b98a:	68f8      	ldr	r0, [r7, #12]
 800b98c:	f000 f80e 	bl	800b9ac <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800b990:	69f8      	ldr	r0, [r7, #28]
 800b992:	f000 f8b1 	bl	800baf8 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800b996:	2301      	movs	r3, #1
 800b998:	61bb      	str	r3, [r7, #24]
 800b99a:	e002      	b.n	800b9a2 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800b99c:	f04f 33ff 	mov.w	r3, #4294967295
 800b9a0:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800b9a2:	69bb      	ldr	r3, [r7, #24]
	}
 800b9a4:	4618      	mov	r0, r3
 800b9a6:	3720      	adds	r7, #32
 800b9a8:	46bd      	mov	sp, r7
 800b9aa:	bd80      	pop	{r7, pc}

0800b9ac <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 800b9ac:	b580      	push	{r7, lr}
 800b9ae:	b088      	sub	sp, #32
 800b9b0:	af00      	add	r7, sp, #0
 800b9b2:	60f8      	str	r0, [r7, #12]
 800b9b4:	60b9      	str	r1, [r7, #8]
 800b9b6:	607a      	str	r2, [r7, #4]
 800b9b8:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 800b9ba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b9bc:	6b18      	ldr	r0, [r3, #48]	; 0x30
 800b9be:	687b      	ldr	r3, [r7, #4]
 800b9c0:	009b      	lsls	r3, r3, #2
 800b9c2:	461a      	mov	r2, r3
 800b9c4:	21a5      	movs	r1, #165	; 0xa5
 800b9c6:	f002 fb2f 	bl	800e028 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800b9ca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b9cc:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800b9ce:	687b      	ldr	r3, [r7, #4]
 800b9d0:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 800b9d4:	3b01      	subs	r3, #1
 800b9d6:	009b      	lsls	r3, r3, #2
 800b9d8:	4413      	add	r3, r2
 800b9da:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 800b9dc:	69bb      	ldr	r3, [r7, #24]
 800b9de:	f023 0307 	bic.w	r3, r3, #7
 800b9e2:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800b9e4:	69bb      	ldr	r3, [r7, #24]
 800b9e6:	f003 0307 	and.w	r3, r3, #7
 800b9ea:	2b00      	cmp	r3, #0
 800b9ec:	d00a      	beq.n	800ba04 <prvInitialiseNewTask+0x58>
	__asm volatile
 800b9ee:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b9f2:	f383 8811 	msr	BASEPRI, r3
 800b9f6:	f3bf 8f6f 	isb	sy
 800b9fa:	f3bf 8f4f 	dsb	sy
 800b9fe:	617b      	str	r3, [r7, #20]
}
 800ba00:	bf00      	nop
 800ba02:	e7fe      	b.n	800ba02 <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 800ba04:	68bb      	ldr	r3, [r7, #8]
 800ba06:	2b00      	cmp	r3, #0
 800ba08:	d01f      	beq.n	800ba4a <prvInitialiseNewTask+0x9e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800ba0a:	2300      	movs	r3, #0
 800ba0c:	61fb      	str	r3, [r7, #28]
 800ba0e:	e012      	b.n	800ba36 <prvInitialiseNewTask+0x8a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800ba10:	68ba      	ldr	r2, [r7, #8]
 800ba12:	69fb      	ldr	r3, [r7, #28]
 800ba14:	4413      	add	r3, r2
 800ba16:	7819      	ldrb	r1, [r3, #0]
 800ba18:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800ba1a:	69fb      	ldr	r3, [r7, #28]
 800ba1c:	4413      	add	r3, r2
 800ba1e:	3334      	adds	r3, #52	; 0x34
 800ba20:	460a      	mov	r2, r1
 800ba22:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 800ba24:	68ba      	ldr	r2, [r7, #8]
 800ba26:	69fb      	ldr	r3, [r7, #28]
 800ba28:	4413      	add	r3, r2
 800ba2a:	781b      	ldrb	r3, [r3, #0]
 800ba2c:	2b00      	cmp	r3, #0
 800ba2e:	d006      	beq.n	800ba3e <prvInitialiseNewTask+0x92>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800ba30:	69fb      	ldr	r3, [r7, #28]
 800ba32:	3301      	adds	r3, #1
 800ba34:	61fb      	str	r3, [r7, #28]
 800ba36:	69fb      	ldr	r3, [r7, #28]
 800ba38:	2b0f      	cmp	r3, #15
 800ba3a:	d9e9      	bls.n	800ba10 <prvInitialiseNewTask+0x64>
 800ba3c:	e000      	b.n	800ba40 <prvInitialiseNewTask+0x94>
			{
				break;
 800ba3e:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800ba40:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ba42:	2200      	movs	r2, #0
 800ba44:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800ba48:	e003      	b.n	800ba52 <prvInitialiseNewTask+0xa6>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 800ba4a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ba4c:	2200      	movs	r2, #0
 800ba4e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800ba52:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ba54:	2b37      	cmp	r3, #55	; 0x37
 800ba56:	d901      	bls.n	800ba5c <prvInitialiseNewTask+0xb0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800ba58:	2337      	movs	r3, #55	; 0x37
 800ba5a:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 800ba5c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ba5e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800ba60:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800ba62:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ba64:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800ba66:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 800ba68:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ba6a:	2200      	movs	r2, #0
 800ba6c:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800ba6e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ba70:	3304      	adds	r3, #4
 800ba72:	4618      	mov	r0, r3
 800ba74:	f7fe fffa 	bl	800aa6c <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800ba78:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ba7a:	3318      	adds	r3, #24
 800ba7c:	4618      	mov	r0, r3
 800ba7e:	f7fe fff5 	bl	800aa6c <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800ba82:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ba84:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800ba86:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800ba88:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ba8a:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800ba8e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ba90:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800ba92:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ba94:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800ba96:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 800ba98:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ba9a:	2200      	movs	r2, #0
 800ba9c:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800baa0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800baa2:	2200      	movs	r2, #0
 800baa4:	f883 20a4 	strb.w	r2, [r3, #164]	; 0xa4
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 800baa8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800baaa:	3354      	adds	r3, #84	; 0x54
 800baac:	224c      	movs	r2, #76	; 0x4c
 800baae:	2100      	movs	r1, #0
 800bab0:	4618      	mov	r0, r3
 800bab2:	f002 fab9 	bl	800e028 <memset>
 800bab6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bab8:	4a0c      	ldr	r2, [pc, #48]	; (800baec <prvInitialiseNewTask+0x140>)
 800baba:	659a      	str	r2, [r3, #88]	; 0x58
 800babc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800babe:	4a0c      	ldr	r2, [pc, #48]	; (800baf0 <prvInitialiseNewTask+0x144>)
 800bac0:	65da      	str	r2, [r3, #92]	; 0x5c
 800bac2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bac4:	4a0b      	ldr	r2, [pc, #44]	; (800baf4 <prvInitialiseNewTask+0x148>)
 800bac6:	661a      	str	r2, [r3, #96]	; 0x60
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800bac8:	683a      	ldr	r2, [r7, #0]
 800baca:	68f9      	ldr	r1, [r7, #12]
 800bacc:	69b8      	ldr	r0, [r7, #24]
 800bace:	f001 f90d 	bl	800ccec <pxPortInitialiseStack>
 800bad2:	4602      	mov	r2, r0
 800bad4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bad6:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 800bad8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bada:	2b00      	cmp	r3, #0
 800badc:	d002      	beq.n	800bae4 <prvInitialiseNewTask+0x138>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800bade:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bae0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800bae2:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800bae4:	bf00      	nop
 800bae6:	3720      	adds	r7, #32
 800bae8:	46bd      	mov	sp, r7
 800baea:	bd80      	pop	{r7, pc}
 800baec:	20006c58 	.word	0x20006c58
 800baf0:	20006cc0 	.word	0x20006cc0
 800baf4:	20006d28 	.word	0x20006d28

0800baf8 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 800baf8:	b580      	push	{r7, lr}
 800bafa:	b082      	sub	sp, #8
 800bafc:	af00      	add	r7, sp, #0
 800bafe:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 800bb00:	f001 fa20 	bl	800cf44 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 800bb04:	4b2d      	ldr	r3, [pc, #180]	; (800bbbc <prvAddNewTaskToReadyList+0xc4>)
 800bb06:	681b      	ldr	r3, [r3, #0]
 800bb08:	3301      	adds	r3, #1
 800bb0a:	4a2c      	ldr	r2, [pc, #176]	; (800bbbc <prvAddNewTaskToReadyList+0xc4>)
 800bb0c:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800bb0e:	4b2c      	ldr	r3, [pc, #176]	; (800bbc0 <prvAddNewTaskToReadyList+0xc8>)
 800bb10:	681b      	ldr	r3, [r3, #0]
 800bb12:	2b00      	cmp	r3, #0
 800bb14:	d109      	bne.n	800bb2a <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800bb16:	4a2a      	ldr	r2, [pc, #168]	; (800bbc0 <prvAddNewTaskToReadyList+0xc8>)
 800bb18:	687b      	ldr	r3, [r7, #4]
 800bb1a:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800bb1c:	4b27      	ldr	r3, [pc, #156]	; (800bbbc <prvAddNewTaskToReadyList+0xc4>)
 800bb1e:	681b      	ldr	r3, [r3, #0]
 800bb20:	2b01      	cmp	r3, #1
 800bb22:	d110      	bne.n	800bb46 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 800bb24:	f000 fbf2 	bl	800c30c <prvInitialiseTaskLists>
 800bb28:	e00d      	b.n	800bb46 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800bb2a:	4b26      	ldr	r3, [pc, #152]	; (800bbc4 <prvAddNewTaskToReadyList+0xcc>)
 800bb2c:	681b      	ldr	r3, [r3, #0]
 800bb2e:	2b00      	cmp	r3, #0
 800bb30:	d109      	bne.n	800bb46 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800bb32:	4b23      	ldr	r3, [pc, #140]	; (800bbc0 <prvAddNewTaskToReadyList+0xc8>)
 800bb34:	681b      	ldr	r3, [r3, #0]
 800bb36:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800bb38:	687b      	ldr	r3, [r7, #4]
 800bb3a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bb3c:	429a      	cmp	r2, r3
 800bb3e:	d802      	bhi.n	800bb46 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 800bb40:	4a1f      	ldr	r2, [pc, #124]	; (800bbc0 <prvAddNewTaskToReadyList+0xc8>)
 800bb42:	687b      	ldr	r3, [r7, #4]
 800bb44:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800bb46:	4b20      	ldr	r3, [pc, #128]	; (800bbc8 <prvAddNewTaskToReadyList+0xd0>)
 800bb48:	681b      	ldr	r3, [r3, #0]
 800bb4a:	3301      	adds	r3, #1
 800bb4c:	4a1e      	ldr	r2, [pc, #120]	; (800bbc8 <prvAddNewTaskToReadyList+0xd0>)
 800bb4e:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 800bb50:	4b1d      	ldr	r3, [pc, #116]	; (800bbc8 <prvAddNewTaskToReadyList+0xd0>)
 800bb52:	681a      	ldr	r2, [r3, #0]
 800bb54:	687b      	ldr	r3, [r7, #4]
 800bb56:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 800bb58:	687b      	ldr	r3, [r7, #4]
 800bb5a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800bb5c:	4b1b      	ldr	r3, [pc, #108]	; (800bbcc <prvAddNewTaskToReadyList+0xd4>)
 800bb5e:	681b      	ldr	r3, [r3, #0]
 800bb60:	429a      	cmp	r2, r3
 800bb62:	d903      	bls.n	800bb6c <prvAddNewTaskToReadyList+0x74>
 800bb64:	687b      	ldr	r3, [r7, #4]
 800bb66:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bb68:	4a18      	ldr	r2, [pc, #96]	; (800bbcc <prvAddNewTaskToReadyList+0xd4>)
 800bb6a:	6013      	str	r3, [r2, #0]
 800bb6c:	687b      	ldr	r3, [r7, #4]
 800bb6e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800bb70:	4613      	mov	r3, r2
 800bb72:	009b      	lsls	r3, r3, #2
 800bb74:	4413      	add	r3, r2
 800bb76:	009b      	lsls	r3, r3, #2
 800bb78:	4a15      	ldr	r2, [pc, #84]	; (800bbd0 <prvAddNewTaskToReadyList+0xd8>)
 800bb7a:	441a      	add	r2, r3
 800bb7c:	687b      	ldr	r3, [r7, #4]
 800bb7e:	3304      	adds	r3, #4
 800bb80:	4619      	mov	r1, r3
 800bb82:	4610      	mov	r0, r2
 800bb84:	f7fe ff7f 	bl	800aa86 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800bb88:	f001 fa0c 	bl	800cfa4 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800bb8c:	4b0d      	ldr	r3, [pc, #52]	; (800bbc4 <prvAddNewTaskToReadyList+0xcc>)
 800bb8e:	681b      	ldr	r3, [r3, #0]
 800bb90:	2b00      	cmp	r3, #0
 800bb92:	d00e      	beq.n	800bbb2 <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800bb94:	4b0a      	ldr	r3, [pc, #40]	; (800bbc0 <prvAddNewTaskToReadyList+0xc8>)
 800bb96:	681b      	ldr	r3, [r3, #0]
 800bb98:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800bb9a:	687b      	ldr	r3, [r7, #4]
 800bb9c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bb9e:	429a      	cmp	r2, r3
 800bba0:	d207      	bcs.n	800bbb2 <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800bba2:	4b0c      	ldr	r3, [pc, #48]	; (800bbd4 <prvAddNewTaskToReadyList+0xdc>)
 800bba4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800bba8:	601a      	str	r2, [r3, #0]
 800bbaa:	f3bf 8f4f 	dsb	sy
 800bbae:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800bbb2:	bf00      	nop
 800bbb4:	3708      	adds	r7, #8
 800bbb6:	46bd      	mov	sp, r7
 800bbb8:	bd80      	pop	{r7, pc}
 800bbba:	bf00      	nop
 800bbbc:	200012f8 	.word	0x200012f8
 800bbc0:	20000e24 	.word	0x20000e24
 800bbc4:	20001304 	.word	0x20001304
 800bbc8:	20001314 	.word	0x20001314
 800bbcc:	20001300 	.word	0x20001300
 800bbd0:	20000e28 	.word	0x20000e28
 800bbd4:	e000ed04 	.word	0xe000ed04

0800bbd8 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 800bbd8:	b580      	push	{r7, lr}
 800bbda:	b08a      	sub	sp, #40	; 0x28
 800bbdc:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800bbde:	2300      	movs	r3, #0
 800bbe0:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800bbe2:	2300      	movs	r3, #0
 800bbe4:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800bbe6:	463a      	mov	r2, r7
 800bbe8:	1d39      	adds	r1, r7, #4
 800bbea:	f107 0308 	add.w	r3, r7, #8
 800bbee:	4618      	mov	r0, r3
 800bbf0:	f7fe fee8 	bl	800a9c4 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 800bbf4:	6839      	ldr	r1, [r7, #0]
 800bbf6:	687b      	ldr	r3, [r7, #4]
 800bbf8:	68ba      	ldr	r2, [r7, #8]
 800bbfa:	9202      	str	r2, [sp, #8]
 800bbfc:	9301      	str	r3, [sp, #4]
 800bbfe:	2300      	movs	r3, #0
 800bc00:	9300      	str	r3, [sp, #0]
 800bc02:	2300      	movs	r3, #0
 800bc04:	460a      	mov	r2, r1
 800bc06:	4924      	ldr	r1, [pc, #144]	; (800bc98 <vTaskStartScheduler+0xc0>)
 800bc08:	4824      	ldr	r0, [pc, #144]	; (800bc9c <vTaskStartScheduler+0xc4>)
 800bc0a:	f7ff fe2d 	bl	800b868 <xTaskCreateStatic>
 800bc0e:	4603      	mov	r3, r0
 800bc10:	4a23      	ldr	r2, [pc, #140]	; (800bca0 <vTaskStartScheduler+0xc8>)
 800bc12:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 800bc14:	4b22      	ldr	r3, [pc, #136]	; (800bca0 <vTaskStartScheduler+0xc8>)
 800bc16:	681b      	ldr	r3, [r3, #0]
 800bc18:	2b00      	cmp	r3, #0
 800bc1a:	d002      	beq.n	800bc22 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 800bc1c:	2301      	movs	r3, #1
 800bc1e:	617b      	str	r3, [r7, #20]
 800bc20:	e001      	b.n	800bc26 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800bc22:	2300      	movs	r3, #0
 800bc24:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 800bc26:	697b      	ldr	r3, [r7, #20]
 800bc28:	2b01      	cmp	r3, #1
 800bc2a:	d102      	bne.n	800bc32 <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 800bc2c:	f000 fd10 	bl	800c650 <xTimerCreateTimerTask>
 800bc30:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800bc32:	697b      	ldr	r3, [r7, #20]
 800bc34:	2b01      	cmp	r3, #1
 800bc36:	d11b      	bne.n	800bc70 <vTaskStartScheduler+0x98>
	__asm volatile
 800bc38:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bc3c:	f383 8811 	msr	BASEPRI, r3
 800bc40:	f3bf 8f6f 	isb	sy
 800bc44:	f3bf 8f4f 	dsb	sy
 800bc48:	613b      	str	r3, [r7, #16]
}
 800bc4a:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800bc4c:	4b15      	ldr	r3, [pc, #84]	; (800bca4 <vTaskStartScheduler+0xcc>)
 800bc4e:	681b      	ldr	r3, [r3, #0]
 800bc50:	3354      	adds	r3, #84	; 0x54
 800bc52:	4a15      	ldr	r2, [pc, #84]	; (800bca8 <vTaskStartScheduler+0xd0>)
 800bc54:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800bc56:	4b15      	ldr	r3, [pc, #84]	; (800bcac <vTaskStartScheduler+0xd4>)
 800bc58:	f04f 32ff 	mov.w	r2, #4294967295
 800bc5c:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800bc5e:	4b14      	ldr	r3, [pc, #80]	; (800bcb0 <vTaskStartScheduler+0xd8>)
 800bc60:	2201      	movs	r2, #1
 800bc62:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 800bc64:	4b13      	ldr	r3, [pc, #76]	; (800bcb4 <vTaskStartScheduler+0xdc>)
 800bc66:	2200      	movs	r2, #0
 800bc68:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800bc6a:	f001 f8c9 	bl	800ce00 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800bc6e:	e00e      	b.n	800bc8e <vTaskStartScheduler+0xb6>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800bc70:	697b      	ldr	r3, [r7, #20]
 800bc72:	f1b3 3fff 	cmp.w	r3, #4294967295
 800bc76:	d10a      	bne.n	800bc8e <vTaskStartScheduler+0xb6>
	__asm volatile
 800bc78:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bc7c:	f383 8811 	msr	BASEPRI, r3
 800bc80:	f3bf 8f6f 	isb	sy
 800bc84:	f3bf 8f4f 	dsb	sy
 800bc88:	60fb      	str	r3, [r7, #12]
}
 800bc8a:	bf00      	nop
 800bc8c:	e7fe      	b.n	800bc8c <vTaskStartScheduler+0xb4>
}
 800bc8e:	bf00      	nop
 800bc90:	3718      	adds	r7, #24
 800bc92:	46bd      	mov	sp, r7
 800bc94:	bd80      	pop	{r7, pc}
 800bc96:	bf00      	nop
 800bc98:	0800e24c 	.word	0x0800e24c
 800bc9c:	0800c2dd 	.word	0x0800c2dd
 800bca0:	2000131c 	.word	0x2000131c
 800bca4:	20000e24 	.word	0x20000e24
 800bca8:	2000014c 	.word	0x2000014c
 800bcac:	20001318 	.word	0x20001318
 800bcb0:	20001304 	.word	0x20001304
 800bcb4:	200012fc 	.word	0x200012fc

0800bcb8 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 800bcb8:	b480      	push	{r7}
 800bcba:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 800bcbc:	4b04      	ldr	r3, [pc, #16]	; (800bcd0 <vTaskSuspendAll+0x18>)
 800bcbe:	681b      	ldr	r3, [r3, #0]
 800bcc0:	3301      	adds	r3, #1
 800bcc2:	4a03      	ldr	r2, [pc, #12]	; (800bcd0 <vTaskSuspendAll+0x18>)
 800bcc4:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 800bcc6:	bf00      	nop
 800bcc8:	46bd      	mov	sp, r7
 800bcca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bcce:	4770      	bx	lr
 800bcd0:	20001320 	.word	0x20001320

0800bcd4 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 800bcd4:	b580      	push	{r7, lr}
 800bcd6:	b084      	sub	sp, #16
 800bcd8:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800bcda:	2300      	movs	r3, #0
 800bcdc:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800bcde:	2300      	movs	r3, #0
 800bce0:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800bce2:	4b42      	ldr	r3, [pc, #264]	; (800bdec <xTaskResumeAll+0x118>)
 800bce4:	681b      	ldr	r3, [r3, #0]
 800bce6:	2b00      	cmp	r3, #0
 800bce8:	d10a      	bne.n	800bd00 <xTaskResumeAll+0x2c>
	__asm volatile
 800bcea:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bcee:	f383 8811 	msr	BASEPRI, r3
 800bcf2:	f3bf 8f6f 	isb	sy
 800bcf6:	f3bf 8f4f 	dsb	sy
 800bcfa:	603b      	str	r3, [r7, #0]
}
 800bcfc:	bf00      	nop
 800bcfe:	e7fe      	b.n	800bcfe <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800bd00:	f001 f920 	bl	800cf44 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800bd04:	4b39      	ldr	r3, [pc, #228]	; (800bdec <xTaskResumeAll+0x118>)
 800bd06:	681b      	ldr	r3, [r3, #0]
 800bd08:	3b01      	subs	r3, #1
 800bd0a:	4a38      	ldr	r2, [pc, #224]	; (800bdec <xTaskResumeAll+0x118>)
 800bd0c:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800bd0e:	4b37      	ldr	r3, [pc, #220]	; (800bdec <xTaskResumeAll+0x118>)
 800bd10:	681b      	ldr	r3, [r3, #0]
 800bd12:	2b00      	cmp	r3, #0
 800bd14:	d162      	bne.n	800bddc <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800bd16:	4b36      	ldr	r3, [pc, #216]	; (800bdf0 <xTaskResumeAll+0x11c>)
 800bd18:	681b      	ldr	r3, [r3, #0]
 800bd1a:	2b00      	cmp	r3, #0
 800bd1c:	d05e      	beq.n	800bddc <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800bd1e:	e02f      	b.n	800bd80 <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800bd20:	4b34      	ldr	r3, [pc, #208]	; (800bdf4 <xTaskResumeAll+0x120>)
 800bd22:	68db      	ldr	r3, [r3, #12]
 800bd24:	68db      	ldr	r3, [r3, #12]
 800bd26:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800bd28:	68fb      	ldr	r3, [r7, #12]
 800bd2a:	3318      	adds	r3, #24
 800bd2c:	4618      	mov	r0, r3
 800bd2e:	f7fe ff07 	bl	800ab40 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800bd32:	68fb      	ldr	r3, [r7, #12]
 800bd34:	3304      	adds	r3, #4
 800bd36:	4618      	mov	r0, r3
 800bd38:	f7fe ff02 	bl	800ab40 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800bd3c:	68fb      	ldr	r3, [r7, #12]
 800bd3e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800bd40:	4b2d      	ldr	r3, [pc, #180]	; (800bdf8 <xTaskResumeAll+0x124>)
 800bd42:	681b      	ldr	r3, [r3, #0]
 800bd44:	429a      	cmp	r2, r3
 800bd46:	d903      	bls.n	800bd50 <xTaskResumeAll+0x7c>
 800bd48:	68fb      	ldr	r3, [r7, #12]
 800bd4a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bd4c:	4a2a      	ldr	r2, [pc, #168]	; (800bdf8 <xTaskResumeAll+0x124>)
 800bd4e:	6013      	str	r3, [r2, #0]
 800bd50:	68fb      	ldr	r3, [r7, #12]
 800bd52:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800bd54:	4613      	mov	r3, r2
 800bd56:	009b      	lsls	r3, r3, #2
 800bd58:	4413      	add	r3, r2
 800bd5a:	009b      	lsls	r3, r3, #2
 800bd5c:	4a27      	ldr	r2, [pc, #156]	; (800bdfc <xTaskResumeAll+0x128>)
 800bd5e:	441a      	add	r2, r3
 800bd60:	68fb      	ldr	r3, [r7, #12]
 800bd62:	3304      	adds	r3, #4
 800bd64:	4619      	mov	r1, r3
 800bd66:	4610      	mov	r0, r2
 800bd68:	f7fe fe8d 	bl	800aa86 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800bd6c:	68fb      	ldr	r3, [r7, #12]
 800bd6e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800bd70:	4b23      	ldr	r3, [pc, #140]	; (800be00 <xTaskResumeAll+0x12c>)
 800bd72:	681b      	ldr	r3, [r3, #0]
 800bd74:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bd76:	429a      	cmp	r2, r3
 800bd78:	d302      	bcc.n	800bd80 <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 800bd7a:	4b22      	ldr	r3, [pc, #136]	; (800be04 <xTaskResumeAll+0x130>)
 800bd7c:	2201      	movs	r2, #1
 800bd7e:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800bd80:	4b1c      	ldr	r3, [pc, #112]	; (800bdf4 <xTaskResumeAll+0x120>)
 800bd82:	681b      	ldr	r3, [r3, #0]
 800bd84:	2b00      	cmp	r3, #0
 800bd86:	d1cb      	bne.n	800bd20 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800bd88:	68fb      	ldr	r3, [r7, #12]
 800bd8a:	2b00      	cmp	r3, #0
 800bd8c:	d001      	beq.n	800bd92 <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800bd8e:	f000 fb5f 	bl	800c450 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 800bd92:	4b1d      	ldr	r3, [pc, #116]	; (800be08 <xTaskResumeAll+0x134>)
 800bd94:	681b      	ldr	r3, [r3, #0]
 800bd96:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 800bd98:	687b      	ldr	r3, [r7, #4]
 800bd9a:	2b00      	cmp	r3, #0
 800bd9c:	d010      	beq.n	800bdc0 <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800bd9e:	f000 f847 	bl	800be30 <xTaskIncrementTick>
 800bda2:	4603      	mov	r3, r0
 800bda4:	2b00      	cmp	r3, #0
 800bda6:	d002      	beq.n	800bdae <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 800bda8:	4b16      	ldr	r3, [pc, #88]	; (800be04 <xTaskResumeAll+0x130>)
 800bdaa:	2201      	movs	r2, #1
 800bdac:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 800bdae:	687b      	ldr	r3, [r7, #4]
 800bdb0:	3b01      	subs	r3, #1
 800bdb2:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 800bdb4:	687b      	ldr	r3, [r7, #4]
 800bdb6:	2b00      	cmp	r3, #0
 800bdb8:	d1f1      	bne.n	800bd9e <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 800bdba:	4b13      	ldr	r3, [pc, #76]	; (800be08 <xTaskResumeAll+0x134>)
 800bdbc:	2200      	movs	r2, #0
 800bdbe:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800bdc0:	4b10      	ldr	r3, [pc, #64]	; (800be04 <xTaskResumeAll+0x130>)
 800bdc2:	681b      	ldr	r3, [r3, #0]
 800bdc4:	2b00      	cmp	r3, #0
 800bdc6:	d009      	beq.n	800bddc <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800bdc8:	2301      	movs	r3, #1
 800bdca:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800bdcc:	4b0f      	ldr	r3, [pc, #60]	; (800be0c <xTaskResumeAll+0x138>)
 800bdce:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800bdd2:	601a      	str	r2, [r3, #0]
 800bdd4:	f3bf 8f4f 	dsb	sy
 800bdd8:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800bddc:	f001 f8e2 	bl	800cfa4 <vPortExitCritical>

	return xAlreadyYielded;
 800bde0:	68bb      	ldr	r3, [r7, #8]
}
 800bde2:	4618      	mov	r0, r3
 800bde4:	3710      	adds	r7, #16
 800bde6:	46bd      	mov	sp, r7
 800bde8:	bd80      	pop	{r7, pc}
 800bdea:	bf00      	nop
 800bdec:	20001320 	.word	0x20001320
 800bdf0:	200012f8 	.word	0x200012f8
 800bdf4:	200012b8 	.word	0x200012b8
 800bdf8:	20001300 	.word	0x20001300
 800bdfc:	20000e28 	.word	0x20000e28
 800be00:	20000e24 	.word	0x20000e24
 800be04:	2000130c 	.word	0x2000130c
 800be08:	20001308 	.word	0x20001308
 800be0c:	e000ed04 	.word	0xe000ed04

0800be10 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 800be10:	b480      	push	{r7}
 800be12:	b083      	sub	sp, #12
 800be14:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 800be16:	4b05      	ldr	r3, [pc, #20]	; (800be2c <xTaskGetTickCount+0x1c>)
 800be18:	681b      	ldr	r3, [r3, #0]
 800be1a:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 800be1c:	687b      	ldr	r3, [r7, #4]
}
 800be1e:	4618      	mov	r0, r3
 800be20:	370c      	adds	r7, #12
 800be22:	46bd      	mov	sp, r7
 800be24:	f85d 7b04 	ldr.w	r7, [sp], #4
 800be28:	4770      	bx	lr
 800be2a:	bf00      	nop
 800be2c:	200012fc 	.word	0x200012fc

0800be30 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800be30:	b580      	push	{r7, lr}
 800be32:	b086      	sub	sp, #24
 800be34:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800be36:	2300      	movs	r3, #0
 800be38:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800be3a:	4b4f      	ldr	r3, [pc, #316]	; (800bf78 <xTaskIncrementTick+0x148>)
 800be3c:	681b      	ldr	r3, [r3, #0]
 800be3e:	2b00      	cmp	r3, #0
 800be40:	f040 808f 	bne.w	800bf62 <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800be44:	4b4d      	ldr	r3, [pc, #308]	; (800bf7c <xTaskIncrementTick+0x14c>)
 800be46:	681b      	ldr	r3, [r3, #0]
 800be48:	3301      	adds	r3, #1
 800be4a:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 800be4c:	4a4b      	ldr	r2, [pc, #300]	; (800bf7c <xTaskIncrementTick+0x14c>)
 800be4e:	693b      	ldr	r3, [r7, #16]
 800be50:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800be52:	693b      	ldr	r3, [r7, #16]
 800be54:	2b00      	cmp	r3, #0
 800be56:	d120      	bne.n	800be9a <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 800be58:	4b49      	ldr	r3, [pc, #292]	; (800bf80 <xTaskIncrementTick+0x150>)
 800be5a:	681b      	ldr	r3, [r3, #0]
 800be5c:	681b      	ldr	r3, [r3, #0]
 800be5e:	2b00      	cmp	r3, #0
 800be60:	d00a      	beq.n	800be78 <xTaskIncrementTick+0x48>
	__asm volatile
 800be62:	f04f 0350 	mov.w	r3, #80	; 0x50
 800be66:	f383 8811 	msr	BASEPRI, r3
 800be6a:	f3bf 8f6f 	isb	sy
 800be6e:	f3bf 8f4f 	dsb	sy
 800be72:	603b      	str	r3, [r7, #0]
}
 800be74:	bf00      	nop
 800be76:	e7fe      	b.n	800be76 <xTaskIncrementTick+0x46>
 800be78:	4b41      	ldr	r3, [pc, #260]	; (800bf80 <xTaskIncrementTick+0x150>)
 800be7a:	681b      	ldr	r3, [r3, #0]
 800be7c:	60fb      	str	r3, [r7, #12]
 800be7e:	4b41      	ldr	r3, [pc, #260]	; (800bf84 <xTaskIncrementTick+0x154>)
 800be80:	681b      	ldr	r3, [r3, #0]
 800be82:	4a3f      	ldr	r2, [pc, #252]	; (800bf80 <xTaskIncrementTick+0x150>)
 800be84:	6013      	str	r3, [r2, #0]
 800be86:	4a3f      	ldr	r2, [pc, #252]	; (800bf84 <xTaskIncrementTick+0x154>)
 800be88:	68fb      	ldr	r3, [r7, #12]
 800be8a:	6013      	str	r3, [r2, #0]
 800be8c:	4b3e      	ldr	r3, [pc, #248]	; (800bf88 <xTaskIncrementTick+0x158>)
 800be8e:	681b      	ldr	r3, [r3, #0]
 800be90:	3301      	adds	r3, #1
 800be92:	4a3d      	ldr	r2, [pc, #244]	; (800bf88 <xTaskIncrementTick+0x158>)
 800be94:	6013      	str	r3, [r2, #0]
 800be96:	f000 fadb 	bl	800c450 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800be9a:	4b3c      	ldr	r3, [pc, #240]	; (800bf8c <xTaskIncrementTick+0x15c>)
 800be9c:	681b      	ldr	r3, [r3, #0]
 800be9e:	693a      	ldr	r2, [r7, #16]
 800bea0:	429a      	cmp	r2, r3
 800bea2:	d349      	bcc.n	800bf38 <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800bea4:	4b36      	ldr	r3, [pc, #216]	; (800bf80 <xTaskIncrementTick+0x150>)
 800bea6:	681b      	ldr	r3, [r3, #0]
 800bea8:	681b      	ldr	r3, [r3, #0]
 800beaa:	2b00      	cmp	r3, #0
 800beac:	d104      	bne.n	800beb8 <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800beae:	4b37      	ldr	r3, [pc, #220]	; (800bf8c <xTaskIncrementTick+0x15c>)
 800beb0:	f04f 32ff 	mov.w	r2, #4294967295
 800beb4:	601a      	str	r2, [r3, #0]
					break;
 800beb6:	e03f      	b.n	800bf38 <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800beb8:	4b31      	ldr	r3, [pc, #196]	; (800bf80 <xTaskIncrementTick+0x150>)
 800beba:	681b      	ldr	r3, [r3, #0]
 800bebc:	68db      	ldr	r3, [r3, #12]
 800bebe:	68db      	ldr	r3, [r3, #12]
 800bec0:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800bec2:	68bb      	ldr	r3, [r7, #8]
 800bec4:	685b      	ldr	r3, [r3, #4]
 800bec6:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800bec8:	693a      	ldr	r2, [r7, #16]
 800beca:	687b      	ldr	r3, [r7, #4]
 800becc:	429a      	cmp	r2, r3
 800bece:	d203      	bcs.n	800bed8 <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800bed0:	4a2e      	ldr	r2, [pc, #184]	; (800bf8c <xTaskIncrementTick+0x15c>)
 800bed2:	687b      	ldr	r3, [r7, #4]
 800bed4:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800bed6:	e02f      	b.n	800bf38 <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800bed8:	68bb      	ldr	r3, [r7, #8]
 800beda:	3304      	adds	r3, #4
 800bedc:	4618      	mov	r0, r3
 800bede:	f7fe fe2f 	bl	800ab40 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800bee2:	68bb      	ldr	r3, [r7, #8]
 800bee4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800bee6:	2b00      	cmp	r3, #0
 800bee8:	d004      	beq.n	800bef4 <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800beea:	68bb      	ldr	r3, [r7, #8]
 800beec:	3318      	adds	r3, #24
 800beee:	4618      	mov	r0, r3
 800bef0:	f7fe fe26 	bl	800ab40 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800bef4:	68bb      	ldr	r3, [r7, #8]
 800bef6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800bef8:	4b25      	ldr	r3, [pc, #148]	; (800bf90 <xTaskIncrementTick+0x160>)
 800befa:	681b      	ldr	r3, [r3, #0]
 800befc:	429a      	cmp	r2, r3
 800befe:	d903      	bls.n	800bf08 <xTaskIncrementTick+0xd8>
 800bf00:	68bb      	ldr	r3, [r7, #8]
 800bf02:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bf04:	4a22      	ldr	r2, [pc, #136]	; (800bf90 <xTaskIncrementTick+0x160>)
 800bf06:	6013      	str	r3, [r2, #0]
 800bf08:	68bb      	ldr	r3, [r7, #8]
 800bf0a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800bf0c:	4613      	mov	r3, r2
 800bf0e:	009b      	lsls	r3, r3, #2
 800bf10:	4413      	add	r3, r2
 800bf12:	009b      	lsls	r3, r3, #2
 800bf14:	4a1f      	ldr	r2, [pc, #124]	; (800bf94 <xTaskIncrementTick+0x164>)
 800bf16:	441a      	add	r2, r3
 800bf18:	68bb      	ldr	r3, [r7, #8]
 800bf1a:	3304      	adds	r3, #4
 800bf1c:	4619      	mov	r1, r3
 800bf1e:	4610      	mov	r0, r2
 800bf20:	f7fe fdb1 	bl	800aa86 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800bf24:	68bb      	ldr	r3, [r7, #8]
 800bf26:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800bf28:	4b1b      	ldr	r3, [pc, #108]	; (800bf98 <xTaskIncrementTick+0x168>)
 800bf2a:	681b      	ldr	r3, [r3, #0]
 800bf2c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bf2e:	429a      	cmp	r2, r3
 800bf30:	d3b8      	bcc.n	800bea4 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 800bf32:	2301      	movs	r3, #1
 800bf34:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800bf36:	e7b5      	b.n	800bea4 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800bf38:	4b17      	ldr	r3, [pc, #92]	; (800bf98 <xTaskIncrementTick+0x168>)
 800bf3a:	681b      	ldr	r3, [r3, #0]
 800bf3c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800bf3e:	4915      	ldr	r1, [pc, #84]	; (800bf94 <xTaskIncrementTick+0x164>)
 800bf40:	4613      	mov	r3, r2
 800bf42:	009b      	lsls	r3, r3, #2
 800bf44:	4413      	add	r3, r2
 800bf46:	009b      	lsls	r3, r3, #2
 800bf48:	440b      	add	r3, r1
 800bf4a:	681b      	ldr	r3, [r3, #0]
 800bf4c:	2b01      	cmp	r3, #1
 800bf4e:	d901      	bls.n	800bf54 <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 800bf50:	2301      	movs	r3, #1
 800bf52:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 800bf54:	4b11      	ldr	r3, [pc, #68]	; (800bf9c <xTaskIncrementTick+0x16c>)
 800bf56:	681b      	ldr	r3, [r3, #0]
 800bf58:	2b00      	cmp	r3, #0
 800bf5a:	d007      	beq.n	800bf6c <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 800bf5c:	2301      	movs	r3, #1
 800bf5e:	617b      	str	r3, [r7, #20]
 800bf60:	e004      	b.n	800bf6c <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 800bf62:	4b0f      	ldr	r3, [pc, #60]	; (800bfa0 <xTaskIncrementTick+0x170>)
 800bf64:	681b      	ldr	r3, [r3, #0]
 800bf66:	3301      	adds	r3, #1
 800bf68:	4a0d      	ldr	r2, [pc, #52]	; (800bfa0 <xTaskIncrementTick+0x170>)
 800bf6a:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 800bf6c:	697b      	ldr	r3, [r7, #20]
}
 800bf6e:	4618      	mov	r0, r3
 800bf70:	3718      	adds	r7, #24
 800bf72:	46bd      	mov	sp, r7
 800bf74:	bd80      	pop	{r7, pc}
 800bf76:	bf00      	nop
 800bf78:	20001320 	.word	0x20001320
 800bf7c:	200012fc 	.word	0x200012fc
 800bf80:	200012b0 	.word	0x200012b0
 800bf84:	200012b4 	.word	0x200012b4
 800bf88:	20001310 	.word	0x20001310
 800bf8c:	20001318 	.word	0x20001318
 800bf90:	20001300 	.word	0x20001300
 800bf94:	20000e28 	.word	0x20000e28
 800bf98:	20000e24 	.word	0x20000e24
 800bf9c:	2000130c 	.word	0x2000130c
 800bfa0:	20001308 	.word	0x20001308

0800bfa4 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800bfa4:	b480      	push	{r7}
 800bfa6:	b085      	sub	sp, #20
 800bfa8:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800bfaa:	4b2a      	ldr	r3, [pc, #168]	; (800c054 <vTaskSwitchContext+0xb0>)
 800bfac:	681b      	ldr	r3, [r3, #0]
 800bfae:	2b00      	cmp	r3, #0
 800bfb0:	d003      	beq.n	800bfba <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800bfb2:	4b29      	ldr	r3, [pc, #164]	; (800c058 <vTaskSwitchContext+0xb4>)
 800bfb4:	2201      	movs	r2, #1
 800bfb6:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 800bfb8:	e046      	b.n	800c048 <vTaskSwitchContext+0xa4>
		xYieldPending = pdFALSE;
 800bfba:	4b27      	ldr	r3, [pc, #156]	; (800c058 <vTaskSwitchContext+0xb4>)
 800bfbc:	2200      	movs	r2, #0
 800bfbe:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800bfc0:	4b26      	ldr	r3, [pc, #152]	; (800c05c <vTaskSwitchContext+0xb8>)
 800bfc2:	681b      	ldr	r3, [r3, #0]
 800bfc4:	60fb      	str	r3, [r7, #12]
 800bfc6:	e010      	b.n	800bfea <vTaskSwitchContext+0x46>
 800bfc8:	68fb      	ldr	r3, [r7, #12]
 800bfca:	2b00      	cmp	r3, #0
 800bfcc:	d10a      	bne.n	800bfe4 <vTaskSwitchContext+0x40>
	__asm volatile
 800bfce:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bfd2:	f383 8811 	msr	BASEPRI, r3
 800bfd6:	f3bf 8f6f 	isb	sy
 800bfda:	f3bf 8f4f 	dsb	sy
 800bfde:	607b      	str	r3, [r7, #4]
}
 800bfe0:	bf00      	nop
 800bfe2:	e7fe      	b.n	800bfe2 <vTaskSwitchContext+0x3e>
 800bfe4:	68fb      	ldr	r3, [r7, #12]
 800bfe6:	3b01      	subs	r3, #1
 800bfe8:	60fb      	str	r3, [r7, #12]
 800bfea:	491d      	ldr	r1, [pc, #116]	; (800c060 <vTaskSwitchContext+0xbc>)
 800bfec:	68fa      	ldr	r2, [r7, #12]
 800bfee:	4613      	mov	r3, r2
 800bff0:	009b      	lsls	r3, r3, #2
 800bff2:	4413      	add	r3, r2
 800bff4:	009b      	lsls	r3, r3, #2
 800bff6:	440b      	add	r3, r1
 800bff8:	681b      	ldr	r3, [r3, #0]
 800bffa:	2b00      	cmp	r3, #0
 800bffc:	d0e4      	beq.n	800bfc8 <vTaskSwitchContext+0x24>
 800bffe:	68fa      	ldr	r2, [r7, #12]
 800c000:	4613      	mov	r3, r2
 800c002:	009b      	lsls	r3, r3, #2
 800c004:	4413      	add	r3, r2
 800c006:	009b      	lsls	r3, r3, #2
 800c008:	4a15      	ldr	r2, [pc, #84]	; (800c060 <vTaskSwitchContext+0xbc>)
 800c00a:	4413      	add	r3, r2
 800c00c:	60bb      	str	r3, [r7, #8]
 800c00e:	68bb      	ldr	r3, [r7, #8]
 800c010:	685b      	ldr	r3, [r3, #4]
 800c012:	685a      	ldr	r2, [r3, #4]
 800c014:	68bb      	ldr	r3, [r7, #8]
 800c016:	605a      	str	r2, [r3, #4]
 800c018:	68bb      	ldr	r3, [r7, #8]
 800c01a:	685a      	ldr	r2, [r3, #4]
 800c01c:	68bb      	ldr	r3, [r7, #8]
 800c01e:	3308      	adds	r3, #8
 800c020:	429a      	cmp	r2, r3
 800c022:	d104      	bne.n	800c02e <vTaskSwitchContext+0x8a>
 800c024:	68bb      	ldr	r3, [r7, #8]
 800c026:	685b      	ldr	r3, [r3, #4]
 800c028:	685a      	ldr	r2, [r3, #4]
 800c02a:	68bb      	ldr	r3, [r7, #8]
 800c02c:	605a      	str	r2, [r3, #4]
 800c02e:	68bb      	ldr	r3, [r7, #8]
 800c030:	685b      	ldr	r3, [r3, #4]
 800c032:	68db      	ldr	r3, [r3, #12]
 800c034:	4a0b      	ldr	r2, [pc, #44]	; (800c064 <vTaskSwitchContext+0xc0>)
 800c036:	6013      	str	r3, [r2, #0]
 800c038:	4a08      	ldr	r2, [pc, #32]	; (800c05c <vTaskSwitchContext+0xb8>)
 800c03a:	68fb      	ldr	r3, [r7, #12]
 800c03c:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800c03e:	4b09      	ldr	r3, [pc, #36]	; (800c064 <vTaskSwitchContext+0xc0>)
 800c040:	681b      	ldr	r3, [r3, #0]
 800c042:	3354      	adds	r3, #84	; 0x54
 800c044:	4a08      	ldr	r2, [pc, #32]	; (800c068 <vTaskSwitchContext+0xc4>)
 800c046:	6013      	str	r3, [r2, #0]
}
 800c048:	bf00      	nop
 800c04a:	3714      	adds	r7, #20
 800c04c:	46bd      	mov	sp, r7
 800c04e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c052:	4770      	bx	lr
 800c054:	20001320 	.word	0x20001320
 800c058:	2000130c 	.word	0x2000130c
 800c05c:	20001300 	.word	0x20001300
 800c060:	20000e28 	.word	0x20000e28
 800c064:	20000e24 	.word	0x20000e24
 800c068:	2000014c 	.word	0x2000014c

0800c06c <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 800c06c:	b580      	push	{r7, lr}
 800c06e:	b084      	sub	sp, #16
 800c070:	af00      	add	r7, sp, #0
 800c072:	6078      	str	r0, [r7, #4]
 800c074:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800c076:	687b      	ldr	r3, [r7, #4]
 800c078:	2b00      	cmp	r3, #0
 800c07a:	d10a      	bne.n	800c092 <vTaskPlaceOnEventList+0x26>
	__asm volatile
 800c07c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c080:	f383 8811 	msr	BASEPRI, r3
 800c084:	f3bf 8f6f 	isb	sy
 800c088:	f3bf 8f4f 	dsb	sy
 800c08c:	60fb      	str	r3, [r7, #12]
}
 800c08e:	bf00      	nop
 800c090:	e7fe      	b.n	800c090 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800c092:	4b07      	ldr	r3, [pc, #28]	; (800c0b0 <vTaskPlaceOnEventList+0x44>)
 800c094:	681b      	ldr	r3, [r3, #0]
 800c096:	3318      	adds	r3, #24
 800c098:	4619      	mov	r1, r3
 800c09a:	6878      	ldr	r0, [r7, #4]
 800c09c:	f7fe fd17 	bl	800aace <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800c0a0:	2101      	movs	r1, #1
 800c0a2:	6838      	ldr	r0, [r7, #0]
 800c0a4:	f000 fa80 	bl	800c5a8 <prvAddCurrentTaskToDelayedList>
}
 800c0a8:	bf00      	nop
 800c0aa:	3710      	adds	r7, #16
 800c0ac:	46bd      	mov	sp, r7
 800c0ae:	bd80      	pop	{r7, pc}
 800c0b0:	20000e24 	.word	0x20000e24

0800c0b4 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800c0b4:	b580      	push	{r7, lr}
 800c0b6:	b086      	sub	sp, #24
 800c0b8:	af00      	add	r7, sp, #0
 800c0ba:	60f8      	str	r0, [r7, #12]
 800c0bc:	60b9      	str	r1, [r7, #8]
 800c0be:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 800c0c0:	68fb      	ldr	r3, [r7, #12]
 800c0c2:	2b00      	cmp	r3, #0
 800c0c4:	d10a      	bne.n	800c0dc <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 800c0c6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c0ca:	f383 8811 	msr	BASEPRI, r3
 800c0ce:	f3bf 8f6f 	isb	sy
 800c0d2:	f3bf 8f4f 	dsb	sy
 800c0d6:	617b      	str	r3, [r7, #20]
}
 800c0d8:	bf00      	nop
 800c0da:	e7fe      	b.n	800c0da <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800c0dc:	4b0a      	ldr	r3, [pc, #40]	; (800c108 <vTaskPlaceOnEventListRestricted+0x54>)
 800c0de:	681b      	ldr	r3, [r3, #0]
 800c0e0:	3318      	adds	r3, #24
 800c0e2:	4619      	mov	r1, r3
 800c0e4:	68f8      	ldr	r0, [r7, #12]
 800c0e6:	f7fe fcce 	bl	800aa86 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 800c0ea:	687b      	ldr	r3, [r7, #4]
 800c0ec:	2b00      	cmp	r3, #0
 800c0ee:	d002      	beq.n	800c0f6 <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 800c0f0:	f04f 33ff 	mov.w	r3, #4294967295
 800c0f4:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 800c0f6:	6879      	ldr	r1, [r7, #4]
 800c0f8:	68b8      	ldr	r0, [r7, #8]
 800c0fa:	f000 fa55 	bl	800c5a8 <prvAddCurrentTaskToDelayedList>
	}
 800c0fe:	bf00      	nop
 800c100:	3718      	adds	r7, #24
 800c102:	46bd      	mov	sp, r7
 800c104:	bd80      	pop	{r7, pc}
 800c106:	bf00      	nop
 800c108:	20000e24 	.word	0x20000e24

0800c10c <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 800c10c:	b580      	push	{r7, lr}
 800c10e:	b086      	sub	sp, #24
 800c110:	af00      	add	r7, sp, #0
 800c112:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800c114:	687b      	ldr	r3, [r7, #4]
 800c116:	68db      	ldr	r3, [r3, #12]
 800c118:	68db      	ldr	r3, [r3, #12]
 800c11a:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 800c11c:	693b      	ldr	r3, [r7, #16]
 800c11e:	2b00      	cmp	r3, #0
 800c120:	d10a      	bne.n	800c138 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 800c122:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c126:	f383 8811 	msr	BASEPRI, r3
 800c12a:	f3bf 8f6f 	isb	sy
 800c12e:	f3bf 8f4f 	dsb	sy
 800c132:	60fb      	str	r3, [r7, #12]
}
 800c134:	bf00      	nop
 800c136:	e7fe      	b.n	800c136 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800c138:	693b      	ldr	r3, [r7, #16]
 800c13a:	3318      	adds	r3, #24
 800c13c:	4618      	mov	r0, r3
 800c13e:	f7fe fcff 	bl	800ab40 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800c142:	4b1e      	ldr	r3, [pc, #120]	; (800c1bc <xTaskRemoveFromEventList+0xb0>)
 800c144:	681b      	ldr	r3, [r3, #0]
 800c146:	2b00      	cmp	r3, #0
 800c148:	d11d      	bne.n	800c186 <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800c14a:	693b      	ldr	r3, [r7, #16]
 800c14c:	3304      	adds	r3, #4
 800c14e:	4618      	mov	r0, r3
 800c150:	f7fe fcf6 	bl	800ab40 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800c154:	693b      	ldr	r3, [r7, #16]
 800c156:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c158:	4b19      	ldr	r3, [pc, #100]	; (800c1c0 <xTaskRemoveFromEventList+0xb4>)
 800c15a:	681b      	ldr	r3, [r3, #0]
 800c15c:	429a      	cmp	r2, r3
 800c15e:	d903      	bls.n	800c168 <xTaskRemoveFromEventList+0x5c>
 800c160:	693b      	ldr	r3, [r7, #16]
 800c162:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c164:	4a16      	ldr	r2, [pc, #88]	; (800c1c0 <xTaskRemoveFromEventList+0xb4>)
 800c166:	6013      	str	r3, [r2, #0]
 800c168:	693b      	ldr	r3, [r7, #16]
 800c16a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c16c:	4613      	mov	r3, r2
 800c16e:	009b      	lsls	r3, r3, #2
 800c170:	4413      	add	r3, r2
 800c172:	009b      	lsls	r3, r3, #2
 800c174:	4a13      	ldr	r2, [pc, #76]	; (800c1c4 <xTaskRemoveFromEventList+0xb8>)
 800c176:	441a      	add	r2, r3
 800c178:	693b      	ldr	r3, [r7, #16]
 800c17a:	3304      	adds	r3, #4
 800c17c:	4619      	mov	r1, r3
 800c17e:	4610      	mov	r0, r2
 800c180:	f7fe fc81 	bl	800aa86 <vListInsertEnd>
 800c184:	e005      	b.n	800c192 <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800c186:	693b      	ldr	r3, [r7, #16]
 800c188:	3318      	adds	r3, #24
 800c18a:	4619      	mov	r1, r3
 800c18c:	480e      	ldr	r0, [pc, #56]	; (800c1c8 <xTaskRemoveFromEventList+0xbc>)
 800c18e:	f7fe fc7a 	bl	800aa86 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800c192:	693b      	ldr	r3, [r7, #16]
 800c194:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c196:	4b0d      	ldr	r3, [pc, #52]	; (800c1cc <xTaskRemoveFromEventList+0xc0>)
 800c198:	681b      	ldr	r3, [r3, #0]
 800c19a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c19c:	429a      	cmp	r2, r3
 800c19e:	d905      	bls.n	800c1ac <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 800c1a0:	2301      	movs	r3, #1
 800c1a2:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 800c1a4:	4b0a      	ldr	r3, [pc, #40]	; (800c1d0 <xTaskRemoveFromEventList+0xc4>)
 800c1a6:	2201      	movs	r2, #1
 800c1a8:	601a      	str	r2, [r3, #0]
 800c1aa:	e001      	b.n	800c1b0 <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 800c1ac:	2300      	movs	r3, #0
 800c1ae:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 800c1b0:	697b      	ldr	r3, [r7, #20]
}
 800c1b2:	4618      	mov	r0, r3
 800c1b4:	3718      	adds	r7, #24
 800c1b6:	46bd      	mov	sp, r7
 800c1b8:	bd80      	pop	{r7, pc}
 800c1ba:	bf00      	nop
 800c1bc:	20001320 	.word	0x20001320
 800c1c0:	20001300 	.word	0x20001300
 800c1c4:	20000e28 	.word	0x20000e28
 800c1c8:	200012b8 	.word	0x200012b8
 800c1cc:	20000e24 	.word	0x20000e24
 800c1d0:	2000130c 	.word	0x2000130c

0800c1d4 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 800c1d4:	b480      	push	{r7}
 800c1d6:	b083      	sub	sp, #12
 800c1d8:	af00      	add	r7, sp, #0
 800c1da:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 800c1dc:	4b06      	ldr	r3, [pc, #24]	; (800c1f8 <vTaskInternalSetTimeOutState+0x24>)
 800c1de:	681a      	ldr	r2, [r3, #0]
 800c1e0:	687b      	ldr	r3, [r7, #4]
 800c1e2:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 800c1e4:	4b05      	ldr	r3, [pc, #20]	; (800c1fc <vTaskInternalSetTimeOutState+0x28>)
 800c1e6:	681a      	ldr	r2, [r3, #0]
 800c1e8:	687b      	ldr	r3, [r7, #4]
 800c1ea:	605a      	str	r2, [r3, #4]
}
 800c1ec:	bf00      	nop
 800c1ee:	370c      	adds	r7, #12
 800c1f0:	46bd      	mov	sp, r7
 800c1f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c1f6:	4770      	bx	lr
 800c1f8:	20001310 	.word	0x20001310
 800c1fc:	200012fc 	.word	0x200012fc

0800c200 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 800c200:	b580      	push	{r7, lr}
 800c202:	b088      	sub	sp, #32
 800c204:	af00      	add	r7, sp, #0
 800c206:	6078      	str	r0, [r7, #4]
 800c208:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800c20a:	687b      	ldr	r3, [r7, #4]
 800c20c:	2b00      	cmp	r3, #0
 800c20e:	d10a      	bne.n	800c226 <xTaskCheckForTimeOut+0x26>
	__asm volatile
 800c210:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c214:	f383 8811 	msr	BASEPRI, r3
 800c218:	f3bf 8f6f 	isb	sy
 800c21c:	f3bf 8f4f 	dsb	sy
 800c220:	613b      	str	r3, [r7, #16]
}
 800c222:	bf00      	nop
 800c224:	e7fe      	b.n	800c224 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 800c226:	683b      	ldr	r3, [r7, #0]
 800c228:	2b00      	cmp	r3, #0
 800c22a:	d10a      	bne.n	800c242 <xTaskCheckForTimeOut+0x42>
	__asm volatile
 800c22c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c230:	f383 8811 	msr	BASEPRI, r3
 800c234:	f3bf 8f6f 	isb	sy
 800c238:	f3bf 8f4f 	dsb	sy
 800c23c:	60fb      	str	r3, [r7, #12]
}
 800c23e:	bf00      	nop
 800c240:	e7fe      	b.n	800c240 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 800c242:	f000 fe7f 	bl	800cf44 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800c246:	4b1d      	ldr	r3, [pc, #116]	; (800c2bc <xTaskCheckForTimeOut+0xbc>)
 800c248:	681b      	ldr	r3, [r3, #0]
 800c24a:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800c24c:	687b      	ldr	r3, [r7, #4]
 800c24e:	685b      	ldr	r3, [r3, #4]
 800c250:	69ba      	ldr	r2, [r7, #24]
 800c252:	1ad3      	subs	r3, r2, r3
 800c254:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800c256:	683b      	ldr	r3, [r7, #0]
 800c258:	681b      	ldr	r3, [r3, #0]
 800c25a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c25e:	d102      	bne.n	800c266 <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 800c260:	2300      	movs	r3, #0
 800c262:	61fb      	str	r3, [r7, #28]
 800c264:	e023      	b.n	800c2ae <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800c266:	687b      	ldr	r3, [r7, #4]
 800c268:	681a      	ldr	r2, [r3, #0]
 800c26a:	4b15      	ldr	r3, [pc, #84]	; (800c2c0 <xTaskCheckForTimeOut+0xc0>)
 800c26c:	681b      	ldr	r3, [r3, #0]
 800c26e:	429a      	cmp	r2, r3
 800c270:	d007      	beq.n	800c282 <xTaskCheckForTimeOut+0x82>
 800c272:	687b      	ldr	r3, [r7, #4]
 800c274:	685b      	ldr	r3, [r3, #4]
 800c276:	69ba      	ldr	r2, [r7, #24]
 800c278:	429a      	cmp	r2, r3
 800c27a:	d302      	bcc.n	800c282 <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 800c27c:	2301      	movs	r3, #1
 800c27e:	61fb      	str	r3, [r7, #28]
 800c280:	e015      	b.n	800c2ae <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800c282:	683b      	ldr	r3, [r7, #0]
 800c284:	681b      	ldr	r3, [r3, #0]
 800c286:	697a      	ldr	r2, [r7, #20]
 800c288:	429a      	cmp	r2, r3
 800c28a:	d20b      	bcs.n	800c2a4 <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 800c28c:	683b      	ldr	r3, [r7, #0]
 800c28e:	681a      	ldr	r2, [r3, #0]
 800c290:	697b      	ldr	r3, [r7, #20]
 800c292:	1ad2      	subs	r2, r2, r3
 800c294:	683b      	ldr	r3, [r7, #0]
 800c296:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 800c298:	6878      	ldr	r0, [r7, #4]
 800c29a:	f7ff ff9b 	bl	800c1d4 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800c29e:	2300      	movs	r3, #0
 800c2a0:	61fb      	str	r3, [r7, #28]
 800c2a2:	e004      	b.n	800c2ae <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 800c2a4:	683b      	ldr	r3, [r7, #0]
 800c2a6:	2200      	movs	r2, #0
 800c2a8:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800c2aa:	2301      	movs	r3, #1
 800c2ac:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800c2ae:	f000 fe79 	bl	800cfa4 <vPortExitCritical>

	return xReturn;
 800c2b2:	69fb      	ldr	r3, [r7, #28]
}
 800c2b4:	4618      	mov	r0, r3
 800c2b6:	3720      	adds	r7, #32
 800c2b8:	46bd      	mov	sp, r7
 800c2ba:	bd80      	pop	{r7, pc}
 800c2bc:	200012fc 	.word	0x200012fc
 800c2c0:	20001310 	.word	0x20001310

0800c2c4 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 800c2c4:	b480      	push	{r7}
 800c2c6:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 800c2c8:	4b03      	ldr	r3, [pc, #12]	; (800c2d8 <vTaskMissedYield+0x14>)
 800c2ca:	2201      	movs	r2, #1
 800c2cc:	601a      	str	r2, [r3, #0]
}
 800c2ce:	bf00      	nop
 800c2d0:	46bd      	mov	sp, r7
 800c2d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c2d6:	4770      	bx	lr
 800c2d8:	2000130c 	.word	0x2000130c

0800c2dc <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800c2dc:	b580      	push	{r7, lr}
 800c2de:	b082      	sub	sp, #8
 800c2e0:	af00      	add	r7, sp, #0
 800c2e2:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 800c2e4:	f000 f852 	bl	800c38c <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800c2e8:	4b06      	ldr	r3, [pc, #24]	; (800c304 <prvIdleTask+0x28>)
 800c2ea:	681b      	ldr	r3, [r3, #0]
 800c2ec:	2b01      	cmp	r3, #1
 800c2ee:	d9f9      	bls.n	800c2e4 <prvIdleTask+0x8>
			{
				taskYIELD();
 800c2f0:	4b05      	ldr	r3, [pc, #20]	; (800c308 <prvIdleTask+0x2c>)
 800c2f2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800c2f6:	601a      	str	r2, [r3, #0]
 800c2f8:	f3bf 8f4f 	dsb	sy
 800c2fc:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 800c300:	e7f0      	b.n	800c2e4 <prvIdleTask+0x8>
 800c302:	bf00      	nop
 800c304:	20000e28 	.word	0x20000e28
 800c308:	e000ed04 	.word	0xe000ed04

0800c30c <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800c30c:	b580      	push	{r7, lr}
 800c30e:	b082      	sub	sp, #8
 800c310:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800c312:	2300      	movs	r3, #0
 800c314:	607b      	str	r3, [r7, #4]
 800c316:	e00c      	b.n	800c332 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800c318:	687a      	ldr	r2, [r7, #4]
 800c31a:	4613      	mov	r3, r2
 800c31c:	009b      	lsls	r3, r3, #2
 800c31e:	4413      	add	r3, r2
 800c320:	009b      	lsls	r3, r3, #2
 800c322:	4a12      	ldr	r2, [pc, #72]	; (800c36c <prvInitialiseTaskLists+0x60>)
 800c324:	4413      	add	r3, r2
 800c326:	4618      	mov	r0, r3
 800c328:	f7fe fb80 	bl	800aa2c <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800c32c:	687b      	ldr	r3, [r7, #4]
 800c32e:	3301      	adds	r3, #1
 800c330:	607b      	str	r3, [r7, #4]
 800c332:	687b      	ldr	r3, [r7, #4]
 800c334:	2b37      	cmp	r3, #55	; 0x37
 800c336:	d9ef      	bls.n	800c318 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 800c338:	480d      	ldr	r0, [pc, #52]	; (800c370 <prvInitialiseTaskLists+0x64>)
 800c33a:	f7fe fb77 	bl	800aa2c <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800c33e:	480d      	ldr	r0, [pc, #52]	; (800c374 <prvInitialiseTaskLists+0x68>)
 800c340:	f7fe fb74 	bl	800aa2c <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800c344:	480c      	ldr	r0, [pc, #48]	; (800c378 <prvInitialiseTaskLists+0x6c>)
 800c346:	f7fe fb71 	bl	800aa2c <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800c34a:	480c      	ldr	r0, [pc, #48]	; (800c37c <prvInitialiseTaskLists+0x70>)
 800c34c:	f7fe fb6e 	bl	800aa2c <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 800c350:	480b      	ldr	r0, [pc, #44]	; (800c380 <prvInitialiseTaskLists+0x74>)
 800c352:	f7fe fb6b 	bl	800aa2c <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800c356:	4b0b      	ldr	r3, [pc, #44]	; (800c384 <prvInitialiseTaskLists+0x78>)
 800c358:	4a05      	ldr	r2, [pc, #20]	; (800c370 <prvInitialiseTaskLists+0x64>)
 800c35a:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800c35c:	4b0a      	ldr	r3, [pc, #40]	; (800c388 <prvInitialiseTaskLists+0x7c>)
 800c35e:	4a05      	ldr	r2, [pc, #20]	; (800c374 <prvInitialiseTaskLists+0x68>)
 800c360:	601a      	str	r2, [r3, #0]
}
 800c362:	bf00      	nop
 800c364:	3708      	adds	r7, #8
 800c366:	46bd      	mov	sp, r7
 800c368:	bd80      	pop	{r7, pc}
 800c36a:	bf00      	nop
 800c36c:	20000e28 	.word	0x20000e28
 800c370:	20001288 	.word	0x20001288
 800c374:	2000129c 	.word	0x2000129c
 800c378:	200012b8 	.word	0x200012b8
 800c37c:	200012cc 	.word	0x200012cc
 800c380:	200012e4 	.word	0x200012e4
 800c384:	200012b0 	.word	0x200012b0
 800c388:	200012b4 	.word	0x200012b4

0800c38c <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800c38c:	b580      	push	{r7, lr}
 800c38e:	b082      	sub	sp, #8
 800c390:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800c392:	e019      	b.n	800c3c8 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 800c394:	f000 fdd6 	bl	800cf44 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800c398:	4b10      	ldr	r3, [pc, #64]	; (800c3dc <prvCheckTasksWaitingTermination+0x50>)
 800c39a:	68db      	ldr	r3, [r3, #12]
 800c39c:	68db      	ldr	r3, [r3, #12]
 800c39e:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800c3a0:	687b      	ldr	r3, [r7, #4]
 800c3a2:	3304      	adds	r3, #4
 800c3a4:	4618      	mov	r0, r3
 800c3a6:	f7fe fbcb 	bl	800ab40 <uxListRemove>
				--uxCurrentNumberOfTasks;
 800c3aa:	4b0d      	ldr	r3, [pc, #52]	; (800c3e0 <prvCheckTasksWaitingTermination+0x54>)
 800c3ac:	681b      	ldr	r3, [r3, #0]
 800c3ae:	3b01      	subs	r3, #1
 800c3b0:	4a0b      	ldr	r2, [pc, #44]	; (800c3e0 <prvCheckTasksWaitingTermination+0x54>)
 800c3b2:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 800c3b4:	4b0b      	ldr	r3, [pc, #44]	; (800c3e4 <prvCheckTasksWaitingTermination+0x58>)
 800c3b6:	681b      	ldr	r3, [r3, #0]
 800c3b8:	3b01      	subs	r3, #1
 800c3ba:	4a0a      	ldr	r2, [pc, #40]	; (800c3e4 <prvCheckTasksWaitingTermination+0x58>)
 800c3bc:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800c3be:	f000 fdf1 	bl	800cfa4 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800c3c2:	6878      	ldr	r0, [r7, #4]
 800c3c4:	f000 f810 	bl	800c3e8 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800c3c8:	4b06      	ldr	r3, [pc, #24]	; (800c3e4 <prvCheckTasksWaitingTermination+0x58>)
 800c3ca:	681b      	ldr	r3, [r3, #0]
 800c3cc:	2b00      	cmp	r3, #0
 800c3ce:	d1e1      	bne.n	800c394 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 800c3d0:	bf00      	nop
 800c3d2:	bf00      	nop
 800c3d4:	3708      	adds	r7, #8
 800c3d6:	46bd      	mov	sp, r7
 800c3d8:	bd80      	pop	{r7, pc}
 800c3da:	bf00      	nop
 800c3dc:	200012cc 	.word	0x200012cc
 800c3e0:	200012f8 	.word	0x200012f8
 800c3e4:	200012e0 	.word	0x200012e0

0800c3e8 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 800c3e8:	b580      	push	{r7, lr}
 800c3ea:	b084      	sub	sp, #16
 800c3ec:	af00      	add	r7, sp, #0
 800c3ee:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 800c3f0:	687b      	ldr	r3, [r7, #4]
 800c3f2:	3354      	adds	r3, #84	; 0x54
 800c3f4:	4618      	mov	r0, r3
 800c3f6:	f001 fe1f 	bl	800e038 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800c3fa:	687b      	ldr	r3, [r7, #4]
 800c3fc:	f893 30a5 	ldrb.w	r3, [r3, #165]	; 0xa5
 800c400:	2b00      	cmp	r3, #0
 800c402:	d108      	bne.n	800c416 <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 800c404:	687b      	ldr	r3, [r7, #4]
 800c406:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c408:	4618      	mov	r0, r3
 800c40a:	f000 ff89 	bl	800d320 <vPortFree>
				vPortFree( pxTCB );
 800c40e:	6878      	ldr	r0, [r7, #4]
 800c410:	f000 ff86 	bl	800d320 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800c414:	e018      	b.n	800c448 <prvDeleteTCB+0x60>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800c416:	687b      	ldr	r3, [r7, #4]
 800c418:	f893 30a5 	ldrb.w	r3, [r3, #165]	; 0xa5
 800c41c:	2b01      	cmp	r3, #1
 800c41e:	d103      	bne.n	800c428 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 800c420:	6878      	ldr	r0, [r7, #4]
 800c422:	f000 ff7d 	bl	800d320 <vPortFree>
	}
 800c426:	e00f      	b.n	800c448 <prvDeleteTCB+0x60>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800c428:	687b      	ldr	r3, [r7, #4]
 800c42a:	f893 30a5 	ldrb.w	r3, [r3, #165]	; 0xa5
 800c42e:	2b02      	cmp	r3, #2
 800c430:	d00a      	beq.n	800c448 <prvDeleteTCB+0x60>
	__asm volatile
 800c432:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c436:	f383 8811 	msr	BASEPRI, r3
 800c43a:	f3bf 8f6f 	isb	sy
 800c43e:	f3bf 8f4f 	dsb	sy
 800c442:	60fb      	str	r3, [r7, #12]
}
 800c444:	bf00      	nop
 800c446:	e7fe      	b.n	800c446 <prvDeleteTCB+0x5e>
	}
 800c448:	bf00      	nop
 800c44a:	3710      	adds	r7, #16
 800c44c:	46bd      	mov	sp, r7
 800c44e:	bd80      	pop	{r7, pc}

0800c450 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800c450:	b480      	push	{r7}
 800c452:	b083      	sub	sp, #12
 800c454:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800c456:	4b0c      	ldr	r3, [pc, #48]	; (800c488 <prvResetNextTaskUnblockTime+0x38>)
 800c458:	681b      	ldr	r3, [r3, #0]
 800c45a:	681b      	ldr	r3, [r3, #0]
 800c45c:	2b00      	cmp	r3, #0
 800c45e:	d104      	bne.n	800c46a <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800c460:	4b0a      	ldr	r3, [pc, #40]	; (800c48c <prvResetNextTaskUnblockTime+0x3c>)
 800c462:	f04f 32ff 	mov.w	r2, #4294967295
 800c466:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800c468:	e008      	b.n	800c47c <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800c46a:	4b07      	ldr	r3, [pc, #28]	; (800c488 <prvResetNextTaskUnblockTime+0x38>)
 800c46c:	681b      	ldr	r3, [r3, #0]
 800c46e:	68db      	ldr	r3, [r3, #12]
 800c470:	68db      	ldr	r3, [r3, #12]
 800c472:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800c474:	687b      	ldr	r3, [r7, #4]
 800c476:	685b      	ldr	r3, [r3, #4]
 800c478:	4a04      	ldr	r2, [pc, #16]	; (800c48c <prvResetNextTaskUnblockTime+0x3c>)
 800c47a:	6013      	str	r3, [r2, #0]
}
 800c47c:	bf00      	nop
 800c47e:	370c      	adds	r7, #12
 800c480:	46bd      	mov	sp, r7
 800c482:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c486:	4770      	bx	lr
 800c488:	200012b0 	.word	0x200012b0
 800c48c:	20001318 	.word	0x20001318

0800c490 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 800c490:	b480      	push	{r7}
 800c492:	b083      	sub	sp, #12
 800c494:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800c496:	4b0b      	ldr	r3, [pc, #44]	; (800c4c4 <xTaskGetSchedulerState+0x34>)
 800c498:	681b      	ldr	r3, [r3, #0]
 800c49a:	2b00      	cmp	r3, #0
 800c49c:	d102      	bne.n	800c4a4 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800c49e:	2301      	movs	r3, #1
 800c4a0:	607b      	str	r3, [r7, #4]
 800c4a2:	e008      	b.n	800c4b6 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800c4a4:	4b08      	ldr	r3, [pc, #32]	; (800c4c8 <xTaskGetSchedulerState+0x38>)
 800c4a6:	681b      	ldr	r3, [r3, #0]
 800c4a8:	2b00      	cmp	r3, #0
 800c4aa:	d102      	bne.n	800c4b2 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 800c4ac:	2302      	movs	r3, #2
 800c4ae:	607b      	str	r3, [r7, #4]
 800c4b0:	e001      	b.n	800c4b6 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800c4b2:	2300      	movs	r3, #0
 800c4b4:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800c4b6:	687b      	ldr	r3, [r7, #4]
	}
 800c4b8:	4618      	mov	r0, r3
 800c4ba:	370c      	adds	r7, #12
 800c4bc:	46bd      	mov	sp, r7
 800c4be:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c4c2:	4770      	bx	lr
 800c4c4:	20001304 	.word	0x20001304
 800c4c8:	20001320 	.word	0x20001320

0800c4cc <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 800c4cc:	b580      	push	{r7, lr}
 800c4ce:	b086      	sub	sp, #24
 800c4d0:	af00      	add	r7, sp, #0
 800c4d2:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 800c4d4:	687b      	ldr	r3, [r7, #4]
 800c4d6:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 800c4d8:	2300      	movs	r3, #0
 800c4da:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800c4dc:	687b      	ldr	r3, [r7, #4]
 800c4de:	2b00      	cmp	r3, #0
 800c4e0:	d056      	beq.n	800c590 <xTaskPriorityDisinherit+0xc4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800c4e2:	4b2e      	ldr	r3, [pc, #184]	; (800c59c <xTaskPriorityDisinherit+0xd0>)
 800c4e4:	681b      	ldr	r3, [r3, #0]
 800c4e6:	693a      	ldr	r2, [r7, #16]
 800c4e8:	429a      	cmp	r2, r3
 800c4ea:	d00a      	beq.n	800c502 <xTaskPriorityDisinherit+0x36>
	__asm volatile
 800c4ec:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c4f0:	f383 8811 	msr	BASEPRI, r3
 800c4f4:	f3bf 8f6f 	isb	sy
 800c4f8:	f3bf 8f4f 	dsb	sy
 800c4fc:	60fb      	str	r3, [r7, #12]
}
 800c4fe:	bf00      	nop
 800c500:	e7fe      	b.n	800c500 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 800c502:	693b      	ldr	r3, [r7, #16]
 800c504:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800c506:	2b00      	cmp	r3, #0
 800c508:	d10a      	bne.n	800c520 <xTaskPriorityDisinherit+0x54>
	__asm volatile
 800c50a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c50e:	f383 8811 	msr	BASEPRI, r3
 800c512:	f3bf 8f6f 	isb	sy
 800c516:	f3bf 8f4f 	dsb	sy
 800c51a:	60bb      	str	r3, [r7, #8]
}
 800c51c:	bf00      	nop
 800c51e:	e7fe      	b.n	800c51e <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 800c520:	693b      	ldr	r3, [r7, #16]
 800c522:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800c524:	1e5a      	subs	r2, r3, #1
 800c526:	693b      	ldr	r3, [r7, #16]
 800c528:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800c52a:	693b      	ldr	r3, [r7, #16]
 800c52c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c52e:	693b      	ldr	r3, [r7, #16]
 800c530:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800c532:	429a      	cmp	r2, r3
 800c534:	d02c      	beq.n	800c590 <xTaskPriorityDisinherit+0xc4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800c536:	693b      	ldr	r3, [r7, #16]
 800c538:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800c53a:	2b00      	cmp	r3, #0
 800c53c:	d128      	bne.n	800c590 <xTaskPriorityDisinherit+0xc4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800c53e:	693b      	ldr	r3, [r7, #16]
 800c540:	3304      	adds	r3, #4
 800c542:	4618      	mov	r0, r3
 800c544:	f7fe fafc 	bl	800ab40 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800c548:	693b      	ldr	r3, [r7, #16]
 800c54a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800c54c:	693b      	ldr	r3, [r7, #16]
 800c54e:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800c550:	693b      	ldr	r3, [r7, #16]
 800c552:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c554:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800c558:	693b      	ldr	r3, [r7, #16]
 800c55a:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 800c55c:	693b      	ldr	r3, [r7, #16]
 800c55e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c560:	4b0f      	ldr	r3, [pc, #60]	; (800c5a0 <xTaskPriorityDisinherit+0xd4>)
 800c562:	681b      	ldr	r3, [r3, #0]
 800c564:	429a      	cmp	r2, r3
 800c566:	d903      	bls.n	800c570 <xTaskPriorityDisinherit+0xa4>
 800c568:	693b      	ldr	r3, [r7, #16]
 800c56a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c56c:	4a0c      	ldr	r2, [pc, #48]	; (800c5a0 <xTaskPriorityDisinherit+0xd4>)
 800c56e:	6013      	str	r3, [r2, #0]
 800c570:	693b      	ldr	r3, [r7, #16]
 800c572:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c574:	4613      	mov	r3, r2
 800c576:	009b      	lsls	r3, r3, #2
 800c578:	4413      	add	r3, r2
 800c57a:	009b      	lsls	r3, r3, #2
 800c57c:	4a09      	ldr	r2, [pc, #36]	; (800c5a4 <xTaskPriorityDisinherit+0xd8>)
 800c57e:	441a      	add	r2, r3
 800c580:	693b      	ldr	r3, [r7, #16]
 800c582:	3304      	adds	r3, #4
 800c584:	4619      	mov	r1, r3
 800c586:	4610      	mov	r0, r2
 800c588:	f7fe fa7d 	bl	800aa86 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 800c58c:	2301      	movs	r3, #1
 800c58e:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800c590:	697b      	ldr	r3, [r7, #20]
	}
 800c592:	4618      	mov	r0, r3
 800c594:	3718      	adds	r7, #24
 800c596:	46bd      	mov	sp, r7
 800c598:	bd80      	pop	{r7, pc}
 800c59a:	bf00      	nop
 800c59c:	20000e24 	.word	0x20000e24
 800c5a0:	20001300 	.word	0x20001300
 800c5a4:	20000e28 	.word	0x20000e28

0800c5a8 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800c5a8:	b580      	push	{r7, lr}
 800c5aa:	b084      	sub	sp, #16
 800c5ac:	af00      	add	r7, sp, #0
 800c5ae:	6078      	str	r0, [r7, #4]
 800c5b0:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800c5b2:	4b21      	ldr	r3, [pc, #132]	; (800c638 <prvAddCurrentTaskToDelayedList+0x90>)
 800c5b4:	681b      	ldr	r3, [r3, #0]
 800c5b6:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800c5b8:	4b20      	ldr	r3, [pc, #128]	; (800c63c <prvAddCurrentTaskToDelayedList+0x94>)
 800c5ba:	681b      	ldr	r3, [r3, #0]
 800c5bc:	3304      	adds	r3, #4
 800c5be:	4618      	mov	r0, r3
 800c5c0:	f7fe fabe 	bl	800ab40 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800c5c4:	687b      	ldr	r3, [r7, #4]
 800c5c6:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c5ca:	d10a      	bne.n	800c5e2 <prvAddCurrentTaskToDelayedList+0x3a>
 800c5cc:	683b      	ldr	r3, [r7, #0]
 800c5ce:	2b00      	cmp	r3, #0
 800c5d0:	d007      	beq.n	800c5e2 <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800c5d2:	4b1a      	ldr	r3, [pc, #104]	; (800c63c <prvAddCurrentTaskToDelayedList+0x94>)
 800c5d4:	681b      	ldr	r3, [r3, #0]
 800c5d6:	3304      	adds	r3, #4
 800c5d8:	4619      	mov	r1, r3
 800c5da:	4819      	ldr	r0, [pc, #100]	; (800c640 <prvAddCurrentTaskToDelayedList+0x98>)
 800c5dc:	f7fe fa53 	bl	800aa86 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800c5e0:	e026      	b.n	800c630 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800c5e2:	68fa      	ldr	r2, [r7, #12]
 800c5e4:	687b      	ldr	r3, [r7, #4]
 800c5e6:	4413      	add	r3, r2
 800c5e8:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800c5ea:	4b14      	ldr	r3, [pc, #80]	; (800c63c <prvAddCurrentTaskToDelayedList+0x94>)
 800c5ec:	681b      	ldr	r3, [r3, #0]
 800c5ee:	68ba      	ldr	r2, [r7, #8]
 800c5f0:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800c5f2:	68ba      	ldr	r2, [r7, #8]
 800c5f4:	68fb      	ldr	r3, [r7, #12]
 800c5f6:	429a      	cmp	r2, r3
 800c5f8:	d209      	bcs.n	800c60e <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800c5fa:	4b12      	ldr	r3, [pc, #72]	; (800c644 <prvAddCurrentTaskToDelayedList+0x9c>)
 800c5fc:	681a      	ldr	r2, [r3, #0]
 800c5fe:	4b0f      	ldr	r3, [pc, #60]	; (800c63c <prvAddCurrentTaskToDelayedList+0x94>)
 800c600:	681b      	ldr	r3, [r3, #0]
 800c602:	3304      	adds	r3, #4
 800c604:	4619      	mov	r1, r3
 800c606:	4610      	mov	r0, r2
 800c608:	f7fe fa61 	bl	800aace <vListInsert>
}
 800c60c:	e010      	b.n	800c630 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800c60e:	4b0e      	ldr	r3, [pc, #56]	; (800c648 <prvAddCurrentTaskToDelayedList+0xa0>)
 800c610:	681a      	ldr	r2, [r3, #0]
 800c612:	4b0a      	ldr	r3, [pc, #40]	; (800c63c <prvAddCurrentTaskToDelayedList+0x94>)
 800c614:	681b      	ldr	r3, [r3, #0]
 800c616:	3304      	adds	r3, #4
 800c618:	4619      	mov	r1, r3
 800c61a:	4610      	mov	r0, r2
 800c61c:	f7fe fa57 	bl	800aace <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800c620:	4b0a      	ldr	r3, [pc, #40]	; (800c64c <prvAddCurrentTaskToDelayedList+0xa4>)
 800c622:	681b      	ldr	r3, [r3, #0]
 800c624:	68ba      	ldr	r2, [r7, #8]
 800c626:	429a      	cmp	r2, r3
 800c628:	d202      	bcs.n	800c630 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 800c62a:	4a08      	ldr	r2, [pc, #32]	; (800c64c <prvAddCurrentTaskToDelayedList+0xa4>)
 800c62c:	68bb      	ldr	r3, [r7, #8]
 800c62e:	6013      	str	r3, [r2, #0]
}
 800c630:	bf00      	nop
 800c632:	3710      	adds	r7, #16
 800c634:	46bd      	mov	sp, r7
 800c636:	bd80      	pop	{r7, pc}
 800c638:	200012fc 	.word	0x200012fc
 800c63c:	20000e24 	.word	0x20000e24
 800c640:	200012e4 	.word	0x200012e4
 800c644:	200012b4 	.word	0x200012b4
 800c648:	200012b0 	.word	0x200012b0
 800c64c:	20001318 	.word	0x20001318

0800c650 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 800c650:	b580      	push	{r7, lr}
 800c652:	b08a      	sub	sp, #40	; 0x28
 800c654:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 800c656:	2300      	movs	r3, #0
 800c658:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 800c65a:	f000 fb07 	bl	800cc6c <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 800c65e:	4b1c      	ldr	r3, [pc, #112]	; (800c6d0 <xTimerCreateTimerTask+0x80>)
 800c660:	681b      	ldr	r3, [r3, #0]
 800c662:	2b00      	cmp	r3, #0
 800c664:	d021      	beq.n	800c6aa <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 800c666:	2300      	movs	r3, #0
 800c668:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 800c66a:	2300      	movs	r3, #0
 800c66c:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 800c66e:	1d3a      	adds	r2, r7, #4
 800c670:	f107 0108 	add.w	r1, r7, #8
 800c674:	f107 030c 	add.w	r3, r7, #12
 800c678:	4618      	mov	r0, r3
 800c67a:	f7fe f9bd 	bl	800a9f8 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 800c67e:	6879      	ldr	r1, [r7, #4]
 800c680:	68bb      	ldr	r3, [r7, #8]
 800c682:	68fa      	ldr	r2, [r7, #12]
 800c684:	9202      	str	r2, [sp, #8]
 800c686:	9301      	str	r3, [sp, #4]
 800c688:	2302      	movs	r3, #2
 800c68a:	9300      	str	r3, [sp, #0]
 800c68c:	2300      	movs	r3, #0
 800c68e:	460a      	mov	r2, r1
 800c690:	4910      	ldr	r1, [pc, #64]	; (800c6d4 <xTimerCreateTimerTask+0x84>)
 800c692:	4811      	ldr	r0, [pc, #68]	; (800c6d8 <xTimerCreateTimerTask+0x88>)
 800c694:	f7ff f8e8 	bl	800b868 <xTaskCreateStatic>
 800c698:	4603      	mov	r3, r0
 800c69a:	4a10      	ldr	r2, [pc, #64]	; (800c6dc <xTimerCreateTimerTask+0x8c>)
 800c69c:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 800c69e:	4b0f      	ldr	r3, [pc, #60]	; (800c6dc <xTimerCreateTimerTask+0x8c>)
 800c6a0:	681b      	ldr	r3, [r3, #0]
 800c6a2:	2b00      	cmp	r3, #0
 800c6a4:	d001      	beq.n	800c6aa <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 800c6a6:	2301      	movs	r3, #1
 800c6a8:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 800c6aa:	697b      	ldr	r3, [r7, #20]
 800c6ac:	2b00      	cmp	r3, #0
 800c6ae:	d10a      	bne.n	800c6c6 <xTimerCreateTimerTask+0x76>
	__asm volatile
 800c6b0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c6b4:	f383 8811 	msr	BASEPRI, r3
 800c6b8:	f3bf 8f6f 	isb	sy
 800c6bc:	f3bf 8f4f 	dsb	sy
 800c6c0:	613b      	str	r3, [r7, #16]
}
 800c6c2:	bf00      	nop
 800c6c4:	e7fe      	b.n	800c6c4 <xTimerCreateTimerTask+0x74>
	return xReturn;
 800c6c6:	697b      	ldr	r3, [r7, #20]
}
 800c6c8:	4618      	mov	r0, r3
 800c6ca:	3718      	adds	r7, #24
 800c6cc:	46bd      	mov	sp, r7
 800c6ce:	bd80      	pop	{r7, pc}
 800c6d0:	20001354 	.word	0x20001354
 800c6d4:	0800e254 	.word	0x0800e254
 800c6d8:	0800c815 	.word	0x0800c815
 800c6dc:	20001358 	.word	0x20001358

0800c6e0 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 800c6e0:	b580      	push	{r7, lr}
 800c6e2:	b08a      	sub	sp, #40	; 0x28
 800c6e4:	af00      	add	r7, sp, #0
 800c6e6:	60f8      	str	r0, [r7, #12]
 800c6e8:	60b9      	str	r1, [r7, #8]
 800c6ea:	607a      	str	r2, [r7, #4]
 800c6ec:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 800c6ee:	2300      	movs	r3, #0
 800c6f0:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 800c6f2:	68fb      	ldr	r3, [r7, #12]
 800c6f4:	2b00      	cmp	r3, #0
 800c6f6:	d10a      	bne.n	800c70e <xTimerGenericCommand+0x2e>
	__asm volatile
 800c6f8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c6fc:	f383 8811 	msr	BASEPRI, r3
 800c700:	f3bf 8f6f 	isb	sy
 800c704:	f3bf 8f4f 	dsb	sy
 800c708:	623b      	str	r3, [r7, #32]
}
 800c70a:	bf00      	nop
 800c70c:	e7fe      	b.n	800c70c <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 800c70e:	4b1a      	ldr	r3, [pc, #104]	; (800c778 <xTimerGenericCommand+0x98>)
 800c710:	681b      	ldr	r3, [r3, #0]
 800c712:	2b00      	cmp	r3, #0
 800c714:	d02a      	beq.n	800c76c <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 800c716:	68bb      	ldr	r3, [r7, #8]
 800c718:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 800c71a:	687b      	ldr	r3, [r7, #4]
 800c71c:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 800c71e:	68fb      	ldr	r3, [r7, #12]
 800c720:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 800c722:	68bb      	ldr	r3, [r7, #8]
 800c724:	2b05      	cmp	r3, #5
 800c726:	dc18      	bgt.n	800c75a <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 800c728:	f7ff feb2 	bl	800c490 <xTaskGetSchedulerState>
 800c72c:	4603      	mov	r3, r0
 800c72e:	2b02      	cmp	r3, #2
 800c730:	d109      	bne.n	800c746 <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 800c732:	4b11      	ldr	r3, [pc, #68]	; (800c778 <xTimerGenericCommand+0x98>)
 800c734:	6818      	ldr	r0, [r3, #0]
 800c736:	f107 0110 	add.w	r1, r7, #16
 800c73a:	2300      	movs	r3, #0
 800c73c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800c73e:	f7fe fbd1 	bl	800aee4 <xQueueGenericSend>
 800c742:	6278      	str	r0, [r7, #36]	; 0x24
 800c744:	e012      	b.n	800c76c <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 800c746:	4b0c      	ldr	r3, [pc, #48]	; (800c778 <xTimerGenericCommand+0x98>)
 800c748:	6818      	ldr	r0, [r3, #0]
 800c74a:	f107 0110 	add.w	r1, r7, #16
 800c74e:	2300      	movs	r3, #0
 800c750:	2200      	movs	r2, #0
 800c752:	f7fe fbc7 	bl	800aee4 <xQueueGenericSend>
 800c756:	6278      	str	r0, [r7, #36]	; 0x24
 800c758:	e008      	b.n	800c76c <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 800c75a:	4b07      	ldr	r3, [pc, #28]	; (800c778 <xTimerGenericCommand+0x98>)
 800c75c:	6818      	ldr	r0, [r3, #0]
 800c75e:	f107 0110 	add.w	r1, r7, #16
 800c762:	2300      	movs	r3, #0
 800c764:	683a      	ldr	r2, [r7, #0]
 800c766:	f7fe fcbb 	bl	800b0e0 <xQueueGenericSendFromISR>
 800c76a:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 800c76c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800c76e:	4618      	mov	r0, r3
 800c770:	3728      	adds	r7, #40	; 0x28
 800c772:	46bd      	mov	sp, r7
 800c774:	bd80      	pop	{r7, pc}
 800c776:	bf00      	nop
 800c778:	20001354 	.word	0x20001354

0800c77c <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 800c77c:	b580      	push	{r7, lr}
 800c77e:	b088      	sub	sp, #32
 800c780:	af02      	add	r7, sp, #8
 800c782:	6078      	str	r0, [r7, #4]
 800c784:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800c786:	4b22      	ldr	r3, [pc, #136]	; (800c810 <prvProcessExpiredTimer+0x94>)
 800c788:	681b      	ldr	r3, [r3, #0]
 800c78a:	68db      	ldr	r3, [r3, #12]
 800c78c:	68db      	ldr	r3, [r3, #12]
 800c78e:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800c790:	697b      	ldr	r3, [r7, #20]
 800c792:	3304      	adds	r3, #4
 800c794:	4618      	mov	r0, r3
 800c796:	f7fe f9d3 	bl	800ab40 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800c79a:	697b      	ldr	r3, [r7, #20]
 800c79c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800c7a0:	f003 0304 	and.w	r3, r3, #4
 800c7a4:	2b00      	cmp	r3, #0
 800c7a6:	d022      	beq.n	800c7ee <prvProcessExpiredTimer+0x72>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 800c7a8:	697b      	ldr	r3, [r7, #20]
 800c7aa:	699a      	ldr	r2, [r3, #24]
 800c7ac:	687b      	ldr	r3, [r7, #4]
 800c7ae:	18d1      	adds	r1, r2, r3
 800c7b0:	687b      	ldr	r3, [r7, #4]
 800c7b2:	683a      	ldr	r2, [r7, #0]
 800c7b4:	6978      	ldr	r0, [r7, #20]
 800c7b6:	f000 f8d1 	bl	800c95c <prvInsertTimerInActiveList>
 800c7ba:	4603      	mov	r3, r0
 800c7bc:	2b00      	cmp	r3, #0
 800c7be:	d01f      	beq.n	800c800 <prvProcessExpiredTimer+0x84>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800c7c0:	2300      	movs	r3, #0
 800c7c2:	9300      	str	r3, [sp, #0]
 800c7c4:	2300      	movs	r3, #0
 800c7c6:	687a      	ldr	r2, [r7, #4]
 800c7c8:	2100      	movs	r1, #0
 800c7ca:	6978      	ldr	r0, [r7, #20]
 800c7cc:	f7ff ff88 	bl	800c6e0 <xTimerGenericCommand>
 800c7d0:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 800c7d2:	693b      	ldr	r3, [r7, #16]
 800c7d4:	2b00      	cmp	r3, #0
 800c7d6:	d113      	bne.n	800c800 <prvProcessExpiredTimer+0x84>
	__asm volatile
 800c7d8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c7dc:	f383 8811 	msr	BASEPRI, r3
 800c7e0:	f3bf 8f6f 	isb	sy
 800c7e4:	f3bf 8f4f 	dsb	sy
 800c7e8:	60fb      	str	r3, [r7, #12]
}
 800c7ea:	bf00      	nop
 800c7ec:	e7fe      	b.n	800c7ec <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800c7ee:	697b      	ldr	r3, [r7, #20]
 800c7f0:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800c7f4:	f023 0301 	bic.w	r3, r3, #1
 800c7f8:	b2da      	uxtb	r2, r3
 800c7fa:	697b      	ldr	r3, [r7, #20]
 800c7fc:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800c800:	697b      	ldr	r3, [r7, #20]
 800c802:	6a1b      	ldr	r3, [r3, #32]
 800c804:	6978      	ldr	r0, [r7, #20]
 800c806:	4798      	blx	r3
}
 800c808:	bf00      	nop
 800c80a:	3718      	adds	r7, #24
 800c80c:	46bd      	mov	sp, r7
 800c80e:	bd80      	pop	{r7, pc}
 800c810:	2000134c 	.word	0x2000134c

0800c814 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 800c814:	b580      	push	{r7, lr}
 800c816:	b084      	sub	sp, #16
 800c818:	af00      	add	r7, sp, #0
 800c81a:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800c81c:	f107 0308 	add.w	r3, r7, #8
 800c820:	4618      	mov	r0, r3
 800c822:	f000 f857 	bl	800c8d4 <prvGetNextExpireTime>
 800c826:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 800c828:	68bb      	ldr	r3, [r7, #8]
 800c82a:	4619      	mov	r1, r3
 800c82c:	68f8      	ldr	r0, [r7, #12]
 800c82e:	f000 f803 	bl	800c838 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 800c832:	f000 f8d5 	bl	800c9e0 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800c836:	e7f1      	b.n	800c81c <prvTimerTask+0x8>

0800c838 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 800c838:	b580      	push	{r7, lr}
 800c83a:	b084      	sub	sp, #16
 800c83c:	af00      	add	r7, sp, #0
 800c83e:	6078      	str	r0, [r7, #4]
 800c840:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 800c842:	f7ff fa39 	bl	800bcb8 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800c846:	f107 0308 	add.w	r3, r7, #8
 800c84a:	4618      	mov	r0, r3
 800c84c:	f000 f866 	bl	800c91c <prvSampleTimeNow>
 800c850:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 800c852:	68bb      	ldr	r3, [r7, #8]
 800c854:	2b00      	cmp	r3, #0
 800c856:	d130      	bne.n	800c8ba <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 800c858:	683b      	ldr	r3, [r7, #0]
 800c85a:	2b00      	cmp	r3, #0
 800c85c:	d10a      	bne.n	800c874 <prvProcessTimerOrBlockTask+0x3c>
 800c85e:	687a      	ldr	r2, [r7, #4]
 800c860:	68fb      	ldr	r3, [r7, #12]
 800c862:	429a      	cmp	r2, r3
 800c864:	d806      	bhi.n	800c874 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 800c866:	f7ff fa35 	bl	800bcd4 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 800c86a:	68f9      	ldr	r1, [r7, #12]
 800c86c:	6878      	ldr	r0, [r7, #4]
 800c86e:	f7ff ff85 	bl	800c77c <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 800c872:	e024      	b.n	800c8be <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 800c874:	683b      	ldr	r3, [r7, #0]
 800c876:	2b00      	cmp	r3, #0
 800c878:	d008      	beq.n	800c88c <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 800c87a:	4b13      	ldr	r3, [pc, #76]	; (800c8c8 <prvProcessTimerOrBlockTask+0x90>)
 800c87c:	681b      	ldr	r3, [r3, #0]
 800c87e:	681b      	ldr	r3, [r3, #0]
 800c880:	2b00      	cmp	r3, #0
 800c882:	d101      	bne.n	800c888 <prvProcessTimerOrBlockTask+0x50>
 800c884:	2301      	movs	r3, #1
 800c886:	e000      	b.n	800c88a <prvProcessTimerOrBlockTask+0x52>
 800c888:	2300      	movs	r3, #0
 800c88a:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 800c88c:	4b0f      	ldr	r3, [pc, #60]	; (800c8cc <prvProcessTimerOrBlockTask+0x94>)
 800c88e:	6818      	ldr	r0, [r3, #0]
 800c890:	687a      	ldr	r2, [r7, #4]
 800c892:	68fb      	ldr	r3, [r7, #12]
 800c894:	1ad3      	subs	r3, r2, r3
 800c896:	683a      	ldr	r2, [r7, #0]
 800c898:	4619      	mov	r1, r3
 800c89a:	f7fe ffb1 	bl	800b800 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 800c89e:	f7ff fa19 	bl	800bcd4 <xTaskResumeAll>
 800c8a2:	4603      	mov	r3, r0
 800c8a4:	2b00      	cmp	r3, #0
 800c8a6:	d10a      	bne.n	800c8be <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 800c8a8:	4b09      	ldr	r3, [pc, #36]	; (800c8d0 <prvProcessTimerOrBlockTask+0x98>)
 800c8aa:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800c8ae:	601a      	str	r2, [r3, #0]
 800c8b0:	f3bf 8f4f 	dsb	sy
 800c8b4:	f3bf 8f6f 	isb	sy
}
 800c8b8:	e001      	b.n	800c8be <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 800c8ba:	f7ff fa0b 	bl	800bcd4 <xTaskResumeAll>
}
 800c8be:	bf00      	nop
 800c8c0:	3710      	adds	r7, #16
 800c8c2:	46bd      	mov	sp, r7
 800c8c4:	bd80      	pop	{r7, pc}
 800c8c6:	bf00      	nop
 800c8c8:	20001350 	.word	0x20001350
 800c8cc:	20001354 	.word	0x20001354
 800c8d0:	e000ed04 	.word	0xe000ed04

0800c8d4 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 800c8d4:	b480      	push	{r7}
 800c8d6:	b085      	sub	sp, #20
 800c8d8:	af00      	add	r7, sp, #0
 800c8da:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 800c8dc:	4b0e      	ldr	r3, [pc, #56]	; (800c918 <prvGetNextExpireTime+0x44>)
 800c8de:	681b      	ldr	r3, [r3, #0]
 800c8e0:	681b      	ldr	r3, [r3, #0]
 800c8e2:	2b00      	cmp	r3, #0
 800c8e4:	d101      	bne.n	800c8ea <prvGetNextExpireTime+0x16>
 800c8e6:	2201      	movs	r2, #1
 800c8e8:	e000      	b.n	800c8ec <prvGetNextExpireTime+0x18>
 800c8ea:	2200      	movs	r2, #0
 800c8ec:	687b      	ldr	r3, [r7, #4]
 800c8ee:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 800c8f0:	687b      	ldr	r3, [r7, #4]
 800c8f2:	681b      	ldr	r3, [r3, #0]
 800c8f4:	2b00      	cmp	r3, #0
 800c8f6:	d105      	bne.n	800c904 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800c8f8:	4b07      	ldr	r3, [pc, #28]	; (800c918 <prvGetNextExpireTime+0x44>)
 800c8fa:	681b      	ldr	r3, [r3, #0]
 800c8fc:	68db      	ldr	r3, [r3, #12]
 800c8fe:	681b      	ldr	r3, [r3, #0]
 800c900:	60fb      	str	r3, [r7, #12]
 800c902:	e001      	b.n	800c908 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 800c904:	2300      	movs	r3, #0
 800c906:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 800c908:	68fb      	ldr	r3, [r7, #12]
}
 800c90a:	4618      	mov	r0, r3
 800c90c:	3714      	adds	r7, #20
 800c90e:	46bd      	mov	sp, r7
 800c910:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c914:	4770      	bx	lr
 800c916:	bf00      	nop
 800c918:	2000134c 	.word	0x2000134c

0800c91c <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 800c91c:	b580      	push	{r7, lr}
 800c91e:	b084      	sub	sp, #16
 800c920:	af00      	add	r7, sp, #0
 800c922:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 800c924:	f7ff fa74 	bl	800be10 <xTaskGetTickCount>
 800c928:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 800c92a:	4b0b      	ldr	r3, [pc, #44]	; (800c958 <prvSampleTimeNow+0x3c>)
 800c92c:	681b      	ldr	r3, [r3, #0]
 800c92e:	68fa      	ldr	r2, [r7, #12]
 800c930:	429a      	cmp	r2, r3
 800c932:	d205      	bcs.n	800c940 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 800c934:	f000 f936 	bl	800cba4 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 800c938:	687b      	ldr	r3, [r7, #4]
 800c93a:	2201      	movs	r2, #1
 800c93c:	601a      	str	r2, [r3, #0]
 800c93e:	e002      	b.n	800c946 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 800c940:	687b      	ldr	r3, [r7, #4]
 800c942:	2200      	movs	r2, #0
 800c944:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 800c946:	4a04      	ldr	r2, [pc, #16]	; (800c958 <prvSampleTimeNow+0x3c>)
 800c948:	68fb      	ldr	r3, [r7, #12]
 800c94a:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 800c94c:	68fb      	ldr	r3, [r7, #12]
}
 800c94e:	4618      	mov	r0, r3
 800c950:	3710      	adds	r7, #16
 800c952:	46bd      	mov	sp, r7
 800c954:	bd80      	pop	{r7, pc}
 800c956:	bf00      	nop
 800c958:	2000135c 	.word	0x2000135c

0800c95c <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 800c95c:	b580      	push	{r7, lr}
 800c95e:	b086      	sub	sp, #24
 800c960:	af00      	add	r7, sp, #0
 800c962:	60f8      	str	r0, [r7, #12]
 800c964:	60b9      	str	r1, [r7, #8]
 800c966:	607a      	str	r2, [r7, #4]
 800c968:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 800c96a:	2300      	movs	r3, #0
 800c96c:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 800c96e:	68fb      	ldr	r3, [r7, #12]
 800c970:	68ba      	ldr	r2, [r7, #8]
 800c972:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800c974:	68fb      	ldr	r3, [r7, #12]
 800c976:	68fa      	ldr	r2, [r7, #12]
 800c978:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 800c97a:	68ba      	ldr	r2, [r7, #8]
 800c97c:	687b      	ldr	r3, [r7, #4]
 800c97e:	429a      	cmp	r2, r3
 800c980:	d812      	bhi.n	800c9a8 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800c982:	687a      	ldr	r2, [r7, #4]
 800c984:	683b      	ldr	r3, [r7, #0]
 800c986:	1ad2      	subs	r2, r2, r3
 800c988:	68fb      	ldr	r3, [r7, #12]
 800c98a:	699b      	ldr	r3, [r3, #24]
 800c98c:	429a      	cmp	r2, r3
 800c98e:	d302      	bcc.n	800c996 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 800c990:	2301      	movs	r3, #1
 800c992:	617b      	str	r3, [r7, #20]
 800c994:	e01b      	b.n	800c9ce <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 800c996:	4b10      	ldr	r3, [pc, #64]	; (800c9d8 <prvInsertTimerInActiveList+0x7c>)
 800c998:	681a      	ldr	r2, [r3, #0]
 800c99a:	68fb      	ldr	r3, [r7, #12]
 800c99c:	3304      	adds	r3, #4
 800c99e:	4619      	mov	r1, r3
 800c9a0:	4610      	mov	r0, r2
 800c9a2:	f7fe f894 	bl	800aace <vListInsert>
 800c9a6:	e012      	b.n	800c9ce <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 800c9a8:	687a      	ldr	r2, [r7, #4]
 800c9aa:	683b      	ldr	r3, [r7, #0]
 800c9ac:	429a      	cmp	r2, r3
 800c9ae:	d206      	bcs.n	800c9be <prvInsertTimerInActiveList+0x62>
 800c9b0:	68ba      	ldr	r2, [r7, #8]
 800c9b2:	683b      	ldr	r3, [r7, #0]
 800c9b4:	429a      	cmp	r2, r3
 800c9b6:	d302      	bcc.n	800c9be <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 800c9b8:	2301      	movs	r3, #1
 800c9ba:	617b      	str	r3, [r7, #20]
 800c9bc:	e007      	b.n	800c9ce <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800c9be:	4b07      	ldr	r3, [pc, #28]	; (800c9dc <prvInsertTimerInActiveList+0x80>)
 800c9c0:	681a      	ldr	r2, [r3, #0]
 800c9c2:	68fb      	ldr	r3, [r7, #12]
 800c9c4:	3304      	adds	r3, #4
 800c9c6:	4619      	mov	r1, r3
 800c9c8:	4610      	mov	r0, r2
 800c9ca:	f7fe f880 	bl	800aace <vListInsert>
		}
	}

	return xProcessTimerNow;
 800c9ce:	697b      	ldr	r3, [r7, #20]
}
 800c9d0:	4618      	mov	r0, r3
 800c9d2:	3718      	adds	r7, #24
 800c9d4:	46bd      	mov	sp, r7
 800c9d6:	bd80      	pop	{r7, pc}
 800c9d8:	20001350 	.word	0x20001350
 800c9dc:	2000134c 	.word	0x2000134c

0800c9e0 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 800c9e0:	b580      	push	{r7, lr}
 800c9e2:	b08e      	sub	sp, #56	; 0x38
 800c9e4:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800c9e6:	e0ca      	b.n	800cb7e <prvProcessReceivedCommands+0x19e>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 800c9e8:	687b      	ldr	r3, [r7, #4]
 800c9ea:	2b00      	cmp	r3, #0
 800c9ec:	da18      	bge.n	800ca20 <prvProcessReceivedCommands+0x40>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 800c9ee:	1d3b      	adds	r3, r7, #4
 800c9f0:	3304      	adds	r3, #4
 800c9f2:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 800c9f4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c9f6:	2b00      	cmp	r3, #0
 800c9f8:	d10a      	bne.n	800ca10 <prvProcessReceivedCommands+0x30>
	__asm volatile
 800c9fa:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c9fe:	f383 8811 	msr	BASEPRI, r3
 800ca02:	f3bf 8f6f 	isb	sy
 800ca06:	f3bf 8f4f 	dsb	sy
 800ca0a:	61fb      	str	r3, [r7, #28]
}
 800ca0c:	bf00      	nop
 800ca0e:	e7fe      	b.n	800ca0e <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 800ca10:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ca12:	681b      	ldr	r3, [r3, #0]
 800ca14:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800ca16:	6850      	ldr	r0, [r2, #4]
 800ca18:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800ca1a:	6892      	ldr	r2, [r2, #8]
 800ca1c:	4611      	mov	r1, r2
 800ca1e:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 800ca20:	687b      	ldr	r3, [r7, #4]
 800ca22:	2b00      	cmp	r3, #0
 800ca24:	f2c0 80ab 	blt.w	800cb7e <prvProcessReceivedCommands+0x19e>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 800ca28:	68fb      	ldr	r3, [r7, #12]
 800ca2a:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 800ca2c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ca2e:	695b      	ldr	r3, [r3, #20]
 800ca30:	2b00      	cmp	r3, #0
 800ca32:	d004      	beq.n	800ca3e <prvProcessReceivedCommands+0x5e>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800ca34:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ca36:	3304      	adds	r3, #4
 800ca38:	4618      	mov	r0, r3
 800ca3a:	f7fe f881 	bl	800ab40 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800ca3e:	463b      	mov	r3, r7
 800ca40:	4618      	mov	r0, r3
 800ca42:	f7ff ff6b 	bl	800c91c <prvSampleTimeNow>
 800ca46:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 800ca48:	687b      	ldr	r3, [r7, #4]
 800ca4a:	2b09      	cmp	r3, #9
 800ca4c:	f200 8096 	bhi.w	800cb7c <prvProcessReceivedCommands+0x19c>
 800ca50:	a201      	add	r2, pc, #4	; (adr r2, 800ca58 <prvProcessReceivedCommands+0x78>)
 800ca52:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ca56:	bf00      	nop
 800ca58:	0800ca81 	.word	0x0800ca81
 800ca5c:	0800ca81 	.word	0x0800ca81
 800ca60:	0800ca81 	.word	0x0800ca81
 800ca64:	0800caf5 	.word	0x0800caf5
 800ca68:	0800cb09 	.word	0x0800cb09
 800ca6c:	0800cb53 	.word	0x0800cb53
 800ca70:	0800ca81 	.word	0x0800ca81
 800ca74:	0800ca81 	.word	0x0800ca81
 800ca78:	0800caf5 	.word	0x0800caf5
 800ca7c:	0800cb09 	.word	0x0800cb09
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800ca80:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ca82:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800ca86:	f043 0301 	orr.w	r3, r3, #1
 800ca8a:	b2da      	uxtb	r2, r3
 800ca8c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ca8e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 800ca92:	68ba      	ldr	r2, [r7, #8]
 800ca94:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ca96:	699b      	ldr	r3, [r3, #24]
 800ca98:	18d1      	adds	r1, r2, r3
 800ca9a:	68bb      	ldr	r3, [r7, #8]
 800ca9c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800ca9e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800caa0:	f7ff ff5c 	bl	800c95c <prvInsertTimerInActiveList>
 800caa4:	4603      	mov	r3, r0
 800caa6:	2b00      	cmp	r3, #0
 800caa8:	d069      	beq.n	800cb7e <prvProcessReceivedCommands+0x19e>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800caaa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800caac:	6a1b      	ldr	r3, [r3, #32]
 800caae:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800cab0:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800cab2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cab4:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800cab8:	f003 0304 	and.w	r3, r3, #4
 800cabc:	2b00      	cmp	r3, #0
 800cabe:	d05e      	beq.n	800cb7e <prvProcessReceivedCommands+0x19e>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 800cac0:	68ba      	ldr	r2, [r7, #8]
 800cac2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cac4:	699b      	ldr	r3, [r3, #24]
 800cac6:	441a      	add	r2, r3
 800cac8:	2300      	movs	r3, #0
 800caca:	9300      	str	r3, [sp, #0]
 800cacc:	2300      	movs	r3, #0
 800cace:	2100      	movs	r1, #0
 800cad0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800cad2:	f7ff fe05 	bl	800c6e0 <xTimerGenericCommand>
 800cad6:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 800cad8:	6a3b      	ldr	r3, [r7, #32]
 800cada:	2b00      	cmp	r3, #0
 800cadc:	d14f      	bne.n	800cb7e <prvProcessReceivedCommands+0x19e>
	__asm volatile
 800cade:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cae2:	f383 8811 	msr	BASEPRI, r3
 800cae6:	f3bf 8f6f 	isb	sy
 800caea:	f3bf 8f4f 	dsb	sy
 800caee:	61bb      	str	r3, [r7, #24]
}
 800caf0:	bf00      	nop
 800caf2:	e7fe      	b.n	800caf2 <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800caf4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800caf6:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800cafa:	f023 0301 	bic.w	r3, r3, #1
 800cafe:	b2da      	uxtb	r2, r3
 800cb00:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cb02:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 800cb06:	e03a      	b.n	800cb7e <prvProcessReceivedCommands+0x19e>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800cb08:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cb0a:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800cb0e:	f043 0301 	orr.w	r3, r3, #1
 800cb12:	b2da      	uxtb	r2, r3
 800cb14:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cb16:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 800cb1a:	68ba      	ldr	r2, [r7, #8]
 800cb1c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cb1e:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 800cb20:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cb22:	699b      	ldr	r3, [r3, #24]
 800cb24:	2b00      	cmp	r3, #0
 800cb26:	d10a      	bne.n	800cb3e <prvProcessReceivedCommands+0x15e>
	__asm volatile
 800cb28:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cb2c:	f383 8811 	msr	BASEPRI, r3
 800cb30:	f3bf 8f6f 	isb	sy
 800cb34:	f3bf 8f4f 	dsb	sy
 800cb38:	617b      	str	r3, [r7, #20]
}
 800cb3a:	bf00      	nop
 800cb3c:	e7fe      	b.n	800cb3c <prvProcessReceivedCommands+0x15c>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 800cb3e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cb40:	699a      	ldr	r2, [r3, #24]
 800cb42:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cb44:	18d1      	adds	r1, r2, r3
 800cb46:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cb48:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800cb4a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800cb4c:	f7ff ff06 	bl	800c95c <prvInsertTimerInActiveList>
					break;
 800cb50:	e015      	b.n	800cb7e <prvProcessReceivedCommands+0x19e>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 800cb52:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cb54:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800cb58:	f003 0302 	and.w	r3, r3, #2
 800cb5c:	2b00      	cmp	r3, #0
 800cb5e:	d103      	bne.n	800cb68 <prvProcessReceivedCommands+0x188>
						{
							vPortFree( pxTimer );
 800cb60:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800cb62:	f000 fbdd 	bl	800d320 <vPortFree>
 800cb66:	e00a      	b.n	800cb7e <prvProcessReceivedCommands+0x19e>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800cb68:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cb6a:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800cb6e:	f023 0301 	bic.w	r3, r3, #1
 800cb72:	b2da      	uxtb	r2, r3
 800cb74:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cb76:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 800cb7a:	e000      	b.n	800cb7e <prvProcessReceivedCommands+0x19e>

				default	:
					/* Don't expect to get here. */
					break;
 800cb7c:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800cb7e:	4b08      	ldr	r3, [pc, #32]	; (800cba0 <prvProcessReceivedCommands+0x1c0>)
 800cb80:	681b      	ldr	r3, [r3, #0]
 800cb82:	1d39      	adds	r1, r7, #4
 800cb84:	2200      	movs	r2, #0
 800cb86:	4618      	mov	r0, r3
 800cb88:	f7fe fbd2 	bl	800b330 <xQueueReceive>
 800cb8c:	4603      	mov	r3, r0
 800cb8e:	2b00      	cmp	r3, #0
 800cb90:	f47f af2a 	bne.w	800c9e8 <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
 800cb94:	bf00      	nop
 800cb96:	bf00      	nop
 800cb98:	3730      	adds	r7, #48	; 0x30
 800cb9a:	46bd      	mov	sp, r7
 800cb9c:	bd80      	pop	{r7, pc}
 800cb9e:	bf00      	nop
 800cba0:	20001354 	.word	0x20001354

0800cba4 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 800cba4:	b580      	push	{r7, lr}
 800cba6:	b088      	sub	sp, #32
 800cba8:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800cbaa:	e048      	b.n	800cc3e <prvSwitchTimerLists+0x9a>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800cbac:	4b2d      	ldr	r3, [pc, #180]	; (800cc64 <prvSwitchTimerLists+0xc0>)
 800cbae:	681b      	ldr	r3, [r3, #0]
 800cbb0:	68db      	ldr	r3, [r3, #12]
 800cbb2:	681b      	ldr	r3, [r3, #0]
 800cbb4:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800cbb6:	4b2b      	ldr	r3, [pc, #172]	; (800cc64 <prvSwitchTimerLists+0xc0>)
 800cbb8:	681b      	ldr	r3, [r3, #0]
 800cbba:	68db      	ldr	r3, [r3, #12]
 800cbbc:	68db      	ldr	r3, [r3, #12]
 800cbbe:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800cbc0:	68fb      	ldr	r3, [r7, #12]
 800cbc2:	3304      	adds	r3, #4
 800cbc4:	4618      	mov	r0, r3
 800cbc6:	f7fd ffbb 	bl	800ab40 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800cbca:	68fb      	ldr	r3, [r7, #12]
 800cbcc:	6a1b      	ldr	r3, [r3, #32]
 800cbce:	68f8      	ldr	r0, [r7, #12]
 800cbd0:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800cbd2:	68fb      	ldr	r3, [r7, #12]
 800cbd4:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800cbd8:	f003 0304 	and.w	r3, r3, #4
 800cbdc:	2b00      	cmp	r3, #0
 800cbde:	d02e      	beq.n	800cc3e <prvSwitchTimerLists+0x9a>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 800cbe0:	68fb      	ldr	r3, [r7, #12]
 800cbe2:	699b      	ldr	r3, [r3, #24]
 800cbe4:	693a      	ldr	r2, [r7, #16]
 800cbe6:	4413      	add	r3, r2
 800cbe8:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 800cbea:	68ba      	ldr	r2, [r7, #8]
 800cbec:	693b      	ldr	r3, [r7, #16]
 800cbee:	429a      	cmp	r2, r3
 800cbf0:	d90e      	bls.n	800cc10 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 800cbf2:	68fb      	ldr	r3, [r7, #12]
 800cbf4:	68ba      	ldr	r2, [r7, #8]
 800cbf6:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800cbf8:	68fb      	ldr	r3, [r7, #12]
 800cbfa:	68fa      	ldr	r2, [r7, #12]
 800cbfc:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800cbfe:	4b19      	ldr	r3, [pc, #100]	; (800cc64 <prvSwitchTimerLists+0xc0>)
 800cc00:	681a      	ldr	r2, [r3, #0]
 800cc02:	68fb      	ldr	r3, [r7, #12]
 800cc04:	3304      	adds	r3, #4
 800cc06:	4619      	mov	r1, r3
 800cc08:	4610      	mov	r0, r2
 800cc0a:	f7fd ff60 	bl	800aace <vListInsert>
 800cc0e:	e016      	b.n	800cc3e <prvSwitchTimerLists+0x9a>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800cc10:	2300      	movs	r3, #0
 800cc12:	9300      	str	r3, [sp, #0]
 800cc14:	2300      	movs	r3, #0
 800cc16:	693a      	ldr	r2, [r7, #16]
 800cc18:	2100      	movs	r1, #0
 800cc1a:	68f8      	ldr	r0, [r7, #12]
 800cc1c:	f7ff fd60 	bl	800c6e0 <xTimerGenericCommand>
 800cc20:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 800cc22:	687b      	ldr	r3, [r7, #4]
 800cc24:	2b00      	cmp	r3, #0
 800cc26:	d10a      	bne.n	800cc3e <prvSwitchTimerLists+0x9a>
	__asm volatile
 800cc28:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cc2c:	f383 8811 	msr	BASEPRI, r3
 800cc30:	f3bf 8f6f 	isb	sy
 800cc34:	f3bf 8f4f 	dsb	sy
 800cc38:	603b      	str	r3, [r7, #0]
}
 800cc3a:	bf00      	nop
 800cc3c:	e7fe      	b.n	800cc3c <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800cc3e:	4b09      	ldr	r3, [pc, #36]	; (800cc64 <prvSwitchTimerLists+0xc0>)
 800cc40:	681b      	ldr	r3, [r3, #0]
 800cc42:	681b      	ldr	r3, [r3, #0]
 800cc44:	2b00      	cmp	r3, #0
 800cc46:	d1b1      	bne.n	800cbac <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 800cc48:	4b06      	ldr	r3, [pc, #24]	; (800cc64 <prvSwitchTimerLists+0xc0>)
 800cc4a:	681b      	ldr	r3, [r3, #0]
 800cc4c:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 800cc4e:	4b06      	ldr	r3, [pc, #24]	; (800cc68 <prvSwitchTimerLists+0xc4>)
 800cc50:	681b      	ldr	r3, [r3, #0]
 800cc52:	4a04      	ldr	r2, [pc, #16]	; (800cc64 <prvSwitchTimerLists+0xc0>)
 800cc54:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 800cc56:	4a04      	ldr	r2, [pc, #16]	; (800cc68 <prvSwitchTimerLists+0xc4>)
 800cc58:	697b      	ldr	r3, [r7, #20]
 800cc5a:	6013      	str	r3, [r2, #0]
}
 800cc5c:	bf00      	nop
 800cc5e:	3718      	adds	r7, #24
 800cc60:	46bd      	mov	sp, r7
 800cc62:	bd80      	pop	{r7, pc}
 800cc64:	2000134c 	.word	0x2000134c
 800cc68:	20001350 	.word	0x20001350

0800cc6c <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 800cc6c:	b580      	push	{r7, lr}
 800cc6e:	b082      	sub	sp, #8
 800cc70:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 800cc72:	f000 f967 	bl	800cf44 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 800cc76:	4b15      	ldr	r3, [pc, #84]	; (800cccc <prvCheckForValidListAndQueue+0x60>)
 800cc78:	681b      	ldr	r3, [r3, #0]
 800cc7a:	2b00      	cmp	r3, #0
 800cc7c:	d120      	bne.n	800ccc0 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 800cc7e:	4814      	ldr	r0, [pc, #80]	; (800ccd0 <prvCheckForValidListAndQueue+0x64>)
 800cc80:	f7fd fed4 	bl	800aa2c <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 800cc84:	4813      	ldr	r0, [pc, #76]	; (800ccd4 <prvCheckForValidListAndQueue+0x68>)
 800cc86:	f7fd fed1 	bl	800aa2c <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 800cc8a:	4b13      	ldr	r3, [pc, #76]	; (800ccd8 <prvCheckForValidListAndQueue+0x6c>)
 800cc8c:	4a10      	ldr	r2, [pc, #64]	; (800ccd0 <prvCheckForValidListAndQueue+0x64>)
 800cc8e:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 800cc90:	4b12      	ldr	r3, [pc, #72]	; (800ccdc <prvCheckForValidListAndQueue+0x70>)
 800cc92:	4a10      	ldr	r2, [pc, #64]	; (800ccd4 <prvCheckForValidListAndQueue+0x68>)
 800cc94:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 800cc96:	2300      	movs	r3, #0
 800cc98:	9300      	str	r3, [sp, #0]
 800cc9a:	4b11      	ldr	r3, [pc, #68]	; (800cce0 <prvCheckForValidListAndQueue+0x74>)
 800cc9c:	4a11      	ldr	r2, [pc, #68]	; (800cce4 <prvCheckForValidListAndQueue+0x78>)
 800cc9e:	2110      	movs	r1, #16
 800cca0:	200a      	movs	r0, #10
 800cca2:	f7fd ffdf 	bl	800ac64 <xQueueGenericCreateStatic>
 800cca6:	4603      	mov	r3, r0
 800cca8:	4a08      	ldr	r2, [pc, #32]	; (800cccc <prvCheckForValidListAndQueue+0x60>)
 800ccaa:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 800ccac:	4b07      	ldr	r3, [pc, #28]	; (800cccc <prvCheckForValidListAndQueue+0x60>)
 800ccae:	681b      	ldr	r3, [r3, #0]
 800ccb0:	2b00      	cmp	r3, #0
 800ccb2:	d005      	beq.n	800ccc0 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 800ccb4:	4b05      	ldr	r3, [pc, #20]	; (800cccc <prvCheckForValidListAndQueue+0x60>)
 800ccb6:	681b      	ldr	r3, [r3, #0]
 800ccb8:	490b      	ldr	r1, [pc, #44]	; (800cce8 <prvCheckForValidListAndQueue+0x7c>)
 800ccba:	4618      	mov	r0, r3
 800ccbc:	f7fe fd4c 	bl	800b758 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800ccc0:	f000 f970 	bl	800cfa4 <vPortExitCritical>
}
 800ccc4:	bf00      	nop
 800ccc6:	46bd      	mov	sp, r7
 800ccc8:	bd80      	pop	{r7, pc}
 800ccca:	bf00      	nop
 800cccc:	20001354 	.word	0x20001354
 800ccd0:	20001324 	.word	0x20001324
 800ccd4:	20001338 	.word	0x20001338
 800ccd8:	2000134c 	.word	0x2000134c
 800ccdc:	20001350 	.word	0x20001350
 800cce0:	20001400 	.word	0x20001400
 800cce4:	20001360 	.word	0x20001360
 800cce8:	0800e25c 	.word	0x0800e25c

0800ccec <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800ccec:	b480      	push	{r7}
 800ccee:	b085      	sub	sp, #20
 800ccf0:	af00      	add	r7, sp, #0
 800ccf2:	60f8      	str	r0, [r7, #12]
 800ccf4:	60b9      	str	r1, [r7, #8]
 800ccf6:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 800ccf8:	68fb      	ldr	r3, [r7, #12]
 800ccfa:	3b04      	subs	r3, #4
 800ccfc:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800ccfe:	68fb      	ldr	r3, [r7, #12]
 800cd00:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800cd04:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800cd06:	68fb      	ldr	r3, [r7, #12]
 800cd08:	3b04      	subs	r3, #4
 800cd0a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800cd0c:	68bb      	ldr	r3, [r7, #8]
 800cd0e:	f023 0201 	bic.w	r2, r3, #1
 800cd12:	68fb      	ldr	r3, [r7, #12]
 800cd14:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800cd16:	68fb      	ldr	r3, [r7, #12]
 800cd18:	3b04      	subs	r3, #4
 800cd1a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800cd1c:	4a0c      	ldr	r2, [pc, #48]	; (800cd50 <pxPortInitialiseStack+0x64>)
 800cd1e:	68fb      	ldr	r3, [r7, #12]
 800cd20:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800cd22:	68fb      	ldr	r3, [r7, #12]
 800cd24:	3b14      	subs	r3, #20
 800cd26:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800cd28:	687a      	ldr	r2, [r7, #4]
 800cd2a:	68fb      	ldr	r3, [r7, #12]
 800cd2c:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800cd2e:	68fb      	ldr	r3, [r7, #12]
 800cd30:	3b04      	subs	r3, #4
 800cd32:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 800cd34:	68fb      	ldr	r3, [r7, #12]
 800cd36:	f06f 0202 	mvn.w	r2, #2
 800cd3a:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800cd3c:	68fb      	ldr	r3, [r7, #12]
 800cd3e:	3b20      	subs	r3, #32
 800cd40:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800cd42:	68fb      	ldr	r3, [r7, #12]
}
 800cd44:	4618      	mov	r0, r3
 800cd46:	3714      	adds	r7, #20
 800cd48:	46bd      	mov	sp, r7
 800cd4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cd4e:	4770      	bx	lr
 800cd50:	0800cd55 	.word	0x0800cd55

0800cd54 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800cd54:	b480      	push	{r7}
 800cd56:	b085      	sub	sp, #20
 800cd58:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800cd5a:	2300      	movs	r3, #0
 800cd5c:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800cd5e:	4b12      	ldr	r3, [pc, #72]	; (800cda8 <prvTaskExitError+0x54>)
 800cd60:	681b      	ldr	r3, [r3, #0]
 800cd62:	f1b3 3fff 	cmp.w	r3, #4294967295
 800cd66:	d00a      	beq.n	800cd7e <prvTaskExitError+0x2a>
	__asm volatile
 800cd68:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cd6c:	f383 8811 	msr	BASEPRI, r3
 800cd70:	f3bf 8f6f 	isb	sy
 800cd74:	f3bf 8f4f 	dsb	sy
 800cd78:	60fb      	str	r3, [r7, #12]
}
 800cd7a:	bf00      	nop
 800cd7c:	e7fe      	b.n	800cd7c <prvTaskExitError+0x28>
	__asm volatile
 800cd7e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cd82:	f383 8811 	msr	BASEPRI, r3
 800cd86:	f3bf 8f6f 	isb	sy
 800cd8a:	f3bf 8f4f 	dsb	sy
 800cd8e:	60bb      	str	r3, [r7, #8]
}
 800cd90:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800cd92:	bf00      	nop
 800cd94:	687b      	ldr	r3, [r7, #4]
 800cd96:	2b00      	cmp	r3, #0
 800cd98:	d0fc      	beq.n	800cd94 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800cd9a:	bf00      	nop
 800cd9c:	bf00      	nop
 800cd9e:	3714      	adds	r7, #20
 800cda0:	46bd      	mov	sp, r7
 800cda2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cda6:	4770      	bx	lr
 800cda8:	20000098 	.word	0x20000098
 800cdac:	00000000 	.word	0x00000000

0800cdb0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 800cdb0:	4b07      	ldr	r3, [pc, #28]	; (800cdd0 <pxCurrentTCBConst2>)
 800cdb2:	6819      	ldr	r1, [r3, #0]
 800cdb4:	6808      	ldr	r0, [r1, #0]
 800cdb6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800cdba:	f380 8809 	msr	PSP, r0
 800cdbe:	f3bf 8f6f 	isb	sy
 800cdc2:	f04f 0000 	mov.w	r0, #0
 800cdc6:	f380 8811 	msr	BASEPRI, r0
 800cdca:	4770      	bx	lr
 800cdcc:	f3af 8000 	nop.w

0800cdd0 <pxCurrentTCBConst2>:
 800cdd0:	20000e24 	.word	0x20000e24
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 800cdd4:	bf00      	nop
 800cdd6:	bf00      	nop

0800cdd8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 800cdd8:	4808      	ldr	r0, [pc, #32]	; (800cdfc <prvPortStartFirstTask+0x24>)
 800cdda:	6800      	ldr	r0, [r0, #0]
 800cddc:	6800      	ldr	r0, [r0, #0]
 800cdde:	f380 8808 	msr	MSP, r0
 800cde2:	f04f 0000 	mov.w	r0, #0
 800cde6:	f380 8814 	msr	CONTROL, r0
 800cdea:	b662      	cpsie	i
 800cdec:	b661      	cpsie	f
 800cdee:	f3bf 8f4f 	dsb	sy
 800cdf2:	f3bf 8f6f 	isb	sy
 800cdf6:	df00      	svc	0
 800cdf8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800cdfa:	bf00      	nop
 800cdfc:	e000ed08 	.word	0xe000ed08

0800ce00 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 800ce00:	b580      	push	{r7, lr}
 800ce02:	b086      	sub	sp, #24
 800ce04:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 800ce06:	4b46      	ldr	r3, [pc, #280]	; (800cf20 <xPortStartScheduler+0x120>)
 800ce08:	681b      	ldr	r3, [r3, #0]
 800ce0a:	4a46      	ldr	r2, [pc, #280]	; (800cf24 <xPortStartScheduler+0x124>)
 800ce0c:	4293      	cmp	r3, r2
 800ce0e:	d10a      	bne.n	800ce26 <xPortStartScheduler+0x26>
	__asm volatile
 800ce10:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ce14:	f383 8811 	msr	BASEPRI, r3
 800ce18:	f3bf 8f6f 	isb	sy
 800ce1c:	f3bf 8f4f 	dsb	sy
 800ce20:	613b      	str	r3, [r7, #16]
}
 800ce22:	bf00      	nop
 800ce24:	e7fe      	b.n	800ce24 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 800ce26:	4b3e      	ldr	r3, [pc, #248]	; (800cf20 <xPortStartScheduler+0x120>)
 800ce28:	681b      	ldr	r3, [r3, #0]
 800ce2a:	4a3f      	ldr	r2, [pc, #252]	; (800cf28 <xPortStartScheduler+0x128>)
 800ce2c:	4293      	cmp	r3, r2
 800ce2e:	d10a      	bne.n	800ce46 <xPortStartScheduler+0x46>
	__asm volatile
 800ce30:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ce34:	f383 8811 	msr	BASEPRI, r3
 800ce38:	f3bf 8f6f 	isb	sy
 800ce3c:	f3bf 8f4f 	dsb	sy
 800ce40:	60fb      	str	r3, [r7, #12]
}
 800ce42:	bf00      	nop
 800ce44:	e7fe      	b.n	800ce44 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800ce46:	4b39      	ldr	r3, [pc, #228]	; (800cf2c <xPortStartScheduler+0x12c>)
 800ce48:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800ce4a:	697b      	ldr	r3, [r7, #20]
 800ce4c:	781b      	ldrb	r3, [r3, #0]
 800ce4e:	b2db      	uxtb	r3, r3
 800ce50:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800ce52:	697b      	ldr	r3, [r7, #20]
 800ce54:	22ff      	movs	r2, #255	; 0xff
 800ce56:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800ce58:	697b      	ldr	r3, [r7, #20]
 800ce5a:	781b      	ldrb	r3, [r3, #0]
 800ce5c:	b2db      	uxtb	r3, r3
 800ce5e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800ce60:	78fb      	ldrb	r3, [r7, #3]
 800ce62:	b2db      	uxtb	r3, r3
 800ce64:	f003 0350 	and.w	r3, r3, #80	; 0x50
 800ce68:	b2da      	uxtb	r2, r3
 800ce6a:	4b31      	ldr	r3, [pc, #196]	; (800cf30 <xPortStartScheduler+0x130>)
 800ce6c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800ce6e:	4b31      	ldr	r3, [pc, #196]	; (800cf34 <xPortStartScheduler+0x134>)
 800ce70:	2207      	movs	r2, #7
 800ce72:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800ce74:	e009      	b.n	800ce8a <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 800ce76:	4b2f      	ldr	r3, [pc, #188]	; (800cf34 <xPortStartScheduler+0x134>)
 800ce78:	681b      	ldr	r3, [r3, #0]
 800ce7a:	3b01      	subs	r3, #1
 800ce7c:	4a2d      	ldr	r2, [pc, #180]	; (800cf34 <xPortStartScheduler+0x134>)
 800ce7e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800ce80:	78fb      	ldrb	r3, [r7, #3]
 800ce82:	b2db      	uxtb	r3, r3
 800ce84:	005b      	lsls	r3, r3, #1
 800ce86:	b2db      	uxtb	r3, r3
 800ce88:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800ce8a:	78fb      	ldrb	r3, [r7, #3]
 800ce8c:	b2db      	uxtb	r3, r3
 800ce8e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800ce92:	2b80      	cmp	r3, #128	; 0x80
 800ce94:	d0ef      	beq.n	800ce76 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800ce96:	4b27      	ldr	r3, [pc, #156]	; (800cf34 <xPortStartScheduler+0x134>)
 800ce98:	681b      	ldr	r3, [r3, #0]
 800ce9a:	f1c3 0307 	rsb	r3, r3, #7
 800ce9e:	2b04      	cmp	r3, #4
 800cea0:	d00a      	beq.n	800ceb8 <xPortStartScheduler+0xb8>
	__asm volatile
 800cea2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cea6:	f383 8811 	msr	BASEPRI, r3
 800ceaa:	f3bf 8f6f 	isb	sy
 800ceae:	f3bf 8f4f 	dsb	sy
 800ceb2:	60bb      	str	r3, [r7, #8]
}
 800ceb4:	bf00      	nop
 800ceb6:	e7fe      	b.n	800ceb6 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800ceb8:	4b1e      	ldr	r3, [pc, #120]	; (800cf34 <xPortStartScheduler+0x134>)
 800ceba:	681b      	ldr	r3, [r3, #0]
 800cebc:	021b      	lsls	r3, r3, #8
 800cebe:	4a1d      	ldr	r2, [pc, #116]	; (800cf34 <xPortStartScheduler+0x134>)
 800cec0:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800cec2:	4b1c      	ldr	r3, [pc, #112]	; (800cf34 <xPortStartScheduler+0x134>)
 800cec4:	681b      	ldr	r3, [r3, #0]
 800cec6:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800ceca:	4a1a      	ldr	r2, [pc, #104]	; (800cf34 <xPortStartScheduler+0x134>)
 800cecc:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800cece:	687b      	ldr	r3, [r7, #4]
 800ced0:	b2da      	uxtb	r2, r3
 800ced2:	697b      	ldr	r3, [r7, #20]
 800ced4:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800ced6:	4b18      	ldr	r3, [pc, #96]	; (800cf38 <xPortStartScheduler+0x138>)
 800ced8:	681b      	ldr	r3, [r3, #0]
 800ceda:	4a17      	ldr	r2, [pc, #92]	; (800cf38 <xPortStartScheduler+0x138>)
 800cedc:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800cee0:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800cee2:	4b15      	ldr	r3, [pc, #84]	; (800cf38 <xPortStartScheduler+0x138>)
 800cee4:	681b      	ldr	r3, [r3, #0]
 800cee6:	4a14      	ldr	r2, [pc, #80]	; (800cf38 <xPortStartScheduler+0x138>)
 800cee8:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 800ceec:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800ceee:	f000 f8dd 	bl	800d0ac <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800cef2:	4b12      	ldr	r3, [pc, #72]	; (800cf3c <xPortStartScheduler+0x13c>)
 800cef4:	2200      	movs	r2, #0
 800cef6:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800cef8:	f000 f8fc 	bl	800d0f4 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800cefc:	4b10      	ldr	r3, [pc, #64]	; (800cf40 <xPortStartScheduler+0x140>)
 800cefe:	681b      	ldr	r3, [r3, #0]
 800cf00:	4a0f      	ldr	r2, [pc, #60]	; (800cf40 <xPortStartScheduler+0x140>)
 800cf02:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 800cf06:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800cf08:	f7ff ff66 	bl	800cdd8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800cf0c:	f7ff f84a 	bl	800bfa4 <vTaskSwitchContext>
	prvTaskExitError();
 800cf10:	f7ff ff20 	bl	800cd54 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800cf14:	2300      	movs	r3, #0
}
 800cf16:	4618      	mov	r0, r3
 800cf18:	3718      	adds	r7, #24
 800cf1a:	46bd      	mov	sp, r7
 800cf1c:	bd80      	pop	{r7, pc}
 800cf1e:	bf00      	nop
 800cf20:	e000ed00 	.word	0xe000ed00
 800cf24:	410fc271 	.word	0x410fc271
 800cf28:	410fc270 	.word	0x410fc270
 800cf2c:	e000e400 	.word	0xe000e400
 800cf30:	20001450 	.word	0x20001450
 800cf34:	20001454 	.word	0x20001454
 800cf38:	e000ed20 	.word	0xe000ed20
 800cf3c:	20000098 	.word	0x20000098
 800cf40:	e000ef34 	.word	0xe000ef34

0800cf44 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800cf44:	b480      	push	{r7}
 800cf46:	b083      	sub	sp, #12
 800cf48:	af00      	add	r7, sp, #0
	__asm volatile
 800cf4a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cf4e:	f383 8811 	msr	BASEPRI, r3
 800cf52:	f3bf 8f6f 	isb	sy
 800cf56:	f3bf 8f4f 	dsb	sy
 800cf5a:	607b      	str	r3, [r7, #4]
}
 800cf5c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800cf5e:	4b0f      	ldr	r3, [pc, #60]	; (800cf9c <vPortEnterCritical+0x58>)
 800cf60:	681b      	ldr	r3, [r3, #0]
 800cf62:	3301      	adds	r3, #1
 800cf64:	4a0d      	ldr	r2, [pc, #52]	; (800cf9c <vPortEnterCritical+0x58>)
 800cf66:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800cf68:	4b0c      	ldr	r3, [pc, #48]	; (800cf9c <vPortEnterCritical+0x58>)
 800cf6a:	681b      	ldr	r3, [r3, #0]
 800cf6c:	2b01      	cmp	r3, #1
 800cf6e:	d10f      	bne.n	800cf90 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 800cf70:	4b0b      	ldr	r3, [pc, #44]	; (800cfa0 <vPortEnterCritical+0x5c>)
 800cf72:	681b      	ldr	r3, [r3, #0]
 800cf74:	b2db      	uxtb	r3, r3
 800cf76:	2b00      	cmp	r3, #0
 800cf78:	d00a      	beq.n	800cf90 <vPortEnterCritical+0x4c>
	__asm volatile
 800cf7a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cf7e:	f383 8811 	msr	BASEPRI, r3
 800cf82:	f3bf 8f6f 	isb	sy
 800cf86:	f3bf 8f4f 	dsb	sy
 800cf8a:	603b      	str	r3, [r7, #0]
}
 800cf8c:	bf00      	nop
 800cf8e:	e7fe      	b.n	800cf8e <vPortEnterCritical+0x4a>
	}
}
 800cf90:	bf00      	nop
 800cf92:	370c      	adds	r7, #12
 800cf94:	46bd      	mov	sp, r7
 800cf96:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cf9a:	4770      	bx	lr
 800cf9c:	20000098 	.word	0x20000098
 800cfa0:	e000ed04 	.word	0xe000ed04

0800cfa4 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800cfa4:	b480      	push	{r7}
 800cfa6:	b083      	sub	sp, #12
 800cfa8:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800cfaa:	4b12      	ldr	r3, [pc, #72]	; (800cff4 <vPortExitCritical+0x50>)
 800cfac:	681b      	ldr	r3, [r3, #0]
 800cfae:	2b00      	cmp	r3, #0
 800cfb0:	d10a      	bne.n	800cfc8 <vPortExitCritical+0x24>
	__asm volatile
 800cfb2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cfb6:	f383 8811 	msr	BASEPRI, r3
 800cfba:	f3bf 8f6f 	isb	sy
 800cfbe:	f3bf 8f4f 	dsb	sy
 800cfc2:	607b      	str	r3, [r7, #4]
}
 800cfc4:	bf00      	nop
 800cfc6:	e7fe      	b.n	800cfc6 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 800cfc8:	4b0a      	ldr	r3, [pc, #40]	; (800cff4 <vPortExitCritical+0x50>)
 800cfca:	681b      	ldr	r3, [r3, #0]
 800cfcc:	3b01      	subs	r3, #1
 800cfce:	4a09      	ldr	r2, [pc, #36]	; (800cff4 <vPortExitCritical+0x50>)
 800cfd0:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800cfd2:	4b08      	ldr	r3, [pc, #32]	; (800cff4 <vPortExitCritical+0x50>)
 800cfd4:	681b      	ldr	r3, [r3, #0]
 800cfd6:	2b00      	cmp	r3, #0
 800cfd8:	d105      	bne.n	800cfe6 <vPortExitCritical+0x42>
 800cfda:	2300      	movs	r3, #0
 800cfdc:	603b      	str	r3, [r7, #0]
	__asm volatile
 800cfde:	683b      	ldr	r3, [r7, #0]
 800cfe0:	f383 8811 	msr	BASEPRI, r3
}
 800cfe4:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 800cfe6:	bf00      	nop
 800cfe8:	370c      	adds	r7, #12
 800cfea:	46bd      	mov	sp, r7
 800cfec:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cff0:	4770      	bx	lr
 800cff2:	bf00      	nop
 800cff4:	20000098 	.word	0x20000098
	...

0800d000 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 800d000:	f3ef 8009 	mrs	r0, PSP
 800d004:	f3bf 8f6f 	isb	sy
 800d008:	4b15      	ldr	r3, [pc, #84]	; (800d060 <pxCurrentTCBConst>)
 800d00a:	681a      	ldr	r2, [r3, #0]
 800d00c:	f01e 0f10 	tst.w	lr, #16
 800d010:	bf08      	it	eq
 800d012:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 800d016:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d01a:	6010      	str	r0, [r2, #0]
 800d01c:	e92d 0009 	stmdb	sp!, {r0, r3}
 800d020:	f04f 0050 	mov.w	r0, #80	; 0x50
 800d024:	f380 8811 	msr	BASEPRI, r0
 800d028:	f3bf 8f4f 	dsb	sy
 800d02c:	f3bf 8f6f 	isb	sy
 800d030:	f7fe ffb8 	bl	800bfa4 <vTaskSwitchContext>
 800d034:	f04f 0000 	mov.w	r0, #0
 800d038:	f380 8811 	msr	BASEPRI, r0
 800d03c:	bc09      	pop	{r0, r3}
 800d03e:	6819      	ldr	r1, [r3, #0]
 800d040:	6808      	ldr	r0, [r1, #0]
 800d042:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d046:	f01e 0f10 	tst.w	lr, #16
 800d04a:	bf08      	it	eq
 800d04c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 800d050:	f380 8809 	msr	PSP, r0
 800d054:	f3bf 8f6f 	isb	sy
 800d058:	4770      	bx	lr
 800d05a:	bf00      	nop
 800d05c:	f3af 8000 	nop.w

0800d060 <pxCurrentTCBConst>:
 800d060:	20000e24 	.word	0x20000e24
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 800d064:	bf00      	nop
 800d066:	bf00      	nop

0800d068 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 800d068:	b580      	push	{r7, lr}
 800d06a:	b082      	sub	sp, #8
 800d06c:	af00      	add	r7, sp, #0
	__asm volatile
 800d06e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d072:	f383 8811 	msr	BASEPRI, r3
 800d076:	f3bf 8f6f 	isb	sy
 800d07a:	f3bf 8f4f 	dsb	sy
 800d07e:	607b      	str	r3, [r7, #4]
}
 800d080:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 800d082:	f7fe fed5 	bl	800be30 <xTaskIncrementTick>
 800d086:	4603      	mov	r3, r0
 800d088:	2b00      	cmp	r3, #0
 800d08a:	d003      	beq.n	800d094 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800d08c:	4b06      	ldr	r3, [pc, #24]	; (800d0a8 <xPortSysTickHandler+0x40>)
 800d08e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800d092:	601a      	str	r2, [r3, #0]
 800d094:	2300      	movs	r3, #0
 800d096:	603b      	str	r3, [r7, #0]
	__asm volatile
 800d098:	683b      	ldr	r3, [r7, #0]
 800d09a:	f383 8811 	msr	BASEPRI, r3
}
 800d09e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 800d0a0:	bf00      	nop
 800d0a2:	3708      	adds	r7, #8
 800d0a4:	46bd      	mov	sp, r7
 800d0a6:	bd80      	pop	{r7, pc}
 800d0a8:	e000ed04 	.word	0xe000ed04

0800d0ac <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800d0ac:	b480      	push	{r7}
 800d0ae:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800d0b0:	4b0b      	ldr	r3, [pc, #44]	; (800d0e0 <vPortSetupTimerInterrupt+0x34>)
 800d0b2:	2200      	movs	r2, #0
 800d0b4:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800d0b6:	4b0b      	ldr	r3, [pc, #44]	; (800d0e4 <vPortSetupTimerInterrupt+0x38>)
 800d0b8:	2200      	movs	r2, #0
 800d0ba:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800d0bc:	4b0a      	ldr	r3, [pc, #40]	; (800d0e8 <vPortSetupTimerInterrupt+0x3c>)
 800d0be:	681b      	ldr	r3, [r3, #0]
 800d0c0:	4a0a      	ldr	r2, [pc, #40]	; (800d0ec <vPortSetupTimerInterrupt+0x40>)
 800d0c2:	fba2 2303 	umull	r2, r3, r2, r3
 800d0c6:	099b      	lsrs	r3, r3, #6
 800d0c8:	4a09      	ldr	r2, [pc, #36]	; (800d0f0 <vPortSetupTimerInterrupt+0x44>)
 800d0ca:	3b01      	subs	r3, #1
 800d0cc:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800d0ce:	4b04      	ldr	r3, [pc, #16]	; (800d0e0 <vPortSetupTimerInterrupt+0x34>)
 800d0d0:	2207      	movs	r2, #7
 800d0d2:	601a      	str	r2, [r3, #0]
}
 800d0d4:	bf00      	nop
 800d0d6:	46bd      	mov	sp, r7
 800d0d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d0dc:	4770      	bx	lr
 800d0de:	bf00      	nop
 800d0e0:	e000e010 	.word	0xe000e010
 800d0e4:	e000e018 	.word	0xe000e018
 800d0e8:	20000000 	.word	0x20000000
 800d0ec:	10624dd3 	.word	0x10624dd3
 800d0f0:	e000e014 	.word	0xe000e014

0800d0f4 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 800d0f4:	f8df 000c 	ldr.w	r0, [pc, #12]	; 800d104 <vPortEnableVFP+0x10>
 800d0f8:	6801      	ldr	r1, [r0, #0]
 800d0fa:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800d0fe:	6001      	str	r1, [r0, #0]
 800d100:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 800d102:	bf00      	nop
 800d104:	e000ed88 	.word	0xe000ed88

0800d108 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 800d108:	b480      	push	{r7}
 800d10a:	b085      	sub	sp, #20
 800d10c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800d10e:	f3ef 8305 	mrs	r3, IPSR
 800d112:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 800d114:	68fb      	ldr	r3, [r7, #12]
 800d116:	2b0f      	cmp	r3, #15
 800d118:	d914      	bls.n	800d144 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800d11a:	4a17      	ldr	r2, [pc, #92]	; (800d178 <vPortValidateInterruptPriority+0x70>)
 800d11c:	68fb      	ldr	r3, [r7, #12]
 800d11e:	4413      	add	r3, r2
 800d120:	781b      	ldrb	r3, [r3, #0]
 800d122:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 800d124:	4b15      	ldr	r3, [pc, #84]	; (800d17c <vPortValidateInterruptPriority+0x74>)
 800d126:	781b      	ldrb	r3, [r3, #0]
 800d128:	7afa      	ldrb	r2, [r7, #11]
 800d12a:	429a      	cmp	r2, r3
 800d12c:	d20a      	bcs.n	800d144 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 800d12e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d132:	f383 8811 	msr	BASEPRI, r3
 800d136:	f3bf 8f6f 	isb	sy
 800d13a:	f3bf 8f4f 	dsb	sy
 800d13e:	607b      	str	r3, [r7, #4]
}
 800d140:	bf00      	nop
 800d142:	e7fe      	b.n	800d142 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800d144:	4b0e      	ldr	r3, [pc, #56]	; (800d180 <vPortValidateInterruptPriority+0x78>)
 800d146:	681b      	ldr	r3, [r3, #0]
 800d148:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800d14c:	4b0d      	ldr	r3, [pc, #52]	; (800d184 <vPortValidateInterruptPriority+0x7c>)
 800d14e:	681b      	ldr	r3, [r3, #0]
 800d150:	429a      	cmp	r2, r3
 800d152:	d90a      	bls.n	800d16a <vPortValidateInterruptPriority+0x62>
	__asm volatile
 800d154:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d158:	f383 8811 	msr	BASEPRI, r3
 800d15c:	f3bf 8f6f 	isb	sy
 800d160:	f3bf 8f4f 	dsb	sy
 800d164:	603b      	str	r3, [r7, #0]
}
 800d166:	bf00      	nop
 800d168:	e7fe      	b.n	800d168 <vPortValidateInterruptPriority+0x60>
	}
 800d16a:	bf00      	nop
 800d16c:	3714      	adds	r7, #20
 800d16e:	46bd      	mov	sp, r7
 800d170:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d174:	4770      	bx	lr
 800d176:	bf00      	nop
 800d178:	e000e3f0 	.word	0xe000e3f0
 800d17c:	20001450 	.word	0x20001450
 800d180:	e000ed0c 	.word	0xe000ed0c
 800d184:	20001454 	.word	0x20001454

0800d188 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800d188:	b580      	push	{r7, lr}
 800d18a:	b08a      	sub	sp, #40	; 0x28
 800d18c:	af00      	add	r7, sp, #0
 800d18e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 800d190:	2300      	movs	r3, #0
 800d192:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 800d194:	f7fe fd90 	bl	800bcb8 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800d198:	4b5b      	ldr	r3, [pc, #364]	; (800d308 <pvPortMalloc+0x180>)
 800d19a:	681b      	ldr	r3, [r3, #0]
 800d19c:	2b00      	cmp	r3, #0
 800d19e:	d101      	bne.n	800d1a4 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 800d1a0:	f000 f920 	bl	800d3e4 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800d1a4:	4b59      	ldr	r3, [pc, #356]	; (800d30c <pvPortMalloc+0x184>)
 800d1a6:	681a      	ldr	r2, [r3, #0]
 800d1a8:	687b      	ldr	r3, [r7, #4]
 800d1aa:	4013      	ands	r3, r2
 800d1ac:	2b00      	cmp	r3, #0
 800d1ae:	f040 8093 	bne.w	800d2d8 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800d1b2:	687b      	ldr	r3, [r7, #4]
 800d1b4:	2b00      	cmp	r3, #0
 800d1b6:	d01d      	beq.n	800d1f4 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 800d1b8:	2208      	movs	r2, #8
 800d1ba:	687b      	ldr	r3, [r7, #4]
 800d1bc:	4413      	add	r3, r2
 800d1be:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800d1c0:	687b      	ldr	r3, [r7, #4]
 800d1c2:	f003 0307 	and.w	r3, r3, #7
 800d1c6:	2b00      	cmp	r3, #0
 800d1c8:	d014      	beq.n	800d1f4 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800d1ca:	687b      	ldr	r3, [r7, #4]
 800d1cc:	f023 0307 	bic.w	r3, r3, #7
 800d1d0:	3308      	adds	r3, #8
 800d1d2:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800d1d4:	687b      	ldr	r3, [r7, #4]
 800d1d6:	f003 0307 	and.w	r3, r3, #7
 800d1da:	2b00      	cmp	r3, #0
 800d1dc:	d00a      	beq.n	800d1f4 <pvPortMalloc+0x6c>
	__asm volatile
 800d1de:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d1e2:	f383 8811 	msr	BASEPRI, r3
 800d1e6:	f3bf 8f6f 	isb	sy
 800d1ea:	f3bf 8f4f 	dsb	sy
 800d1ee:	617b      	str	r3, [r7, #20]
}
 800d1f0:	bf00      	nop
 800d1f2:	e7fe      	b.n	800d1f2 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800d1f4:	687b      	ldr	r3, [r7, #4]
 800d1f6:	2b00      	cmp	r3, #0
 800d1f8:	d06e      	beq.n	800d2d8 <pvPortMalloc+0x150>
 800d1fa:	4b45      	ldr	r3, [pc, #276]	; (800d310 <pvPortMalloc+0x188>)
 800d1fc:	681b      	ldr	r3, [r3, #0]
 800d1fe:	687a      	ldr	r2, [r7, #4]
 800d200:	429a      	cmp	r2, r3
 800d202:	d869      	bhi.n	800d2d8 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800d204:	4b43      	ldr	r3, [pc, #268]	; (800d314 <pvPortMalloc+0x18c>)
 800d206:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800d208:	4b42      	ldr	r3, [pc, #264]	; (800d314 <pvPortMalloc+0x18c>)
 800d20a:	681b      	ldr	r3, [r3, #0]
 800d20c:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800d20e:	e004      	b.n	800d21a <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 800d210:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d212:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800d214:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d216:	681b      	ldr	r3, [r3, #0]
 800d218:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800d21a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d21c:	685b      	ldr	r3, [r3, #4]
 800d21e:	687a      	ldr	r2, [r7, #4]
 800d220:	429a      	cmp	r2, r3
 800d222:	d903      	bls.n	800d22c <pvPortMalloc+0xa4>
 800d224:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d226:	681b      	ldr	r3, [r3, #0]
 800d228:	2b00      	cmp	r3, #0
 800d22a:	d1f1      	bne.n	800d210 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800d22c:	4b36      	ldr	r3, [pc, #216]	; (800d308 <pvPortMalloc+0x180>)
 800d22e:	681b      	ldr	r3, [r3, #0]
 800d230:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800d232:	429a      	cmp	r2, r3
 800d234:	d050      	beq.n	800d2d8 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800d236:	6a3b      	ldr	r3, [r7, #32]
 800d238:	681b      	ldr	r3, [r3, #0]
 800d23a:	2208      	movs	r2, #8
 800d23c:	4413      	add	r3, r2
 800d23e:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800d240:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d242:	681a      	ldr	r2, [r3, #0]
 800d244:	6a3b      	ldr	r3, [r7, #32]
 800d246:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800d248:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d24a:	685a      	ldr	r2, [r3, #4]
 800d24c:	687b      	ldr	r3, [r7, #4]
 800d24e:	1ad2      	subs	r2, r2, r3
 800d250:	2308      	movs	r3, #8
 800d252:	005b      	lsls	r3, r3, #1
 800d254:	429a      	cmp	r2, r3
 800d256:	d91f      	bls.n	800d298 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800d258:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800d25a:	687b      	ldr	r3, [r7, #4]
 800d25c:	4413      	add	r3, r2
 800d25e:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800d260:	69bb      	ldr	r3, [r7, #24]
 800d262:	f003 0307 	and.w	r3, r3, #7
 800d266:	2b00      	cmp	r3, #0
 800d268:	d00a      	beq.n	800d280 <pvPortMalloc+0xf8>
	__asm volatile
 800d26a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d26e:	f383 8811 	msr	BASEPRI, r3
 800d272:	f3bf 8f6f 	isb	sy
 800d276:	f3bf 8f4f 	dsb	sy
 800d27a:	613b      	str	r3, [r7, #16]
}
 800d27c:	bf00      	nop
 800d27e:	e7fe      	b.n	800d27e <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800d280:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d282:	685a      	ldr	r2, [r3, #4]
 800d284:	687b      	ldr	r3, [r7, #4]
 800d286:	1ad2      	subs	r2, r2, r3
 800d288:	69bb      	ldr	r3, [r7, #24]
 800d28a:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800d28c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d28e:	687a      	ldr	r2, [r7, #4]
 800d290:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800d292:	69b8      	ldr	r0, [r7, #24]
 800d294:	f000 f908 	bl	800d4a8 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800d298:	4b1d      	ldr	r3, [pc, #116]	; (800d310 <pvPortMalloc+0x188>)
 800d29a:	681a      	ldr	r2, [r3, #0]
 800d29c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d29e:	685b      	ldr	r3, [r3, #4]
 800d2a0:	1ad3      	subs	r3, r2, r3
 800d2a2:	4a1b      	ldr	r2, [pc, #108]	; (800d310 <pvPortMalloc+0x188>)
 800d2a4:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800d2a6:	4b1a      	ldr	r3, [pc, #104]	; (800d310 <pvPortMalloc+0x188>)
 800d2a8:	681a      	ldr	r2, [r3, #0]
 800d2aa:	4b1b      	ldr	r3, [pc, #108]	; (800d318 <pvPortMalloc+0x190>)
 800d2ac:	681b      	ldr	r3, [r3, #0]
 800d2ae:	429a      	cmp	r2, r3
 800d2b0:	d203      	bcs.n	800d2ba <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800d2b2:	4b17      	ldr	r3, [pc, #92]	; (800d310 <pvPortMalloc+0x188>)
 800d2b4:	681b      	ldr	r3, [r3, #0]
 800d2b6:	4a18      	ldr	r2, [pc, #96]	; (800d318 <pvPortMalloc+0x190>)
 800d2b8:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800d2ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d2bc:	685a      	ldr	r2, [r3, #4]
 800d2be:	4b13      	ldr	r3, [pc, #76]	; (800d30c <pvPortMalloc+0x184>)
 800d2c0:	681b      	ldr	r3, [r3, #0]
 800d2c2:	431a      	orrs	r2, r3
 800d2c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d2c6:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800d2c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d2ca:	2200      	movs	r2, #0
 800d2cc:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 800d2ce:	4b13      	ldr	r3, [pc, #76]	; (800d31c <pvPortMalloc+0x194>)
 800d2d0:	681b      	ldr	r3, [r3, #0]
 800d2d2:	3301      	adds	r3, #1
 800d2d4:	4a11      	ldr	r2, [pc, #68]	; (800d31c <pvPortMalloc+0x194>)
 800d2d6:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800d2d8:	f7fe fcfc 	bl	800bcd4 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800d2dc:	69fb      	ldr	r3, [r7, #28]
 800d2de:	f003 0307 	and.w	r3, r3, #7
 800d2e2:	2b00      	cmp	r3, #0
 800d2e4:	d00a      	beq.n	800d2fc <pvPortMalloc+0x174>
	__asm volatile
 800d2e6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d2ea:	f383 8811 	msr	BASEPRI, r3
 800d2ee:	f3bf 8f6f 	isb	sy
 800d2f2:	f3bf 8f4f 	dsb	sy
 800d2f6:	60fb      	str	r3, [r7, #12]
}
 800d2f8:	bf00      	nop
 800d2fa:	e7fe      	b.n	800d2fa <pvPortMalloc+0x172>
	return pvReturn;
 800d2fc:	69fb      	ldr	r3, [r7, #28]
}
 800d2fe:	4618      	mov	r0, r3
 800d300:	3728      	adds	r7, #40	; 0x28
 800d302:	46bd      	mov	sp, r7
 800d304:	bd80      	pop	{r7, pc}
 800d306:	bf00      	nop
 800d308:	20005060 	.word	0x20005060
 800d30c:	20005074 	.word	0x20005074
 800d310:	20005064 	.word	0x20005064
 800d314:	20005058 	.word	0x20005058
 800d318:	20005068 	.word	0x20005068
 800d31c:	2000506c 	.word	0x2000506c

0800d320 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 800d320:	b580      	push	{r7, lr}
 800d322:	b086      	sub	sp, #24
 800d324:	af00      	add	r7, sp, #0
 800d326:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800d328:	687b      	ldr	r3, [r7, #4]
 800d32a:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800d32c:	687b      	ldr	r3, [r7, #4]
 800d32e:	2b00      	cmp	r3, #0
 800d330:	d04d      	beq.n	800d3ce <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800d332:	2308      	movs	r3, #8
 800d334:	425b      	negs	r3, r3
 800d336:	697a      	ldr	r2, [r7, #20]
 800d338:	4413      	add	r3, r2
 800d33a:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800d33c:	697b      	ldr	r3, [r7, #20]
 800d33e:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800d340:	693b      	ldr	r3, [r7, #16]
 800d342:	685a      	ldr	r2, [r3, #4]
 800d344:	4b24      	ldr	r3, [pc, #144]	; (800d3d8 <vPortFree+0xb8>)
 800d346:	681b      	ldr	r3, [r3, #0]
 800d348:	4013      	ands	r3, r2
 800d34a:	2b00      	cmp	r3, #0
 800d34c:	d10a      	bne.n	800d364 <vPortFree+0x44>
	__asm volatile
 800d34e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d352:	f383 8811 	msr	BASEPRI, r3
 800d356:	f3bf 8f6f 	isb	sy
 800d35a:	f3bf 8f4f 	dsb	sy
 800d35e:	60fb      	str	r3, [r7, #12]
}
 800d360:	bf00      	nop
 800d362:	e7fe      	b.n	800d362 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800d364:	693b      	ldr	r3, [r7, #16]
 800d366:	681b      	ldr	r3, [r3, #0]
 800d368:	2b00      	cmp	r3, #0
 800d36a:	d00a      	beq.n	800d382 <vPortFree+0x62>
	__asm volatile
 800d36c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d370:	f383 8811 	msr	BASEPRI, r3
 800d374:	f3bf 8f6f 	isb	sy
 800d378:	f3bf 8f4f 	dsb	sy
 800d37c:	60bb      	str	r3, [r7, #8]
}
 800d37e:	bf00      	nop
 800d380:	e7fe      	b.n	800d380 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800d382:	693b      	ldr	r3, [r7, #16]
 800d384:	685a      	ldr	r2, [r3, #4]
 800d386:	4b14      	ldr	r3, [pc, #80]	; (800d3d8 <vPortFree+0xb8>)
 800d388:	681b      	ldr	r3, [r3, #0]
 800d38a:	4013      	ands	r3, r2
 800d38c:	2b00      	cmp	r3, #0
 800d38e:	d01e      	beq.n	800d3ce <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800d390:	693b      	ldr	r3, [r7, #16]
 800d392:	681b      	ldr	r3, [r3, #0]
 800d394:	2b00      	cmp	r3, #0
 800d396:	d11a      	bne.n	800d3ce <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800d398:	693b      	ldr	r3, [r7, #16]
 800d39a:	685a      	ldr	r2, [r3, #4]
 800d39c:	4b0e      	ldr	r3, [pc, #56]	; (800d3d8 <vPortFree+0xb8>)
 800d39e:	681b      	ldr	r3, [r3, #0]
 800d3a0:	43db      	mvns	r3, r3
 800d3a2:	401a      	ands	r2, r3
 800d3a4:	693b      	ldr	r3, [r7, #16]
 800d3a6:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800d3a8:	f7fe fc86 	bl	800bcb8 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800d3ac:	693b      	ldr	r3, [r7, #16]
 800d3ae:	685a      	ldr	r2, [r3, #4]
 800d3b0:	4b0a      	ldr	r3, [pc, #40]	; (800d3dc <vPortFree+0xbc>)
 800d3b2:	681b      	ldr	r3, [r3, #0]
 800d3b4:	4413      	add	r3, r2
 800d3b6:	4a09      	ldr	r2, [pc, #36]	; (800d3dc <vPortFree+0xbc>)
 800d3b8:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800d3ba:	6938      	ldr	r0, [r7, #16]
 800d3bc:	f000 f874 	bl	800d4a8 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 800d3c0:	4b07      	ldr	r3, [pc, #28]	; (800d3e0 <vPortFree+0xc0>)
 800d3c2:	681b      	ldr	r3, [r3, #0]
 800d3c4:	3301      	adds	r3, #1
 800d3c6:	4a06      	ldr	r2, [pc, #24]	; (800d3e0 <vPortFree+0xc0>)
 800d3c8:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 800d3ca:	f7fe fc83 	bl	800bcd4 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800d3ce:	bf00      	nop
 800d3d0:	3718      	adds	r7, #24
 800d3d2:	46bd      	mov	sp, r7
 800d3d4:	bd80      	pop	{r7, pc}
 800d3d6:	bf00      	nop
 800d3d8:	20005074 	.word	0x20005074
 800d3dc:	20005064 	.word	0x20005064
 800d3e0:	20005070 	.word	0x20005070

0800d3e4 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 800d3e4:	b480      	push	{r7}
 800d3e6:	b085      	sub	sp, #20
 800d3e8:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800d3ea:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 800d3ee:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800d3f0:	4b27      	ldr	r3, [pc, #156]	; (800d490 <prvHeapInit+0xac>)
 800d3f2:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800d3f4:	68fb      	ldr	r3, [r7, #12]
 800d3f6:	f003 0307 	and.w	r3, r3, #7
 800d3fa:	2b00      	cmp	r3, #0
 800d3fc:	d00c      	beq.n	800d418 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800d3fe:	68fb      	ldr	r3, [r7, #12]
 800d400:	3307      	adds	r3, #7
 800d402:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800d404:	68fb      	ldr	r3, [r7, #12]
 800d406:	f023 0307 	bic.w	r3, r3, #7
 800d40a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800d40c:	68ba      	ldr	r2, [r7, #8]
 800d40e:	68fb      	ldr	r3, [r7, #12]
 800d410:	1ad3      	subs	r3, r2, r3
 800d412:	4a1f      	ldr	r2, [pc, #124]	; (800d490 <prvHeapInit+0xac>)
 800d414:	4413      	add	r3, r2
 800d416:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800d418:	68fb      	ldr	r3, [r7, #12]
 800d41a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800d41c:	4a1d      	ldr	r2, [pc, #116]	; (800d494 <prvHeapInit+0xb0>)
 800d41e:	687b      	ldr	r3, [r7, #4]
 800d420:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800d422:	4b1c      	ldr	r3, [pc, #112]	; (800d494 <prvHeapInit+0xb0>)
 800d424:	2200      	movs	r2, #0
 800d426:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800d428:	687b      	ldr	r3, [r7, #4]
 800d42a:	68ba      	ldr	r2, [r7, #8]
 800d42c:	4413      	add	r3, r2
 800d42e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800d430:	2208      	movs	r2, #8
 800d432:	68fb      	ldr	r3, [r7, #12]
 800d434:	1a9b      	subs	r3, r3, r2
 800d436:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800d438:	68fb      	ldr	r3, [r7, #12]
 800d43a:	f023 0307 	bic.w	r3, r3, #7
 800d43e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800d440:	68fb      	ldr	r3, [r7, #12]
 800d442:	4a15      	ldr	r2, [pc, #84]	; (800d498 <prvHeapInit+0xb4>)
 800d444:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800d446:	4b14      	ldr	r3, [pc, #80]	; (800d498 <prvHeapInit+0xb4>)
 800d448:	681b      	ldr	r3, [r3, #0]
 800d44a:	2200      	movs	r2, #0
 800d44c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800d44e:	4b12      	ldr	r3, [pc, #72]	; (800d498 <prvHeapInit+0xb4>)
 800d450:	681b      	ldr	r3, [r3, #0]
 800d452:	2200      	movs	r2, #0
 800d454:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800d456:	687b      	ldr	r3, [r7, #4]
 800d458:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800d45a:	683b      	ldr	r3, [r7, #0]
 800d45c:	68fa      	ldr	r2, [r7, #12]
 800d45e:	1ad2      	subs	r2, r2, r3
 800d460:	683b      	ldr	r3, [r7, #0]
 800d462:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800d464:	4b0c      	ldr	r3, [pc, #48]	; (800d498 <prvHeapInit+0xb4>)
 800d466:	681a      	ldr	r2, [r3, #0]
 800d468:	683b      	ldr	r3, [r7, #0]
 800d46a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800d46c:	683b      	ldr	r3, [r7, #0]
 800d46e:	685b      	ldr	r3, [r3, #4]
 800d470:	4a0a      	ldr	r2, [pc, #40]	; (800d49c <prvHeapInit+0xb8>)
 800d472:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800d474:	683b      	ldr	r3, [r7, #0]
 800d476:	685b      	ldr	r3, [r3, #4]
 800d478:	4a09      	ldr	r2, [pc, #36]	; (800d4a0 <prvHeapInit+0xbc>)
 800d47a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800d47c:	4b09      	ldr	r3, [pc, #36]	; (800d4a4 <prvHeapInit+0xc0>)
 800d47e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 800d482:	601a      	str	r2, [r3, #0]
}
 800d484:	bf00      	nop
 800d486:	3714      	adds	r7, #20
 800d488:	46bd      	mov	sp, r7
 800d48a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d48e:	4770      	bx	lr
 800d490:	20001458 	.word	0x20001458
 800d494:	20005058 	.word	0x20005058
 800d498:	20005060 	.word	0x20005060
 800d49c:	20005068 	.word	0x20005068
 800d4a0:	20005064 	.word	0x20005064
 800d4a4:	20005074 	.word	0x20005074

0800d4a8 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800d4a8:	b480      	push	{r7}
 800d4aa:	b085      	sub	sp, #20
 800d4ac:	af00      	add	r7, sp, #0
 800d4ae:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800d4b0:	4b28      	ldr	r3, [pc, #160]	; (800d554 <prvInsertBlockIntoFreeList+0xac>)
 800d4b2:	60fb      	str	r3, [r7, #12]
 800d4b4:	e002      	b.n	800d4bc <prvInsertBlockIntoFreeList+0x14>
 800d4b6:	68fb      	ldr	r3, [r7, #12]
 800d4b8:	681b      	ldr	r3, [r3, #0]
 800d4ba:	60fb      	str	r3, [r7, #12]
 800d4bc:	68fb      	ldr	r3, [r7, #12]
 800d4be:	681b      	ldr	r3, [r3, #0]
 800d4c0:	687a      	ldr	r2, [r7, #4]
 800d4c2:	429a      	cmp	r2, r3
 800d4c4:	d8f7      	bhi.n	800d4b6 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800d4c6:	68fb      	ldr	r3, [r7, #12]
 800d4c8:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800d4ca:	68fb      	ldr	r3, [r7, #12]
 800d4cc:	685b      	ldr	r3, [r3, #4]
 800d4ce:	68ba      	ldr	r2, [r7, #8]
 800d4d0:	4413      	add	r3, r2
 800d4d2:	687a      	ldr	r2, [r7, #4]
 800d4d4:	429a      	cmp	r2, r3
 800d4d6:	d108      	bne.n	800d4ea <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800d4d8:	68fb      	ldr	r3, [r7, #12]
 800d4da:	685a      	ldr	r2, [r3, #4]
 800d4dc:	687b      	ldr	r3, [r7, #4]
 800d4de:	685b      	ldr	r3, [r3, #4]
 800d4e0:	441a      	add	r2, r3
 800d4e2:	68fb      	ldr	r3, [r7, #12]
 800d4e4:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800d4e6:	68fb      	ldr	r3, [r7, #12]
 800d4e8:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800d4ea:	687b      	ldr	r3, [r7, #4]
 800d4ec:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800d4ee:	687b      	ldr	r3, [r7, #4]
 800d4f0:	685b      	ldr	r3, [r3, #4]
 800d4f2:	68ba      	ldr	r2, [r7, #8]
 800d4f4:	441a      	add	r2, r3
 800d4f6:	68fb      	ldr	r3, [r7, #12]
 800d4f8:	681b      	ldr	r3, [r3, #0]
 800d4fa:	429a      	cmp	r2, r3
 800d4fc:	d118      	bne.n	800d530 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800d4fe:	68fb      	ldr	r3, [r7, #12]
 800d500:	681a      	ldr	r2, [r3, #0]
 800d502:	4b15      	ldr	r3, [pc, #84]	; (800d558 <prvInsertBlockIntoFreeList+0xb0>)
 800d504:	681b      	ldr	r3, [r3, #0]
 800d506:	429a      	cmp	r2, r3
 800d508:	d00d      	beq.n	800d526 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800d50a:	687b      	ldr	r3, [r7, #4]
 800d50c:	685a      	ldr	r2, [r3, #4]
 800d50e:	68fb      	ldr	r3, [r7, #12]
 800d510:	681b      	ldr	r3, [r3, #0]
 800d512:	685b      	ldr	r3, [r3, #4]
 800d514:	441a      	add	r2, r3
 800d516:	687b      	ldr	r3, [r7, #4]
 800d518:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800d51a:	68fb      	ldr	r3, [r7, #12]
 800d51c:	681b      	ldr	r3, [r3, #0]
 800d51e:	681a      	ldr	r2, [r3, #0]
 800d520:	687b      	ldr	r3, [r7, #4]
 800d522:	601a      	str	r2, [r3, #0]
 800d524:	e008      	b.n	800d538 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800d526:	4b0c      	ldr	r3, [pc, #48]	; (800d558 <prvInsertBlockIntoFreeList+0xb0>)
 800d528:	681a      	ldr	r2, [r3, #0]
 800d52a:	687b      	ldr	r3, [r7, #4]
 800d52c:	601a      	str	r2, [r3, #0]
 800d52e:	e003      	b.n	800d538 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800d530:	68fb      	ldr	r3, [r7, #12]
 800d532:	681a      	ldr	r2, [r3, #0]
 800d534:	687b      	ldr	r3, [r7, #4]
 800d536:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800d538:	68fa      	ldr	r2, [r7, #12]
 800d53a:	687b      	ldr	r3, [r7, #4]
 800d53c:	429a      	cmp	r2, r3
 800d53e:	d002      	beq.n	800d546 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800d540:	68fb      	ldr	r3, [r7, #12]
 800d542:	687a      	ldr	r2, [r7, #4]
 800d544:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800d546:	bf00      	nop
 800d548:	3714      	adds	r7, #20
 800d54a:	46bd      	mov	sp, r7
 800d54c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d550:	4770      	bx	lr
 800d552:	bf00      	nop
 800d554:	20005058 	.word	0x20005058
 800d558:	20005060 	.word	0x20005060

0800d55c <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 800d55c:	b580      	push	{r7, lr}
 800d55e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 800d560:	2200      	movs	r2, #0
 800d562:	4912      	ldr	r1, [pc, #72]	; (800d5ac <MX_USB_DEVICE_Init+0x50>)
 800d564:	4812      	ldr	r0, [pc, #72]	; (800d5b0 <MX_USB_DEVICE_Init+0x54>)
 800d566:	f7fb fc53 	bl	8008e10 <USBD_Init>
 800d56a:	4603      	mov	r3, r0
 800d56c:	2b00      	cmp	r3, #0
 800d56e:	d001      	beq.n	800d574 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 800d570:	f7f3 fe16 	bl	80011a0 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 800d574:	490f      	ldr	r1, [pc, #60]	; (800d5b4 <MX_USB_DEVICE_Init+0x58>)
 800d576:	480e      	ldr	r0, [pc, #56]	; (800d5b0 <MX_USB_DEVICE_Init+0x54>)
 800d578:	f7fb fc7a 	bl	8008e70 <USBD_RegisterClass>
 800d57c:	4603      	mov	r3, r0
 800d57e:	2b00      	cmp	r3, #0
 800d580:	d001      	beq.n	800d586 <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 800d582:	f7f3 fe0d 	bl	80011a0 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 800d586:	490c      	ldr	r1, [pc, #48]	; (800d5b8 <MX_USB_DEVICE_Init+0x5c>)
 800d588:	4809      	ldr	r0, [pc, #36]	; (800d5b0 <MX_USB_DEVICE_Init+0x54>)
 800d58a:	f7fb fbb1 	bl	8008cf0 <USBD_CDC_RegisterInterface>
 800d58e:	4603      	mov	r3, r0
 800d590:	2b00      	cmp	r3, #0
 800d592:	d001      	beq.n	800d598 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 800d594:	f7f3 fe04 	bl	80011a0 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 800d598:	4805      	ldr	r0, [pc, #20]	; (800d5b0 <MX_USB_DEVICE_Init+0x54>)
 800d59a:	f7fb fc9f 	bl	8008edc <USBD_Start>
 800d59e:	4603      	mov	r3, r0
 800d5a0:	2b00      	cmp	r3, #0
 800d5a2:	d001      	beq.n	800d5a8 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 800d5a4:	f7f3 fdfc 	bl	80011a0 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 800d5a8:	bf00      	nop
 800d5aa:	bd80      	pop	{r7, pc}
 800d5ac:	200000b0 	.word	0x200000b0
 800d5b0:	20005078 	.word	0x20005078
 800d5b4:	20000018 	.word	0x20000018
 800d5b8:	2000009c 	.word	0x2000009c

0800d5bc <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 800d5bc:	b580      	push	{r7, lr}
 800d5be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 800d5c0:	2200      	movs	r2, #0
 800d5c2:	4905      	ldr	r1, [pc, #20]	; (800d5d8 <CDC_Init_FS+0x1c>)
 800d5c4:	4805      	ldr	r0, [pc, #20]	; (800d5dc <CDC_Init_FS+0x20>)
 800d5c6:	f7fb fbad 	bl	8008d24 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 800d5ca:	4905      	ldr	r1, [pc, #20]	; (800d5e0 <CDC_Init_FS+0x24>)
 800d5cc:	4803      	ldr	r0, [pc, #12]	; (800d5dc <CDC_Init_FS+0x20>)
 800d5ce:	f7fb fbcb 	bl	8008d68 <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 800d5d2:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 800d5d4:	4618      	mov	r0, r3
 800d5d6:	bd80      	pop	{r7, pc}
 800d5d8:	20005b54 	.word	0x20005b54
 800d5dc:	20005078 	.word	0x20005078
 800d5e0:	20005354 	.word	0x20005354

0800d5e4 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 800d5e4:	b480      	push	{r7}
 800d5e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 800d5e8:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 800d5ea:	4618      	mov	r0, r3
 800d5ec:	46bd      	mov	sp, r7
 800d5ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d5f2:	4770      	bx	lr

0800d5f4 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 800d5f4:	b480      	push	{r7}
 800d5f6:	b083      	sub	sp, #12
 800d5f8:	af00      	add	r7, sp, #0
 800d5fa:	4603      	mov	r3, r0
 800d5fc:	6039      	str	r1, [r7, #0]
 800d5fe:	71fb      	strb	r3, [r7, #7]
 800d600:	4613      	mov	r3, r2
 800d602:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 800d604:	79fb      	ldrb	r3, [r7, #7]
 800d606:	2b23      	cmp	r3, #35	; 0x23
 800d608:	f200 808c 	bhi.w	800d724 <CDC_Control_FS+0x130>
 800d60c:	a201      	add	r2, pc, #4	; (adr r2, 800d614 <CDC_Control_FS+0x20>)
 800d60e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d612:	bf00      	nop
 800d614:	0800d725 	.word	0x0800d725
 800d618:	0800d725 	.word	0x0800d725
 800d61c:	0800d725 	.word	0x0800d725
 800d620:	0800d725 	.word	0x0800d725
 800d624:	0800d725 	.word	0x0800d725
 800d628:	0800d725 	.word	0x0800d725
 800d62c:	0800d725 	.word	0x0800d725
 800d630:	0800d725 	.word	0x0800d725
 800d634:	0800d725 	.word	0x0800d725
 800d638:	0800d725 	.word	0x0800d725
 800d63c:	0800d725 	.word	0x0800d725
 800d640:	0800d725 	.word	0x0800d725
 800d644:	0800d725 	.word	0x0800d725
 800d648:	0800d725 	.word	0x0800d725
 800d64c:	0800d725 	.word	0x0800d725
 800d650:	0800d725 	.word	0x0800d725
 800d654:	0800d725 	.word	0x0800d725
 800d658:	0800d725 	.word	0x0800d725
 800d65c:	0800d725 	.word	0x0800d725
 800d660:	0800d725 	.word	0x0800d725
 800d664:	0800d725 	.word	0x0800d725
 800d668:	0800d725 	.word	0x0800d725
 800d66c:	0800d725 	.word	0x0800d725
 800d670:	0800d725 	.word	0x0800d725
 800d674:	0800d725 	.word	0x0800d725
 800d678:	0800d725 	.word	0x0800d725
 800d67c:	0800d725 	.word	0x0800d725
 800d680:	0800d725 	.word	0x0800d725
 800d684:	0800d725 	.word	0x0800d725
 800d688:	0800d725 	.word	0x0800d725
 800d68c:	0800d725 	.word	0x0800d725
 800d690:	0800d725 	.word	0x0800d725
 800d694:	0800d6a5 	.word	0x0800d6a5
 800d698:	0800d6df 	.word	0x0800d6df
 800d69c:	0800d725 	.word	0x0800d725
 800d6a0:	0800d725 	.word	0x0800d725
  /*                                        3 - Mark                             */
  /*                                        4 - Space                            */
  /* 6      | bDataBits  |   1   | Number Data bits (5, 6, 7, 8 or 16).          */
  /*******************************************************************************/
    case CDC_SET_LINE_CODING:
    	usbVcpParameters[0] = pbuf[0];
 800d6a4:	683b      	ldr	r3, [r7, #0]
 800d6a6:	781a      	ldrb	r2, [r3, #0]
 800d6a8:	4b22      	ldr	r3, [pc, #136]	; (800d734 <CDC_Control_FS+0x140>)
 800d6aa:	701a      	strb	r2, [r3, #0]
    	usbVcpParameters[1] = pbuf[1];
 800d6ac:	683b      	ldr	r3, [r7, #0]
 800d6ae:	785a      	ldrb	r2, [r3, #1]
 800d6b0:	4b20      	ldr	r3, [pc, #128]	; (800d734 <CDC_Control_FS+0x140>)
 800d6b2:	705a      	strb	r2, [r3, #1]
    	usbVcpParameters[2] = pbuf[2];
 800d6b4:	683b      	ldr	r3, [r7, #0]
 800d6b6:	789a      	ldrb	r2, [r3, #2]
 800d6b8:	4b1e      	ldr	r3, [pc, #120]	; (800d734 <CDC_Control_FS+0x140>)
 800d6ba:	709a      	strb	r2, [r3, #2]
    	usbVcpParameters[3] = pbuf[3];
 800d6bc:	683b      	ldr	r3, [r7, #0]
 800d6be:	78da      	ldrb	r2, [r3, #3]
 800d6c0:	4b1c      	ldr	r3, [pc, #112]	; (800d734 <CDC_Control_FS+0x140>)
 800d6c2:	70da      	strb	r2, [r3, #3]
    	usbVcpParameters[4] = pbuf[4];
 800d6c4:	683b      	ldr	r3, [r7, #0]
 800d6c6:	791a      	ldrb	r2, [r3, #4]
 800d6c8:	4b1a      	ldr	r3, [pc, #104]	; (800d734 <CDC_Control_FS+0x140>)
 800d6ca:	711a      	strb	r2, [r3, #4]
    	usbVcpParameters[5] = pbuf[5];
 800d6cc:	683b      	ldr	r3, [r7, #0]
 800d6ce:	795a      	ldrb	r2, [r3, #5]
 800d6d0:	4b18      	ldr	r3, [pc, #96]	; (800d734 <CDC_Control_FS+0x140>)
 800d6d2:	715a      	strb	r2, [r3, #5]
    	usbVcpParameters[6] = pbuf[6];
 800d6d4:	683b      	ldr	r3, [r7, #0]
 800d6d6:	799a      	ldrb	r2, [r3, #6]
 800d6d8:	4b16      	ldr	r3, [pc, #88]	; (800d734 <CDC_Control_FS+0x140>)
 800d6da:	719a      	strb	r2, [r3, #6]

    break;
 800d6dc:	e023      	b.n	800d726 <CDC_Control_FS+0x132>

    case CDC_GET_LINE_CODING:
    	pbuf[0] = usbVcpParameters[0];
 800d6de:	4b15      	ldr	r3, [pc, #84]	; (800d734 <CDC_Control_FS+0x140>)
 800d6e0:	781a      	ldrb	r2, [r3, #0]
 800d6e2:	683b      	ldr	r3, [r7, #0]
 800d6e4:	701a      	strb	r2, [r3, #0]
    	pbuf[1] = usbVcpParameters[1];
 800d6e6:	683b      	ldr	r3, [r7, #0]
 800d6e8:	3301      	adds	r3, #1
 800d6ea:	4a12      	ldr	r2, [pc, #72]	; (800d734 <CDC_Control_FS+0x140>)
 800d6ec:	7852      	ldrb	r2, [r2, #1]
 800d6ee:	701a      	strb	r2, [r3, #0]
    	pbuf[2] = usbVcpParameters[2];
 800d6f0:	683b      	ldr	r3, [r7, #0]
 800d6f2:	3302      	adds	r3, #2
 800d6f4:	4a0f      	ldr	r2, [pc, #60]	; (800d734 <CDC_Control_FS+0x140>)
 800d6f6:	7892      	ldrb	r2, [r2, #2]
 800d6f8:	701a      	strb	r2, [r3, #0]
    	pbuf[3] = usbVcpParameters[3];
 800d6fa:	683b      	ldr	r3, [r7, #0]
 800d6fc:	3303      	adds	r3, #3
 800d6fe:	4a0d      	ldr	r2, [pc, #52]	; (800d734 <CDC_Control_FS+0x140>)
 800d700:	78d2      	ldrb	r2, [r2, #3]
 800d702:	701a      	strb	r2, [r3, #0]
    	pbuf[4] = usbVcpParameters[4];
 800d704:	683b      	ldr	r3, [r7, #0]
 800d706:	3304      	adds	r3, #4
 800d708:	4a0a      	ldr	r2, [pc, #40]	; (800d734 <CDC_Control_FS+0x140>)
 800d70a:	7912      	ldrb	r2, [r2, #4]
 800d70c:	701a      	strb	r2, [r3, #0]
    	pbuf[5] = usbVcpParameters[5];
 800d70e:	683b      	ldr	r3, [r7, #0]
 800d710:	3305      	adds	r3, #5
 800d712:	4a08      	ldr	r2, [pc, #32]	; (800d734 <CDC_Control_FS+0x140>)
 800d714:	7952      	ldrb	r2, [r2, #5]
 800d716:	701a      	strb	r2, [r3, #0]
    	pbuf[6] = usbVcpParameters[6];
 800d718:	683b      	ldr	r3, [r7, #0]
 800d71a:	3306      	adds	r3, #6
 800d71c:	4a05      	ldr	r2, [pc, #20]	; (800d734 <CDC_Control_FS+0x140>)
 800d71e:	7992      	ldrb	r2, [r2, #6]
 800d720:	701a      	strb	r2, [r3, #0]

    break;
 800d722:	e000      	b.n	800d726 <CDC_Control_FS+0x132>
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 800d724:	bf00      	nop
  }

  return (USBD_OK);
 800d726:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 800d728:	4618      	mov	r0, r3
 800d72a:	370c      	adds	r7, #12
 800d72c:	46bd      	mov	sp, r7
 800d72e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d732:	4770      	bx	lr
 800d734:	20000638 	.word	0x20000638

0800d738 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 800d738:	b580      	push	{r7, lr}
 800d73a:	b082      	sub	sp, #8
 800d73c:	af00      	add	r7, sp, #0
 800d73e:	6078      	str	r0, [r7, #4]
 800d740:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 800d742:	6879      	ldr	r1, [r7, #4]
 800d744:	4805      	ldr	r0, [pc, #20]	; (800d75c <CDC_Receive_FS+0x24>)
 800d746:	f7fb fb0f 	bl	8008d68 <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 800d74a:	4804      	ldr	r0, [pc, #16]	; (800d75c <CDC_Receive_FS+0x24>)
 800d74c:	f7fb fb2a 	bl	8008da4 <USBD_CDC_ReceivePacket>

//  PDM_USB_Process(Buf, *Len);

  return (USBD_OK);
 800d750:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 800d752:	4618      	mov	r0, r3
 800d754:	3708      	adds	r7, #8
 800d756:	46bd      	mov	sp, r7
 800d758:	bd80      	pop	{r7, pc}
 800d75a:	bf00      	nop
 800d75c:	20005078 	.word	0x20005078

0800d760 <CDC_TransmitCplt_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_FS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 800d760:	b480      	push	{r7}
 800d762:	b087      	sub	sp, #28
 800d764:	af00      	add	r7, sp, #0
 800d766:	60f8      	str	r0, [r7, #12]
 800d768:	60b9      	str	r1, [r7, #8]
 800d76a:	4613      	mov	r3, r2
 800d76c:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 800d76e:	2300      	movs	r3, #0
 800d770:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 13 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 13 */
  return result;
 800d772:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800d776:	4618      	mov	r0, r3
 800d778:	371c      	adds	r7, #28
 800d77a:	46bd      	mov	sp, r7
 800d77c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d780:	4770      	bx	lr
	...

0800d784 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800d784:	b480      	push	{r7}
 800d786:	b083      	sub	sp, #12
 800d788:	af00      	add	r7, sp, #0
 800d78a:	4603      	mov	r3, r0
 800d78c:	6039      	str	r1, [r7, #0]
 800d78e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 800d790:	683b      	ldr	r3, [r7, #0]
 800d792:	2212      	movs	r2, #18
 800d794:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 800d796:	4b03      	ldr	r3, [pc, #12]	; (800d7a4 <USBD_FS_DeviceDescriptor+0x20>)
}
 800d798:	4618      	mov	r0, r3
 800d79a:	370c      	adds	r7, #12
 800d79c:	46bd      	mov	sp, r7
 800d79e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d7a2:	4770      	bx	lr
 800d7a4:	200000cc 	.word	0x200000cc

0800d7a8 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800d7a8:	b480      	push	{r7}
 800d7aa:	b083      	sub	sp, #12
 800d7ac:	af00      	add	r7, sp, #0
 800d7ae:	4603      	mov	r3, r0
 800d7b0:	6039      	str	r1, [r7, #0]
 800d7b2:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 800d7b4:	683b      	ldr	r3, [r7, #0]
 800d7b6:	2204      	movs	r2, #4
 800d7b8:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 800d7ba:	4b03      	ldr	r3, [pc, #12]	; (800d7c8 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 800d7bc:	4618      	mov	r0, r3
 800d7be:	370c      	adds	r7, #12
 800d7c0:	46bd      	mov	sp, r7
 800d7c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d7c6:	4770      	bx	lr
 800d7c8:	200000e0 	.word	0x200000e0

0800d7cc <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800d7cc:	b580      	push	{r7, lr}
 800d7ce:	b082      	sub	sp, #8
 800d7d0:	af00      	add	r7, sp, #0
 800d7d2:	4603      	mov	r3, r0
 800d7d4:	6039      	str	r1, [r7, #0]
 800d7d6:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800d7d8:	79fb      	ldrb	r3, [r7, #7]
 800d7da:	2b00      	cmp	r3, #0
 800d7dc:	d105      	bne.n	800d7ea <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800d7de:	683a      	ldr	r2, [r7, #0]
 800d7e0:	4907      	ldr	r1, [pc, #28]	; (800d800 <USBD_FS_ProductStrDescriptor+0x34>)
 800d7e2:	4808      	ldr	r0, [pc, #32]	; (800d804 <USBD_FS_ProductStrDescriptor+0x38>)
 800d7e4:	f7fc fd2c 	bl	800a240 <USBD_GetString>
 800d7e8:	e004      	b.n	800d7f4 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800d7ea:	683a      	ldr	r2, [r7, #0]
 800d7ec:	4904      	ldr	r1, [pc, #16]	; (800d800 <USBD_FS_ProductStrDescriptor+0x34>)
 800d7ee:	4805      	ldr	r0, [pc, #20]	; (800d804 <USBD_FS_ProductStrDescriptor+0x38>)
 800d7f0:	f7fc fd26 	bl	800a240 <USBD_GetString>
  }
  return USBD_StrDesc;
 800d7f4:	4b02      	ldr	r3, [pc, #8]	; (800d800 <USBD_FS_ProductStrDescriptor+0x34>)
}
 800d7f6:	4618      	mov	r0, r3
 800d7f8:	3708      	adds	r7, #8
 800d7fa:	46bd      	mov	sp, r7
 800d7fc:	bd80      	pop	{r7, pc}
 800d7fe:	bf00      	nop
 800d800:	20006354 	.word	0x20006354
 800d804:	0800e264 	.word	0x0800e264

0800d808 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800d808:	b580      	push	{r7, lr}
 800d80a:	b082      	sub	sp, #8
 800d80c:	af00      	add	r7, sp, #0
 800d80e:	4603      	mov	r3, r0
 800d810:	6039      	str	r1, [r7, #0]
 800d812:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 800d814:	683a      	ldr	r2, [r7, #0]
 800d816:	4904      	ldr	r1, [pc, #16]	; (800d828 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 800d818:	4804      	ldr	r0, [pc, #16]	; (800d82c <USBD_FS_ManufacturerStrDescriptor+0x24>)
 800d81a:	f7fc fd11 	bl	800a240 <USBD_GetString>
  return USBD_StrDesc;
 800d81e:	4b02      	ldr	r3, [pc, #8]	; (800d828 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 800d820:	4618      	mov	r0, r3
 800d822:	3708      	adds	r7, #8
 800d824:	46bd      	mov	sp, r7
 800d826:	bd80      	pop	{r7, pc}
 800d828:	20006354 	.word	0x20006354
 800d82c:	0800e27c 	.word	0x0800e27c

0800d830 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800d830:	b580      	push	{r7, lr}
 800d832:	b082      	sub	sp, #8
 800d834:	af00      	add	r7, sp, #0
 800d836:	4603      	mov	r3, r0
 800d838:	6039      	str	r1, [r7, #0]
 800d83a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 800d83c:	683b      	ldr	r3, [r7, #0]
 800d83e:	221a      	movs	r2, #26
 800d840:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 800d842:	f000 f843 	bl	800d8cc <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 800d846:	4b02      	ldr	r3, [pc, #8]	; (800d850 <USBD_FS_SerialStrDescriptor+0x20>)
}
 800d848:	4618      	mov	r0, r3
 800d84a:	3708      	adds	r7, #8
 800d84c:	46bd      	mov	sp, r7
 800d84e:	bd80      	pop	{r7, pc}
 800d850:	200000e4 	.word	0x200000e4

0800d854 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800d854:	b580      	push	{r7, lr}
 800d856:	b082      	sub	sp, #8
 800d858:	af00      	add	r7, sp, #0
 800d85a:	4603      	mov	r3, r0
 800d85c:	6039      	str	r1, [r7, #0]
 800d85e:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 800d860:	79fb      	ldrb	r3, [r7, #7]
 800d862:	2b00      	cmp	r3, #0
 800d864:	d105      	bne.n	800d872 <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800d866:	683a      	ldr	r2, [r7, #0]
 800d868:	4907      	ldr	r1, [pc, #28]	; (800d888 <USBD_FS_ConfigStrDescriptor+0x34>)
 800d86a:	4808      	ldr	r0, [pc, #32]	; (800d88c <USBD_FS_ConfigStrDescriptor+0x38>)
 800d86c:	f7fc fce8 	bl	800a240 <USBD_GetString>
 800d870:	e004      	b.n	800d87c <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800d872:	683a      	ldr	r2, [r7, #0]
 800d874:	4904      	ldr	r1, [pc, #16]	; (800d888 <USBD_FS_ConfigStrDescriptor+0x34>)
 800d876:	4805      	ldr	r0, [pc, #20]	; (800d88c <USBD_FS_ConfigStrDescriptor+0x38>)
 800d878:	f7fc fce2 	bl	800a240 <USBD_GetString>
  }
  return USBD_StrDesc;
 800d87c:	4b02      	ldr	r3, [pc, #8]	; (800d888 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 800d87e:	4618      	mov	r0, r3
 800d880:	3708      	adds	r7, #8
 800d882:	46bd      	mov	sp, r7
 800d884:	bd80      	pop	{r7, pc}
 800d886:	bf00      	nop
 800d888:	20006354 	.word	0x20006354
 800d88c:	0800e290 	.word	0x0800e290

0800d890 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800d890:	b580      	push	{r7, lr}
 800d892:	b082      	sub	sp, #8
 800d894:	af00      	add	r7, sp, #0
 800d896:	4603      	mov	r3, r0
 800d898:	6039      	str	r1, [r7, #0]
 800d89a:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800d89c:	79fb      	ldrb	r3, [r7, #7]
 800d89e:	2b00      	cmp	r3, #0
 800d8a0:	d105      	bne.n	800d8ae <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800d8a2:	683a      	ldr	r2, [r7, #0]
 800d8a4:	4907      	ldr	r1, [pc, #28]	; (800d8c4 <USBD_FS_InterfaceStrDescriptor+0x34>)
 800d8a6:	4808      	ldr	r0, [pc, #32]	; (800d8c8 <USBD_FS_InterfaceStrDescriptor+0x38>)
 800d8a8:	f7fc fcca 	bl	800a240 <USBD_GetString>
 800d8ac:	e004      	b.n	800d8b8 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800d8ae:	683a      	ldr	r2, [r7, #0]
 800d8b0:	4904      	ldr	r1, [pc, #16]	; (800d8c4 <USBD_FS_InterfaceStrDescriptor+0x34>)
 800d8b2:	4805      	ldr	r0, [pc, #20]	; (800d8c8 <USBD_FS_InterfaceStrDescriptor+0x38>)
 800d8b4:	f7fc fcc4 	bl	800a240 <USBD_GetString>
  }
  return USBD_StrDesc;
 800d8b8:	4b02      	ldr	r3, [pc, #8]	; (800d8c4 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 800d8ba:	4618      	mov	r0, r3
 800d8bc:	3708      	adds	r7, #8
 800d8be:	46bd      	mov	sp, r7
 800d8c0:	bd80      	pop	{r7, pc}
 800d8c2:	bf00      	nop
 800d8c4:	20006354 	.word	0x20006354
 800d8c8:	0800e29c 	.word	0x0800e29c

0800d8cc <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 800d8cc:	b580      	push	{r7, lr}
 800d8ce:	b084      	sub	sp, #16
 800d8d0:	af00      	add	r7, sp, #0
  uint32_t deviceserial0;
  uint32_t deviceserial1;
  uint32_t deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 800d8d2:	4b0f      	ldr	r3, [pc, #60]	; (800d910 <Get_SerialNum+0x44>)
 800d8d4:	681b      	ldr	r3, [r3, #0]
 800d8d6:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 800d8d8:	4b0e      	ldr	r3, [pc, #56]	; (800d914 <Get_SerialNum+0x48>)
 800d8da:	681b      	ldr	r3, [r3, #0]
 800d8dc:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 800d8de:	4b0e      	ldr	r3, [pc, #56]	; (800d918 <Get_SerialNum+0x4c>)
 800d8e0:	681b      	ldr	r3, [r3, #0]
 800d8e2:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 800d8e4:	68fa      	ldr	r2, [r7, #12]
 800d8e6:	687b      	ldr	r3, [r7, #4]
 800d8e8:	4413      	add	r3, r2
 800d8ea:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 800d8ec:	68fb      	ldr	r3, [r7, #12]
 800d8ee:	2b00      	cmp	r3, #0
 800d8f0:	d009      	beq.n	800d906 <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 800d8f2:	2208      	movs	r2, #8
 800d8f4:	4909      	ldr	r1, [pc, #36]	; (800d91c <Get_SerialNum+0x50>)
 800d8f6:	68f8      	ldr	r0, [r7, #12]
 800d8f8:	f000 f814 	bl	800d924 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 800d8fc:	2204      	movs	r2, #4
 800d8fe:	4908      	ldr	r1, [pc, #32]	; (800d920 <Get_SerialNum+0x54>)
 800d900:	68b8      	ldr	r0, [r7, #8]
 800d902:	f000 f80f 	bl	800d924 <IntToUnicode>
  }
}
 800d906:	bf00      	nop
 800d908:	3710      	adds	r7, #16
 800d90a:	46bd      	mov	sp, r7
 800d90c:	bd80      	pop	{r7, pc}
 800d90e:	bf00      	nop
 800d910:	1fff7a10 	.word	0x1fff7a10
 800d914:	1fff7a14 	.word	0x1fff7a14
 800d918:	1fff7a18 	.word	0x1fff7a18
 800d91c:	200000e6 	.word	0x200000e6
 800d920:	200000f6 	.word	0x200000f6

0800d924 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 800d924:	b480      	push	{r7}
 800d926:	b087      	sub	sp, #28
 800d928:	af00      	add	r7, sp, #0
 800d92a:	60f8      	str	r0, [r7, #12]
 800d92c:	60b9      	str	r1, [r7, #8]
 800d92e:	4613      	mov	r3, r2
 800d930:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 800d932:	2300      	movs	r3, #0
 800d934:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 800d936:	2300      	movs	r3, #0
 800d938:	75fb      	strb	r3, [r7, #23]
 800d93a:	e027      	b.n	800d98c <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 800d93c:	68fb      	ldr	r3, [r7, #12]
 800d93e:	0f1b      	lsrs	r3, r3, #28
 800d940:	2b09      	cmp	r3, #9
 800d942:	d80b      	bhi.n	800d95c <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 800d944:	68fb      	ldr	r3, [r7, #12]
 800d946:	0f1b      	lsrs	r3, r3, #28
 800d948:	b2da      	uxtb	r2, r3
 800d94a:	7dfb      	ldrb	r3, [r7, #23]
 800d94c:	005b      	lsls	r3, r3, #1
 800d94e:	4619      	mov	r1, r3
 800d950:	68bb      	ldr	r3, [r7, #8]
 800d952:	440b      	add	r3, r1
 800d954:	3230      	adds	r2, #48	; 0x30
 800d956:	b2d2      	uxtb	r2, r2
 800d958:	701a      	strb	r2, [r3, #0]
 800d95a:	e00a      	b.n	800d972 <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 800d95c:	68fb      	ldr	r3, [r7, #12]
 800d95e:	0f1b      	lsrs	r3, r3, #28
 800d960:	b2da      	uxtb	r2, r3
 800d962:	7dfb      	ldrb	r3, [r7, #23]
 800d964:	005b      	lsls	r3, r3, #1
 800d966:	4619      	mov	r1, r3
 800d968:	68bb      	ldr	r3, [r7, #8]
 800d96a:	440b      	add	r3, r1
 800d96c:	3237      	adds	r2, #55	; 0x37
 800d96e:	b2d2      	uxtb	r2, r2
 800d970:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 800d972:	68fb      	ldr	r3, [r7, #12]
 800d974:	011b      	lsls	r3, r3, #4
 800d976:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 800d978:	7dfb      	ldrb	r3, [r7, #23]
 800d97a:	005b      	lsls	r3, r3, #1
 800d97c:	3301      	adds	r3, #1
 800d97e:	68ba      	ldr	r2, [r7, #8]
 800d980:	4413      	add	r3, r2
 800d982:	2200      	movs	r2, #0
 800d984:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 800d986:	7dfb      	ldrb	r3, [r7, #23]
 800d988:	3301      	adds	r3, #1
 800d98a:	75fb      	strb	r3, [r7, #23]
 800d98c:	7dfa      	ldrb	r2, [r7, #23]
 800d98e:	79fb      	ldrb	r3, [r7, #7]
 800d990:	429a      	cmp	r2, r3
 800d992:	d3d3      	bcc.n	800d93c <IntToUnicode+0x18>
  }
}
 800d994:	bf00      	nop
 800d996:	bf00      	nop
 800d998:	371c      	adds	r7, #28
 800d99a:	46bd      	mov	sp, r7
 800d99c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d9a0:	4770      	bx	lr
	...

0800d9a4 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 800d9a4:	b580      	push	{r7, lr}
 800d9a6:	b0a0      	sub	sp, #128	; 0x80
 800d9a8:	af00      	add	r7, sp, #0
 800d9aa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800d9ac:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 800d9b0:	2200      	movs	r2, #0
 800d9b2:	601a      	str	r2, [r3, #0]
 800d9b4:	605a      	str	r2, [r3, #4]
 800d9b6:	609a      	str	r2, [r3, #8]
 800d9b8:	60da      	str	r2, [r3, #12]
 800d9ba:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800d9bc:	f107 0310 	add.w	r3, r7, #16
 800d9c0:	225c      	movs	r2, #92	; 0x5c
 800d9c2:	2100      	movs	r1, #0
 800d9c4:	4618      	mov	r0, r3
 800d9c6:	f000 fb2f 	bl	800e028 <memset>
  if(pcdHandle->Instance==USB_OTG_FS)
 800d9ca:	687b      	ldr	r3, [r7, #4]
 800d9cc:	681b      	ldr	r3, [r3, #0]
 800d9ce:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800d9d2:	d161      	bne.n	800da98 <HAL_PCD_MspInit+0xf4>

  /* USER CODE END USB_OTG_FS_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_CLK48;
 800d9d4:	f44f 7380 	mov.w	r3, #256	; 0x100
 800d9d8:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.PLLSAI.PLLSAIM = 8;
 800d9da:	2308      	movs	r3, #8
 800d9dc:	62bb      	str	r3, [r7, #40]	; 0x28
    PeriphClkInitStruct.PLLSAI.PLLSAIN = 192;
 800d9de:	23c0      	movs	r3, #192	; 0xc0
 800d9e0:	62fb      	str	r3, [r7, #44]	; 0x2c
    PeriphClkInitStruct.PLLSAI.PLLSAIQ = 2;
 800d9e2:	2302      	movs	r3, #2
 800d9e4:	637b      	str	r3, [r7, #52]	; 0x34
    PeriphClkInitStruct.PLLSAI.PLLSAIP = RCC_PLLSAIP_DIV4;
 800d9e6:	2304      	movs	r3, #4
 800d9e8:	633b      	str	r3, [r7, #48]	; 0x30
    PeriphClkInitStruct.PLLSAIDivQ = 1;
 800d9ea:	2301      	movs	r3, #1
 800d9ec:	63fb      	str	r3, [r7, #60]	; 0x3c
    PeriphClkInitStruct.Clk48ClockSelection = RCC_CLK48CLKSOURCE_PLLSAIP;
 800d9ee:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800d9f2:	667b      	str	r3, [r7, #100]	; 0x64
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800d9f4:	f107 0310 	add.w	r3, r7, #16
 800d9f8:	4618      	mov	r0, r3
 800d9fa:	f7f7 fa8d 	bl	8004f18 <HAL_RCCEx_PeriphCLKConfig>
 800d9fe:	4603      	mov	r3, r0
 800da00:	2b00      	cmp	r3, #0
 800da02:	d001      	beq.n	800da08 <HAL_PCD_MspInit+0x64>
    {
      Error_Handler();
 800da04:	f7f3 fbcc 	bl	80011a0 <Error_Handler>
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800da08:	2300      	movs	r3, #0
 800da0a:	60fb      	str	r3, [r7, #12]
 800da0c:	4b24      	ldr	r3, [pc, #144]	; (800daa0 <HAL_PCD_MspInit+0xfc>)
 800da0e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800da10:	4a23      	ldr	r2, [pc, #140]	; (800daa0 <HAL_PCD_MspInit+0xfc>)
 800da12:	f043 0301 	orr.w	r3, r3, #1
 800da16:	6313      	str	r3, [r2, #48]	; 0x30
 800da18:	4b21      	ldr	r3, [pc, #132]	; (800daa0 <HAL_PCD_MspInit+0xfc>)
 800da1a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800da1c:	f003 0301 	and.w	r3, r3, #1
 800da20:	60fb      	str	r3, [r7, #12]
 800da22:	68fb      	ldr	r3, [r7, #12]
    /**USB_OTG_FS GPIO Configuration
    PA9     ------> USB_OTG_FS_VBUS
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 800da24:	f44f 7300 	mov.w	r3, #512	; 0x200
 800da28:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800da2a:	2300      	movs	r3, #0
 800da2c:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800da2e:	2300      	movs	r3, #0
 800da30:	677b      	str	r3, [r7, #116]	; 0x74
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800da32:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 800da36:	4619      	mov	r1, r3
 800da38:	481a      	ldr	r0, [pc, #104]	; (800daa4 <HAL_PCD_MspInit+0x100>)
 800da3a:	f7f5 fb37 	bl	80030ac <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 800da3e:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 800da42:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800da44:	2302      	movs	r3, #2
 800da46:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800da48:	2300      	movs	r3, #0
 800da4a:	677b      	str	r3, [r7, #116]	; 0x74
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800da4c:	2303      	movs	r3, #3
 800da4e:	67bb      	str	r3, [r7, #120]	; 0x78
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 800da50:	230a      	movs	r3, #10
 800da52:	67fb      	str	r3, [r7, #124]	; 0x7c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800da54:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 800da58:	4619      	mov	r1, r3
 800da5a:	4812      	ldr	r0, [pc, #72]	; (800daa4 <HAL_PCD_MspInit+0x100>)
 800da5c:	f7f5 fb26 	bl	80030ac <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 800da60:	4b0f      	ldr	r3, [pc, #60]	; (800daa0 <HAL_PCD_MspInit+0xfc>)
 800da62:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800da64:	4a0e      	ldr	r2, [pc, #56]	; (800daa0 <HAL_PCD_MspInit+0xfc>)
 800da66:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800da6a:	6353      	str	r3, [r2, #52]	; 0x34
 800da6c:	2300      	movs	r3, #0
 800da6e:	60bb      	str	r3, [r7, #8]
 800da70:	4b0b      	ldr	r3, [pc, #44]	; (800daa0 <HAL_PCD_MspInit+0xfc>)
 800da72:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800da74:	4a0a      	ldr	r2, [pc, #40]	; (800daa0 <HAL_PCD_MspInit+0xfc>)
 800da76:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800da7a:	6453      	str	r3, [r2, #68]	; 0x44
 800da7c:	4b08      	ldr	r3, [pc, #32]	; (800daa0 <HAL_PCD_MspInit+0xfc>)
 800da7e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800da80:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800da84:	60bb      	str	r3, [r7, #8]
 800da86:	68bb      	ldr	r3, [r7, #8]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 5, 0);
 800da88:	2200      	movs	r2, #0
 800da8a:	2105      	movs	r1, #5
 800da8c:	2043      	movs	r0, #67	; 0x43
 800da8e:	f7f4 ffdd 	bl	8002a4c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 800da92:	2043      	movs	r0, #67	; 0x43
 800da94:	f7f4 fff6 	bl	8002a84 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 800da98:	bf00      	nop
 800da9a:	3780      	adds	r7, #128	; 0x80
 800da9c:	46bd      	mov	sp, r7
 800da9e:	bd80      	pop	{r7, pc}
 800daa0:	40023800 	.word	0x40023800
 800daa4:	40020000 	.word	0x40020000

0800daa8 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800daa8:	b580      	push	{r7, lr}
 800daaa:	b082      	sub	sp, #8
 800daac:	af00      	add	r7, sp, #0
 800daae:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 800dab0:	687b      	ldr	r3, [r7, #4]
 800dab2:	f8d3 24e0 	ldr.w	r2, [r3, #1248]	; 0x4e0
 800dab6:	687b      	ldr	r3, [r7, #4]
 800dab8:	f203 439c 	addw	r3, r3, #1180	; 0x49c
 800dabc:	4619      	mov	r1, r3
 800dabe:	4610      	mov	r0, r2
 800dac0:	f7fb fa59 	bl	8008f76 <USBD_LL_SetupStage>
}
 800dac4:	bf00      	nop
 800dac6:	3708      	adds	r7, #8
 800dac8:	46bd      	mov	sp, r7
 800daca:	bd80      	pop	{r7, pc}

0800dacc <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800dacc:	b580      	push	{r7, lr}
 800dace:	b082      	sub	sp, #8
 800dad0:	af00      	add	r7, sp, #0
 800dad2:	6078      	str	r0, [r7, #4]
 800dad4:	460b      	mov	r3, r1
 800dad6:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 800dad8:	687b      	ldr	r3, [r7, #4]
 800dada:	f8d3 04e0 	ldr.w	r0, [r3, #1248]	; 0x4e0
 800dade:	78fa      	ldrb	r2, [r7, #3]
 800dae0:	6879      	ldr	r1, [r7, #4]
 800dae2:	4613      	mov	r3, r2
 800dae4:	00db      	lsls	r3, r3, #3
 800dae6:	4413      	add	r3, r2
 800dae8:	009b      	lsls	r3, r3, #2
 800daea:	440b      	add	r3, r1
 800daec:	f503 7318 	add.w	r3, r3, #608	; 0x260
 800daf0:	681a      	ldr	r2, [r3, #0]
 800daf2:	78fb      	ldrb	r3, [r7, #3]
 800daf4:	4619      	mov	r1, r3
 800daf6:	f7fb fa93 	bl	8009020 <USBD_LL_DataOutStage>
}
 800dafa:	bf00      	nop
 800dafc:	3708      	adds	r7, #8
 800dafe:	46bd      	mov	sp, r7
 800db00:	bd80      	pop	{r7, pc}

0800db02 <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800db02:	b580      	push	{r7, lr}
 800db04:	b082      	sub	sp, #8
 800db06:	af00      	add	r7, sp, #0
 800db08:	6078      	str	r0, [r7, #4]
 800db0a:	460b      	mov	r3, r1
 800db0c:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 800db0e:	687b      	ldr	r3, [r7, #4]
 800db10:	f8d3 04e0 	ldr.w	r0, [r3, #1248]	; 0x4e0
 800db14:	78fa      	ldrb	r2, [r7, #3]
 800db16:	6879      	ldr	r1, [r7, #4]
 800db18:	4613      	mov	r3, r2
 800db1a:	00db      	lsls	r3, r3, #3
 800db1c:	4413      	add	r3, r2
 800db1e:	009b      	lsls	r3, r3, #2
 800db20:	440b      	add	r3, r1
 800db22:	3320      	adds	r3, #32
 800db24:	681a      	ldr	r2, [r3, #0]
 800db26:	78fb      	ldrb	r3, [r7, #3]
 800db28:	4619      	mov	r1, r3
 800db2a:	f7fb fb2c 	bl	8009186 <USBD_LL_DataInStage>
}
 800db2e:	bf00      	nop
 800db30:	3708      	adds	r7, #8
 800db32:	46bd      	mov	sp, r7
 800db34:	bd80      	pop	{r7, pc}

0800db36 <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800db36:	b580      	push	{r7, lr}
 800db38:	b082      	sub	sp, #8
 800db3a:	af00      	add	r7, sp, #0
 800db3c:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 800db3e:	687b      	ldr	r3, [r7, #4]
 800db40:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	; 0x4e0
 800db44:	4618      	mov	r0, r3
 800db46:	f7fb fc66 	bl	8009416 <USBD_LL_SOF>
}
 800db4a:	bf00      	nop
 800db4c:	3708      	adds	r7, #8
 800db4e:	46bd      	mov	sp, r7
 800db50:	bd80      	pop	{r7, pc}

0800db52 <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800db52:	b580      	push	{r7, lr}
 800db54:	b084      	sub	sp, #16
 800db56:	af00      	add	r7, sp, #0
 800db58:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 800db5a:	2301      	movs	r3, #1
 800db5c:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed == PCD_SPEED_HIGH)
 800db5e:	687b      	ldr	r3, [r7, #4]
 800db60:	79db      	ldrb	r3, [r3, #7]
 800db62:	2b00      	cmp	r3, #0
 800db64:	d102      	bne.n	800db6c <HAL_PCD_ResetCallback+0x1a>
  {
    speed = USBD_SPEED_HIGH;
 800db66:	2300      	movs	r3, #0
 800db68:	73fb      	strb	r3, [r7, #15]
 800db6a:	e008      	b.n	800db7e <HAL_PCD_ResetCallback+0x2c>
  }
  else if ( hpcd->Init.speed == PCD_SPEED_FULL)
 800db6c:	687b      	ldr	r3, [r7, #4]
 800db6e:	79db      	ldrb	r3, [r3, #7]
 800db70:	2b02      	cmp	r3, #2
 800db72:	d102      	bne.n	800db7a <HAL_PCD_ResetCallback+0x28>
  {
    speed = USBD_SPEED_FULL;
 800db74:	2301      	movs	r3, #1
 800db76:	73fb      	strb	r3, [r7, #15]
 800db78:	e001      	b.n	800db7e <HAL_PCD_ResetCallback+0x2c>
  }
  else
  {
    Error_Handler();
 800db7a:	f7f3 fb11 	bl	80011a0 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 800db7e:	687b      	ldr	r3, [r7, #4]
 800db80:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	; 0x4e0
 800db84:	7bfa      	ldrb	r2, [r7, #15]
 800db86:	4611      	mov	r1, r2
 800db88:	4618      	mov	r0, r3
 800db8a:	f7fb fc00 	bl	800938e <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 800db8e:	687b      	ldr	r3, [r7, #4]
 800db90:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	; 0x4e0
 800db94:	4618      	mov	r0, r3
 800db96:	f7fb fba8 	bl	80092ea <USBD_LL_Reset>
}
 800db9a:	bf00      	nop
 800db9c:	3710      	adds	r7, #16
 800db9e:	46bd      	mov	sp, r7
 800dba0:	bd80      	pop	{r7, pc}
	...

0800dba4 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800dba4:	b580      	push	{r7, lr}
 800dba6:	b082      	sub	sp, #8
 800dba8:	af00      	add	r7, sp, #0
 800dbaa:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 800dbac:	687b      	ldr	r3, [r7, #4]
 800dbae:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	; 0x4e0
 800dbb2:	4618      	mov	r0, r3
 800dbb4:	f7fb fbfb 	bl	80093ae <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 800dbb8:	687b      	ldr	r3, [r7, #4]
 800dbba:	681b      	ldr	r3, [r3, #0]
 800dbbc:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800dbc0:	681b      	ldr	r3, [r3, #0]
 800dbc2:	687a      	ldr	r2, [r7, #4]
 800dbc4:	6812      	ldr	r2, [r2, #0]
 800dbc6:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800dbca:	f043 0301 	orr.w	r3, r3, #1
 800dbce:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 800dbd0:	687b      	ldr	r3, [r7, #4]
 800dbd2:	7adb      	ldrb	r3, [r3, #11]
 800dbd4:	2b00      	cmp	r3, #0
 800dbd6:	d005      	beq.n	800dbe4 <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800dbd8:	4b04      	ldr	r3, [pc, #16]	; (800dbec <HAL_PCD_SuspendCallback+0x48>)
 800dbda:	691b      	ldr	r3, [r3, #16]
 800dbdc:	4a03      	ldr	r2, [pc, #12]	; (800dbec <HAL_PCD_SuspendCallback+0x48>)
 800dbde:	f043 0306 	orr.w	r3, r3, #6
 800dbe2:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 800dbe4:	bf00      	nop
 800dbe6:	3708      	adds	r7, #8
 800dbe8:	46bd      	mov	sp, r7
 800dbea:	bd80      	pop	{r7, pc}
 800dbec:	e000ed00 	.word	0xe000ed00

0800dbf0 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800dbf0:	b580      	push	{r7, lr}
 800dbf2:	b082      	sub	sp, #8
 800dbf4:	af00      	add	r7, sp, #0
 800dbf6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 800dbf8:	687b      	ldr	r3, [r7, #4]
 800dbfa:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	; 0x4e0
 800dbfe:	4618      	mov	r0, r3
 800dc00:	f7fb fbf1 	bl	80093e6 <USBD_LL_Resume>
}
 800dc04:	bf00      	nop
 800dc06:	3708      	adds	r7, #8
 800dc08:	46bd      	mov	sp, r7
 800dc0a:	bd80      	pop	{r7, pc}

0800dc0c <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800dc0c:	b580      	push	{r7, lr}
 800dc0e:	b082      	sub	sp, #8
 800dc10:	af00      	add	r7, sp, #0
 800dc12:	6078      	str	r0, [r7, #4]
 800dc14:	460b      	mov	r3, r1
 800dc16:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 800dc18:	687b      	ldr	r3, [r7, #4]
 800dc1a:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	; 0x4e0
 800dc1e:	78fa      	ldrb	r2, [r7, #3]
 800dc20:	4611      	mov	r1, r2
 800dc22:	4618      	mov	r0, r3
 800dc24:	f7fb fc49 	bl	80094ba <USBD_LL_IsoOUTIncomplete>
}
 800dc28:	bf00      	nop
 800dc2a:	3708      	adds	r7, #8
 800dc2c:	46bd      	mov	sp, r7
 800dc2e:	bd80      	pop	{r7, pc}

0800dc30 <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800dc30:	b580      	push	{r7, lr}
 800dc32:	b082      	sub	sp, #8
 800dc34:	af00      	add	r7, sp, #0
 800dc36:	6078      	str	r0, [r7, #4]
 800dc38:	460b      	mov	r3, r1
 800dc3a:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 800dc3c:	687b      	ldr	r3, [r7, #4]
 800dc3e:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	; 0x4e0
 800dc42:	78fa      	ldrb	r2, [r7, #3]
 800dc44:	4611      	mov	r1, r2
 800dc46:	4618      	mov	r0, r3
 800dc48:	f7fb fc05 	bl	8009456 <USBD_LL_IsoINIncomplete>
}
 800dc4c:	bf00      	nop
 800dc4e:	3708      	adds	r7, #8
 800dc50:	46bd      	mov	sp, r7
 800dc52:	bd80      	pop	{r7, pc}

0800dc54 <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800dc54:	b580      	push	{r7, lr}
 800dc56:	b082      	sub	sp, #8
 800dc58:	af00      	add	r7, sp, #0
 800dc5a:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 800dc5c:	687b      	ldr	r3, [r7, #4]
 800dc5e:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	; 0x4e0
 800dc62:	4618      	mov	r0, r3
 800dc64:	f7fb fc5b 	bl	800951e <USBD_LL_DevConnected>
}
 800dc68:	bf00      	nop
 800dc6a:	3708      	adds	r7, #8
 800dc6c:	46bd      	mov	sp, r7
 800dc6e:	bd80      	pop	{r7, pc}

0800dc70 <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800dc70:	b580      	push	{r7, lr}
 800dc72:	b082      	sub	sp, #8
 800dc74:	af00      	add	r7, sp, #0
 800dc76:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 800dc78:	687b      	ldr	r3, [r7, #4]
 800dc7a:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	; 0x4e0
 800dc7e:	4618      	mov	r0, r3
 800dc80:	f7fb fc58 	bl	8009534 <USBD_LL_DevDisconnected>
}
 800dc84:	bf00      	nop
 800dc86:	3708      	adds	r7, #8
 800dc88:	46bd      	mov	sp, r7
 800dc8a:	bd80      	pop	{r7, pc}

0800dc8c <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 800dc8c:	b580      	push	{r7, lr}
 800dc8e:	b082      	sub	sp, #8
 800dc90:	af00      	add	r7, sp, #0
 800dc92:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 800dc94:	687b      	ldr	r3, [r7, #4]
 800dc96:	781b      	ldrb	r3, [r3, #0]
 800dc98:	2b00      	cmp	r3, #0
 800dc9a:	d13c      	bne.n	800dd16 <USBD_LL_Init+0x8a>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 800dc9c:	4a20      	ldr	r2, [pc, #128]	; (800dd20 <USBD_LL_Init+0x94>)
 800dc9e:	687b      	ldr	r3, [r7, #4]
 800dca0:	f8c2 34e0 	str.w	r3, [r2, #1248]	; 0x4e0
  pdev->pData = &hpcd_USB_OTG_FS;
 800dca4:	687b      	ldr	r3, [r7, #4]
 800dca6:	4a1e      	ldr	r2, [pc, #120]	; (800dd20 <USBD_LL_Init+0x94>)
 800dca8:	f8c3 22c8 	str.w	r2, [r3, #712]	; 0x2c8

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 800dcac:	4b1c      	ldr	r3, [pc, #112]	; (800dd20 <USBD_LL_Init+0x94>)
 800dcae:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 800dcb2:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 6;
 800dcb4:	4b1a      	ldr	r3, [pc, #104]	; (800dd20 <USBD_LL_Init+0x94>)
 800dcb6:	2206      	movs	r2, #6
 800dcb8:	711a      	strb	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 800dcba:	4b19      	ldr	r3, [pc, #100]	; (800dd20 <USBD_LL_Init+0x94>)
 800dcbc:	2202      	movs	r2, #2
 800dcbe:	71da      	strb	r2, [r3, #7]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 800dcc0:	4b17      	ldr	r3, [pc, #92]	; (800dd20 <USBD_LL_Init+0x94>)
 800dcc2:	2200      	movs	r2, #0
 800dcc4:	719a      	strb	r2, [r3, #6]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 800dcc6:	4b16      	ldr	r3, [pc, #88]	; (800dd20 <USBD_LL_Init+0x94>)
 800dcc8:	2202      	movs	r2, #2
 800dcca:	725a      	strb	r2, [r3, #9]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 800dccc:	4b14      	ldr	r3, [pc, #80]	; (800dd20 <USBD_LL_Init+0x94>)
 800dcce:	2200      	movs	r2, #0
 800dcd0:	729a      	strb	r2, [r3, #10]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 800dcd2:	4b13      	ldr	r3, [pc, #76]	; (800dd20 <USBD_LL_Init+0x94>)
 800dcd4:	2200      	movs	r2, #0
 800dcd6:	72da      	strb	r2, [r3, #11]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 800dcd8:	4b11      	ldr	r3, [pc, #68]	; (800dd20 <USBD_LL_Init+0x94>)
 800dcda:	2200      	movs	r2, #0
 800dcdc:	731a      	strb	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = ENABLE;
 800dcde:	4b10      	ldr	r3, [pc, #64]	; (800dd20 <USBD_LL_Init+0x94>)
 800dce0:	2201      	movs	r2, #1
 800dce2:	739a      	strb	r2, [r3, #14]
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 800dce4:	4b0e      	ldr	r3, [pc, #56]	; (800dd20 <USBD_LL_Init+0x94>)
 800dce6:	2200      	movs	r2, #0
 800dce8:	73da      	strb	r2, [r3, #15]
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 800dcea:	480d      	ldr	r0, [pc, #52]	; (800dd20 <USBD_LL_Init+0x94>)
 800dcec:	f7f5 fcd0 	bl	8003690 <HAL_PCD_Init>
 800dcf0:	4603      	mov	r3, r0
 800dcf2:	2b00      	cmp	r3, #0
 800dcf4:	d001      	beq.n	800dcfa <USBD_LL_Init+0x6e>
  {
    Error_Handler( );
 800dcf6:	f7f3 fa53 	bl	80011a0 <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 800dcfa:	2180      	movs	r1, #128	; 0x80
 800dcfc:	4808      	ldr	r0, [pc, #32]	; (800dd20 <USBD_LL_Init+0x94>)
 800dcfe:	f7f6 ff2e 	bl	8004b5e <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 800dd02:	2240      	movs	r2, #64	; 0x40
 800dd04:	2100      	movs	r1, #0
 800dd06:	4806      	ldr	r0, [pc, #24]	; (800dd20 <USBD_LL_Init+0x94>)
 800dd08:	f7f6 fee2 	bl	8004ad0 <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 800dd0c:	2280      	movs	r2, #128	; 0x80
 800dd0e:	2101      	movs	r1, #1
 800dd10:	4803      	ldr	r0, [pc, #12]	; (800dd20 <USBD_LL_Init+0x94>)
 800dd12:	f7f6 fedd 	bl	8004ad0 <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 800dd16:	2300      	movs	r3, #0
}
 800dd18:	4618      	mov	r0, r3
 800dd1a:	3708      	adds	r7, #8
 800dd1c:	46bd      	mov	sp, r7
 800dd1e:	bd80      	pop	{r7, pc}
 800dd20:	20006554 	.word	0x20006554

0800dd24 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 800dd24:	b580      	push	{r7, lr}
 800dd26:	b084      	sub	sp, #16
 800dd28:	af00      	add	r7, sp, #0
 800dd2a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800dd2c:	2300      	movs	r3, #0
 800dd2e:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800dd30:	2300      	movs	r3, #0
 800dd32:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 800dd34:	687b      	ldr	r3, [r7, #4]
 800dd36:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800dd3a:	4618      	mov	r0, r3
 800dd3c:	f7f5 fdbe 	bl	80038bc <HAL_PCD_Start>
 800dd40:	4603      	mov	r3, r0
 800dd42:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800dd44:	7bfb      	ldrb	r3, [r7, #15]
 800dd46:	4618      	mov	r0, r3
 800dd48:	f000 f942 	bl	800dfd0 <USBD_Get_USB_Status>
 800dd4c:	4603      	mov	r3, r0
 800dd4e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800dd50:	7bbb      	ldrb	r3, [r7, #14]
}
 800dd52:	4618      	mov	r0, r3
 800dd54:	3710      	adds	r7, #16
 800dd56:	46bd      	mov	sp, r7
 800dd58:	bd80      	pop	{r7, pc}

0800dd5a <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 800dd5a:	b580      	push	{r7, lr}
 800dd5c:	b084      	sub	sp, #16
 800dd5e:	af00      	add	r7, sp, #0
 800dd60:	6078      	str	r0, [r7, #4]
 800dd62:	4608      	mov	r0, r1
 800dd64:	4611      	mov	r1, r2
 800dd66:	461a      	mov	r2, r3
 800dd68:	4603      	mov	r3, r0
 800dd6a:	70fb      	strb	r3, [r7, #3]
 800dd6c:	460b      	mov	r3, r1
 800dd6e:	70bb      	strb	r3, [r7, #2]
 800dd70:	4613      	mov	r3, r2
 800dd72:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800dd74:	2300      	movs	r3, #0
 800dd76:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800dd78:	2300      	movs	r3, #0
 800dd7a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 800dd7c:	687b      	ldr	r3, [r7, #4]
 800dd7e:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 800dd82:	78bb      	ldrb	r3, [r7, #2]
 800dd84:	883a      	ldrh	r2, [r7, #0]
 800dd86:	78f9      	ldrb	r1, [r7, #3]
 800dd88:	f7f6 fabf 	bl	800430a <HAL_PCD_EP_Open>
 800dd8c:	4603      	mov	r3, r0
 800dd8e:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800dd90:	7bfb      	ldrb	r3, [r7, #15]
 800dd92:	4618      	mov	r0, r3
 800dd94:	f000 f91c 	bl	800dfd0 <USBD_Get_USB_Status>
 800dd98:	4603      	mov	r3, r0
 800dd9a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800dd9c:	7bbb      	ldrb	r3, [r7, #14]
}
 800dd9e:	4618      	mov	r0, r3
 800dda0:	3710      	adds	r7, #16
 800dda2:	46bd      	mov	sp, r7
 800dda4:	bd80      	pop	{r7, pc}

0800dda6 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800dda6:	b580      	push	{r7, lr}
 800dda8:	b084      	sub	sp, #16
 800ddaa:	af00      	add	r7, sp, #0
 800ddac:	6078      	str	r0, [r7, #4]
 800ddae:	460b      	mov	r3, r1
 800ddb0:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800ddb2:	2300      	movs	r3, #0
 800ddb4:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800ddb6:	2300      	movs	r3, #0
 800ddb8:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 800ddba:	687b      	ldr	r3, [r7, #4]
 800ddbc:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800ddc0:	78fa      	ldrb	r2, [r7, #3]
 800ddc2:	4611      	mov	r1, r2
 800ddc4:	4618      	mov	r0, r3
 800ddc6:	f7f6 fb08 	bl	80043da <HAL_PCD_EP_Close>
 800ddca:	4603      	mov	r3, r0
 800ddcc:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800ddce:	7bfb      	ldrb	r3, [r7, #15]
 800ddd0:	4618      	mov	r0, r3
 800ddd2:	f000 f8fd 	bl	800dfd0 <USBD_Get_USB_Status>
 800ddd6:	4603      	mov	r3, r0
 800ddd8:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800ddda:	7bbb      	ldrb	r3, [r7, #14]
}
 800dddc:	4618      	mov	r0, r3
 800ddde:	3710      	adds	r7, #16
 800dde0:	46bd      	mov	sp, r7
 800dde2:	bd80      	pop	{r7, pc}

0800dde4 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800dde4:	b580      	push	{r7, lr}
 800dde6:	b084      	sub	sp, #16
 800dde8:	af00      	add	r7, sp, #0
 800ddea:	6078      	str	r0, [r7, #4]
 800ddec:	460b      	mov	r3, r1
 800ddee:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800ddf0:	2300      	movs	r3, #0
 800ddf2:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800ddf4:	2300      	movs	r3, #0
 800ddf6:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 800ddf8:	687b      	ldr	r3, [r7, #4]
 800ddfa:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800ddfe:	78fa      	ldrb	r2, [r7, #3]
 800de00:	4611      	mov	r1, r2
 800de02:	4618      	mov	r0, r3
 800de04:	f7f6 fbc0 	bl	8004588 <HAL_PCD_EP_SetStall>
 800de08:	4603      	mov	r3, r0
 800de0a:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800de0c:	7bfb      	ldrb	r3, [r7, #15]
 800de0e:	4618      	mov	r0, r3
 800de10:	f000 f8de 	bl	800dfd0 <USBD_Get_USB_Status>
 800de14:	4603      	mov	r3, r0
 800de16:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800de18:	7bbb      	ldrb	r3, [r7, #14]
}
 800de1a:	4618      	mov	r0, r3
 800de1c:	3710      	adds	r7, #16
 800de1e:	46bd      	mov	sp, r7
 800de20:	bd80      	pop	{r7, pc}

0800de22 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800de22:	b580      	push	{r7, lr}
 800de24:	b084      	sub	sp, #16
 800de26:	af00      	add	r7, sp, #0
 800de28:	6078      	str	r0, [r7, #4]
 800de2a:	460b      	mov	r3, r1
 800de2c:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800de2e:	2300      	movs	r3, #0
 800de30:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800de32:	2300      	movs	r3, #0
 800de34:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 800de36:	687b      	ldr	r3, [r7, #4]
 800de38:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800de3c:	78fa      	ldrb	r2, [r7, #3]
 800de3e:	4611      	mov	r1, r2
 800de40:	4618      	mov	r0, r3
 800de42:	f7f6 fc04 	bl	800464e <HAL_PCD_EP_ClrStall>
 800de46:	4603      	mov	r3, r0
 800de48:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800de4a:	7bfb      	ldrb	r3, [r7, #15]
 800de4c:	4618      	mov	r0, r3
 800de4e:	f000 f8bf 	bl	800dfd0 <USBD_Get_USB_Status>
 800de52:	4603      	mov	r3, r0
 800de54:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800de56:	7bbb      	ldrb	r3, [r7, #14]
}
 800de58:	4618      	mov	r0, r3
 800de5a:	3710      	adds	r7, #16
 800de5c:	46bd      	mov	sp, r7
 800de5e:	bd80      	pop	{r7, pc}

0800de60 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800de60:	b480      	push	{r7}
 800de62:	b085      	sub	sp, #20
 800de64:	af00      	add	r7, sp, #0
 800de66:	6078      	str	r0, [r7, #4]
 800de68:	460b      	mov	r3, r1
 800de6a:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 800de6c:	687b      	ldr	r3, [r7, #4]
 800de6e:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800de72:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 800de74:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800de78:	2b00      	cmp	r3, #0
 800de7a:	da0b      	bge.n	800de94 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 800de7c:	78fb      	ldrb	r3, [r7, #3]
 800de7e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800de82:	68f9      	ldr	r1, [r7, #12]
 800de84:	4613      	mov	r3, r2
 800de86:	00db      	lsls	r3, r3, #3
 800de88:	4413      	add	r3, r2
 800de8a:	009b      	lsls	r3, r3, #2
 800de8c:	440b      	add	r3, r1
 800de8e:	3316      	adds	r3, #22
 800de90:	781b      	ldrb	r3, [r3, #0]
 800de92:	e00b      	b.n	800deac <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 800de94:	78fb      	ldrb	r3, [r7, #3]
 800de96:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800de9a:	68f9      	ldr	r1, [r7, #12]
 800de9c:	4613      	mov	r3, r2
 800de9e:	00db      	lsls	r3, r3, #3
 800dea0:	4413      	add	r3, r2
 800dea2:	009b      	lsls	r3, r3, #2
 800dea4:	440b      	add	r3, r1
 800dea6:	f203 2356 	addw	r3, r3, #598	; 0x256
 800deaa:	781b      	ldrb	r3, [r3, #0]
  }
}
 800deac:	4618      	mov	r0, r3
 800deae:	3714      	adds	r7, #20
 800deb0:	46bd      	mov	sp, r7
 800deb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800deb6:	4770      	bx	lr

0800deb8 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 800deb8:	b580      	push	{r7, lr}
 800deba:	b084      	sub	sp, #16
 800debc:	af00      	add	r7, sp, #0
 800debe:	6078      	str	r0, [r7, #4]
 800dec0:	460b      	mov	r3, r1
 800dec2:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800dec4:	2300      	movs	r3, #0
 800dec6:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800dec8:	2300      	movs	r3, #0
 800deca:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 800decc:	687b      	ldr	r3, [r7, #4]
 800dece:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800ded2:	78fa      	ldrb	r2, [r7, #3]
 800ded4:	4611      	mov	r1, r2
 800ded6:	4618      	mov	r0, r3
 800ded8:	f7f6 f9f3 	bl	80042c2 <HAL_PCD_SetAddress>
 800dedc:	4603      	mov	r3, r0
 800dede:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800dee0:	7bfb      	ldrb	r3, [r7, #15]
 800dee2:	4618      	mov	r0, r3
 800dee4:	f000 f874 	bl	800dfd0 <USBD_Get_USB_Status>
 800dee8:	4603      	mov	r3, r0
 800deea:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800deec:	7bbb      	ldrb	r3, [r7, #14]
}
 800deee:	4618      	mov	r0, r3
 800def0:	3710      	adds	r7, #16
 800def2:	46bd      	mov	sp, r7
 800def4:	bd80      	pop	{r7, pc}

0800def6 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800def6:	b580      	push	{r7, lr}
 800def8:	b086      	sub	sp, #24
 800defa:	af00      	add	r7, sp, #0
 800defc:	60f8      	str	r0, [r7, #12]
 800defe:	607a      	str	r2, [r7, #4]
 800df00:	603b      	str	r3, [r7, #0]
 800df02:	460b      	mov	r3, r1
 800df04:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800df06:	2300      	movs	r3, #0
 800df08:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800df0a:	2300      	movs	r3, #0
 800df0c:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 800df0e:	68fb      	ldr	r3, [r7, #12]
 800df10:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 800df14:	7af9      	ldrb	r1, [r7, #11]
 800df16:	683b      	ldr	r3, [r7, #0]
 800df18:	687a      	ldr	r2, [r7, #4]
 800df1a:	f7f6 fafb 	bl	8004514 <HAL_PCD_EP_Transmit>
 800df1e:	4603      	mov	r3, r0
 800df20:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800df22:	7dfb      	ldrb	r3, [r7, #23]
 800df24:	4618      	mov	r0, r3
 800df26:	f000 f853 	bl	800dfd0 <USBD_Get_USB_Status>
 800df2a:	4603      	mov	r3, r0
 800df2c:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800df2e:	7dbb      	ldrb	r3, [r7, #22]
}
 800df30:	4618      	mov	r0, r3
 800df32:	3718      	adds	r7, #24
 800df34:	46bd      	mov	sp, r7
 800df36:	bd80      	pop	{r7, pc}

0800df38 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800df38:	b580      	push	{r7, lr}
 800df3a:	b086      	sub	sp, #24
 800df3c:	af00      	add	r7, sp, #0
 800df3e:	60f8      	str	r0, [r7, #12]
 800df40:	607a      	str	r2, [r7, #4]
 800df42:	603b      	str	r3, [r7, #0]
 800df44:	460b      	mov	r3, r1
 800df46:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800df48:	2300      	movs	r3, #0
 800df4a:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800df4c:	2300      	movs	r3, #0
 800df4e:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 800df50:	68fb      	ldr	r3, [r7, #12]
 800df52:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 800df56:	7af9      	ldrb	r1, [r7, #11]
 800df58:	683b      	ldr	r3, [r7, #0]
 800df5a:	687a      	ldr	r2, [r7, #4]
 800df5c:	f7f6 fa87 	bl	800446e <HAL_PCD_EP_Receive>
 800df60:	4603      	mov	r3, r0
 800df62:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800df64:	7dfb      	ldrb	r3, [r7, #23]
 800df66:	4618      	mov	r0, r3
 800df68:	f000 f832 	bl	800dfd0 <USBD_Get_USB_Status>
 800df6c:	4603      	mov	r3, r0
 800df6e:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800df70:	7dbb      	ldrb	r3, [r7, #22]
}
 800df72:	4618      	mov	r0, r3
 800df74:	3718      	adds	r7, #24
 800df76:	46bd      	mov	sp, r7
 800df78:	bd80      	pop	{r7, pc}

0800df7a <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800df7a:	b580      	push	{r7, lr}
 800df7c:	b082      	sub	sp, #8
 800df7e:	af00      	add	r7, sp, #0
 800df80:	6078      	str	r0, [r7, #4]
 800df82:	460b      	mov	r3, r1
 800df84:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 800df86:	687b      	ldr	r3, [r7, #4]
 800df88:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800df8c:	78fa      	ldrb	r2, [r7, #3]
 800df8e:	4611      	mov	r1, r2
 800df90:	4618      	mov	r0, r3
 800df92:	f7f6 faa7 	bl	80044e4 <HAL_PCD_EP_GetRxCount>
 800df96:	4603      	mov	r3, r0
}
 800df98:	4618      	mov	r0, r3
 800df9a:	3708      	adds	r7, #8
 800df9c:	46bd      	mov	sp, r7
 800df9e:	bd80      	pop	{r7, pc}

0800dfa0 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 800dfa0:	b480      	push	{r7}
 800dfa2:	b083      	sub	sp, #12
 800dfa4:	af00      	add	r7, sp, #0
 800dfa6:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 800dfa8:	4b03      	ldr	r3, [pc, #12]	; (800dfb8 <USBD_static_malloc+0x18>)
}
 800dfaa:	4618      	mov	r0, r3
 800dfac:	370c      	adds	r7, #12
 800dfae:	46bd      	mov	sp, r7
 800dfb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dfb4:	4770      	bx	lr
 800dfb6:	bf00      	nop
 800dfb8:	20006a38 	.word	0x20006a38

0800dfbc <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 800dfbc:	b480      	push	{r7}
 800dfbe:	b083      	sub	sp, #12
 800dfc0:	af00      	add	r7, sp, #0
 800dfc2:	6078      	str	r0, [r7, #4]

}
 800dfc4:	bf00      	nop
 800dfc6:	370c      	adds	r7, #12
 800dfc8:	46bd      	mov	sp, r7
 800dfca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dfce:	4770      	bx	lr

0800dfd0 <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 800dfd0:	b480      	push	{r7}
 800dfd2:	b085      	sub	sp, #20
 800dfd4:	af00      	add	r7, sp, #0
 800dfd6:	4603      	mov	r3, r0
 800dfd8:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800dfda:	2300      	movs	r3, #0
 800dfdc:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800dfde:	79fb      	ldrb	r3, [r7, #7]
 800dfe0:	2b03      	cmp	r3, #3
 800dfe2:	d817      	bhi.n	800e014 <USBD_Get_USB_Status+0x44>
 800dfe4:	a201      	add	r2, pc, #4	; (adr r2, 800dfec <USBD_Get_USB_Status+0x1c>)
 800dfe6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800dfea:	bf00      	nop
 800dfec:	0800dffd 	.word	0x0800dffd
 800dff0:	0800e003 	.word	0x0800e003
 800dff4:	0800e009 	.word	0x0800e009
 800dff8:	0800e00f 	.word	0x0800e00f
  {
    case HAL_OK :
      usb_status = USBD_OK;
 800dffc:	2300      	movs	r3, #0
 800dffe:	73fb      	strb	r3, [r7, #15]
    break;
 800e000:	e00b      	b.n	800e01a <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800e002:	2303      	movs	r3, #3
 800e004:	73fb      	strb	r3, [r7, #15]
    break;
 800e006:	e008      	b.n	800e01a <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800e008:	2301      	movs	r3, #1
 800e00a:	73fb      	strb	r3, [r7, #15]
    break;
 800e00c:	e005      	b.n	800e01a <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800e00e:	2303      	movs	r3, #3
 800e010:	73fb      	strb	r3, [r7, #15]
    break;
 800e012:	e002      	b.n	800e01a <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 800e014:	2303      	movs	r3, #3
 800e016:	73fb      	strb	r3, [r7, #15]
    break;
 800e018:	bf00      	nop
  }
  return usb_status;
 800e01a:	7bfb      	ldrb	r3, [r7, #15]
}
 800e01c:	4618      	mov	r0, r3
 800e01e:	3714      	adds	r7, #20
 800e020:	46bd      	mov	sp, r7
 800e022:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e026:	4770      	bx	lr

0800e028 <memset>:
 800e028:	4402      	add	r2, r0
 800e02a:	4603      	mov	r3, r0
 800e02c:	4293      	cmp	r3, r2
 800e02e:	d100      	bne.n	800e032 <memset+0xa>
 800e030:	4770      	bx	lr
 800e032:	f803 1b01 	strb.w	r1, [r3], #1
 800e036:	e7f9      	b.n	800e02c <memset+0x4>

0800e038 <_reclaim_reent>:
 800e038:	4b29      	ldr	r3, [pc, #164]	; (800e0e0 <_reclaim_reent+0xa8>)
 800e03a:	681b      	ldr	r3, [r3, #0]
 800e03c:	4283      	cmp	r3, r0
 800e03e:	b570      	push	{r4, r5, r6, lr}
 800e040:	4604      	mov	r4, r0
 800e042:	d04b      	beq.n	800e0dc <_reclaim_reent+0xa4>
 800e044:	69c3      	ldr	r3, [r0, #28]
 800e046:	b143      	cbz	r3, 800e05a <_reclaim_reent+0x22>
 800e048:	68db      	ldr	r3, [r3, #12]
 800e04a:	2b00      	cmp	r3, #0
 800e04c:	d144      	bne.n	800e0d8 <_reclaim_reent+0xa0>
 800e04e:	69e3      	ldr	r3, [r4, #28]
 800e050:	6819      	ldr	r1, [r3, #0]
 800e052:	b111      	cbz	r1, 800e05a <_reclaim_reent+0x22>
 800e054:	4620      	mov	r0, r4
 800e056:	f000 f879 	bl	800e14c <_free_r>
 800e05a:	6961      	ldr	r1, [r4, #20]
 800e05c:	b111      	cbz	r1, 800e064 <_reclaim_reent+0x2c>
 800e05e:	4620      	mov	r0, r4
 800e060:	f000 f874 	bl	800e14c <_free_r>
 800e064:	69e1      	ldr	r1, [r4, #28]
 800e066:	b111      	cbz	r1, 800e06e <_reclaim_reent+0x36>
 800e068:	4620      	mov	r0, r4
 800e06a:	f000 f86f 	bl	800e14c <_free_r>
 800e06e:	6b21      	ldr	r1, [r4, #48]	; 0x30
 800e070:	b111      	cbz	r1, 800e078 <_reclaim_reent+0x40>
 800e072:	4620      	mov	r0, r4
 800e074:	f000 f86a 	bl	800e14c <_free_r>
 800e078:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800e07a:	b111      	cbz	r1, 800e082 <_reclaim_reent+0x4a>
 800e07c:	4620      	mov	r0, r4
 800e07e:	f000 f865 	bl	800e14c <_free_r>
 800e082:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 800e084:	b111      	cbz	r1, 800e08c <_reclaim_reent+0x54>
 800e086:	4620      	mov	r0, r4
 800e088:	f000 f860 	bl	800e14c <_free_r>
 800e08c:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 800e08e:	b111      	cbz	r1, 800e096 <_reclaim_reent+0x5e>
 800e090:	4620      	mov	r0, r4
 800e092:	f000 f85b 	bl	800e14c <_free_r>
 800e096:	6c61      	ldr	r1, [r4, #68]	; 0x44
 800e098:	b111      	cbz	r1, 800e0a0 <_reclaim_reent+0x68>
 800e09a:	4620      	mov	r0, r4
 800e09c:	f000 f856 	bl	800e14c <_free_r>
 800e0a0:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 800e0a2:	b111      	cbz	r1, 800e0aa <_reclaim_reent+0x72>
 800e0a4:	4620      	mov	r0, r4
 800e0a6:	f000 f851 	bl	800e14c <_free_r>
 800e0aa:	6a23      	ldr	r3, [r4, #32]
 800e0ac:	b1b3      	cbz	r3, 800e0dc <_reclaim_reent+0xa4>
 800e0ae:	4620      	mov	r0, r4
 800e0b0:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800e0b4:	4718      	bx	r3
 800e0b6:	5949      	ldr	r1, [r1, r5]
 800e0b8:	b941      	cbnz	r1, 800e0cc <_reclaim_reent+0x94>
 800e0ba:	3504      	adds	r5, #4
 800e0bc:	69e3      	ldr	r3, [r4, #28]
 800e0be:	2d80      	cmp	r5, #128	; 0x80
 800e0c0:	68d9      	ldr	r1, [r3, #12]
 800e0c2:	d1f8      	bne.n	800e0b6 <_reclaim_reent+0x7e>
 800e0c4:	4620      	mov	r0, r4
 800e0c6:	f000 f841 	bl	800e14c <_free_r>
 800e0ca:	e7c0      	b.n	800e04e <_reclaim_reent+0x16>
 800e0cc:	680e      	ldr	r6, [r1, #0]
 800e0ce:	4620      	mov	r0, r4
 800e0d0:	f000 f83c 	bl	800e14c <_free_r>
 800e0d4:	4631      	mov	r1, r6
 800e0d6:	e7ef      	b.n	800e0b8 <_reclaim_reent+0x80>
 800e0d8:	2500      	movs	r5, #0
 800e0da:	e7ef      	b.n	800e0bc <_reclaim_reent+0x84>
 800e0dc:	bd70      	pop	{r4, r5, r6, pc}
 800e0de:	bf00      	nop
 800e0e0:	2000014c 	.word	0x2000014c

0800e0e4 <__libc_init_array>:
 800e0e4:	b570      	push	{r4, r5, r6, lr}
 800e0e6:	4d0d      	ldr	r5, [pc, #52]	; (800e11c <__libc_init_array+0x38>)
 800e0e8:	4c0d      	ldr	r4, [pc, #52]	; (800e120 <__libc_init_array+0x3c>)
 800e0ea:	1b64      	subs	r4, r4, r5
 800e0ec:	10a4      	asrs	r4, r4, #2
 800e0ee:	2600      	movs	r6, #0
 800e0f0:	42a6      	cmp	r6, r4
 800e0f2:	d109      	bne.n	800e108 <__libc_init_array+0x24>
 800e0f4:	4d0b      	ldr	r5, [pc, #44]	; (800e124 <__libc_init_array+0x40>)
 800e0f6:	4c0c      	ldr	r4, [pc, #48]	; (800e128 <__libc_init_array+0x44>)
 800e0f8:	f000 f880 	bl	800e1fc <_init>
 800e0fc:	1b64      	subs	r4, r4, r5
 800e0fe:	10a4      	asrs	r4, r4, #2
 800e100:	2600      	movs	r6, #0
 800e102:	42a6      	cmp	r6, r4
 800e104:	d105      	bne.n	800e112 <__libc_init_array+0x2e>
 800e106:	bd70      	pop	{r4, r5, r6, pc}
 800e108:	f855 3b04 	ldr.w	r3, [r5], #4
 800e10c:	4798      	blx	r3
 800e10e:	3601      	adds	r6, #1
 800e110:	e7ee      	b.n	800e0f0 <__libc_init_array+0xc>
 800e112:	f855 3b04 	ldr.w	r3, [r5], #4
 800e116:	4798      	blx	r3
 800e118:	3601      	adds	r6, #1
 800e11a:	e7f2      	b.n	800e102 <__libc_init_array+0x1e>
 800e11c:	0800e338 	.word	0x0800e338
 800e120:	0800e338 	.word	0x0800e338
 800e124:	0800e338 	.word	0x0800e338
 800e128:	0800e33c 	.word	0x0800e33c

0800e12c <__retarget_lock_acquire_recursive>:
 800e12c:	4770      	bx	lr

0800e12e <__retarget_lock_release_recursive>:
 800e12e:	4770      	bx	lr

0800e130 <memcpy>:
 800e130:	440a      	add	r2, r1
 800e132:	4291      	cmp	r1, r2
 800e134:	f100 33ff 	add.w	r3, r0, #4294967295
 800e138:	d100      	bne.n	800e13c <memcpy+0xc>
 800e13a:	4770      	bx	lr
 800e13c:	b510      	push	{r4, lr}
 800e13e:	f811 4b01 	ldrb.w	r4, [r1], #1
 800e142:	f803 4f01 	strb.w	r4, [r3, #1]!
 800e146:	4291      	cmp	r1, r2
 800e148:	d1f9      	bne.n	800e13e <memcpy+0xe>
 800e14a:	bd10      	pop	{r4, pc}

0800e14c <_free_r>:
 800e14c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800e14e:	2900      	cmp	r1, #0
 800e150:	d044      	beq.n	800e1dc <_free_r+0x90>
 800e152:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800e156:	9001      	str	r0, [sp, #4]
 800e158:	2b00      	cmp	r3, #0
 800e15a:	f1a1 0404 	sub.w	r4, r1, #4
 800e15e:	bfb8      	it	lt
 800e160:	18e4      	addlt	r4, r4, r3
 800e162:	f000 f83f 	bl	800e1e4 <__malloc_lock>
 800e166:	4a1e      	ldr	r2, [pc, #120]	; (800e1e0 <_free_r+0x94>)
 800e168:	9801      	ldr	r0, [sp, #4]
 800e16a:	6813      	ldr	r3, [r2, #0]
 800e16c:	b933      	cbnz	r3, 800e17c <_free_r+0x30>
 800e16e:	6063      	str	r3, [r4, #4]
 800e170:	6014      	str	r4, [r2, #0]
 800e172:	b003      	add	sp, #12
 800e174:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800e178:	f000 b83a 	b.w	800e1f0 <__malloc_unlock>
 800e17c:	42a3      	cmp	r3, r4
 800e17e:	d908      	bls.n	800e192 <_free_r+0x46>
 800e180:	6825      	ldr	r5, [r4, #0]
 800e182:	1961      	adds	r1, r4, r5
 800e184:	428b      	cmp	r3, r1
 800e186:	bf01      	itttt	eq
 800e188:	6819      	ldreq	r1, [r3, #0]
 800e18a:	685b      	ldreq	r3, [r3, #4]
 800e18c:	1949      	addeq	r1, r1, r5
 800e18e:	6021      	streq	r1, [r4, #0]
 800e190:	e7ed      	b.n	800e16e <_free_r+0x22>
 800e192:	461a      	mov	r2, r3
 800e194:	685b      	ldr	r3, [r3, #4]
 800e196:	b10b      	cbz	r3, 800e19c <_free_r+0x50>
 800e198:	42a3      	cmp	r3, r4
 800e19a:	d9fa      	bls.n	800e192 <_free_r+0x46>
 800e19c:	6811      	ldr	r1, [r2, #0]
 800e19e:	1855      	adds	r5, r2, r1
 800e1a0:	42a5      	cmp	r5, r4
 800e1a2:	d10b      	bne.n	800e1bc <_free_r+0x70>
 800e1a4:	6824      	ldr	r4, [r4, #0]
 800e1a6:	4421      	add	r1, r4
 800e1a8:	1854      	adds	r4, r2, r1
 800e1aa:	42a3      	cmp	r3, r4
 800e1ac:	6011      	str	r1, [r2, #0]
 800e1ae:	d1e0      	bne.n	800e172 <_free_r+0x26>
 800e1b0:	681c      	ldr	r4, [r3, #0]
 800e1b2:	685b      	ldr	r3, [r3, #4]
 800e1b4:	6053      	str	r3, [r2, #4]
 800e1b6:	440c      	add	r4, r1
 800e1b8:	6014      	str	r4, [r2, #0]
 800e1ba:	e7da      	b.n	800e172 <_free_r+0x26>
 800e1bc:	d902      	bls.n	800e1c4 <_free_r+0x78>
 800e1be:	230c      	movs	r3, #12
 800e1c0:	6003      	str	r3, [r0, #0]
 800e1c2:	e7d6      	b.n	800e172 <_free_r+0x26>
 800e1c4:	6825      	ldr	r5, [r4, #0]
 800e1c6:	1961      	adds	r1, r4, r5
 800e1c8:	428b      	cmp	r3, r1
 800e1ca:	bf04      	itt	eq
 800e1cc:	6819      	ldreq	r1, [r3, #0]
 800e1ce:	685b      	ldreq	r3, [r3, #4]
 800e1d0:	6063      	str	r3, [r4, #4]
 800e1d2:	bf04      	itt	eq
 800e1d4:	1949      	addeq	r1, r1, r5
 800e1d6:	6021      	streq	r1, [r4, #0]
 800e1d8:	6054      	str	r4, [r2, #4]
 800e1da:	e7ca      	b.n	800e172 <_free_r+0x26>
 800e1dc:	b003      	add	sp, #12
 800e1de:	bd30      	pop	{r4, r5, pc}
 800e1e0:	20006d94 	.word	0x20006d94

0800e1e4 <__malloc_lock>:
 800e1e4:	4801      	ldr	r0, [pc, #4]	; (800e1ec <__malloc_lock+0x8>)
 800e1e6:	f7ff bfa1 	b.w	800e12c <__retarget_lock_acquire_recursive>
 800e1ea:	bf00      	nop
 800e1ec:	20006d90 	.word	0x20006d90

0800e1f0 <__malloc_unlock>:
 800e1f0:	4801      	ldr	r0, [pc, #4]	; (800e1f8 <__malloc_unlock+0x8>)
 800e1f2:	f7ff bf9c 	b.w	800e12e <__retarget_lock_release_recursive>
 800e1f6:	bf00      	nop
 800e1f8:	20006d90 	.word	0x20006d90

0800e1fc <_init>:
 800e1fc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e1fe:	bf00      	nop
 800e200:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800e202:	bc08      	pop	{r3}
 800e204:	469e      	mov	lr, r3
 800e206:	4770      	bx	lr

0800e208 <_fini>:
 800e208:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e20a:	bf00      	nop
 800e20c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800e20e:	bc08      	pop	{r3}
 800e210:	469e      	mov	lr, r3
 800e212:	4770      	bx	lr
